,idx,support,cnt,itemsets,sentence,api,len
0,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.std2.yaml,2
1,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the first input tensor,torch.bitwise_xor.yaml,2
2,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.bitwise_xor.yaml,2
3,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.real.yaml,2
4,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.log1p.yaml,2
5,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
6,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.prod2.yaml,2
7,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor of probability values for the Bernoulli distribution,torch.bernoulli.yaml,2
8,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.pow.yaml,2
9,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.exp.yaml,2
10,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cummax.yaml,2
11,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.mean2.yaml,2
12,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",This argument is optional when `func`'s input contains a single element and (if it is not provided) will be set as a Tensor containing a single `1`.,torch.autograd.functional.hvp.yaml,2
13,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor (minibatch , in _channels , iT  times iH , iW) ",torch.nn.functional.avg_pool3d.yaml,2
14,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
15,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","quantized input tensor (minibatch , in _channels , iH , iW) ",torch.nn.quantized.functional.avg_pool2d.yaml,2
16,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.ceil.yaml,2
17,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
18,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sum2.yaml,2
19,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.min22.yaml,2
20,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.min22.yaml,2
21,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
22,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sum.yaml,2
23,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv_transpose2d.yaml,2
24,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.var_mean.yaml,2
25,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.avg_pool1d.yaml,2
26,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.as_strided.yaml,2
27,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.max22.yaml,2
28,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.max22.yaml,2
29,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,2
30,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.div.yaml,2
31,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.nonzero.yaml,2
32,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sinh.yaml,2
33,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.var.yaml,2
34,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv2d.yaml,2
35,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.std_mean.yaml,2
36,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",input tensor of shape N  times M .,torch.nn.functional.pdist.yaml,2
37,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",input tensor,torch.nn.functional.glu.yaml,2
38,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.erf.yaml,2
39,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
40,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.neg.yaml,2
41,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",input tensor of any shape,torch.nn.functional.normalize.yaml,2
42,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the first input tensor,torch.add.yaml,2
43,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.add.yaml,2
44,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.diag.yaml,2
45,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sigmoid.yaml,2
46,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",This argument is optional when `func`'s input contains a single element and (if it is not provided) will be set as a Tensor containing a single `1`.,torch.autograd.functional.jvp.yaml,2
47,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.irfft.yaml,2
48,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,2
49,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.erfinv.yaml,2
50,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",input tensor of shape B  times P  times M .,torch.cdist.yaml,2
51,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",input tensor of shape B  times R  times M .,torch.cdist.yaml,2
52,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cummin.yaml,2
53,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",This argument is optional when `func`'s input contains a single element and (if it is not provided) will be set as a Tensor containing a single `1`.,torch.autograd.functional.vhp.yaml,2
54,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the first input tensor,torch.bitwise_and.yaml,2
55,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.bitwise_and.yaml,2
56,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
57,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Input tensor.,torch.distributed.gather.yaml,2
58,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.topk.yaml,2
59,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv_transpose3d.yaml,2
60,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.reciprocal.yaml,2
61,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","float 1D tensor of scales to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
62,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","integer 1D tensor of offset to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
63,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,2
64,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cos.yaml,2
65,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.masked_select.yaml,2
66,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.matrix_power.yaml,2
67,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.min2.yaml,2
68,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.angle.yaml,2
69,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.erfc.yaml,2
70,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.round.yaml,2
71,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.polygamma.yaml,2
72,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.fft.yaml,2
73,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv_transpose1d.yaml,2
74,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cross.yaml,2
75,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.cross.yaml,2
76,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.argmin2.yaml,2
77,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.acos.yaml,2
78,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Tensor of the same shape as input,torch.nn.functional.kl_div.yaml,2
79,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor (minibatch , in _channels , iH , iW) ",torch.nn.functional.avg_pool2d.yaml,2
80,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.numel.yaml,2
81,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,2
82,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, m) ",torch.lobpcg.yaml,2
83,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
84,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, n)  where k <= n <= m.",torch.lobpcg.yaml,2
85,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
86,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
87,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Tensor of the same shape as input,torch.nn.functional.binary_cross_entropy.yaml,2
88,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",a manual rescaling weight if provided it's repeated to match input tensor shape,torch.nn.functional.binary_cross_entropy.yaml,2
89,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv1d.yaml,2
90,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to `dtype` before the operation is performed.",torch.nn.functional.log_softmax.yaml,2
91,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.bitwise_not.yaml,2
92,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.ifft.yaml,2
93,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.var_mean2.yaml,2
94,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.trunc.yaml,2
95,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv3d.yaml,2
96,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.conj.yaml,2
97,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.repeat_interleave.yaml,2
98,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.median2.yaml,2
99,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.histc.yaml,2
100,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
101,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.clamp.yaml,2
102,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.flatten.yaml,2
103,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.argsort.yaml,2
104,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.logical_or.yaml,2
105,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
106,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.logsumexp.yaml,2
107,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.mean.yaml,2
108,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sort.yaml,2
109,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.logical_and.yaml,2
110,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sin.yaml,2
111,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.tan.yaml,2
112,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.argmin.yaml,2
113,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.max2.yaml,2
114,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to `dtype` before the operation is performed.",torch.cumprod.yaml,2
115,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cumprod.yaml,2
116,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.diag_embed.yaml,2
117,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.imag.yaml,2
118,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.atan.yaml,2
119,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cosh.yaml,2
120,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.asin.yaml,2
121,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.argmax2.yaml,2
122,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.stft.yaml,2
123,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.square.yaml,2
124,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.median.yaml,2
125,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
126,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","quantized input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.quantized.functional.conv2d.yaml,2
127,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.log2.yaml,2
128,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.logical_xor.yaml,2
129,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
130,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.prod.yaml,2
131,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.argmax.yaml,2
132,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.floor.yaml,2
133,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If the value is None, matrix norm will be calculated when the input tensor only has two dimensions, vector norm will be calculated when the input tensor only has one dimension.",torch.norm.yaml,2
134,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If the input tensor has more than two dimensions, the vector norm will be applied to last dimension.",torch.norm.yaml,2
135,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to :attr:'dtype' while performing the operation.",torch.norm.yaml,2
136,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.norm.yaml,2
137,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.unique.yaml,2
138,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.index_select.yaml,2
139,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.kthvalue.yaml,2
140,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the first input tensor,torch.atan2.yaml,2
141,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.atan2.yaml,2
142,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.flip.yaml,2
143,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
144,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","tuple of Q and R tensors satisfying `input = torch.matmul(Q, R)`.",torch.qr.yaml,2
145,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.var2.yaml,2
146,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.logical_not.yaml,2
147,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor containing probabilities,torch.multinomial.yaml,2
148,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input 2-D tensor u , a upper or lower triangular Cholesky factor",torch.cholesky_inverse.yaml,2
149,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.min.yaml,2
150,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.expm1.yaml,2
151,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.mode.yaml,2
152,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.log.yaml,2
153,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.abs.yaml,2
154,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.tril.yaml,2
155,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","optional, weight for each value in the input tensor.",torch.bincount.yaml,2
156,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Should be of same size as input tensor.,torch.bincount.yaml,2
157,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.triu.yaml,2
158,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels.",torch.nn.quantized.functional.interpolate.yaml,2
159,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
160,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.nn.quantized.functional.interpolate.yaml,2
161,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",A Tensor that is input to `functions`,torch.utils.checkpoint.checkpoint_sequential.yaml,2
162,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to `dtype` before the operation is performed.",torch.nn.functional.softmin.yaml,2
163,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.unsqueeze.yaml,2
164,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If set to -1, the number of classes will be inferred as one greater than the largest class value in the input tensor.",torch.nn.functional.one_hot.yaml,2
165,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",an input tensor or number,torch.result_type.yaml,2
166,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",an input tensor or number,torch.result_type.yaml,2
167,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.log10.yaml,2
168,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the first input tensor,torch.bitwise_or.yaml,2
169,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the second input tensor,torch.bitwise_or.yaml,2
170,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.std_mean2.yaml,2
171,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sqrt.yaml,2
172,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.lgamma.yaml,2
173,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.sign.yaml,2
174,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.unique_consecutive.yaml,2
175,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.rot90.yaml,2
176,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.dist.yaml,2
177,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the Right-hand-side input tensor,torch.dist.yaml,2
178,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.squeeze.yaml,2
179,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to `dtype` before the operation is performed.",torch.cumsum.yaml,2
180,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.cumsum.yaml,2
181,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Input and output GPU tensors of the collective.,torch.distributed.reduce_multigpu.yaml,2
182,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If specified, the input tensor is casted to `dtype` before the operation is performed.",torch.nn.functional.softmax.yaml,2
183,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.tanh.yaml,2
184,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.t.yaml,2
185,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",Tensor of the same shape as input,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
186,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",a manual rescaling weight if provided it's repeated to match input tensor shape,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
187,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
188,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.transpose.yaml,2
189,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
190,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input 2-D tensor,torch.matrix_rank.yaml,2
191,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If `True`, gradient w.r.t. `input` will be a sparse tensor.",torch.gather.yaml,2
192,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,2
193,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.roll.yaml,2
194,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels.",torch.nn.functional.interpolate.yaml,2
195,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
196,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor,torch.nn.functional.interpolate.yaml,2
197,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.std.yaml,2
198,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.diagonal.yaml,2
199,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.diagflat.yaml,2
200,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.renorm.yaml,2
201,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.rsqrt.yaml,2
202,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor of at least `signal_ndim` dimensions,torch.rfft.yaml,2
203,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})",the input tensor.,torch.max.yaml,2
204,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","quantized input tensor of shape (minibatch , in _channels , iD , iH , iW) ",torch.nn.quantized.functional.conv3d.yaml,2
205,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","the input tensor of size (*, m, n) ",torch.pca_lowrank.yaml,2
206,129,0.09899569583931134,207,"frozenset({'tensor', 'input'})","if True, center the input tensor, otherwise, assume that the input is centered.",torch.pca_lowrank.yaml,2
207,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.std2.yaml,2
208,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.std2.yaml,2
209,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bitwise_xor.yaml,2
210,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.real.yaml,2
211,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addcdiv.yaml,2
212,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.log1p.yaml,2
213,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.prod2.yaml,2
214,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bernoulli.yaml,2
215,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the shape of the output tensor,torch.empty_strided.yaml,2
216,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the strides of the output tensor,torch.empty_strided.yaml,2
217,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.pow.yaml,2
218,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.exp.yaml,2
219,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.cummax.yaml,2
220,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.mean2.yaml,2
221,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.mean2.yaml,2
222,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.arange.yaml,2
223,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.ceil.yaml,2
224,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.sum2.yaml,2
225,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.min22.yaml,2
226,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.lerp.yaml,2
227,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the shape of the output tensor,torch.as_strided.yaml,2
228,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the offset in the underlying storage of the output tensor,torch.as_strided.yaml,2
229,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the stride of the output tensor,torch.as_strided.yaml,2
230,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.max22.yaml,2
231,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,2
232,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor containing indices,torch.nonzero.yaml,2
233,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.sinh.yaml,2
234,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensors,torch.eig.yaml,2
235,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",This argument is optional when `func`'s output contains a single element and (if it is not provided) will be set as a Tensor containing a single `1`.,torch.autograd.functional.vjp.yaml,2
236,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.erf.yaml,2
237,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.neg.yaml,2
238,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.baddbmm.yaml,2
239,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor that must be a BoolTensor,torch.le.yaml,2
240,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.nn.functional.normalize.yaml,2
241,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.diag.yaml,2
242,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",It should contain correctly-sized tensors to be used for output of the collective.,torch.distributed.all_gather.yaml,2
243,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.mv.yaml,2
244,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addr.yaml,2
245,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.sigmoid.yaml,2
246,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.fmod.yaml,2
247,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.pow2.yaml,2
248,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,2
249,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor that must be a BoolTensor,torch.gt.yaml,2
250,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor that must be a BoolTensor,torch.ne.yaml,2
251,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.erfinv.yaml,2
252,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addbmm.yaml,2
253,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.cummin.yaml,2
254,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bitwise_and.yaml,2
255,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
256,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.reciprocal.yaml,2
257,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,2
258,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cos.yaml,2
259,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.masked_select.yaml,2
260,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.min2.yaml,2
261,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the tuple of two output tensors (min, min_indices)",torch.min2.yaml,2
262,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.angle.yaml,2
263,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.erfc.yaml,2
264,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
265,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.rand.yaml,2
266,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.round.yaml,2
267,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.polygamma.yaml,2
268,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cross.yaml,2
269,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.argmin2.yaml,2
270,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.acos.yaml,2
271,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.eye.yaml,2
272,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addmm.yaml,2
273,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,2
274,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addcmul.yaml,2
275,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bitwise_not.yaml,2
276,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.var_mean2.yaml,2
277,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.trunc.yaml,2
278,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.conj.yaml,2
279,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.mul.yaml,2
280,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.remainder.yaml,2
281,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor for c,torch.cholesky_solve.yaml,2
282,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.median2.yaml,2
283,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the result tuple of two output tensors (max, max_indices)",torch.median2.yaml,2
284,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.histc.yaml,2
285,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the output tuple of (Tensor, Tensor)",torch.symeig.yaml,2
286,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.clamp.yaml,2
287,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.eq.yaml,2
288,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logical_or.yaml,2
289,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.normal.yaml,2
290,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.inverse.yaml,2
291,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.logsumexp.yaml,2
292,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logsumexp.yaml,2
293,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
294,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logical_and.yaml,2
295,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
296,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.ones.yaml,2
297,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.randperm.yaml,2
298,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.sin.yaml,2
299,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.tan.yaml,2
300,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.stack.yaml,2
301,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.normal222.yaml,2
302,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
303,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.max2.yaml,2
304,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the result tuple of two output tensors (max, max_indices)",torch.max2.yaml,2
305,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cumprod.yaml,2
306,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.imag.yaml,2
307,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.matmul.yaml,2
308,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.atan.yaml,2
309,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cosh.yaml,2
310,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.asin.yaml,2
311,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.argmax2.yaml,2
312,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor,torch.normal22.yaml,2
313,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.square.yaml,2
314,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.linspace.yaml,2
315,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bmm.yaml,2
316,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.normal2.yaml,2
317,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor that must be a BoolTensor,torch.ge.yaml,2
318,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.log2.yaml,2
319,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logical_xor.yaml,2
320,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.floor.yaml,2
321,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.addmv.yaml,2
322,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensors have `dim` retained or not.,torch.norm.yaml,2
323,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.norm.yaml,2
324,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor that must be a BoolTensor,torch.lt.yaml,2
325,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.index_select.yaml,2
326,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.kthvalue.yaml,2
327,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
328,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.atan2.yaml,2
329,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.var2.yaml,2
330,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.var2.yaml,2
331,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logical_not.yaml,2
332,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.multinomial.yaml,2
333,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor for inv,torch.cholesky_inverse.yaml,2
334,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.expm1.yaml,2
335,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.mode.yaml,2
336,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.mode.yaml,2
337,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.log.yaml,2
338,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.abs.yaml,2
339,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.tril.yaml,2
340,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.logspace.yaml,2
341,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.triu.yaml,2
342,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels.",torch.nn.quantized.functional.interpolate.yaml,2
343,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
344,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.log10.yaml,2
345,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.bitwise_or.yaml,2
346,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",whether the output tensor has `dim` retained or not.,torch.std_mean2.yaml,2
347,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.sqrt.yaml,2
348,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.lgamma.yaml,2
349,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.sign.yaml,2
350,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cat.yaml,2
351,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",Output tensor.,torch.distributed.scatter.yaml,2
352,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","the output tuple of (Tensor, Tensor)",torch.geqrf.yaml,2
353,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.squeeze.yaml,2
354,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.cumsum.yaml,2
355,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",Input and output GPU tensors of the collective.,torch.distributed.reduce_multigpu.yaml,2
356,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
357,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.zeros.yaml,2
358,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.tanh.yaml,2
359,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tuple of tensors,torch.svd.yaml,2
360,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
361,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.randn.yaml,2
362,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,2
363,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels.",torch.nn.functional.interpolate.yaml,2
364,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
365,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the number to fill the output tensor with.,torch.full.yaml,2
366,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.full.yaml,2
367,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
368,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.renorm.yaml,2
369,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.rsqrt.yaml,2
370,143,0.0784313725490196,164,"frozenset({'output', 'tensor'})",the output tensor.,torch.mm.yaml,2
371,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
372,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
373,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
374,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
375,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.arange.yaml,2
376,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
377,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
378,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.arange.yaml,2
379,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones_like.yaml,2
380,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
381,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.le.yaml,2
382,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.l1_unstructured.yaml,2
383,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_like.yaml,2
384,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
385,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.random_unstructured.yaml,2
386,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.gt.yaml,2
387,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.ne.yaml,2
388,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hann_window.yaml,2
389,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
390,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
391,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
392,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.ln_structured.yaml,2
393,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
394,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",float tensor to quantize,torch.quantize_per_channel.yaml,2
395,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","float 1D tensor of scales to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
396,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","integer 1D tensor of offset to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
397,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
398,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
399,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})"," Any non-Tensor arguments will be hard-coded into the exported model; any Tensor arguments will become inputs of the exported model, in the order they occur in args.",torch.onnx.export.yaml,2
400,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
401,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand.yaml,2
402,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
403,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
404,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.rand.yaml,2
405,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.eye.yaml,2
406,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
407,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
408,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.eye.yaml,2
409,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.random_structured.yaml,2
410,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn_like.yaml,2
411,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
412,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.remove.yaml,2
413,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",It should match `devices` in length and sum to `tensor.size(dim)`.,torch.cuda.comm.scatter.yaml,2
414,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","iterable of ints, specifying among which devices the tensor should be scattered.",torch.cuda.comm.scatter.yaml,2
415,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.backward.yaml,2
416,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
417,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",an iterator of Tensors that are the parameters of a model.,torch.nn.utils.vector_to_parameters.yaml,2
418,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
419,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones.yaml,2
420,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
421,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
422,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.ones.yaml,2
423,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randperm.yaml,2
424,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
425,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
426,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
427,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
428,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
429,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
430,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
431,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
432,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
433,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
434,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.linspace.yaml,2
435,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
436,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
437,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
438,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.grad.yaml,2
439,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",float tensor to quantize,torch.quantize_per_tensor.yaml,2
440,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
441,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.ge.yaml,2
442,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
443,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
444,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
445,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
446,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.lt.yaml,2
447,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
448,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune,torch.nn.utils.prune.custom_from_mask.yaml,2
449,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
450,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
451,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
452,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
453,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
454,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
455,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
456,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
457,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
458,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
459,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
460,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.logspace.yaml,2
461,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
462,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
463,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
464,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",1-d int tensor,torch.bincount.yaml,2
465,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",module containing the tensor to prune.,torch.nn.utils.prune.identity.yaml,2
466,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tensor.yaml,2
467,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
468,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
469,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
470,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
471,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
472,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
473,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros.yaml,2
474,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
475,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
476,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
477,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
478,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn.yaml,2
479,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
480,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
481,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randn.yaml,2
482,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand_like.yaml,2
483,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
484,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",an iterator of Tensors that are the parameters of a model.,torch.nn.utils.parameters_to_vector.yaml,2
485,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.full.yaml,2
486,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
487,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
488,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.full.yaml,2
489,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
490,87,0.05738880918220947,120,"frozenset({'tensor', 'SOME_DTYPE'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
491,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
492,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
493,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
494,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
495,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","If set, returned tensor would be allocated in the pinned memory.",torch.empty_strided.yaml,2
496,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
497,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.arange.yaml,2
498,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,2
499,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.arange.yaml,2
500,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
501,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
502,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
503,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.ones_like.yaml,2
504,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
505,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
506,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.ones_like.yaml,2
507,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
508,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.empty_like.yaml,2
509,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
510,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
511,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.empty_like.yaml,2
512,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
513,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.hann_window.yaml,2
514,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
515,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
516,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
517,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
518,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
519,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
520,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
521,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
522,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.zeros_like.yaml,2
523,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
524,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.rand.yaml,2
525,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,2
526,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.rand.yaml,2
527,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
528,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.eye.yaml,2
529,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,2
530,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.eye.yaml,2
531,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
532,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.randn_like.yaml,2
533,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
534,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
535,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.randn_like.yaml,2
536,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
537,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
538,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.ones.yaml,2
539,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,2
540,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.ones.yaml,2
541,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
542,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.randperm.yaml,2
543,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,2
544,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
545,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
546,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
547,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
548,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
549,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
550,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
551,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.linspace.yaml,2
552,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,2
553,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
554,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
555,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
556,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
557,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
558,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
559,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
560,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
561,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,2
562,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
563,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
564,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
565,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
566,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
567,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
568,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
569,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
570,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
571,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
572,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.logspace.yaml,2
573,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,2
574,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
575,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
576,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
577,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.tensor.yaml,2
578,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,2
579,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})","If set, returned tensor would be allocated in the pinned memory.",torch.tensor.yaml,2
580,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
581,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
582,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
583,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
584,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
585,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.zeros.yaml,2
586,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,2
587,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
588,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
589,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
590,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.randn.yaml,2
591,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,2
592,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.randn.yaml,2
593,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
594,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.rand_like.yaml,2
595,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
596,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
597,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.rand_like.yaml,2
598,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
599,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired device of returned tensor.,torch.full.yaml,2
600,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,2
601,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",the desired layout of returned Tensor.,torch.full.yaml,2
602,146,0.053562888570062174,112,"frozenset({'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
603,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.prod2.yaml,2
604,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
605,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
606,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
607,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.avg_pool3d.yaml,2
608,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
609,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
610,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.quantized.functional.avg_pool2d.yaml,2
611,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.sum2.yaml,2
612,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
613,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.sum.yaml,2
614,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.conv_transpose2d.yaml,2
615,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the device of `input`.",torch.ones_like.yaml,2
616,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the dtype of `input`.",torch.ones_like.yaml,2
617,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the layout of `input`.",torch.ones_like.yaml,2
618,114,0.04878048780487805,102,"frozenset({'none', 'default'})","If set to `None` (default), this value is automatically determined based on whether `cuda_sources` is provided.",torch.utils.cpp_extension.load_inline.yaml,2
619,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`,torch.nn.functional.conv2d.yaml,2
620,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
621,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
622,114,0.04878048780487805,102,"frozenset({'none', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
623,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`,torch.irfft.yaml,2
624,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the device of `input`.",torch.empty_like.yaml,2
625,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the dtype of `input`.",torch.empty_like.yaml,2
626,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the layout of `input`.",torch.empty_like.yaml,2
627,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
628,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
629,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
630,114,0.04878048780487805,102,"frozenset({'none', 'default'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,2
631,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.conv_transpose3d.yaml,2
632,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
633,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the device of `input`.",torch.zeros_like.yaml,2
634,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the dtype of `input`.",torch.zeros_like.yaml,2
635,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the layout of `input`.",torch.zeros_like.yaml,2
636,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
637,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
638,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.conv_transpose1d.yaml,2
639,114,0.04878048780487805,102,"frozenset({'none', 'default'})",`'none'`: no reduction will be applied `'batchmean'`: the sum of the output will be divided by the batchsize `'sum'`: the output will be summed `'mean'`: the output will be divided by the number of elements in the output Default: `'mean'`,torch.nn.functional.kl_div.yaml,2
640,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.avg_pool2d.yaml,2
641,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
642,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
643,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the device of `input`.",torch.randn_like.yaml,2
644,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the dtype of `input`.",torch.randn_like.yaml,2
645,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the layout of `input`.",torch.randn_like.yaml,2
646,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.hub.download_url_to_file.yaml,2
647,114,0.04878048780487805,102,"frozenset({'none', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
648,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`,torch.nn.functional.conv1d.yaml,2
649,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.nn.functional.log_softmax.yaml,2
650,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None,torch.nn.functional.conv3d.yaml,2
651,114,0.04878048780487805,102,"frozenset({'none', 'default'})","If None (default) is specified, the value is defined by _Formatter",torch.set_printoptions.yaml,2
652,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
653,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`,torch.lu.yaml,2
654,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
655,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
656,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
657,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
658,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.cumprod.yaml,2
659,114,0.04878048780487805,102,"frozenset({'none', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
660,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
661,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
662,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None` (treated as equal to `floor(n_fft / 4)`),torch.stft.yaml,2
663,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`  (treated as equal to `n_fft`),torch.stft.yaml,2
664,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None` (treated as window of all 1  s),torch.stft.yaml,2
665,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
666,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
667,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
668,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
669,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.autograd.grad.yaml,2
670,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
671,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
672,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.prod.yaml,2
673,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.norm.yaml,2
674,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
675,114,0.04878048780487805,102,"frozenset({'none', 'default'})","If set to `None` (default), this value is automatically determined based on the existence of `.cu` or `.cuh` in `sources`.",torch.utils.cpp_extension.load.yaml,2
676,114,0.04878048780487805,102,"frozenset({'none', 'default'})",default: `None`,torch.unique.yaml,2
677,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
678,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
679,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
680,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, infers data type from `data`.",torch.as_tensor.yaml,2
681,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
682,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
683,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
684,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
685,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
686,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.nn.functional.softmin.yaml,2
687,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
688,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, infers data type from `data`.",torch.tensor.yaml,2
689,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
690,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if None, infers data type from `values`.",torch.sparse_coo_tensor.yaml,2
691,114,0.04878048780487805,102,"frozenset({'none', 'default'})",default: `None`,torch.unique_consecutive.yaml,2
692,114,0.04878048780487805,102,"frozenset({'none', 'default'})","List of tensors to scatter (default is None, must be specified on the source rank)",torch.distributed.scatter.yaml,2
693,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.cumsum.yaml,2
694,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
695,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
696,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: None.,torch.nn.functional.softmax.yaml,2
697,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
698,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
699,114,0.04878048780487805,102,"frozenset({'none', 'default'})",Default: `None`,torch.matrix_rank.yaml,2
700,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the device of `input`.",torch.rand_like.yaml,2
701,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the dtype of `input`.",torch.rand_like.yaml,2
702,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, defaults to the layout of `input`.",torch.rand_like.yaml,2
703,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
704,114,0.04878048780487805,102,"frozenset({'none', 'default'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
705,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
706,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
707,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
708,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
709,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.arange.yaml,2
710,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,2
711,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.arange.yaml,2
712,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
713,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
714,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.ones_like.yaml,2
715,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
716,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
717,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired memory format of returned Tensor.,torch.ones_like.yaml,2
718,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.empty_like.yaml,2
719,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
720,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
721,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired memory format of returned Tensor.,torch.empty_like.yaml,2
722,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.hann_window.yaml,2
723,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
724,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
725,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
726,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
727,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
728,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
729,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
730,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired memory format of returned Tensor.,torch.zeros_like.yaml,2
731,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.rand.yaml,2
732,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,2
733,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.rand.yaml,2
734,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.eye.yaml,2
735,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,2
736,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.eye.yaml,2
737,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.randn_like.yaml,2
738,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
739,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
740,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired memory format of returned Tensor.,torch.randn_like.yaml,2
741,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
742,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.ones.yaml,2
743,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,2
744,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.ones.yaml,2
745,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.randperm.yaml,2
746,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,2
747,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
748,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
749,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
750,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
751,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
752,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
753,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.linspace.yaml,2
754,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,2
755,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
756,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
757,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
758,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
759,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
760,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
761,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,2
762,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
763,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
764,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
765,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
766,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
767,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
768,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
769,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
770,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.logspace.yaml,2
771,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,2
772,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
773,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
774,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.tensor.yaml,2
775,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,2
776,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
777,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
778,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
779,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.zeros.yaml,2
780,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,2
781,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
782,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
783,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.randn.yaml,2
784,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,2
785,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.randn.yaml,2
786,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.rand_like.yaml,2
787,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
788,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
789,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired memory format of returned Tensor.,torch.rand_like.yaml,2
790,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired device of returned tensor.,torch.full.yaml,2
791,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,2
792,123,0.042085126733620276,88,"frozenset({'desired', 'tensor'})",the desired layout of returned Tensor.,torch.full.yaml,2
793,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
794,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
795,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
796,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
797,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.arange.yaml,2
798,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,2
799,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.arange.yaml,2
800,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
801,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
802,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.ones_like.yaml,2
803,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
804,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
805,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired memory format of returned Tensor.,torch.ones_like.yaml,2
806,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.empty_like.yaml,2
807,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
808,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
809,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired memory format of returned Tensor.,torch.empty_like.yaml,2
810,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.hann_window.yaml,2
811,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
812,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
813,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
814,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
815,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
816,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
817,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
818,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired memory format of returned Tensor.,torch.zeros_like.yaml,2
819,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.rand.yaml,2
820,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,2
821,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.rand.yaml,2
822,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.eye.yaml,2
823,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,2
824,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.eye.yaml,2
825,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.randn_like.yaml,2
826,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
827,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
828,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired memory format of returned Tensor.,torch.randn_like.yaml,2
829,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
830,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.ones.yaml,2
831,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,2
832,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.ones.yaml,2
833,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.randperm.yaml,2
834,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,2
835,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
836,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
837,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
838,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
839,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
840,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
841,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.linspace.yaml,2
842,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,2
843,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
844,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
845,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
846,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
847,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
848,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
849,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,2
850,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
851,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
852,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
853,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
854,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
855,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
856,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
857,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
858,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.logspace.yaml,2
859,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,2
860,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
861,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
862,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.tensor.yaml,2
863,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,2
864,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
865,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
866,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
867,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.zeros.yaml,2
868,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,2
869,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
870,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
871,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.randn.yaml,2
872,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,2
873,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.randn.yaml,2
874,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.rand_like.yaml,2
875,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
876,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
877,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired memory format of returned Tensor.,torch.rand_like.yaml,2
878,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired device of returned tensor.,torch.full.yaml,2
879,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,2
880,122,0.042085126733620276,88,"frozenset({'desired', 'returned'})",the desired layout of returned Tensor.,torch.full.yaml,2
881,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
882,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.empty_strided.yaml,3
883,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
884,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,3
885,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.arange.yaml,3
886,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,3
887,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.arange.yaml,3
888,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
889,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
890,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.ones_like.yaml,3
891,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
892,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned tensor.,torch.ones_like.yaml,3
893,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.ones_like.yaml,3
894,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.empty_like.yaml,3
895,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
896,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned tensor.,torch.empty_like.yaml,3
897,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.empty_like.yaml,3
898,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.hann_window.yaml,3
899,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
900,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned window tensor.,torch.hann_window.yaml,3
901,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
902,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
903,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.zeros_like.yaml,3
904,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
905,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned tensor.,torch.zeros_like.yaml,3
906,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.zeros_like.yaml,3
907,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.rand.yaml,3
908,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,3
909,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.rand.yaml,3
910,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.eye.yaml,3
911,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,3
912,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.eye.yaml,3
913,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.randn_like.yaml,3
914,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
915,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned tensor.,torch.randn_like.yaml,3
916,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.randn_like.yaml,3
917,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
918,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.ones.yaml,3
919,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,3
920,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.ones.yaml,3
921,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.randperm.yaml,3
922,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,3
923,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.randperm.yaml,3
924,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
925,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.triu_indices.yaml,3
926,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
927,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.tril_indices.yaml,3
928,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
929,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.linspace.yaml,3
930,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,3
931,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.linspace.yaml,3
932,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
933,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.hamming_window.yaml,3
934,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
935,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,3
936,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
937,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,3
938,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.blackman_window.yaml,3
939,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
940,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,3
941,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.as_tensor.yaml,3
942,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
943,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.bartlett_window.yaml,3
944,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
945,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,3
946,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.logspace.yaml,3
947,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,3
948,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.logspace.yaml,3
949,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
950,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.tensor.yaml,3
951,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,3
952,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,3
953,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
954,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
955,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.zeros.yaml,3
956,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,3
957,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.zeros.yaml,3
958,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
959,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.randn.yaml,3
960,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,3
961,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.randn.yaml,3
962,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.rand_like.yaml,3
963,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
964,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned tensor.,torch.rand_like.yaml,3
965,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired memory format of returned Tensor.,torch.rand_like.yaml,3
966,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired device of returned tensor.,torch.full.yaml,3
967,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,3
968,211,0.042085126733620276,88,"frozenset({'desired', 'tensor', 'returned'})",the desired layout of returned Tensor.,torch.full.yaml,3
969,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
970,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
971,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
972,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
973,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,2
974,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
975,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
976,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
977,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
978,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
979,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
980,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
981,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
982,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
983,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
984,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,2
985,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
986,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,2
987,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
988,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
989,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
990,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
991,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,2
992,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
993,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,2
994,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
995,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
996,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
997,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
998,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
999,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1000,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,2
1001,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
1002,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
1003,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1004,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
1005,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
1006,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,2
1007,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1008,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
1009,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1010,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
1011,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1012,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
1013,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1014,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,2
1015,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
1016,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1017,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,2
1018,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1019,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
1020,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",any python sequence of tensors of the same type.,torch.cat.yaml,2
1021,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",any number of tensors of the same type,torch.broadcast_tensors.yaml,2
1022,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
1023,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1024,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,2
1025,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
1026,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1027,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,2
1028,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the floating point tensor type or its name,torch.set_default_tensor_type.yaml,2
1029,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
1030,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1031,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,2
1032,156,0.030607364897178385,64,"frozenset({'type', 'tensor'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
1033,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.adaptive_max_pool3d.yaml,2
1034,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.empty_strided.yaml,2
1035,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.empty_strided.yaml,2
1036,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.arange.yaml,2
1037,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.cholesky.yaml,2
1038,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.quantized.functional.avg_pool2d.yaml,2
1039,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.grid_sample.yaml,2
1040,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.avg_pool1d.yaml,2
1041,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.ones_like.yaml,2
1042,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False` Infinite losses mainly occur when the inputs are too short to be aligned to the targets.,torch.nn.functional.ctc_loss.yaml,2
1043,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.adaptive_max_pool1d.yaml,2
1044,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.irfft.yaml,2
1045,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.empty_like.yaml,2
1046,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.hann_window.yaml,2
1047,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default `False`.,torch.nn.functional.embedding.yaml,2
1048,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.affine_grid.yaml,2
1049,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.zeros_like.yaml,2
1050,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.rand.yaml,2
1051,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.adaptive_max_pool2d.yaml,2
1052,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.fft.yaml,2
1053,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.triangular_solve.yaml,2
1054,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.triangular_solve.yaml,2
1055,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.avg_pool2d.yaml,2
1056,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.eye.yaml,2
1057,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.dropout.yaml,2
1058,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.randn_like.yaml,2
1059,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.ifft.yaml,2
1060,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.cholesky_solve.yaml,2
1061,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.lu.yaml,2
1062,113,0.029172644667623145,61,"frozenset({'false', 'default'})",whether to return an abbreviated summary (default: False).,torch.cuda.memory_summary.yaml,2
1063,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.ones.yaml,2
1064,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.randperm.yaml,2
1065,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default is False.,torch.hub.load.yaml,2
1066,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.max2.yaml,2
1067,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default is False.,torch.hub.help.yaml,2
1068,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: False,torch.utils.model_zoo.load_url.yaml,2
1069,113,0.029172644667623145,61,"frozenset({'false', 'default'})",controls whether to return the normalized STFT results Default: `False`,torch.stft.yaml,2
1070,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.dropout2d.yaml,2
1071,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.linspace.yaml,2
1072,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.autograd.grad.yaml,2
1073,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.hamming_window.yaml,2
1074,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.norm.yaml,2
1075,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.blackman_window.yaml,2
1076,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.dropout3d.yaml,2
1077,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.bartlett_window.yaml,2
1078,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.logspace.yaml,2
1079,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.quantized.functional.interpolate.yaml,2
1080,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.allclose.yaml,2
1081,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.tensor.yaml,2
1082,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.tensor.yaml,2
1083,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.sparse_coo_tensor.yaml,2
1084,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.zeros.yaml,2
1085,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.randn.yaml,2
1086,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False` target *  log(target) - target + 0.5 *  log(2 *  pi * target) .,torch.nn.functional.poisson_nll_loss.yaml,2
1087,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.matrix_rank.yaml,2
1088,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default is False.,torch.hub.list.yaml,2
1089,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.rand_like.yaml,2
1090,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.nn.functional.interpolate.yaml,2
1091,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: False,torch.hub.load_state_dict_from_url.yaml,2
1092,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`.,torch.full.yaml,2
1093,113,0.029172644667623145,61,"frozenset({'false', 'default'})",Default: `False`,torch.rfft.yaml,2
1094,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1095,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
1096,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1097,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
1098,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.ones_like.yaml,2
1099,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.ones_like.yaml,2
1100,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})"," By default, `fork_rng()` operates on all devices, but will emit a warning if your machine has a lot of devices, since this function will run very slowly in that case.",torch.random.fork_rng.yaml,2
1101,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})",Default: `False` Infinite losses mainly occur when the inputs are too short to be aligned to the targets.,torch.nn.functional.ctc_loss.yaml,2
1102,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
1103,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
1104,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
1105,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","dimension corresponding to number of outputs, the default is `0`, except for modules that are instances of ConvTranspose{1,2,3}d, when it is `1`",torch.nn.utils.spectral_norm.yaml,2
1106,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.empty_like.yaml,2
1107,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.empty_like.yaml,2
1108,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
1109,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})"," By default, `fork_rng()` operates on all devices, but will emit a warning if your machine has a lot of devices, since this function will run very slowly in that case.",torch.random.fork_rng2.yaml,2
1110,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1111,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
1112,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.zeros_like.yaml,2
1113,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.zeros_like.yaml,2
1114,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})",by default we export the model to the opset version of the onnx submodule.,torch.onnx.export.yaml,2
1115,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1116,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1117,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.randn_like.yaml,2
1118,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.randn_like.yaml,2
1119,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
1120,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","(any one of default, short, full)",torch.set_printoptions.yaml,2
1121,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
1122,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
1123,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})",a device on which the output will be placed (default: current device).,torch.cuda.comm.reduce_add.yaml,2
1124,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1125,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1126,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})",Default: `torch.int64`.,torch.randperm.yaml,2
1127,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
1128,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1129,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
1130,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})",controls whether to return half of results to avoid redundancy Default: `True`,torch.stft.yaml,2
1131,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1132,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
1133,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1134,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1135,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
1136,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","If `True` (default), imports the produced shared library as a Python module.",torch.utils.cpp_extension.load.yaml,2
1137,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1138,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1139,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1140,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1141,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
1142,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1143,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1144,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","bool specifying if fusion happens in place on the model, by default a new model is returned",torch.quantization.fuse_modules.yaml,2
1145,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1146,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
1147,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1148,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
1149,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.rand_like.yaml,2
1150,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.rand_like.yaml,2
1151,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
1152,81,0.028216164514586323,59,"frozenset({'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1153,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1154,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
1155,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
1156,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1157,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
1158,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
1159,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
1160,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
1161,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
1162,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
1163,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1164,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
1165,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
1166,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1167,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
1168,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1169,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
1170,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
1171,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
1172,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
1173,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",a device on which the output will be placed (default: current device).,torch.cuda.comm.reduce_add.yaml,2
1174,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1175,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
1176,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1177,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
1178,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
1179,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1180,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
1181,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1182,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
1183,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1184,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
1185,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1186,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
1187,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
1188,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1189,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
1190,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1191,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
1192,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1193,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
1194,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1195,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
1196,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
1197,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1198,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
1199,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1200,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
1201,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1202,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
1203,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
1204,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1205,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
1206,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
1207,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
1208,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1209,80,0.027259684361549498,57,"frozenset({'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
1210,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1211,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1212,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.empty_strided.yaml,2
1213,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1214,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1215,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.arange.yaml,2
1216,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.preserve_format`.,torch.ones_like.yaml,2
1217,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.preserve_format`.,torch.empty_like.yaml,2
1218,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1219,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1220,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.preserve_format`.,torch.zeros_like.yaml,2
1221,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1222,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1223,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.rand.yaml,2
1224,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1225,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1226,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.eye.yaml,2
1227,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.preserve_format`.,torch.randn_like.yaml,2
1228,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1229,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1230,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.ones.yaml,2
1231,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1232,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.int64`.,torch.randperm.yaml,2
1233,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.randperm.yaml,2
1234,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1235,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
1236,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1237,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
1238,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1239,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1240,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.linspace.yaml,2
1241,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.quint8`,torch.nn.quantized.functional.conv2d.yaml,2
1242,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1243,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1244,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1245,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1246,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1247,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1248,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1249,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1250,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1251,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.logspace.yaml,2
1252,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1253,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1254,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1255,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1256,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.zeros.yaml,2
1257,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
1258,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1259,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1260,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.randn.yaml,2
1261,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
1262,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.preserve_format`.,torch.rand_like.yaml,2
1263,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1264,118,0.027259684361549498,57,"frozenset({'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1265,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.strided`.,torch.full.yaml,2
1266,118,0.027259684361549498,57,"frozenset({'default', 'torch'})",Default: `torch.quint8`,torch.nn.quantized.functional.conv3d.yaml,2
1267,112,0.02582496413199426,54,"frozenset({'data', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
1268,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.prod2.yaml,2
1269,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
1270,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.arange.yaml,2
1271,112,0.02582496413199426,54,"frozenset({'data', 'type'})","If dtype is not given, infer the data type from the other input arguments.",torch.arange.yaml,2
1272,112,0.02582496413199426,54,"frozenset({'data', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
1273,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.sum2.yaml,2
1274,112,0.02582496413199426,54,"frozenset({'data', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
1275,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.sum.yaml,2
1276,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
1277,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
1278,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
1279,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
1280,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
1281,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
1282,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.rand.yaml,2
1283,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.eye.yaml,2
1284,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
1285,112,0.02582496413199426,54,"frozenset({'data', 'type'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
1286,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
1287,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.nn.functional.log_softmax.yaml,2
1288,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.ones.yaml,2
1289,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.randperm.yaml,2
1290,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
1291,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.cumprod.yaml,2
1292,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
1293,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
1294,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.linspace.yaml,2
1295,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
1296,112,0.02582496413199426,54,"frozenset({'data', 'type'})",quantization data type to use.,torch.nn.quantized.functional.conv2d.yaml,2
1297,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
1298,112,0.02582496413199426,54,"frozenset({'data', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
1299,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.prod.yaml,2
1300,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.norm.yaml,2
1301,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
1302,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
1303,112,0.02582496413199426,54,"frozenset({'data', 'type'})","Default: if `None`, infers data type from `data`.",torch.as_tensor.yaml,2
1304,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
1305,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.logspace.yaml,2
1306,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
1307,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.nn.functional.softmin.yaml,2
1308,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.tensor.yaml,2
1309,112,0.02582496413199426,54,"frozenset({'data', 'type'})","Default: if `None`, infers data type from `data`.",torch.tensor.yaml,2
1310,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
1311,112,0.02582496413199426,54,"frozenset({'data', 'type'})","Default: if None, infers data type from `values`.",torch.sparse_coo_tensor.yaml,2
1312,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
1313,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.cumsum.yaml,2
1314,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.zeros.yaml,2
1315,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
1316,112,0.02582496413199426,54,"frozenset({'data', 'type'})",This is useful for preventing data type overflows.,torch.nn.functional.softmax.yaml,2
1317,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.randn.yaml,2
1318,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
1319,112,0.02582496413199426,54,"frozenset({'data', 'type'})",the desired data type of returned tensor.,torch.full.yaml,2
1320,112,0.02582496413199426,54,"frozenset({'data', 'type'})",quantization data type to use.,torch.nn.quantized.functional.conv3d.yaml,2
1321,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_max_pool3d.yaml,2
1322,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (kT, kH, kW)",torch.nn.functional.avg_pool3d.yaml,2
1323,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padT, padH, padW), Default: 0",torch.nn.functional.avg_pool3d.yaml,2
1324,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.avg_pool3d.yaml,2
1325,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (kH, kW)",torch.nn.quantized.functional.avg_pool2d.yaml,2
1326,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1327,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1328,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(dH, dW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1329,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(out_padH, out_padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1330,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(padH, padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1331,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(sH, sW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1332,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (kW,)",torch.nn.functional.avg_pool1d.yaml,2
1333,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padW,).",torch.nn.functional.avg_pool1d.yaml,2
1334,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sW,).",torch.nn.functional.avg_pool1d.yaml,2
1335,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (dH, dW).",torch.nn.functional.conv2d.yaml,2
1336,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.conv2d.yaml,2
1337,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.conv2d.yaml,2
1338,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_avg_pool3d.yaml,2
1339,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",an iterable of Tensors or a single Tensor that will have gradients normalized,torch.nn.utils.clip_grad_norm_.yaml,2
1340,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",an iterable of Tensors or a single Tensor that will have gradients normalized,torch.nn.utils.clip_grad_value_.yaml,2
1341,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",the target output size (single integer or double-integer tuple),torch.nn.quantized.functional.adaptive_avg_pool2d.yaml,2
1342,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv_transpose3d.yaml,2
1343,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(out_padT, out_padH, out_padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1344,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(padT, padH, padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1345,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(sT, sH, sW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1346,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",size of a single chunk or list of sizes for each chunk,torch.split.yaml,2
1347,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_max_pool2d.yaml,2
1348,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(dW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1349,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",Can be a single number or a tuple `(out_padW)`.,torch.nn.functional.conv_transpose1d.yaml,2
1350,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(padW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1351,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple `(sW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1352,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (kH, kW)",torch.nn.functional.avg_pool2d.yaml,2
1353,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.avg_pool2d.yaml,2
1354,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.avg_pool2d.yaml,2
1355,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a one-element tuple (dW,).",torch.nn.functional.conv1d.yaml,2
1356,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a one-element tuple (padW,).",torch.nn.functional.conv1d.yaml,2
1357,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a one-element tuple (sW,).",torch.nn.functional.conv1d.yaml,2
1358,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv3d.yaml,2
1359,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padT, padH, padW).",torch.nn.functional.conv3d.yaml,2
1360,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.conv3d.yaml,2
1361,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_avg_pool2d.yaml,2
1362,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",`example_inputs` may also be a single Tensor in which case it is automatically wrapped in a tuple.,torch.jit.trace.yaml,2
1363,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (dH, dW).",torch.nn.quantized.functional.conv2d.yaml,2
1364,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.conv2d.yaml,2
1365,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.conv2d.yaml,2
1366,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})",Can also be a list of strings if there is only a single list of modules to fuse.,torch.quantization.fuse_modules.yaml,2
1367,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (dD, dH, dW).",torch.nn.quantized.functional.conv3d.yaml,2
1368,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (padD, padH, padW).",torch.nn.quantized.functional.conv3d.yaml,2
1369,94,0.0234337637494022,49,"frozenset({'single', 'SOME_STRUCTURE'})","Can be a single number or a tuple (sD, sH, sW).",torch.nn.quantized.functional.conv3d.yaml,2
1370,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1371,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
1372,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1373,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
1374,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.ones_like.yaml,2
1375,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.ones_like.yaml,2
1376,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
1377,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
1378,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
1379,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.empty_like.yaml,2
1380,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.empty_like.yaml,2
1381,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
1382,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1383,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
1384,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.zeros_like.yaml,2
1385,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.zeros_like.yaml,2
1386,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1387,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1388,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.randn_like.yaml,2
1389,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.randn_like.yaml,2
1390,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
1391,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.backward.yaml,2
1392,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
1393,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
1394,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1395,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1396,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
1397,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1398,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
1399,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
1400,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1401,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
1402,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1403,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.grad.yaml,2
1404,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1405,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
1406,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1407,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1408,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1409,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1410,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
1411,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1412,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1413,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1414,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1415,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.rand_like.yaml,2
1416,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.rand_like.yaml,2
1417,83,0.02295552367288379,48,"frozenset({'none', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1418,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
1419,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
1420,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.arange.yaml,2
1421,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.arange.yaml,2
1422,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones_like.yaml,2
1423,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
1424,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_like.yaml,2
1425,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
1426,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hann_window.yaml,2
1427,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
1428,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
1429,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
1430,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand.yaml,2
1431,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.rand.yaml,2
1432,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.eye.yaml,2
1433,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.eye.yaml,2
1434,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn_like.yaml,2
1435,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
1436,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones.yaml,2
1437,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.ones.yaml,2
1438,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randperm.yaml,2
1439,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
1440,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
1441,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
1442,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.linspace.yaml,2
1443,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
1444,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
1445,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
1446,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
1447,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
1448,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
1449,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
1450,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
1451,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.logspace.yaml,2
1452,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
1453,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tensor.yaml,2
1454,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
1455,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})","bool specifying if fusion happens in place on the model, by default a new model is returned",torch.quantization.fuse_modules.yaml,2
1456,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros.yaml,2
1457,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
1458,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn.yaml,2
1459,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randn.yaml,2
1460,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand_like.yaml,2
1461,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
1462,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.full.yaml,2
1463,85,0.021999043519846963,46,"frozenset({'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.full.yaml,2
1464,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
1465,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
1466,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,2
1467,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
1468,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
1469,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
1470,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
1471,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
1472,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,2
1473,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
1474,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
1475,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
1476,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,2
1477,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,2
1478,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
1479,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
1480,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
1481,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Tensor to fill with received data.,torch.distributed.recv.yaml,2
1482,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,2
1483,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,2
1484,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
1485,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
1486,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
1487,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,2
1488,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
1489,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
1490,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
1491,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,2
1492,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
1493,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Initial data for the tensor.,torch.as_tensor.yaml,2
1494,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
1495,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
1496,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,2
1497,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
1498,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Initial data for the tensor.,torch.tensor.yaml,2
1499,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,2
1500,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
1501,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Initial data for the tensor.,torch.sparse_coo_tensor.yaml,2
1502,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",Tensor to fill with received data.,torch.distributed.irecv.yaml,2
1503,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
1504,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,2
1505,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
1506,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,2
1507,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
1508,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,2
1509,111,0.021999043519846963,46,"frozenset({'data', 'tensor'})","Data to be sent if `src` is the rank of current process, and tensor to be used to save received data otherwise.",torch.distributed.broadcast.yaml,2
1510,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
1511,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,3
1512,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
1513,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,3
1514,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.ones_like.yaml,3
1515,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.ones_like.yaml,3
1516,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,3
1517,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,3
1518,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
1519,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.empty_like.yaml,3
1520,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.empty_like.yaml,3
1521,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,3
1522,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
1523,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,3
1524,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.zeros_like.yaml,3
1525,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.zeros_like.yaml,3
1526,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
1527,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
1528,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.randn_like.yaml,3
1529,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.randn_like.yaml,3
1530,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
1531,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,3
1532,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,3
1533,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
1534,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
1535,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
1536,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
1537,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,3
1538,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
1539,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,3
1540,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
1541,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
1542,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,3
1543,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
1544,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
1545,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
1546,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
1547,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,3
1548,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
1549,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
1550,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
1551,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
1552,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the device of `input`.",torch.rand_like.yaml,3
1553,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, defaults to the layout of `input`.",torch.rand_like.yaml,3
1554,167,0.021520803443328552,45,"frozenset({'none', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
1555,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_strided.yaml,3
1556,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,3
1557,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.arange.yaml,3
1558,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.arange.yaml,3
1559,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones_like.yaml,3
1560,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.ones_like.yaml,3
1561,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_like.yaml,3
1562,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.empty_like.yaml,3
1563,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hann_window.yaml,3
1564,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hann_window.yaml,3
1565,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros_like.yaml,3
1566,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.zeros_like.yaml,3
1567,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand.yaml,3
1568,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.rand.yaml,3
1569,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.eye.yaml,3
1570,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.eye.yaml,3
1571,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn_like.yaml,3
1572,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.randn_like.yaml,3
1573,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones.yaml,3
1574,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.ones.yaml,3
1575,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randperm.yaml,3
1576,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randperm.yaml,3
1577,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.triu_indices.yaml,3
1578,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tril_indices.yaml,3
1579,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.linspace.yaml,3
1580,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.linspace.yaml,3
1581,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hamming_window.yaml,3
1582,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,3
1583,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.blackman_window.yaml,3
1584,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,3
1585,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.as_tensor.yaml,3
1586,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.bartlett_window.yaml,3
1587,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,3
1588,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.logspace.yaml,3
1589,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.logspace.yaml,3
1590,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tensor.yaml,3
1591,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,3
1592,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros.yaml,3
1593,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.zeros.yaml,3
1594,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn.yaml,3
1595,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randn.yaml,3
1596,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand_like.yaml,3
1597,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.rand_like.yaml,3
1598,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.full.yaml,3
1599,171,0.021520803443328552,45,"frozenset({'desired', 'tensor', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.full.yaml,3
1600,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_strided.yaml,2
1601,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,2
1602,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.arange.yaml,2
1603,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.arange.yaml,2
1604,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones_like.yaml,2
1605,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.ones_like.yaml,2
1606,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_like.yaml,2
1607,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.empty_like.yaml,2
1608,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hann_window.yaml,2
1609,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hann_window.yaml,2
1610,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros_like.yaml,2
1611,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.zeros_like.yaml,2
1612,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand.yaml,2
1613,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.rand.yaml,2
1614,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.eye.yaml,2
1615,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.eye.yaml,2
1616,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn_like.yaml,2
1617,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.randn_like.yaml,2
1618,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones.yaml,2
1619,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.ones.yaml,2
1620,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randperm.yaml,2
1621,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randperm.yaml,2
1622,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.triu_indices.yaml,2
1623,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tril_indices.yaml,2
1624,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.linspace.yaml,2
1625,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.linspace.yaml,2
1626,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hamming_window.yaml,2
1627,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,2
1628,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.blackman_window.yaml,2
1629,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,2
1630,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.as_tensor.yaml,2
1631,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.bartlett_window.yaml,2
1632,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,2
1633,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.logspace.yaml,2
1634,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.logspace.yaml,2
1635,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tensor.yaml,2
1636,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,2
1637,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros.yaml,2
1638,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.zeros.yaml,2
1639,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn.yaml,2
1640,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randn.yaml,2
1641,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand_like.yaml,2
1642,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.rand_like.yaml,2
1643,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.full.yaml,2
1644,82,0.021520803443328552,45,"frozenset({'desired', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.full.yaml,2
1645,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.empty_strided.yaml,3
1646,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,3
1647,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.arange.yaml,3
1648,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.arange.yaml,3
1649,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.ones_like.yaml,3
1650,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.ones_like.yaml,3
1651,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.empty_like.yaml,3
1652,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.empty_like.yaml,3
1653,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.hann_window.yaml,3
1654,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.hann_window.yaml,3
1655,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.zeros_like.yaml,3
1656,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.zeros_like.yaml,3
1657,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.rand.yaml,3
1658,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.rand.yaml,3
1659,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.eye.yaml,3
1660,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.eye.yaml,3
1661,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randn_like.yaml,3
1662,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.randn_like.yaml,3
1663,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.ones.yaml,3
1664,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.ones.yaml,3
1665,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randperm.yaml,3
1666,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.randperm.yaml,3
1667,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.triu_indices.yaml,3
1668,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.tril_indices.yaml,3
1669,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.linspace.yaml,3
1670,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.linspace.yaml,3
1671,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.hamming_window.yaml,3
1672,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,3
1673,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.blackman_window.yaml,3
1674,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,3
1675,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.as_tensor.yaml,3
1676,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.bartlett_window.yaml,3
1677,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,3
1678,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.logspace.yaml,3
1679,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.logspace.yaml,3
1680,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.tensor.yaml,3
1681,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,3
1682,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.zeros.yaml,3
1683,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.zeros.yaml,3
1684,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randn.yaml,3
1685,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.randn.yaml,3
1686,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.rand_like.yaml,3
1687,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.rand_like.yaml,3
1688,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.full.yaml,3
1689,176,0.021520803443328552,45,"frozenset({'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.full.yaml,3
1690,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_strided.yaml,3
1691,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,3
1692,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.arange.yaml,3
1693,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.arange.yaml,3
1694,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones_like.yaml,3
1695,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.ones_like.yaml,3
1696,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.empty_like.yaml,3
1697,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.empty_like.yaml,3
1698,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hann_window.yaml,3
1699,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hann_window.yaml,3
1700,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros_like.yaml,3
1701,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.zeros_like.yaml,3
1702,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand.yaml,3
1703,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.rand.yaml,3
1704,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.eye.yaml,3
1705,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.eye.yaml,3
1706,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn_like.yaml,3
1707,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.randn_like.yaml,3
1708,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.ones.yaml,3
1709,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.ones.yaml,3
1710,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randperm.yaml,3
1711,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randperm.yaml,3
1712,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.triu_indices.yaml,3
1713,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tril_indices.yaml,3
1714,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.linspace.yaml,3
1715,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.linspace.yaml,3
1716,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.hamming_window.yaml,3
1717,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,3
1718,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.blackman_window.yaml,3
1719,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,3
1720,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.as_tensor.yaml,3
1721,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.bartlett_window.yaml,3
1722,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,3
1723,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.logspace.yaml,3
1724,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.logspace.yaml,3
1725,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.tensor.yaml,3
1726,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,3
1727,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.zeros.yaml,3
1728,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.zeros.yaml,3
1729,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.randn.yaml,3
1730,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.randn.yaml,3
1731,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.rand_like.yaml,3
1732,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned tensor.,torch.rand_like.yaml,3
1733,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired device of returned tensor.,torch.full.yaml,3
1734,170,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE'})",the desired layout of returned Tensor.,torch.full.yaml,3
1735,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.empty_strided.yaml,4
1736,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.empty_strided.yaml,4
1737,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.arange.yaml,4
1738,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.arange.yaml,4
1739,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.ones_like.yaml,4
1740,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.ones_like.yaml,4
1741,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.empty_like.yaml,4
1742,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.empty_like.yaml,4
1743,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.hann_window.yaml,4
1744,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.hann_window.yaml,4
1745,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.zeros_like.yaml,4
1746,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.zeros_like.yaml,4
1747,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.rand.yaml,4
1748,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.rand.yaml,4
1749,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.eye.yaml,4
1750,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.eye.yaml,4
1751,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randn_like.yaml,4
1752,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.randn_like.yaml,4
1753,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.ones.yaml,4
1754,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.ones.yaml,4
1755,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randperm.yaml,4
1756,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.randperm.yaml,4
1757,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.triu_indices.yaml,4
1758,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.tril_indices.yaml,4
1759,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.linspace.yaml,4
1760,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.linspace.yaml,4
1761,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.hamming_window.yaml,4
1762,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.hamming_window.yaml,4
1763,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.blackman_window.yaml,4
1764,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.blackman_window.yaml,4
1765,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.as_tensor.yaml,4
1766,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.bartlett_window.yaml,4
1767,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned window tensor.,torch.bartlett_window.yaml,4
1768,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.logspace.yaml,4
1769,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.logspace.yaml,4
1770,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.tensor.yaml,4
1771,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.sparse_coo_tensor.yaml,4
1772,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.zeros.yaml,4
1773,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.zeros.yaml,4
1774,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.randn.yaml,4
1775,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.randn.yaml,4
1776,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.rand_like.yaml,4
1777,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned tensor.,torch.rand_like.yaml,4
1778,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired device of returned tensor.,torch.full.yaml,4
1779,238,0.021520803443328552,45,"frozenset({'desired', 'returned', 'SOME_DTYPE', 'tensor'})",the desired layout of returned Tensor.,torch.full.yaml,4
1780,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kT, kH, kW)",torch.nn.functional.avg_pool3d.yaml,2
1781,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padT, padH, padW), Default: 0",torch.nn.functional.avg_pool3d.yaml,2
1782,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.avg_pool3d.yaml,2
1783,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.quantized.functional.avg_pool2d.yaml,2
1784,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1785,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1786,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(dH, dW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1787,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(out_padH, out_padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1788,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padH, padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1789,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sH, sW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1790,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kW,)",torch.nn.functional.avg_pool1d.yaml,2
1791,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padW,).",torch.nn.functional.avg_pool1d.yaml,2
1792,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sW,).",torch.nn.functional.avg_pool1d.yaml,2
1793,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.functional.conv2d.yaml,2
1794,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.conv2d.yaml,2
1795,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.conv2d.yaml,2
1796,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv_transpose3d.yaml,2
1797,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(out_padT, out_padH, out_padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1798,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padT, padH, padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1799,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sT, sH, sW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1800,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})",Can be a variable number of arguments or a collection like a list or tuple.,torch.rand.yaml,2
1801,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(dW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1802,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})",Can be a single number or a tuple `(out_padW)`.,torch.nn.functional.conv_transpose1d.yaml,2
1803,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1804,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1805,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.functional.avg_pool2d.yaml,2
1806,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.avg_pool2d.yaml,2
1807,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.avg_pool2d.yaml,2
1808,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (dW,).",torch.nn.functional.conv1d.yaml,2
1809,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (padW,).",torch.nn.functional.conv1d.yaml,2
1810,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (sW,).",torch.nn.functional.conv1d.yaml,2
1811,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv3d.yaml,2
1812,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padT, padH, padW).",torch.nn.functional.conv3d.yaml,2
1813,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.conv3d.yaml,2
1814,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})",Can be a variable number of arguments or a collection like a list or tuple.,torch.ones.yaml,2
1815,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.quantized.functional.conv2d.yaml,2
1816,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.conv2d.yaml,2
1817,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.conv2d.yaml,2
1818,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})",Can be a variable number of arguments or a collection like a list or tuple.,torch.zeros.yaml,2
1819,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})",Can be a variable number of arguments or a collection like a list or tuple.,torch.randn.yaml,2
1820,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dD, dH, dW).",torch.nn.quantized.functional.conv3d.yaml,2
1821,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padD, padH, padW).",torch.nn.quantized.functional.conv3d.yaml,2
1822,92,0.020564323290291727,43,"frozenset({'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sD, sH, sW).",torch.nn.quantized.functional.conv3d.yaml,2
1823,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1824,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
1825,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1826,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
1827,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",Tensor to be broadcast from current process.,torch.distributed.all_gather.yaml,2
1828,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1829,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
1830,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1831,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
1832,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1833,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
1834,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",List of tensors(on different GPUs) to be broadcast from current process.,torch.distributed.all_gather_multigpu.yaml,2
1835,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1836,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
1837,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1838,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
1839,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1840,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
1841,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1842,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
1843,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1844,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
1845,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1846,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
1847,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1848,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
1849,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1850,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
1851,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1852,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
1853,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1854,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
1855,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1856,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
1857,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1858,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
1859,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1860,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
1861,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1862,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
1863,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1864,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
1865,106,0.020564323290291727,43,"frozenset({'current', 'tensor'})","Data to be sent if `src` is the rank of current process, and tensor to be used to save received data otherwise.",torch.distributed.broadcast.yaml,2
1866,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
1867,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,3
1868,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
1869,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,3
1870,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
1871,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,3
1872,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
1873,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,3
1874,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
1875,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,3
1876,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
1877,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,3
1878,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
1879,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,3
1880,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
1881,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,3
1882,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
1883,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,3
1884,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
1885,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,3
1886,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
1887,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,3
1888,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
1889,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,3
1890,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
1891,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,3
1892,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
1893,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,3
1894,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
1895,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,3
1896,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
1897,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,3
1898,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
1899,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,3
1900,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
1901,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,3
1902,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
1903,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,3
1904,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
1905,164,0.01912960306073649,40,"frozenset({'current', 'tensor', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,3
1906,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1907,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1908,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Otherwise, the dtype is inferred to be torch.int64.",torch.arange.yaml,2
1909,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1910,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Only `torch.strided` (dense layout) is supported.,torch.hann_window.yaml,2
1911,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1912,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1913,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1914,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
1915,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Default: `torch.int64`.,torch.randperm.yaml,2
1916,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
1917,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
1918,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
1919,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",A Python function or `torch.nn.Module` that will be run with `example_inputs`.,torch.jit.trace.yaml,2
1920,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","When a module is passed to `torch.jit.trace`, only the `forward` method is run and traced (see `torch.jit.trace` for details).",torch.jit.trace.yaml,2
1921,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
1922,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
1923,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","a function, `torch.device`, string or a dict specifying how to remap storage locations",torch.load.yaml,2
1924,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
1925,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
1926,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
1927,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Only `torch.strided` (dense layout) is supported.,torch.hamming_window.yaml,2
1928,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
1929,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Only `torch.strided` (dense layout) is supported.,torch.blackman_window.yaml,2
1930,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
1931,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
1932,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Only `torch.strided` (dense layout) is supported.,torch.bartlett_window.yaml,2
1933,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
1934,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",A simplified version of `map_location` in `torch.save` used to dynamically remap storages to an alternative set of devices.,torch.jit.load.yaml,2
1935,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",A `torch.nn.Sequential` or the list of modules or functions (comprising the model) to run sequentially.,torch.utils.checkpoint.checkpoint_sequential.yaml,2
1936,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
1937,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
1938,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",Will be cast to a `torch.LongTensor` internally.,torch.sparse_coo_tensor.yaml,2
1939,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
1940,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
1941,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
1942,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
1943,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
1944,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
1945,88,0.01912960306073649,40,"frozenset({'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
1946,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (kT, kH, kW)",torch.nn.functional.avg_pool3d.yaml,2
1947,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padT, padH, padW), Default: 0",torch.nn.functional.avg_pool3d.yaml,2
1948,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.avg_pool3d.yaml,2
1949,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.quantized.functional.avg_pool2d.yaml,2
1950,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1951,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.avg_pool2d.yaml,2
1952,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(dH, dW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1953,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(out_padH, out_padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1954,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(padH, padW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1955,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(sH, sW)`.",torch.nn.functional.conv_transpose2d.yaml,2
1956,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (kW,)",torch.nn.functional.avg_pool1d.yaml,2
1957,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padW,).",torch.nn.functional.avg_pool1d.yaml,2
1958,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sW,).",torch.nn.functional.avg_pool1d.yaml,2
1959,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.functional.conv2d.yaml,2
1960,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.conv2d.yaml,2
1961,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.conv2d.yaml,2
1962,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv_transpose3d.yaml,2
1963,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(out_padT, out_padH, out_padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1964,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(padT, padH, padW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1965,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(sT, sH, sW)`.",torch.nn.functional.conv_transpose3d.yaml,2
1966,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(dW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1967,138,0.018651362984218076,39,"frozenset({'single', 'number'})",Can be a single number or a tuple `(out_padW)`.,torch.nn.functional.conv_transpose1d.yaml,2
1968,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(padW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1969,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple `(sW,)`.",torch.nn.functional.conv_transpose1d.yaml,2
1970,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.functional.avg_pool2d.yaml,2
1971,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.avg_pool2d.yaml,2
1972,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.avg_pool2d.yaml,2
1973,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a one-element tuple (dW,).",torch.nn.functional.conv1d.yaml,2
1974,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a one-element tuple (padW,).",torch.nn.functional.conv1d.yaml,2
1975,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a one-element tuple (sW,).",torch.nn.functional.conv1d.yaml,2
1976,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv3d.yaml,2
1977,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padT, padH, padW).",torch.nn.functional.conv3d.yaml,2
1978,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.conv3d.yaml,2
1979,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.quantized.functional.conv2d.yaml,2
1980,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.conv2d.yaml,2
1981,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.conv2d.yaml,2
1982,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (dD, dH, dW).",torch.nn.quantized.functional.conv3d.yaml,2
1983,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (padD, padH, padW).",torch.nn.quantized.functional.conv3d.yaml,2
1984,138,0.018651362984218076,39,"frozenset({'single', 'number'})","Can be a single number or a tuple (sD, sH, sW).",torch.nn.quantized.functional.conv3d.yaml,2
1985,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1986,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
1987,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1988,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
1989,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1990,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
1991,149,0.018651362984218076,39,"frozenset({'torch', 'see'})",See Notes under `torch.nn.Embedding` for more details regarding sparse gradients.,torch.nn.functional.embedding.yaml,2
1992,149,0.018651362984218076,39,"frozenset({'torch', 'see'})",See documentation of valid entries for argument `p` in `torch.norm()`.,torch.nn.utils.prune.ln_structured.yaml,2
1993,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1994,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
1995,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1996,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
1997,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1998,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
1999,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
2000,149,0.018651362984218076,39,"frozenset({'torch', 'see'})",a function or a dict specifying how to remap storage locations (see torch.load),torch.utils.model_zoo.load_url.yaml,2
2001,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
2002,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","When a module is passed to `torch.jit.trace`, only the `forward` method is run and traced (see `torch.jit.trace` for details).",torch.jit.trace.yaml,2
2003,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
2004,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2005,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2006,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2007,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2008,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2009,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2010,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
2011,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2012,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2013,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2014,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2015,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
2016,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
2017,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2018,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2019,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2020,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2021,149,0.018651362984218076,39,"frozenset({'torch', 'see'})",a function or a dict specifying how to remap storage locations (see torch.load),torch.hub.load_state_dict_from_url.yaml,2
2022,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2023,149,0.018651362984218076,39,"frozenset({'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2024,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.cummax.yaml,2
2025,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of 2 or more 2-D tensors whose product is to be determined.,torch.chain_matmul.yaml,2
2026,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a Python function that takes Tensor inputs and returns a tuple of Tensors or a Tensor.,torch.autograd.functional.vjp.yaml,2
2027,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a Python function that takes Tensor inputs and returns a Tensor or a tuple of Tensors,torch.autograd.gradgradcheck.yaml,2
2028,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a Python function that takes Tensor inputs and returns a tuple of Tensors or a Tensor.,torch.autograd.functional.jvp.yaml,2
2029,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",an iterable of Tensors or a single Tensor that will have gradients normalized,torch.nn.utils.clip_grad_norm_.yaml,2
2030,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",an iterable of Tensors or a single Tensor that will have gradients normalized,torch.nn.utils.clip_grad_value_.yaml,2
2031,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.cummin.yaml,2
2032,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,2
2033,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
2034,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a Python function that takes Tensor inputs and returns a tuple of Tensors or a Tensor.,torch.autograd.functional.jacobian.yaml,2
2035,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})"," If args is a Tensor, this is equivalent to having called it with a 1-ary tuple of that Tensor.",torch.onnx.export.yaml,2
2036,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the tuple of two output tensors (min, min_indices)",torch.min2.yaml,2
2037,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
2038,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","iterable of ints, specifying among which devices the tensor should be scattered.",torch.cuda.comm.scatter.yaml,2
2039,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the result tuple of two output tensors (max, max_indices)",torch.median2.yaml,2
2040,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the output tuple of (Tensor, Tensor)",torch.symeig.yaml,2
2041,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",List of tensors(on different GPUs) to be broadcast from current process.,torch.distributed.all_gather_multigpu.yaml,2
2042,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","If `get_infos` is `True`, then the elements in the tuple are Tensor, IntTensor, and IntTensor.",torch.lu.yaml,2
2043,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","If `get_infos` is `False`, then the elements in the tuple are Tensor, IntTensor.",torch.lu.yaml,2
2044,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
2045,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",an iterable of tensors to add.,torch.cuda.comm.reduce_add.yaml,2
2046,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
2047,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",sequence of tensors to concatenate,torch.stack.yaml,2
2048,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
2049,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the result tuple of two output tensors (max, max_indices)",torch.max2.yaml,2
2050,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",`example_inputs` may also be a single Tensor in which case it is automatically wrapped in a tuple.,torch.jit.trace.yaml,2
2051,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
2052,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","tuple of Q and R tensors satisfying `input = torch.matmul(Q, R)`.",torch.qr.yaml,2
2053,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a Python function that takes Tensor inputs and returns a Tensor or a tuple of Tensors,torch.autograd.gradcheck.yaml,2
2054,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the result tuple of two output tensors (values, indices)",torch.mode.yaml,2
2055,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",any python sequence of tensors of the same type.,torch.cat.yaml,2
2056,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","List of tensors to scatter (default is None, must be specified on the source rank)",torch.distributed.scatter.yaml,2
2057,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","the output tuple of (Tensor, Tensor)",torch.geqrf.yaml,2
2058,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
2059,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",the output tuple of tensors,torch.svd.yaml,2
2060,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
2061,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})",iterable of tensors to gather.,torch.cuda.comm.gather.yaml,2
2062,95,0.018651362984218076,39,"frozenset({'SOME_STRUCTURE', 'tensor'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
2063,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kT, kH, kW)",torch.nn.functional.avg_pool3d.yaml,3
2064,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padT, padH, padW), Default: 0",torch.nn.functional.avg_pool3d.yaml,3
2065,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.avg_pool3d.yaml,3
2066,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.quantized.functional.avg_pool2d.yaml,3
2067,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.avg_pool2d.yaml,3
2068,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.avg_pool2d.yaml,3
2069,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(dH, dW)`.",torch.nn.functional.conv_transpose2d.yaml,3
2070,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(out_padH, out_padW)`.",torch.nn.functional.conv_transpose2d.yaml,3
2071,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padH, padW)`.",torch.nn.functional.conv_transpose2d.yaml,3
2072,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sH, sW)`.",torch.nn.functional.conv_transpose2d.yaml,3
2073,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kW,)",torch.nn.functional.avg_pool1d.yaml,3
2074,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padW,).",torch.nn.functional.avg_pool1d.yaml,3
2075,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sW,).",torch.nn.functional.avg_pool1d.yaml,3
2076,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.functional.conv2d.yaml,3
2077,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.conv2d.yaml,3
2078,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.conv2d.yaml,3
2079,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv_transpose3d.yaml,3
2080,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(out_padT, out_padH, out_padW)`.",torch.nn.functional.conv_transpose3d.yaml,3
2081,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padT, padH, padW)`.",torch.nn.functional.conv_transpose3d.yaml,3
2082,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sT, sH, sW)`.",torch.nn.functional.conv_transpose3d.yaml,3
2083,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(dW,)`.",torch.nn.functional.conv_transpose1d.yaml,3
2084,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})",Can be a single number or a tuple `(out_padW)`.,torch.nn.functional.conv_transpose1d.yaml,3
2085,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(padW,)`.",torch.nn.functional.conv_transpose1d.yaml,3
2086,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple `(sW,)`.",torch.nn.functional.conv_transpose1d.yaml,3
2087,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (kH, kW)",torch.nn.functional.avg_pool2d.yaml,3
2088,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.functional.avg_pool2d.yaml,3
2089,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.functional.avg_pool2d.yaml,3
2090,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (dW,).",torch.nn.functional.conv1d.yaml,3
2091,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (padW,).",torch.nn.functional.conv1d.yaml,3
2092,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a one-element tuple (sW,).",torch.nn.functional.conv1d.yaml,3
2093,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dT, dH, dW).",torch.nn.functional.conv3d.yaml,3
2094,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padT, padH, padW).",torch.nn.functional.conv3d.yaml,3
2095,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sT, sH, sW).",torch.nn.functional.conv3d.yaml,3
2096,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dH, dW).",torch.nn.quantized.functional.conv2d.yaml,3
2097,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padH, padW).",torch.nn.quantized.functional.conv2d.yaml,3
2098,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sH, sW).",torch.nn.quantized.functional.conv2d.yaml,3
2099,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (dD, dH, dW).",torch.nn.quantized.functional.conv3d.yaml,3
2100,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (padD, padH, padW).",torch.nn.quantized.functional.conv3d.yaml,3
2101,181,0.018651362984218076,39,"frozenset({'single', 'SOME_STRUCTURE', 'number'})","Can be a single number or a tuple (sD, sH, sW).",torch.nn.quantized.functional.conv3d.yaml,3
2102,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2103,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2104,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,3
2105,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2106,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2107,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2108,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2109,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2110,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2111,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2112,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2113,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,3
2114,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,3
2115,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2116,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,3
2117,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2118,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,3
2119,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2120,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2121,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2122,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2123,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2124,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2125,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2126,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2127,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,3
2128,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2129,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2130,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2131,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2132,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2133,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2134,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2135,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2136,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2137,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2138,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,3
2139,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2140,197,0.018651362984218076,39,"frozenset({'data', 'type', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,3
2141,124,0.018173122907699665,38,"frozenset({'desired', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
2142,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
2143,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.arange.yaml,2
2144,124,0.018173122907699665,38,"frozenset({'desired', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
2145,124,0.018173122907699665,38,"frozenset({'desired', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
2146,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
2147,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
2148,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
2149,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
2150,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
2151,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
2152,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.rand.yaml,2
2153,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.eye.yaml,2
2154,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
2155,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
2156,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.ones.yaml,2
2157,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.randperm.yaml,2
2158,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
2159,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
2160,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
2161,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.linspace.yaml,2
2162,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
2163,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
2164,124,0.018173122907699665,38,"frozenset({'desired', 'type'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
2165,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.norm.yaml,2
2166,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
2167,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
2168,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
2169,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.logspace.yaml,2
2170,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
2171,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.tensor.yaml,2
2172,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
2173,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
2174,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.zeros.yaml,2
2175,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
2176,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.randn.yaml,2
2177,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
2178,124,0.018173122907699665,38,"frozenset({'desired', 'type'})",the desired data type of returned tensor.,torch.full.yaml,2
2179,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2180,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2181,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,3
2182,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2183,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2184,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2185,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2186,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2187,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2188,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2189,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2190,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,3
2191,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,3
2192,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2193,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2194,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,3
2195,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2196,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2197,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2198,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2199,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2200,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2201,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2202,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2203,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,3
2204,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2205,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2206,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2207,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2208,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2209,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2210,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2211,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2212,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2213,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2214,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,3
2215,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2216,212,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,3
2217,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2218,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2219,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,3
2220,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2221,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2222,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2223,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2224,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2225,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2226,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2227,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2228,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,3
2229,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,3
2230,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2231,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2232,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,3
2233,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2234,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2235,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2236,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2237,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2238,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2239,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2240,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2241,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,3
2242,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2243,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2244,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2245,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2246,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2247,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2248,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2249,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2250,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2251,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2252,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,3
2253,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2254,213,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,3
2255,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2256,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2257,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2258,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2259,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
2260,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2261,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2262,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2263,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2264,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2265,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2266,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
2267,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2268,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2269,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
2270,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
2271,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
2272,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
2273,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2274,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2275,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2276,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2277,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2278,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2279,121,0.018173122907699665,38,"frozenset({'default', 'uses'})",By default uses the same backend as the global group.,torch.distributed.new_group.yaml,2
2280,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
2281,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2282,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2283,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2284,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2285,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
2286,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
2287,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2288,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2289,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2290,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2291,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2292,121,0.018173122907699665,38,"frozenset({'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2293,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,4
2294,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.empty_strided.yaml,4
2295,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.arange.yaml,4
2296,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,4
2297,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,4
2298,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.ones_like.yaml,4
2299,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.empty_like.yaml,4
2300,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.hann_window.yaml,4
2301,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,4
2302,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,4
2303,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,4
2304,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.rand.yaml,4
2305,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.eye.yaml,4
2306,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.randn_like.yaml,4
2307,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,4
2308,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.ones.yaml,4
2309,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.randperm.yaml,4
2310,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.cumprod.yaml,4
2311,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.triu_indices.yaml,4
2312,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.tril_indices.yaml,4
2313,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.linspace.yaml,4
2314,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,4
2315,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.hamming_window.yaml,4
2316,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,4
2317,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.norm.yaml,4
2318,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.blackman_window.yaml,4
2319,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.as_tensor.yaml,4
2320,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,4
2321,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.logspace.yaml,4
2322,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,4
2323,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.tensor.yaml,4
2324,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,4
2325,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.cumsum.yaml,4
2326,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.zeros.yaml,4
2327,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,4
2328,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.randn.yaml,4
2329,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned Tensor.,torch.rand_like.yaml,4
2330,248,0.018173122907699665,38,"frozenset({'desired', 'type', 'tensor', 'data'})",the desired data type of returned tensor.,torch.full.yaml,4
2331,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,4
2332,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.empty_strided.yaml,4
2333,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.arange.yaml,4
2334,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,4
2335,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,4
2336,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.ones_like.yaml,4
2337,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.empty_like.yaml,4
2338,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.hann_window.yaml,4
2339,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,4
2340,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,4
2341,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,4
2342,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.rand.yaml,4
2343,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.eye.yaml,4
2344,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.randn_like.yaml,4
2345,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,4
2346,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.ones.yaml,4
2347,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.randperm.yaml,4
2348,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.cumprod.yaml,4
2349,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.triu_indices.yaml,4
2350,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.tril_indices.yaml,4
2351,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.linspace.yaml,4
2352,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,4
2353,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.hamming_window.yaml,4
2354,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,4
2355,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.norm.yaml,4
2356,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.blackman_window.yaml,4
2357,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.as_tensor.yaml,4
2358,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,4
2359,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.logspace.yaml,4
2360,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,4
2361,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.tensor.yaml,4
2362,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,4
2363,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.cumsum.yaml,4
2364,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.zeros.yaml,4
2365,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,4
2366,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.randn.yaml,4
2367,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned Tensor.,torch.rand_like.yaml,4
2368,247,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'data'})",the desired data type of returned tensor.,torch.full.yaml,4
2369,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2370,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2371,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,3
2372,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2373,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2374,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2375,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2376,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2377,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2378,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2379,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2380,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,3
2381,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,3
2382,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2383,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2384,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,3
2385,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2386,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2387,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2388,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2389,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2390,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2391,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2392,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2393,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,3
2394,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2395,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2396,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2397,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2398,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2399,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2400,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2401,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2402,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2403,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2404,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,3
2405,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2406,192,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,3
2407,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,4
2408,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,4
2409,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,4
2410,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,4
2411,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,4
2412,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,4
2413,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,4
2414,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,4
2415,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,4
2416,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,4
2417,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,4
2418,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,4
2419,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,4
2420,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,4
2421,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,4
2422,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,4
2423,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,4
2424,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,4
2425,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,4
2426,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,4
2427,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,4
2428,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,4
2429,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,4
2430,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,4
2431,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,4
2432,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,4
2433,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,4
2434,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,4
2435,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,4
2436,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,4
2437,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,4
2438,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,4
2439,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,4
2440,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,4
2441,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,4
2442,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,4
2443,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,4
2444,249,0.018173122907699665,38,"frozenset({'data', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,4
2445,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2446,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2447,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,3
2448,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2449,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2450,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2451,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2452,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2453,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2454,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2455,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2456,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,3
2457,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,3
2458,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2459,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2460,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,3
2461,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2462,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2463,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2464,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2465,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2466,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2467,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2468,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2469,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,3
2470,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2471,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2472,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2473,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2474,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2475,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2476,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2477,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2478,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2479,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2480,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,3
2481,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2482,193,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,3
2483,110,0.018173122907699665,38,"frozenset({'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
2484,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
2485,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,2
2486,110,0.018173122907699665,38,"frozenset({'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
2487,110,0.018173122907699665,38,"frozenset({'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
2488,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
2489,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
2490,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
2491,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
2492,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
2493,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
2494,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,2
2495,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,2
2496,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
2497,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
2498,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,2
2499,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,2
2500,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
2501,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
2502,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
2503,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,2
2504,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
2505,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
2506,110,0.018173122907699665,38,"frozenset({'data', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
2507,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,2
2508,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
2509,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
2510,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
2511,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,2
2512,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
2513,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,2
2514,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
2515,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
2516,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,2
2517,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
2518,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,2
2519,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
2520,110,0.018173122907699665,38,"frozenset({'data', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,2
2521,109,0.018173122907699665,38,"frozenset({'desired', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
2522,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
2523,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.arange.yaml,2
2524,109,0.018173122907699665,38,"frozenset({'desired', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
2525,109,0.018173122907699665,38,"frozenset({'desired', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
2526,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
2527,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
2528,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
2529,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
2530,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
2531,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
2532,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.rand.yaml,2
2533,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.eye.yaml,2
2534,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
2535,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
2536,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.ones.yaml,2
2537,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.randperm.yaml,2
2538,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
2539,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
2540,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
2541,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.linspace.yaml,2
2542,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
2543,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
2544,109,0.018173122907699665,38,"frozenset({'desired', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
2545,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.norm.yaml,2
2546,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
2547,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
2548,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
2549,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.logspace.yaml,2
2550,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
2551,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.tensor.yaml,2
2552,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
2553,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
2554,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.zeros.yaml,2
2555,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
2556,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.randn.yaml,2
2557,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
2558,109,0.018173122907699665,38,"frozenset({'desired', 'data'})",the desired data type of returned tensor.,torch.full.yaml,2
2559,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,4
2560,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,4
2561,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,4
2562,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,4
2563,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,4
2564,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,4
2565,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,4
2566,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,4
2567,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,4
2568,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,4
2569,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,4
2570,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,4
2571,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,4
2572,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,4
2573,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,4
2574,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,4
2575,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,4
2576,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,4
2577,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,4
2578,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,4
2579,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,4
2580,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,4
2581,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,4
2582,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,4
2583,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,4
2584,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,4
2585,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,4
2586,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,4
2587,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,4
2588,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,4
2589,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,4
2590,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,4
2591,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,4
2592,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,4
2593,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,4
2594,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,4
2595,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,4
2596,246,0.018173122907699665,38,"frozenset({'desired', 'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,4
2597,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2598,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2599,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,3
2600,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2601,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2602,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2603,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2604,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2605,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2606,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2607,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2608,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,3
2609,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,3
2610,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2611,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2612,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,3
2613,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2614,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2615,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2616,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2617,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2618,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2619,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2620,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2621,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,3
2622,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2623,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2624,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2625,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2626,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2627,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2628,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2629,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2630,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2631,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2632,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,3
2633,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2634,226,0.018173122907699665,38,"frozenset({'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,3
2635,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,4
2636,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,4
2637,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,4
2638,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,4
2639,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,4
2640,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,4
2641,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,4
2642,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,4
2643,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,4
2644,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,4
2645,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,4
2646,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,4
2647,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,4
2648,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,4
2649,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,4
2650,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,4
2651,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,4
2652,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,4
2653,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,4
2654,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,4
2655,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,4
2656,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,4
2657,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,4
2658,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,4
2659,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,4
2660,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,4
2661,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,4
2662,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,4
2663,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,4
2664,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,4
2665,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,4
2666,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,4
2667,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,4
2668,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,4
2669,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,4
2670,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,4
2671,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,4
2672,260,0.018173122907699665,38,"frozenset({'desired', 'type', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,4
2673,147,0.018173122907699665,38,"frozenset({'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,2
2674,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,2
2675,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,2
2676,147,0.018173122907699665,38,"frozenset({'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,2
2677,147,0.018173122907699665,38,"frozenset({'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,2
2678,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,2
2679,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,2
2680,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,2
2681,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,2
2682,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,2
2683,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,2
2684,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,2
2685,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,2
2686,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,2
2687,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,2
2688,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,2
2689,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,2
2690,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,2
2691,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,2
2692,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,2
2693,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,2
2694,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,2
2695,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,2
2696,147,0.018173122907699665,38,"frozenset({'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,2
2697,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,2
2698,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,2
2699,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,2
2700,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,2
2701,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,2
2702,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,2
2703,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,2
2704,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,2
2705,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,2
2706,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,2
2707,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,2
2708,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,2
2709,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,2
2710,147,0.018173122907699665,38,"frozenset({'type', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,2
2711,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,5
2712,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,5
2713,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,5
2714,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,5
2715,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,5
2716,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,5
2717,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,5
2718,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,5
2719,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,5
2720,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,5
2721,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,5
2722,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,5
2723,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,5
2724,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,5
2725,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,5
2726,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,5
2727,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,5
2728,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,5
2729,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,5
2730,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,5
2731,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,5
2732,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,5
2733,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,5
2734,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,5
2735,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,5
2736,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,5
2737,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,5
2738,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,5
2739,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,5
2740,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,5
2741,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,5
2742,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,5
2743,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,5
2744,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,5
2745,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,5
2746,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,5
2747,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,5
2748,269,0.018173122907699665,38,"frozenset({'desired', 'data', 'tensor', 'type', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,5
2749,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2750,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2751,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.arange.yaml,3
2752,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2753,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2754,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2755,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2756,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2757,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2758,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2759,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2760,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.rand.yaml,3
2761,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.eye.yaml,3
2762,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2763,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2764,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.ones.yaml,3
2765,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2766,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2767,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2768,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2769,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2770,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2771,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2772,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2773,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.norm.yaml,3
2774,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2775,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2776,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2777,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2778,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2779,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2780,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2781,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2782,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2783,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2784,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.randn.yaml,3
2785,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2786,196,0.018173122907699665,38,"frozenset({'data', 'type', 'returned'})",the desired data type of returned tensor.,torch.full.yaml,3
2787,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2788,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2789,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.arange.yaml,3
2790,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2791,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2792,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2793,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2794,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2795,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2796,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2797,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2798,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.rand.yaml,3
2799,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.eye.yaml,3
2800,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2801,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2802,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.ones.yaml,3
2803,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2804,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2805,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2806,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2807,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2808,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2809,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2810,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2811,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.norm.yaml,3
2812,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2813,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2814,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2815,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2816,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2817,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2818,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2819,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2820,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2821,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2822,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.randn.yaml,3
2823,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2824,195,0.018173122907699665,38,"frozenset({'data', 'returned', 'tensor'})",the desired data type of returned tensor.,torch.full.yaml,3
2825,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod2.yaml,3
2826,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.empty_strided.yaml,3
2827,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.arange.yaml,3
2828,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum2.yaml,3
2829,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.sum.yaml,3
2830,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.ones_like.yaml,3
2831,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.empty_like.yaml,3
2832,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.hann_window.yaml,3
2833,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.sparse.sum.yaml,3
2834,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.quantize_per_channel.yaml,3
2835,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.zeros_like.yaml,3
2836,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.rand.yaml,3
2837,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.eye.yaml,3
2838,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.randn_like.yaml,3
2839,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.nn.functional.log_softmax.yaml,3
2840,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.ones.yaml,3
2841,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.randperm.yaml,3
2842,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.cumprod.yaml,3
2843,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.triu_indices.yaml,3
2844,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.tril_indices.yaml,3
2845,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.linspace.yaml,3
2846,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.quantize_per_tensor.yaml,3
2847,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.hamming_window.yaml,3
2848,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})","the desired data type of returned tensor.If specified, the input tensor is casted to `dtype` before the operationis performed.",torch.prod.yaml,3
2849,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.norm.yaml,3
2850,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.blackman_window.yaml,3
2851,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.as_tensor.yaml,3
2852,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.bartlett_window.yaml,3
2853,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.logspace.yaml,3
2854,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmin.yaml,3
2855,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.tensor.yaml,3
2856,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.sparse_coo_tensor.yaml,3
2857,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.cumsum.yaml,3
2858,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.zeros.yaml,3
2859,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.nn.functional.softmax.yaml,3
2860,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.randn.yaml,3
2861,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned Tensor.,torch.rand_like.yaml,3
2862,194,0.018173122907699665,38,"frozenset({'desired', 'type', 'data'})",the desired data type of returned tensor.,torch.full.yaml,3
2863,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2864,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2865,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2866,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2867,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
2868,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2869,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2870,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2871,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2872,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2873,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2874,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
2875,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2876,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2877,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
2878,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
2879,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
2880,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
2881,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2882,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2883,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2884,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2885,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2886,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2887,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
2888,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2889,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2890,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2891,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2892,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
2893,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
2894,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2895,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2896,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2897,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2898,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2899,137,0.017694882831181254,37,"frozenset({'none', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2900,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2901,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
2902,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2903,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
2904,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
2905,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
2906,104,0.017694882831181254,37,"frozenset({'default', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
2907,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
2908,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2909,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
2910,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2911,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2912,104,0.017694882831181254,37,"frozenset({'default', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
2913,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
2914,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
2915,104,0.017694882831181254,37,"frozenset({'default', 'current'})",a device on which the output will be placed (default: current device).,torch.cuda.comm.reduce_add.yaml,2
2916,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2917,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
2918,104,0.017694882831181254,37,"frozenset({'default', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
2919,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
2920,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
2921,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2922,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2923,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
2924,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2925,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
2926,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
2927,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
2928,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
2929,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
2930,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
2931,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
2932,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
2933,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
2934,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
2935,104,0.017694882831181254,37,"frozenset({'default', 'current'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
2936,104,0.017694882831181254,37,"frozenset({'default', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
2937,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
2938,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
2939,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
2940,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
2941,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
2942,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
2943,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
2944,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
2945,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
2946,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
2947,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
2948,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
2949,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
2950,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
2951,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
2952,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
2953,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
2954,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
2955,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
2956,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
2957,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
2958,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
2959,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
2960,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
2961,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
2962,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
2963,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
2964,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
2965,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
2966,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
2967,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
2968,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
2969,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
2970,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
2971,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
2972,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
2973,203,0.017694882831181254,37,"frozenset({'none', 'default', 'uses'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
2974,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2975,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
2976,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2977,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
2978,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2979,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
2980,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2981,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
2982,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2983,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
2984,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2985,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
2986,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
2987,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
2988,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,2
2989,135,0.017694882831181254,37,"frozenset({'none', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
2990,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
2991,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,2
2992,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2993,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
2994,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2995,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
2996,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2997,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
2998,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
2999,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3000,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3001,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3002,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3003,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
3004,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
3005,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3006,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3007,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3008,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3009,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3010,135,0.017694882831181254,37,"frozenset({'none', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3011,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3012,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,3
3013,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3014,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,3
3015,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,3
3016,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,3
3017,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
3018,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,3
3019,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3020,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,3
3021,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3022,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3023,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
3024,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,3
3025,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,3
3026,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})",a device on which the output will be placed (default: current device).,torch.cuda.comm.reduce_add.yaml,3
3027,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3028,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3029,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
3030,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3031,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3032,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3033,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3034,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,3
3035,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3036,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3037,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3038,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3039,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,3
3040,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3041,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3042,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3043,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,3
3044,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3045,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,3
3046,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,3
3047,162,0.017694882831181254,37,"frozenset({'default', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3048,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",the shape of the output tensor,torch.empty_strided.yaml,2
3049,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv_transpose2d.yaml,2
3050,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.avg_pool1d.yaml,2
3051,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",the shape of the output tensor,torch.as_strided.yaml,2
3052,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",optional bias tensor of shape (out _channels) .,torch.nn.functional.conv2d.yaml,2
3053,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv2d.yaml,2
3054,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",input tensor of shape N  times M .,torch.nn.functional.pdist.yaml,2
3055,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",input tensor of any shape,torch.nn.functional.normalize.yaml,2
3056,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","the divisor, which may be either a number or a tensor of the same shape as the dividend",torch.fmod.yaml,2
3057,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",input tensor of shape B  times P  times M .,torch.cdist.yaml,2
3058,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",input tensor of shape B  times R  times M .,torch.cdist.yaml,2
3059,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv_transpose3d.yaml,2
3060,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
3061,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv_transpose1d.yaml,2
3062,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of arbitrary shape,torch.nn.functional.kl_div.yaml,2
3063,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of the same shape as input,torch.nn.functional.kl_div.yaml,2
3064,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of arbitrary shape,torch.nn.functional.binary_cross_entropy.yaml,2
3065,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of the same shape as input,torch.nn.functional.binary_cross_entropy.yaml,2
3066,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a manual rescaling weight if provided it's repeated to match input tensor shape,torch.nn.functional.binary_cross_entropy.yaml,2
3067,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv1d.yaml,2
3068,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",optional bias tensor of shape (out _channels) .,torch.nn.functional.conv3d.yaml,2
3069,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv3d.yaml,2
3070,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",the divisor that may be either a number or a Tensor of the same shape as the dividend,torch.remainder.yaml,2
3071,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
3072,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
3073,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",non-quantized bias tensor of shape (out _channels) .,torch.nn.quantized.functional.conv2d.yaml,2
3074,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","quantized input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.quantized.functional.conv2d.yaml,2
3075,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","Non-empty tensors provided must have the same shape, except in the cat dimension.",torch.cat.yaml,2
3076,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
3077,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of arbitrary shape,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
3078,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",Tensor of the same shape as input,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
3079,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a manual rescaling weight if provided it's repeated to match input tensor shape,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
3080,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
3081,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
3082,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})",non-quantized bias tensor of shape (out _channels) .,torch.nn.quantized.functional.conv3d.yaml,2
3083,153,0.01721664275466284,36,"frozenset({'shape', 'tensor'})","quantized input tensor of shape (minibatch , in _channels , iD , iH , iW) ",torch.nn.quantized.functional.conv3d.yaml,2
3084,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Must be the same size as the input of `func`.,torch.autograd.functional.hvp.yaml,2
3085,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
3086,128,0.01721664275466284,36,"frozenset({'size', 'input'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,2
3087,128,0.01721664275466284,36,"frozenset({'size', 'input'})","(T, N, C)  where C = number of characters in alphabet including blank, T = input length, and N = batch size.",torch.nn.functional.ctc_loss.yaml,2
3088,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
3089,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Must be the same size as the input of `func`.,torch.autograd.functional.jvp.yaml,2
3090,128,0.01721664275466284,36,"frozenset({'size', 'input'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,2
3091,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Second input (of size matching x1).,torch.nn.functional.cosine_similarity.yaml,2
3092,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Must be the same size as the input of `func`.,torch.autograd.functional.vhp.yaml,2
3093,128,0.01721664275466284,36,"frozenset({'size', 'input'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
3094,128,0.01721664275466284,36,"frozenset({'size', 'input'})","float 1D tensor of scales to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
3095,128,0.01721664275466284,36,"frozenset({'size', 'input'})","integer 1D tensor of offset to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
3096,128,0.01721664275466284,36,"frozenset({'size', 'input'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,2
3097,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input triangular coefficient matrix of size (*, m, m)  where *  is zero or more batch dimensions",torch.triangular_solve.yaml,2
3098,128,0.01721664275466284,36,"frozenset({'size', 'input'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,2
3099,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, m) ",torch.lobpcg.yaml,2
3100,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
3101,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, n)  where k <= n <= m.",torch.lobpcg.yaml,2
3102,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
3103,128,0.01721664275466284,36,"frozenset({'size', 'input'})","input matrix b  of size (*, m, k) , where *  is zero or more batch dimensions",torch.cholesky_solve.yaml,2
3104,128,0.01721664275466284,36,"frozenset({'size', 'input'})","input matrix u  of size (*, m, m) , where *  is zero of more batch dimensions composed of upper or lower triangular Cholesky factor",torch.cholesky_solve.yaml,2
3105,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
3106,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
3107,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
3108,128,0.01721664275466284,36,"frozenset({'size', 'input'})","input square matrix of size (*, m, m) , where *  is zero or more batch dimensions.",torch.solve.yaml,2
3109,128,0.01721664275466284,36,"frozenset({'size', 'input'})","input matrix B  of size (*, m, k)  , where *  is zero or more batch dimensions.",torch.solve.yaml,2
3110,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
3111,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Should be of same size as input tensor.,torch.bincount.yaml,2
3112,128,0.01721664275466284,36,"frozenset({'size', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
3113,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Has to match input size if it is a tuple.,torch.nn.quantized.functional.interpolate.yaml,2
3114,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
3115,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
3116,128,0.01721664275466284,36,"frozenset({'size', 'input'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,2
3117,128,0.01721664275466284,36,"frozenset({'size', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
3118,128,0.01721664275466284,36,"frozenset({'size', 'input'})",Has to match input size if it is a tuple.,torch.nn.functional.interpolate.yaml,2
3119,128,0.01721664275466284,36,"frozenset({'size', 'input'})","the input tensor of size (*, m, n) ",torch.pca_lowrank.yaml,2
3120,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3121,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3122,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3123,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3124,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3125,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3126,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3127,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3128,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3129,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3130,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3131,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3132,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3133,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3134,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,3
3135,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3136,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,3
3137,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3138,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3139,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3140,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3141,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3142,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3143,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3144,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3145,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3146,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3147,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3148,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3149,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3150,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3151,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3152,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3153,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3154,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3155,201,0.01721664275466284,36,"frozenset({'none', 'default', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3156,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3157,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3158,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",a 2-dimensional torch.Tensor,torch.nn.init.eye_.yaml,2
3159,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","an n-dimensional torch.Tensor, where n  >= 2 ",torch.nn.init.orthogonal_.yaml,2
3160,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3161,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.xavier_normal_.yaml,2
3162,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3163,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3164,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","a {3, 4, 5}-dimensional torch.Tensor",torch.nn.init.dirac_.yaml,2
3165,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.zeros_.yaml,2
3166,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3167,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
3168,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
3169,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
3170,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3171,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
3172,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.uniform_.yaml,2
3173,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3174,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.normal_.yaml,2
3175,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","tuple of Q and R tensors satisfying `input = torch.matmul(Q, R)`.",torch.qr.yaml,2
3176,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3177,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
3178,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3179,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3180,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.constant_.yaml,2
3181,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
3182,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
3183,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3184,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3185,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.xavier_uniform_.yaml,2
3186,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.sparse_.yaml,2
3187,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",an n-dimensional torch.Tensor,torch.nn.init.ones_.yaml,2
3188,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3189,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
3190,155,0.01673840267814443,35,"frozenset({'tensor', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
3191,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3192,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3193,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3194,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3195,115,0.01673840267814443,35,"frozenset({'default', 'see'})","If any of start, end, or stop are floating-point, the dtype is inferred to be the default dtype, see `get_default_dtype()`.",torch.arange.yaml,2
3196,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3197,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3198,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3199,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3200,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3201,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3202,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3203,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3204,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
3205,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
3206,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
3207,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3208,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3209,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3210,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3211,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3212,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3213,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
3214,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3215,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3216,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3217,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3218,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
3219,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
3220,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3221,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3222,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3223,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3224,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3225,115,0.01673840267814443,35,"frozenset({'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3226,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3227,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3228,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3229,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3230,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3231,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3232,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3233,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3234,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3235,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3236,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3237,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3238,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3239,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3240,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3241,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3242,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3243,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3244,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3245,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3246,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3247,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3248,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3249,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3250,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3251,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3252,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3253,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3254,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3255,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3256,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3257,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3258,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3259,215,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3260,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3261,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3262,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3263,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3264,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3265,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3266,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3267,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3268,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3269,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3270,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3271,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3272,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3273,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3274,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3275,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3276,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3277,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3278,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3279,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3280,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3281,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3282,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3283,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3284,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3285,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3286,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3287,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3288,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3289,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3290,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3291,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3292,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3293,207,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3294,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3295,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3296,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3297,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3298,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3299,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3300,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3301,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3302,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3303,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3304,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3305,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3306,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3307,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3308,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3309,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3310,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3311,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3312,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3313,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3314,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3315,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3316,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3317,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3318,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3319,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3320,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3321,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3322,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3323,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3324,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3325,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3326,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3327,216,0.016260162601626018,34,"frozenset({'none', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3328,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3329,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3330,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3331,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3332,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3333,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3334,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3335,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3336,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3337,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3338,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3339,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3340,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3341,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3342,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3343,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3344,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3345,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3346,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3347,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3348,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3349,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3350,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3351,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3352,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3353,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3354,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3355,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3356,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3357,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3358,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3359,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3360,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3361,217,0.016260162601626018,34,"frozenset({'none', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3362,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3363,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3364,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3365,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3366,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3367,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3368,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3369,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3370,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3371,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3372,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3373,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3374,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3375,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3376,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3377,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3378,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3379,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3380,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3381,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3382,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3383,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3384,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3385,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3386,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3387,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3388,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3389,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3390,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3391,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3392,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3393,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3394,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3395,206,0.016260162601626018,34,"frozenset({'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3396,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3397,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3398,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3399,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3400,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3401,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3402,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3403,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3404,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3405,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3406,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3407,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3408,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3409,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3410,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3411,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3412,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3413,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3414,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3415,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3416,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3417,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3418,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3419,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3420,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3421,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3422,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3423,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3424,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3425,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3426,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3427,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3428,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3429,210,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3430,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3431,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3432,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3433,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3434,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3435,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3436,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3437,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3438,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3439,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3440,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3441,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3442,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3443,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3444,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3445,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3446,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3447,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3448,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3449,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3450,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3451,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3452,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3453,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3454,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3455,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3456,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3457,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3458,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3459,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3460,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3461,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3462,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3463,205,0.016260162601626018,34,"frozenset({'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3464,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3465,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3466,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3467,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3468,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3469,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3470,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3471,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3472,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3473,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3474,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3475,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3476,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3477,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3478,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3479,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3480,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3481,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3482,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3483,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3484,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3485,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3486,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3487,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3488,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3489,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3490,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3491,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3492,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3493,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3494,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3495,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3496,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3497,204,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3498,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3499,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3500,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3501,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3502,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3503,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3504,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3505,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3506,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3507,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3508,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3509,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3510,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3511,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3512,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3513,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3514,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3515,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3516,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3517,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3518,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3519,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3520,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3521,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3522,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3523,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3524,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3525,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3526,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3527,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3528,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3529,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3530,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3531,208,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3532,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3533,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3534,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3535,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3536,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3537,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3538,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3539,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3540,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3541,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3542,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3543,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3544,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3545,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3546,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3547,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3548,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3549,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3550,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3551,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3552,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3553,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3554,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3555,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3556,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3557,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3558,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3559,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3560,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3561,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3562,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3563,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3564,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3565,218,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3566,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3567,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3568,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3569,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3570,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3571,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3572,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3573,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3574,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3575,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3576,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3577,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3578,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3579,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3580,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3581,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3582,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3583,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3584,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3585,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3586,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3587,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3588,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3589,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3590,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3591,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3592,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3593,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3594,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3595,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3596,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3597,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3598,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3599,199,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3600,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3601,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3602,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3603,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3604,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3605,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3606,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3607,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3608,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3609,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3610,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3611,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3612,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3613,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3614,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3615,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3616,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3617,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3618,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3619,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3620,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3621,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3622,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3623,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3624,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3625,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3626,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3627,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3628,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3629,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3630,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3631,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3632,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3633,219,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3634,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3635,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3636,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3637,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3638,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3639,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3640,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3641,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3642,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3643,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3644,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3645,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3646,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3647,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3648,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3649,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3650,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3651,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3652,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3653,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3654,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3655,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3656,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3657,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3658,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3659,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3660,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3661,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3662,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3663,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3664,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3665,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3666,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3667,198,0.016260162601626018,34,"frozenset({'none', 'default', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3668,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3669,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
3670,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3671,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
3672,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3673,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
3674,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3675,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
3676,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3677,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
3678,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3679,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
3680,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
3681,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
3682,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
3683,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3684,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
3685,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3686,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
3687,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3688,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
3689,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
3690,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3691,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
3692,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3693,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
3694,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
3695,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
3696,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3697,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
3698,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3699,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
3700,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3701,221,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
3702,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3703,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3704,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3705,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3706,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3707,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3708,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3709,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3710,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3711,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3712,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3713,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3714,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
3715,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
3716,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
3717,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3718,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3719,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3720,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3721,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3722,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3723,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
3724,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3725,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3726,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3727,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3728,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
3729,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
3730,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3731,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3732,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3733,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3734,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3735,159,0.016260162601626018,34,"frozenset({'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3736,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,6
3737,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,6
3738,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,6
3739,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,6
3740,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,6
3741,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,6
3742,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,6
3743,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,6
3744,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,6
3745,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,6
3746,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,6
3747,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,6
3748,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,6
3749,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,6
3750,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,6
3751,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,6
3752,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,6
3753,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,6
3754,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,6
3755,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,6
3756,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,6
3757,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,6
3758,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,6
3759,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,6
3760,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,6
3761,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,6
3762,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,6
3763,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,6
3764,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,6
3765,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,6
3766,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,6
3767,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,6
3768,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,6
3769,276,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,6
3770,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3771,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
3772,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3773,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
3774,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3775,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
3776,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3777,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
3778,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3779,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
3780,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3781,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
3782,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
3783,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
3784,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
3785,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3786,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
3787,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3788,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
3789,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3790,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
3791,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
3792,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3793,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
3794,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3795,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
3796,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
3797,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
3798,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3799,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
3800,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3801,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
3802,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3803,152,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
3804,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
3805,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
3806,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
3807,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
3808,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
3809,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
3810,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
3811,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
3812,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
3813,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
3814,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
3815,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
3816,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
3817,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
3818,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
3819,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
3820,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
3821,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
3822,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
3823,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
3824,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
3825,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
3826,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
3827,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
3828,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
3829,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
3830,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
3831,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
3832,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
3833,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
3834,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
3835,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
3836,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
3837,256,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
3838,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3839,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3840,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3841,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3842,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3843,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3844,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3845,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3846,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3847,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3848,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3849,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3850,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
3851,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
3852,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
3853,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3854,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3855,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3856,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3857,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3858,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3859,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
3860,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3861,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3862,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3863,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3864,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
3865,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
3866,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3867,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3868,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3869,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3870,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3871,275,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3872,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3873,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3874,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3875,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3876,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3877,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3878,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3879,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3880,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3881,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3882,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3883,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3884,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
3885,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
3886,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
3887,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3888,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3889,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3890,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3891,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3892,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3893,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
3894,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3895,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3896,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3897,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3898,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
3899,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
3900,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3901,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3902,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3903,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3904,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3905,274,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3906,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3907,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3908,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3909,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3910,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3911,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3912,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3913,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3914,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3915,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3916,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3917,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3918,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
3919,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
3920,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
3921,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3922,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3923,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3924,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3925,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3926,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3927,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
3928,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3929,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3930,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3931,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3932,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
3933,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
3934,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3935,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3936,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3937,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3938,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3939,273,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3940,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3941,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3942,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3943,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3944,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3945,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3946,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3947,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3948,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3949,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3950,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3951,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3952,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
3953,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
3954,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
3955,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3956,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3957,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3958,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3959,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3960,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3961,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
3962,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3963,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3964,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3965,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3966,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
3967,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
3968,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3969,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
3970,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3971,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
3972,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3973,272,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
3974,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3975,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
3976,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3977,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
3978,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3979,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
3980,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3981,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
3982,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3983,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
3984,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3985,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
3986,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
3987,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
3988,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
3989,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3990,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
3991,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3992,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
3993,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3994,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
3995,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
3996,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3997,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
3998,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
3999,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
4000,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
4001,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
4002,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
4003,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
4004,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
4005,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
4006,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
4007,271,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
4008,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
4009,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
4010,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
4011,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
4012,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
4013,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
4014,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
4015,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
4016,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
4017,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
4018,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
4019,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
4020,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
4021,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
4022,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
4023,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
4024,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
4025,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
4026,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
4027,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
4028,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
4029,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
4030,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
4031,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
4032,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
4033,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
4034,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
4035,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
4036,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
4037,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
4038,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
4039,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
4040,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
4041,270,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
4042,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4043,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4044,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4045,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4046,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4047,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4048,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4049,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4050,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4051,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4052,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4053,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4054,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4055,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4056,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4057,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4058,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4059,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4060,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4061,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4062,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4063,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4064,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4065,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4066,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4067,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4068,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4069,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4070,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4071,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4072,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4073,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4074,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4075,266,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4076,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4077,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4078,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4079,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4080,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4081,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4082,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4083,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4084,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4085,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4086,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4087,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4088,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4089,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4090,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4091,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4092,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4093,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4094,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4095,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4096,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4097,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4098,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4099,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4100,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4101,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4102,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4103,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4104,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4105,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4106,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4107,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4108,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4109,264,0.016260162601626018,34,"frozenset({'torch', 'none', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4110,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4111,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4112,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4113,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4114,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4115,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4116,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4117,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4118,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4119,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4120,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4121,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4122,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4123,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4124,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4125,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4126,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4127,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4128,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4129,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4130,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4131,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4132,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4133,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4134,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4135,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4136,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4137,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4138,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4139,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4140,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4141,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4142,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4143,263,0.016260162601626018,34,"frozenset({'none', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4144,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4145,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4146,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4147,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4148,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4149,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4150,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4151,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4152,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4153,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4154,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4155,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4156,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4157,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4158,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4159,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4160,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4161,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4162,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4163,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4164,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4165,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4166,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4167,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4168,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4169,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4170,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4171,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4172,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4173,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4174,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4175,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4176,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4177,262,0.016260162601626018,34,"frozenset({'none', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4178,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4179,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4180,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4181,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4182,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4183,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4184,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4185,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4186,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4187,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4188,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4189,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4190,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4191,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4192,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4193,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4194,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4195,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4196,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4197,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4198,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4199,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4200,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4201,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4202,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4203,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4204,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4205,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4206,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4207,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4208,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4209,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4210,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4211,261,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4212,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4213,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4214,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4215,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4216,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4217,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4218,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4219,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4220,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4221,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4222,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4223,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4224,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4225,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4226,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4227,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4228,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4229,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4230,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4231,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4232,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4233,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4234,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4235,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4236,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4237,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4238,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4239,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4240,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4241,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4242,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4243,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4244,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4245,259,0.016260162601626018,34,"frozenset({'torch', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4246,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4247,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4248,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4249,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4250,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4251,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4252,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4253,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4254,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4255,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4256,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4257,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4258,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4259,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4260,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4261,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4262,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4263,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4264,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4265,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4266,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4267,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4268,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4269,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4270,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4271,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4272,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4273,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4274,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4275,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4276,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4277,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4278,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4279,258,0.016260162601626018,34,"frozenset({'default', 'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4280,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4281,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4282,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4283,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4284,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4285,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4286,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4287,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4288,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4289,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4290,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4291,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4292,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4293,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4294,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4295,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4296,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4297,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4298,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4299,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4300,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4301,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4302,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4303,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4304,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4305,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4306,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4307,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4308,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4309,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4310,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4311,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4312,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4313,257,0.016260162601626018,34,"frozenset({'default', 'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4314,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4315,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4316,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4317,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4318,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4319,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4320,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4321,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4322,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4323,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4324,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4325,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4326,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4327,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4328,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4329,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4330,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4331,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4332,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4333,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4334,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4335,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4336,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4337,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4338,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4339,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4340,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4341,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4342,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4343,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4344,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4345,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4346,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4347,255,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4348,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4349,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4350,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4351,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4352,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4353,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4354,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4355,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4356,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4357,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4358,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4359,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4360,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4361,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4362,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4363,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4364,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4365,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4366,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4367,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4368,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4369,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4370,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4371,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4372,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4373,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4374,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4375,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4376,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4377,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4378,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4379,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4380,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4381,151,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4382,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4383,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4384,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4385,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4386,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4387,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4388,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4389,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4390,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4391,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4392,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4393,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4394,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4395,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4396,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4397,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4398,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4399,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4400,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4401,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4402,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4403,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4404,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4405,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4406,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4407,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4408,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4409,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4410,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4411,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4412,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4413,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4414,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4415,116,0.016260162601626018,34,"frozenset({'default', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4416,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4417,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4418,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4419,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4420,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4421,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4422,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4423,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4424,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4425,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4426,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4427,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4428,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4429,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4430,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4431,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4432,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4433,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4434,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4435,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4436,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4437,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4438,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4439,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4440,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4441,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4442,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4443,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4444,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4445,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4446,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4447,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4448,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4449,254,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4450,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4451,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4452,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4453,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4454,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4455,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4456,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4457,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4458,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4459,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4460,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4461,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4462,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4463,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4464,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4465,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4466,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4467,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4468,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4469,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4470,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4471,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4472,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4473,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4474,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4475,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4476,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4477,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4478,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4479,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4480,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4481,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4482,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4483,253,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'torch'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4484,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4485,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4486,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4487,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4488,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4489,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4490,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4491,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4492,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4493,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4494,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4495,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4496,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4497,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4498,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4499,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4500,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4501,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4502,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4503,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4504,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4505,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4506,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4507,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4508,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4509,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4510,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4511,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4512,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4513,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4514,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4515,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4516,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4517,252,0.016260162601626018,34,"frozenset({'none', 'default', 'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4518,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4519,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4520,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4521,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4522,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4523,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4524,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4525,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4526,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4527,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4528,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4529,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4530,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4531,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4532,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4533,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4534,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4535,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4536,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4537,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4538,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4539,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4540,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4541,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4542,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4543,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4544,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4545,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4546,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4547,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4548,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4549,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4550,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4551,251,0.016260162601626018,34,"frozenset({'none', 'default', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4552,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4553,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4554,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4555,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4556,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4557,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4558,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4559,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4560,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4561,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4562,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4563,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4564,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4565,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4566,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4567,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4568,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4569,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4570,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4571,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4572,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4573,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4574,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4575,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4576,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4577,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4578,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4579,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4580,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4581,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4582,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4583,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4584,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4585,250,0.016260162601626018,34,"frozenset({'none', 'default', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4586,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4587,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4588,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4589,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4590,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4591,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4592,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4593,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4594,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4595,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4596,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4597,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4598,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4599,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4600,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4601,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4602,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4603,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4604,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4605,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4606,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4607,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4608,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4609,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4610,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4611,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4612,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4613,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4614,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4615,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4616,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4617,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4618,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4619,133,0.016260162601626018,34,"frozenset({'none', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4620,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4621,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4622,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4623,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4624,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4625,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4626,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4627,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4628,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4629,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4630,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4631,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4632,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4633,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4634,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4635,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4636,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4637,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4638,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4639,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4640,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4641,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4642,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4643,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4644,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4645,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4646,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4647,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4648,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4649,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4650,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4651,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4652,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4653,230,0.016260162601626018,34,"frozenset({'torch', 'uses', 'set_default_tensor_type'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4654,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4655,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4656,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4657,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4658,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4659,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4660,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4661,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4662,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4663,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4664,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4665,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4666,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4667,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4668,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4669,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4670,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4671,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4672,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4673,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4674,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4675,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4676,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4677,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4678,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4679,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4680,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4681,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4682,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4683,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4684,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4685,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4686,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4687,229,0.016260162601626018,34,"frozenset({'uses', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4688,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4689,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4690,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4691,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4692,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4693,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4694,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4695,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4696,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4697,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4698,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4699,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4700,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4701,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4702,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4703,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4704,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4705,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4706,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4707,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4708,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4709,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4710,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4711,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4712,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4713,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4714,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4715,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4716,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4717,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4718,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4719,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4720,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4721,228,0.016260162601626018,34,"frozenset({'uses', 'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4722,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4723,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4724,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4725,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4726,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4727,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4728,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4729,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4730,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4731,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4732,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4733,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4734,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4735,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4736,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4737,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4738,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4739,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4740,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4741,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4742,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4743,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4744,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4745,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4746,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4747,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4748,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4749,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4750,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4751,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4752,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4753,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4754,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4755,227,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'torch', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4756,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4757,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4758,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4759,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4760,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4761,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4762,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4763,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4764,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4765,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4766,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4767,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4768,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4769,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4770,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4771,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4772,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4773,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4774,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4775,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4776,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4777,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4778,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4779,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4780,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4781,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4782,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4783,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4784,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4785,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4786,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4787,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4788,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4789,148,0.016260162601626018,34,"frozenset({'set_default_tensor_type', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4790,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4791,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4792,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4793,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4794,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4795,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4796,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4797,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4798,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4799,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4800,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4801,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4802,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4803,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4804,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4805,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4806,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4807,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4808,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4809,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4810,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4811,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4812,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4813,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4814,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4815,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4816,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4817,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4818,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4819,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4820,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4821,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4822,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4823,150,0.016260162601626018,34,"frozenset({'uses', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4824,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4825,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
4826,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4827,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
4828,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4829,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
4830,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4831,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
4832,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4833,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
4834,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4835,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
4836,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
4837,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
4838,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
4839,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4840,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
4841,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4842,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
4843,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4844,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
4845,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
4846,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4847,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
4848,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4849,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
4850,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
4851,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
4852,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4853,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
4854,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4855,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
4856,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4857,132,0.016260162601626018,34,"frozenset({'none', 'see'})","Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
4858,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
4859,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,4
4860,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
4861,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,4
4862,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,4
4863,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,4
4864,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,4
4865,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,4
4866,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
4867,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,4
4868,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
4869,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
4870,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,4
4871,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,4
4872,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,4
4873,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
4874,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
4875,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,4
4876,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
4877,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
4878,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
4879,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
4880,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,4
4881,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
4882,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
4883,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
4884,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
4885,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,4
4886,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
4887,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
4888,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
4889,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
4890,232,0.015781922525107604,33,"frozenset({'none', 'current', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
4891,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_max_pool3d.yaml,2
4892,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","A string, or list of strings, containing C++ source code.",torch.utils.cpp_extension.load_inline.yaml,2
4893,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","A string, or list of strings, containing CUDA source code.",torch.utils.cpp_extension.load_inline.yaml,2
4894,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",dictionary that maps float modules to quantized modules to be replaced.,torch.quantization.prepare_qat.yaml,2
4895,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_avg_pool3d.yaml,2
4896,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.quantized.functional.adaptive_avg_pool2d.yaml,2
4897,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
4898,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",an iterable of devices among which to broadcast.,torch.cuda.comm.broadcast_coalesced.yaml,2
4899,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a dictionary that maps from nn module to nnq module,torch.quantization.swap_module.yaml,2
4900,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","a dictionary that maps from float module type to quantized module type, can be overwrritten to allow swapping user defined Modules",torch.quantization.convert.yaml,2
4901,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
4902,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_max_pool2d.yaml,2
4903,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","dictionary that maps from name or type of submodule to quantization configuration, qconfig applies to all submodules of a given module unless qconfig for the submodules are specified (when the submodule already has qconfig attribute)",torch.quantization.propagate_qconfig_.yaml,2
4904,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","iterable of ints, specifying among which devices the tensor should be scattered.",torch.cuda.comm.scatter.yaml,2
4905,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_avg_pool2d.yaml,2
4906,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
4907,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
4908,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
4909,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","a function, `torch.device`, string or a dict specifying how to remap storage locations",torch.load.yaml,2
4910,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",an iterable of devices among which to broadcast.,torch.cuda.comm.broadcast.yaml,2
4911,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","If it is an int, vector norm will be calculated, if it is 2-tuple of ints, matrix norm will be calculated.",torch.norm.yaml,2
4912,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
4913,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.as_tensor.yaml,2
4914,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",A `torch.nn.Sequential` or the list of modules or functions (comprising the model) to run sequentially.,torch.utils.checkpoint.checkpoint_sequential.yaml,2
4915,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.tensor.yaml,2
4916,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.sparse_coo_tensor.yaml,2
4917,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.sparse_coo_tensor.yaml,2
4918,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",Function that takes in a list of modules and outputs a list of fused modules of the same length.,torch.quantization.fuse_modules.yaml,2
4919,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",list of list of module names to fuse.,torch.quantization.fuse_modules.yaml,2
4920,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",Can also be a list of strings if there is only a single list of modules to fuse.,torch.quantization.fuse_modules.yaml,2
4921,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
4922,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
4923,77,0.015781922525107604,33,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
4924,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4925,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,3
4926,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4927,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,3
4928,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,3
4929,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,3
4930,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
4931,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,3
4932,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4933,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,3
4934,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4935,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4936,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
4937,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,3
4938,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,3
4939,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4940,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4941,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
4942,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4943,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4944,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4945,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4946,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,3
4947,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4948,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4949,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4950,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4951,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,3
4952,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4953,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4954,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4955,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4956,163,0.015781922525107604,33,"frozenset({'none', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4957,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
4958,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,3
4959,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
4960,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,3
4961,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,3
4962,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,3
4963,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
4964,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,3
4965,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
4966,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,3
4967,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
4968,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
4969,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
4970,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,3
4971,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,3
4972,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
4973,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
4974,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
4975,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
4976,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
4977,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
4978,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
4979,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,3
4980,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
4981,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
4982,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
4983,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
4984,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,3
4985,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
4986,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
4987,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
4988,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
4989,188,0.015781922525107604,33,"frozenset({'none', 'current', 'default'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
4990,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.quantized.functional.avg_pool2d.yaml,2
4991,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.avg_pool1d.yaml,2
4992,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`.,torch.nn.utils.rnn.pack_padded_sequence.yaml,2
4993,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.irfft.yaml,2
4994,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`.,torch.triangular_solve.yaml,2
4995,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.kl_div.yaml,2
4996,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.kl_div.yaml,2
4997,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.avg_pool2d.yaml,2
4998,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.dropout.yaml,2
4999,119,0.015781922525107604,33,"frozenset({'default', 'true'})",whether or not to display a progress bar to stderr Default: True,torch.hub.download_url_to_file.yaml,2
5000,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default is True.,torch.lobpcg.yaml,2
5001,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.binary_cross_entropy.yaml,2
5002,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.binary_cross_entropy.yaml,2
5003,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`.,torch.nn.utils.rnn.pack_sequence.yaml,2
5004,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.lu.yaml,2
5005,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default is True.,torch.hub.load.yaml,2
5006,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: True,torch.utils.model_zoo.load_url.yaml,2
5007,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.stft.yaml,2
5008,119,0.015781922525107604,33,"frozenset({'default', 'true'})",controls whether to return half of results to avoid redundancy Default: `True`,torch.stft.yaml,2
5009,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.dropout2d.yaml,2
5010,119,0.015781922525107604,33,"frozenset({'default', 'true'})","If `True` (default), imports the produced shared library as a Python module.",torch.utils.cpp_extension.load.yaml,2
5011,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.nll_loss.yaml,2
5012,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.nll_loss.yaml,2
5013,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.dropout3d.yaml,2
5014,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.cross_entropy.yaml,2
5015,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.cross_entropy.yaml,2
5016,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
5017,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.binary_cross_entropy_with_logits.yaml,2
5018,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.poisson_nll_loss.yaml,2
5019,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.poisson_nll_loss.yaml,2
5020,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.nn.functional.poisson_nll_loss.yaml,2
5021,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: True,torch.hub.load_state_dict_from_url.yaml,2
5022,119,0.015781922525107604,33,"frozenset({'default', 'true'})",Default: `True`,torch.rfft.yaml,2
5023,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5024,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_reserved.yaml,2
5025,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5026,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_reserved.yaml,2
5027,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_allocated.yaml,2
5028,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistics for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_stats.yaml,2
5029,105,0.015781922525107604,33,"frozenset({'none', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
5030,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_allocated.yaml,2
5031,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5032,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns the currently selected `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.current_stream.yaml,2
5033,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5034,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5035,105,0.015781922525107604,33,"frozenset({'none', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
5036,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.max_memory_allocated.yaml,2
5037,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns printout for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.memory_summary.yaml,2
5038,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5039,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5040,105,0.015781922525107604,33,"frozenset({'none', 'current'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
5041,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5042,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5043,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5044,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5045,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns the default `Stream` for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.default_stream.yaml,2
5046,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5047,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5048,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5049,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5050,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Returns statistic for the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.reset_max_memory_cached.yaml,2
5051,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5052,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5053,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5054,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5055,105,0.015781922525107604,33,"frozenset({'none', 'current'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5056,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
5057,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,2
5058,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
5059,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,2
5060,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
5061,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","float 1D tensor of scales to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
5062,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","integer 1D tensor of offset to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,2
5063,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,2
5064,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,2
5065,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, m) ",torch.lobpcg.yaml,2
5066,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
5067,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, n)  where k <= n <= m.",torch.lobpcg.yaml,2
5068,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,2
5069,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",It should match `devices` in length and sum to `tensor.size(dim)`.,torch.cuda.comm.scatter.yaml,2
5070,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
5071,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
5072,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the tensor to factor of size (*, m, n) ",torch.lu.yaml,2
5073,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
5074,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
5075,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","If given, has to be a Tensor of size C",torch.nn.functional.nll_loss.yaml,2
5076,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",Should be of same size as input tensor.,torch.bincount.yaml,2
5077,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
5078,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","If given, has to be a Tensor of size C",torch.nn.functional.cross_entropy.yaml,2
5079,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",Size of the sparse tensor.,torch.sparse_coo_tensor.yaml,2
5080,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
5081,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
5082,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,2
5083,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
5084,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
5085,154,0.014347202295552367,30,"frozenset({'size', 'tensor'})","the input tensor of size (*, m, n) ",torch.pca_lowrank.yaml,2
5086,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5087,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5088,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","The `nn.Module`, function, or class type to compile.",torch.jit.script.yaml,2
5089,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5090,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","module must be of type `nn.Module`, and name must be a string.",torch.nn.utils.prune.global_unstructured.yaml,2
5091,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","a dictionary that maps from float module type to quantized module type, can be overwrritten to allow swapping user defined Modules",torch.quantization.convert.yaml,2
5092,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5093,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5094,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","dictionary that maps from name or type of submodule to quantization configuration, qconfig applies to all submodules of a given module unless qconfig for the submodules are specified (when the submodule already has qconfig attribute)",torch.quantization.propagate_qconfig_.yaml,2
5095,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5096,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5097,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5098,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
5099,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5100,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5101,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
5102,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5103,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5104,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5105,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5106,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5107,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5108,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5109,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5110,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5111,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5112,89,0.01291248206599713,27,"frozenset({'type', 'SOME_DTYPE'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
5113,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_max_pool3d.yaml,2
5114,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the result tuple of two output tensors (values, indices)",torch.cummax.yaml,2
5115,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",Output list.,torch.distributed.all_gather.yaml,2
5116,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_avg_pool3d.yaml,2
5117,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the result tuple of two output tensors (values, indices)",torch.cummin.yaml,2
5118,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.quantized.functional.adaptive_avg_pool2d.yaml,2
5119,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
5120,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the tuple of two output tensors (min, min_indices)",torch.min2.yaml,2
5121,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
5122,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_max_pool2d.yaml,2
5123,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_avg_pool2d.yaml,2
5124,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the result tuple of two output tensors (max, max_indices)",torch.median2.yaml,2
5125,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the output tuple of (Tensor, Tensor)",torch.symeig.yaml,2
5126,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",optional output tuple.,torch.lu.yaml,2
5127,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
5128,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
5129,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
5130,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the result tuple of two output tensors (max, max_indices)",torch.max2.yaml,2
5131,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
5132,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",optional output tuple.,torch.solve.yaml,2
5133,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the result tuple of two output tensors (values, indices)",torch.mode.yaml,2
5134,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","the output tuple of (Tensor, Tensor)",torch.geqrf.yaml,2
5135,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
5136,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",the output tuple of tensors,torch.svd.yaml,2
5137,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
5138,93,0.012434241989478718,26,"frozenset({'SOME_STRUCTURE', 'output'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
5139,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5140,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5141,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5142,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5143,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5144,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5145,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5146,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5147,158,0.011956001912960305,25,"frozenset({'type', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
5148,158,0.011956001912960305,25,"frozenset({'type', 'torch'})",Quantized input of type torch.quint8,torch.nn.quantized.functional.linear.yaml,2
5149,158,0.011956001912960305,25,"frozenset({'type', 'torch'})",Quantized weight of type torch.qint8,torch.nn.quantized.functional.linear.yaml,2
5150,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5151,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5152,158,0.011956001912960305,25,"frozenset({'type', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,2
5153,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5154,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5155,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5156,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5157,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5158,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5159,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5160,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5161,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5162,158,0.011956001912960305,25,"frozenset({'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5163,158,0.011956001912960305,25,"frozenset({'type', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,2
5164,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias of shape (out _channels) .,torch.nn.functional.conv_transpose2d.yaml,2
5165,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv_transpose2d.yaml,2
5166,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (in _channels ,  out _channels/groups , kH , kW) ",torch.nn.functional.conv_transpose2d.yaml,2
5167,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.avg_pool1d.yaml,2
5168,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias tensor of shape (out _channels) .,torch.nn.functional.conv2d.yaml,2
5169,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.functional.conv2d.yaml,2
5170,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (out _channels ,  in _channels/groups , kH , kW) ",torch.nn.functional.conv2d.yaml,2
5171,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias of shape (out _channels) .,torch.nn.functional.conv_transpose3d.yaml,2
5172,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv_transpose3d.yaml,2
5173,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (in _channels ,  out _channels/groups , kT , kH , kW) ",torch.nn.functional.conv_transpose3d.yaml,2
5174,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias of shape (out _channels) .,torch.nn.functional.conv_transpose1d.yaml,2
5175,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv_transpose1d.yaml,2
5176,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (in _channels ,  out _channels/groups , kW) ",torch.nn.functional.conv_transpose1d.yaml,2
5177,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias of shape (out _channels) .,torch.nn.functional.conv1d.yaml,2
5178,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iW) ",torch.nn.functional.conv1d.yaml,2
5179,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (out _channels ,  in _channels/groups , kW) ",torch.nn.functional.conv1d.yaml,2
5180,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",optional bias tensor of shape (out _channels) .,torch.nn.functional.conv3d.yaml,2
5181,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","input tensor of shape (minibatch , in _channels , iT , iH , iW) ",torch.nn.functional.conv3d.yaml,2
5182,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","filters of shape (out _channels ,  in _channels/groups , kT , kH , kW) ",torch.nn.functional.conv3d.yaml,2
5183,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",non-quantized bias tensor of shape (out _channels) .,torch.nn.quantized.functional.conv2d.yaml,2
5184,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","quantized input tensor of shape (minibatch , in _channels , iH , iW) ",torch.nn.quantized.functional.conv2d.yaml,2
5185,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","quantized filters of shape (out _channels ,  in _channels/groups , kH , kW) ",torch.nn.quantized.functional.conv2d.yaml,2
5186,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})",non-quantized bias tensor of shape (out _channels) .,torch.nn.quantized.functional.conv3d.yaml,2
5187,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","quantized input tensor of shape (minibatch , in _channels , iD , iH , iW) ",torch.nn.quantized.functional.conv3d.yaml,2
5188,96,0.011956001912960305,25,"frozenset({'shape', '_channels'})","quantized filters of shape (out _channels ,  in _channels/groups , kD , kH , kW) ",torch.nn.quantized.functional.conv3d.yaml,2
5189,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5190,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5191,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5192,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,2
5193,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5194,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5195,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.backward.yaml,2
5196,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5197,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5198,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5199,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5200,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5201,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.grad.yaml,2
5202,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5203,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","If the value is None, matrix norm will be calculated when the input tensor only has two dimensions, vector norm will be calculated when the input tensor only has one dimension.",torch.norm.yaml,2
5204,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5205,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5206,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5207,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5208,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5209,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5210,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","List of tensors to scatter (default is None, must be specified on the source rank)",torch.distributed.scatter.yaml,2
5211,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5212,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5213,134,0.011956001912960305,25,"frozenset({'none', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5214,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
5215,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
5216,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
5217,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",correspondence between original module types and quantized counterparts,torch.quantization.quantize.yaml,2
5218,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
5219,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
5220,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
5221,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
5222,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
5223,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
5224,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
5225,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
5226,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
5227,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.as_tensor.yaml,2
5228,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
5229,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
5230,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
5231,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.tensor.yaml,2
5232,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
5233,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
5234,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.sparse_coo_tensor.yaml,2
5235,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})","Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",torch.sparse_coo_tensor.yaml,2
5236,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
5237,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
5238,90,0.011956001912960305,25,"frozenset({'types', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
5239,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
5240,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
5241,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",CUDA devices for which to fork the RNG.,torch.random.fork_rng.yaml,2
5242,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})","A string, or list of strings, containing CUDA source code.",torch.utils.cpp_extension.load_inline.yaml,2
5243,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",CUDA devices for which to fork the RNG.,torch.random.fork_rng2.yaml,2
5244,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
5245,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
5246,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
5247,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
5248,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
5249,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
5250,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
5251,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
5252,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
5253,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
5254,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
5255,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
5256,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
5257,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
5258,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
5259,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
5260,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
5261,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
5262,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
5263,79,0.011956001912960305,25,"frozenset({'cuda', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
5264,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5265,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5266,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5267,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5268,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5269,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5270,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5271,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})",Default: `torch.int64`.,torch.randperm.yaml,3
5272,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5273,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,3
5274,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5275,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,3
5276,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5277,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5278,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5279,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5280,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5281,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5282,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5283,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5284,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5285,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,3
5286,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5287,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,3
5288,168,0.011956001912960305,25,"frozenset({'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5289,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5290,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5291,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5292,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5293,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5294,120,0.011477761836441894,24,"frozenset({'default', 'type'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
5295,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5296,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5297,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5298,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5299,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5300,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5301,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5302,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5303,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, infers data type from `data`.",torch.as_tensor.yaml,2
5304,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5305,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5306,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5307,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, infers data type from `data`.",torch.tensor.yaml,2
5308,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5309,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if None, infers data type from `values`.",torch.sparse_coo_tensor.yaml,2
5310,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5311,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5312,120,0.011477761836441894,24,"frozenset({'default', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5313,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5314,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5315,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5316,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5317,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5318,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5319,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5320,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5321,136,0.011477761836441894,24,"frozenset({'none', 'type'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,2
5322,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5323,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5324,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5325,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5326,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5327,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, infers data type from `data`.",torch.as_tensor.yaml,2
5328,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5329,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5330,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5331,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, infers data type from `data`.",torch.tensor.yaml,2
5332,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5333,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if None, infers data type from `values`.",torch.sparse_coo_tensor.yaml,2
5334,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5335,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5336,136,0.011477761836441894,24,"frozenset({'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5337,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,3
5338,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,3
5339,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,3
5340,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,3
5341,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,3
5342,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","float 1D tensor of scales to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,3
5343,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","integer 1D tensor of offset to use, size should match `input.size(axis)`",torch.quantize_per_channel.yaml,3
5344,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,3
5345,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,3
5346,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, m) ",torch.lobpcg.yaml,3
5347,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,3
5348,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, n)  where k <= n <= m.",torch.lobpcg.yaml,3
5349,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, m) .",torch.lobpcg.yaml,3
5350,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,3
5351,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,3
5352,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,3
5353,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,3
5354,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",Should be of same size as input tensor.,torch.bincount.yaml,3
5355,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,3
5356,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,3
5357,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,3
5358,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,3
5359,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,3
5360,214,0.011477761836441894,24,"frozenset({'size', 'tensor', 'input'})","the input tensor of size (*, m, n) ",torch.pca_lowrank.yaml,3
5361,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5362,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5363,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
5364,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5365,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5366,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5367,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
5368,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5369,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5370,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
5371,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5372,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5373,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5374,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5375,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5376,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5377,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5378,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5379,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5380,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5381,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5382,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5383,108,0.010999521759923482,23,"frozenset({'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5384,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
5385,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
5386,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
5387,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})","if `True`, the returned samples will be discretized as one-hot vectors, but will be differentiated as if it is the soft sample in autograd",torch.nn.functional.gumbel_softmax.yaml,2
5388,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
5389,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
5390,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
5391,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
5392,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
5393,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
5394,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
5395,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
5396,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
5397,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
5398,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
5399,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
5400,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
5401,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
5402,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
5403,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
5404,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
5405,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
5406,99,0.010999521759923482,23,"frozenset({'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
5407,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5408,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5409,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5410,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,2
5411,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5412,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5413,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
5414,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5415,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5416,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5417,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5418,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5419,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5420,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5421,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5422,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5423,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5424,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5425,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5426,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","List of tensors to scatter (default is None, must be specified on the source rank)",torch.distributed.scatter.yaml,2
5427,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5428,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5429,117,0.010999521759923482,23,"frozenset({'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5430,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
5431,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
5432,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,4
5433,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
5434,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
5435,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
5436,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,4
5437,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
5438,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
5439,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,4
5440,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
5441,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
5442,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
5443,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
5444,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
5445,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
5446,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
5447,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
5448,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
5449,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
5450,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
5451,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
5452,245,0.010999521759923482,23,"frozenset({'none', 'current', 'default', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
5453,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5454,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5455,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
5456,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5457,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5458,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5459,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
5460,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5461,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5462,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
5463,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5464,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5465,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5466,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5467,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5468,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5469,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5470,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5471,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5472,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5473,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5474,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5475,190,0.010999521759923482,23,"frozenset({'default', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5476,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
5477,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
5478,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,4
5479,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
5480,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
5481,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
5482,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,4
5483,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
5484,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
5485,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,4
5486,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
5487,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
5488,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
5489,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
5490,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
5491,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
5492,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
5493,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
5494,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
5495,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
5496,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
5497,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
5498,234,0.010999521759923482,23,"frozenset({'default', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
5499,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
5500,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
5501,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,4
5502,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
5503,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
5504,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
5505,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,4
5506,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
5507,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
5508,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,4
5509,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
5510,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
5511,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
5512,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
5513,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
5514,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
5515,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
5516,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
5517,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
5518,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
5519,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
5520,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
5521,235,0.010999521759923482,23,"frozenset({'none', 'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
5522,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
5523,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
5524,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,4
5525,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
5526,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
5527,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
5528,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,4
5529,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
5530,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
5531,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,4
5532,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
5533,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
5534,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
5535,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
5536,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
5537,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
5538,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
5539,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
5540,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
5541,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
5542,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
5543,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
5544,237,0.010999521759923482,23,"frozenset({'none', 'uses', 'default', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
5545,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5546,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5547,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
5548,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5549,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5550,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5551,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
5552,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5553,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5554,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
5555,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5556,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5557,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5558,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5559,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5560,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5561,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5562,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5563,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5564,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5565,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5566,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5567,166,0.010999521759923482,23,"frozenset({'current', 'SOME_DTYPE', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5568,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5569,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5570,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
5571,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5572,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5573,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5574,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
5575,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5576,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5577,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
5578,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5579,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5580,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5581,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5582,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5583,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5584,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5585,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5586,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5587,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5588,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5589,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5590,169,0.010999521759923482,23,"frozenset({'default', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5591,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5592,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5593,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5594,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5595,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5596,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5597,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5598,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5599,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,3
5600,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,3
5601,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5602,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,3
5603,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5604,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5605,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5606,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5607,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5608,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5609,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5610,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5611,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5612,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5613,173,0.010999521759923482,23,"frozenset({'none', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5614,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5615,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5616,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
5617,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5618,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5619,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5620,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
5621,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5622,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5623,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
5624,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5625,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5626,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5627,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5628,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5629,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5630,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5631,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5632,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5633,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5634,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5635,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5636,175,0.010999521759923482,23,"frozenset({'none', 'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5637,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5638,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5639,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5640,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5641,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5642,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5643,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5644,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5645,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5646,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5647,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,3
5648,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5649,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5650,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5651,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5652,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5653,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5654,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5655,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5656,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5657,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5658,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,3
5659,178,0.010999521759923482,23,"frozenset({'tensor', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,3
5660,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5661,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5662,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5663,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5664,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5665,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5666,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5667,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5668,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5669,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5670,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5671,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5672,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5673,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, infers data type from `data`.",torch.as_tensor.yaml,3
5674,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5675,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5676,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5677,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, infers data type from `data`.",torch.tensor.yaml,3
5678,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5679,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if None, infers data type from `values`.",torch.sparse_coo_tensor.yaml,3
5680,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5681,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5682,202,0.010999521759923482,23,"frozenset({'default', 'none', 'type'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5683,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,5
5684,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,5
5685,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,5
5686,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,5
5687,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,5
5688,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,5
5689,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,5
5690,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,5
5691,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,5
5692,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,5
5693,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,5
5694,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,5
5695,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,5
5696,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,5
5697,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,5
5698,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,5
5699,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,5
5700,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,5
5701,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,5
5702,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,5
5703,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,5
5704,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,5
5705,267,0.010999521759923482,23,"frozenset({'none', 'default', 'uses', 'current', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,5
5706,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5707,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5708,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5709,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5710,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5711,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5712,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5713,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5714,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,3
5715,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5716,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5717,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,3
5718,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5719,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5720,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5721,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5722,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5723,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5724,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5725,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5726,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5727,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5728,180,0.010999521759923482,23,"frozenset({'type', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,3
5729,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5730,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5731,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,2
5732,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5733,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5734,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5735,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,2
5736,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5737,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5738,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,2
5739,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5740,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5741,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5742,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5743,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5744,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5745,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5746,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5747,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5748,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5749,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5750,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5751,91,0.010999521759923482,23,"frozenset({'uses', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5752,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_max_pool3d.yaml,2
5753,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer),torch.nn.functional.adaptive_max_pool1d.yaml,2
5754,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.le.yaml,2
5755,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_avg_pool3d.yaml,2
5756,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer),torch.nn.functional.adaptive_avg_pool1d.yaml,2
5757,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.gt.yaml,2
5758,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.ne.yaml,2
5759,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.quantized.functional.adaptive_avg_pool2d.yaml,2
5760,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.topk.yaml,2
5761,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.rand.yaml,2
5762,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_max_pool2d.yaml,2
5763,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_avg_pool2d.yaml,2
5764,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) that can be optionally given to be used as output buffers",torch.sort.yaml,2
5765,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a device on which the output will be placed (default: current device).,torch.cuda.comm.reduce_add.yaml,2
5766,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.ones.yaml,2
5767,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.normal222.yaml,2
5768,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.ge.yaml,2
5769,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",the output tensor that must be a BoolTensor,torch.lt.yaml,2
5770,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})","the output tuple of (Tensor, LongTensor) can be optionally given to be used as output buffers",torch.kthvalue.yaml,2
5771,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.zeros.yaml,2
5772,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})",a sequence of integers defining the shape of the output tensor.,torch.randn.yaml,2
5773,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
5774,84,0.010999521759923482,23,"frozenset({'output', 'SOME_DTYPE'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
5775,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5776,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5777,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_name.yaml,3
5778,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5779,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5780,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5781,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.get_device_capability.yaml,3
5782,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5783,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5784,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","It uses the current device, given by `current_device()`, if `device` is `None` (default).",torch.cuda.synchronize.yaml,3
5785,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5786,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5787,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5788,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5789,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5790,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5791,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5792,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5793,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5794,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5795,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5796,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5797,191,0.010999521759923482,23,"frozenset({'none', 'current', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5798,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
5799,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",input tensor of shape N  times M .,torch.nn.functional.pdist.yaml,2
5800,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
5801,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","an n-dimensional torch.Tensor, where n  >= 2 ",torch.nn.init.orthogonal_.yaml,2
5802,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
5803,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.xavier_normal_.yaml,2
5804,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, m, n)  where k <= n <= m.",torch.lobpcg.yaml,2
5805,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
5806,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.zeros_.yaml,2
5807,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
5808,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the tensor to factor of size (*, m, n) ",torch.lu.yaml,2
5809,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
5810,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.uniform_.yaml,2
5811,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.normal_.yaml,2
5812,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",N-dimensional tensor,torch.nn.functional.pad.yaml,2
5813,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
5814,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.constant_.yaml,2
5815,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
5816,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.xavier_uniform_.yaml,2
5817,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
5818,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.sparse_.yaml,2
5819,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})",an n-dimensional torch.Tensor,torch.nn.init.ones_.yaml,2
5820,131,0.010999521759923482,23,"frozenset({'n', 'tensor'})","the input tensor of size (*, m, n) ",torch.pca_lowrank.yaml,2
5821,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,4
5822,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,4
5823,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,4
5824,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,4
5825,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,4
5826,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,4
5827,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,4
5828,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,4
5829,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,4
5830,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,4
5831,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,4
5832,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,4
5833,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,4
5834,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,4
5835,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,4
5836,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,4
5837,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,4
5838,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,4
5839,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,4
5840,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,4
5841,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,4
5842,244,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,4
5843,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",implicit zero paddings on both sides of the input.,torch.nn.functional.avg_pool3d.yaml,2
5844,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
5845,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",implicit zero paddings on both sides of the input.,torch.nn.quantized.functional.avg_pool2d.yaml,2
5846,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",`dilation * (kernel_size - 1) - padding` zero-padding will be added to both sides of each dimension in the input.,torch.nn.functional.conv_transpose2d.yaml,2
5847,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",implicit zero paddings on both sides of the input.,torch.nn.functional.avg_pool1d.yaml,2
5848,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
5849,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
5850,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",`dilation * (kernel_size - 1) - padding` zero-padding will be added to both sides of each dimension in the input.,torch.nn.functional.conv_transpose3d.yaml,2
5851,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",`dilation * (kernel_size - 1) - padding` zero-padding will be added to both sides of each dimension in the input.,torch.nn.functional.conv_transpose1d.yaml,2
5852,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input triangular coefficient matrix of size (*, m, m)  where *  is zero or more batch dimensions",torch.triangular_solve.yaml,2
5853,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",implicit zero paddings on both sides of the input.,torch.nn.functional.avg_pool2d.yaml,2
5854,130,0.010521281683405069,22,"frozenset({'zero', 'input'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,2
5855,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","input matrix b  of size (*, m, k) , where *  is zero or more batch dimensions",torch.cholesky_solve.yaml,2
5856,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","input matrix u  of size (*, m, m) , where *  is zero of more batch dimensions composed of upper or lower triangular Cholesky factor",torch.cholesky_solve.yaml,2
5857,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
5858,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
5859,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
5860,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","input square matrix of size (*, m, m) , where *  is zero or more batch dimensions.",torch.solve.yaml,2
5861,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","input matrix B  of size (*, m, k)  , where *  is zero or more batch dimensions.",torch.solve.yaml,2
5862,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
5863,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
5864,130,0.010521281683405069,22,"frozenset({'zero', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
5865,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,4
5866,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,4
5867,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,4
5868,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,4
5869,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,4
5870,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,4
5871,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,4
5872,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,4
5873,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,4
5874,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,4
5875,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,4
5876,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,4
5877,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,4
5878,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,4
5879,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,4
5880,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,4
5881,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,4
5882,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,4
5883,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,4
5884,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,4
5885,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,4
5886,243,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,4
5887,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
5888,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
5889,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
5890,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
5891,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
5892,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
5893,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
5894,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
5895,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
5896,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
5897,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
5898,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
5899,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
5900,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
5901,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
5902,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
5903,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
5904,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
5905,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,3
5906,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
5907,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,3
5908,189,0.010521281683405069,22,"frozenset({'default', 'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
5909,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the device of `input`.",torch.ones_like.yaml,2
5910,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the dtype of `input`.",torch.ones_like.yaml,2
5911,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the layout of `input`.",torch.ones_like.yaml,2
5912,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the device of `input`.",torch.empty_like.yaml,2
5913,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the dtype of `input`.",torch.empty_like.yaml,2
5914,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the layout of `input`.",torch.empty_like.yaml,2
5915,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the device of `input`.",torch.zeros_like.yaml,2
5916,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the dtype of `input`.",torch.zeros_like.yaml,2
5917,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the layout of `input`.",torch.zeros_like.yaml,2
5918,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If `None`, the argmin of the flattened input is returned.",torch.argmin2.yaml,2
5919,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the device of `input`.",torch.randn_like.yaml,2
5920,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the dtype of `input`.",torch.randn_like.yaml,2
5921,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the layout of `input`.",torch.randn_like.yaml,2
5922,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If `None`, the argmax of the flattened input is returned.",torch.argmax2.yaml,2
5923,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If None, derived from the input scale",torch.nn.quantized.functional.linear.yaml,2
5924,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If None, derived from the input zero_point",torch.nn.quantized.functional.linear.yaml,2
5925,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If the value is None, matrix norm will be calculated when the input tensor only has two dimensions, vector norm will be calculated when the input tensor only has one dimension.",torch.norm.yaml,2
5926,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If `None`, the unique of the flattened input is returned.",torch.unique.yaml,2
5927,127,0.010521281683405069,22,"frozenset({'none', 'input'})","If `None`, the unique of the flattened input is returned.",torch.unique_consecutive.yaml,2
5928,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the device of `input`.",torch.rand_like.yaml,2
5929,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the dtype of `input`.",torch.rand_like.yaml,2
5930,127,0.010521281683405069,22,"frozenset({'none', 'input'})","Default: if `None`, defaults to the layout of `input`.",torch.rand_like.yaml,2
5931,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on.,torch.distributed.get_backend.yaml,2
5932,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The default is the general main process group.,torch.distributed.get_backend.yaml,2
5933,126,0.010521281683405069,22,"frozenset({'group', 'process'})","If another specific group is specified, the calling process must be part of `group`.",torch.distributed.get_backend.yaml,2
5934,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.all_reduce.yaml,2
5935,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.isend.yaml,2
5936,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.barrier.yaml,2
5937,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.all_gather.yaml,2
5938,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.gather.yaml,2
5939,126,0.010521281683405069,22,"frozenset({'group', 'process'})",URL specifying how to initialize the process group.,torch.distributed.init_process_group.yaml,2
5940,126,0.010521281683405069,22,"frozenset({'group', 'process'})",Timeout for operations executed against the process group.,torch.distributed.init_process_group.yaml,2
5941,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.recv.yaml,2
5942,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.broadcast_multigpu.yaml,2
5943,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.reduce.yaml,2
5944,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.all_gather_multigpu.yaml,2
5945,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.send.yaml,2
5946,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.get_world_size.yaml,2
5947,126,0.010521281683405069,22,"frozenset({'group', 'process'})",Timeout for operations executed against the process group.,torch.distributed.new_group.yaml,2
5948,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.scatter.yaml,2
5949,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.irecv.yaml,2
5950,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.reduce_multigpu.yaml,2
5951,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.broadcast.yaml,2
5952,126,0.010521281683405069,22,"frozenset({'group', 'process'})",The process group to work on,torch.distributed.get_rank.yaml,2
5953,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
5954,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
5955,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
5956,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
5957,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
5958,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
5959,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
5960,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
5961,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
5962,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
5963,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
5964,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
5965,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
5966,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
5967,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
5968,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
5969,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
5970,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
5971,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
5972,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
5973,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
5974,107,0.010521281683405069,22,"frozenset({'current', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
5975,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
5976,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
5977,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
5978,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
5979,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
5980,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
5981,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
5982,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
5983,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
5984,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
5985,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
5986,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
5987,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
5988,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
5989,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
5990,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
5991,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
5992,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
5993,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,2
5994,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
5995,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,2
5996,103,0.010521281683405069,22,"frozenset({'cuda', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
5997,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
5998,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",Works only for CPU tensors.,torch.empty_strided.yaml,2
5999,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
6000,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
6001,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
6002,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
6003,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
6004,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
6005,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
6006,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
6007,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
6008,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
6009,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
6010,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
6011,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
6012,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
6013,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
6014,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",Works only for CPU tensors.,torch.tensor.yaml,2
6015,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
6016,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
6017,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
6018,102,0.010521281683405069,22,"frozenset({'cpu', 'tensor'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
6019,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6020,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6021,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6022,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6023,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6024,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6025,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6026,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6027,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6028,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6029,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6030,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6031,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6032,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6033,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6034,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6035,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6036,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6037,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6038,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6039,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6040,100,0.010521281683405069,22,"frozenset({'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6041,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,4
6042,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,4
6043,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,4
6044,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,4
6045,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,4
6046,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,4
6047,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,4
6048,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,4
6049,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,4
6050,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,4
6051,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,4
6052,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,4
6053,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,4
6054,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,4
6055,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,4
6056,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,4
6057,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,4
6058,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,4
6059,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,4
6060,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,4
6061,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,4
6062,241,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,4
6063,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6064,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6065,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6066,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6067,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6068,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6069,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6070,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6071,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6072,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6073,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6074,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6075,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6076,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6077,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6078,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6079,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6080,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6081,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6082,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6083,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6084,98,0.010521281683405069,22,"frozenset({'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6085,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6086,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6087,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6088,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6089,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6090,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6091,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6092,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6093,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6094,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6095,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6096,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6097,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6098,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6099,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6100,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6101,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6102,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6103,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6104,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6105,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6106,97,0.010521281683405069,22,"frozenset({'operations', 'autograd'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6107,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,4
6108,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,4
6109,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,4
6110,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,4
6111,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,4
6112,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,4
6113,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,4
6114,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,4
6115,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,4
6116,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,4
6117,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,4
6118,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,4
6119,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,4
6120,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,4
6121,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,4
6122,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,4
6123,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,4
6124,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,4
6125,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,4
6126,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,4
6127,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,4
6128,265,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,4
6129,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,5
6130,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,5
6131,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,5
6132,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,5
6133,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,5
6134,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,5
6135,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,5
6136,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,5
6137,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,5
6138,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,5
6139,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,5
6140,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,5
6141,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,5
6142,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,5
6143,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,5
6144,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,5
6145,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,5
6146,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,5
6147,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,5
6148,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,5
6149,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,5
6150,268,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,5
6151,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,4
6152,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,4
6153,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,4
6154,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,4
6155,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,4
6156,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,4
6157,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,4
6158,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,4
6159,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,4
6160,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,4
6161,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,4
6162,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,4
6163,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,4
6164,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,4
6165,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,4
6166,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,4
6167,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,4
6168,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,4
6169,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,4
6170,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,4
6171,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,4
6172,242,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,4
6173,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
6174,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
6175,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
6176,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
6177,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
6178,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
6179,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
6180,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
6181,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
6182,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
6183,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
6184,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
6185,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
6186,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
6187,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
6188,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
6189,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
6190,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
6191,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,4
6192,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
6193,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,4
6194,233,0.010521281683405069,22,"frozenset({'default', 'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
6195,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
6196,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
6197,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
6198,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
6199,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
6200,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
6201,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
6202,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
6203,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
6204,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
6205,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,4
6206,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
6207,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
6208,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
6209,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
6210,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
6211,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
6212,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
6213,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
6214,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
6215,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
6216,240,0.010521281683405069,22,"frozenset({'tensor', 'type', 'SOME_DTYPE', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,4
6217,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6218,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6219,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6220,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","List of appropriately-sized tensors to use for gathered data (default is None, must be specified on the destination rank)",torch.distributed.gather.yaml,3
6221,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6222,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6223,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6224,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6225,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6226,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6227,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6228,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6229,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6230,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6231,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6232,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6233,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6234,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6235,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","List of tensors to scatter (default is None, must be specified on the source rank)",torch.distributed.scatter.yaml,3
6236,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6237,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6238,200,0.010521281683405069,22,"frozenset({'none', 'default', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6239,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6240,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6241,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6242,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6243,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6244,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6245,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6246,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6247,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6248,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6249,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6250,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6251,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6252,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6253,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6254,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6255,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6256,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6257,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6258,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6259,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6260,182,0.010521281683405069,22,"frozenset({'operations', 'record', 'autograd'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6261,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6262,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6263,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6264,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6265,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6266,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6267,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6268,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6269,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6270,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6271,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6272,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6273,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6274,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6275,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6276,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6277,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6278,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6279,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6280,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6281,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6282,183,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6283,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6284,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6285,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6286,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6287,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6288,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.backward.yaml,3
6289,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6290,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6291,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6292,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6293,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6294,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})",None values can be specified for scalar Tensors or ones that don't require grad.,torch.autograd.grad.yaml,3
6295,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6296,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6297,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6298,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6299,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6300,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6301,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6302,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6303,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6304,172,0.010521281683405069,22,"frozenset({'none', 'tensor', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6305,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6306,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6307,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6308,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6309,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6310,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6311,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6312,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6313,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6314,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6315,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6316,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6317,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6318,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6319,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6320,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6321,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6322,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6323,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6324,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6325,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6326,184,0.010521281683405069,22,"frozenset({'operations', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6327,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6328,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6329,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6330,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6331,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6332,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6333,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6334,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6335,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6336,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6337,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6338,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6339,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6340,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6341,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6342,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6343,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6344,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6345,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,3
6346,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6347,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,3
6348,165,0.010521281683405069,22,"frozenset({'current', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6349,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,3
6350,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,3
6351,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,3
6352,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,3
6353,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,3
6354,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,3
6355,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,3
6356,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,3
6357,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,3
6358,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,3
6359,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,3
6360,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,3
6361,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,3
6362,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,3
6363,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,3
6364,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,3
6365,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,3
6366,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,3
6367,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.get_rng_state.yaml,3
6368,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,3
6369,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})","Default: `'cuda'` (i.e., `torch.device('cuda')`, the current CUDA device).",torch.cuda.set_rng_state.yaml,3
6370,161,0.010521281683405069,22,"frozenset({'cuda', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,3
6371,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6372,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6373,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6374,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6375,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6376,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6377,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6378,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6379,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6380,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6381,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6382,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6383,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6384,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6385,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6386,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6387,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6388,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6389,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6390,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6391,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6392,185,0.010521281683405069,22,"frozenset({'record', 'autograd', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6393,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
6394,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
6395,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
6396,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
6397,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
6398,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
6399,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
6400,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
6401,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
6402,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
6403,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
6404,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
6405,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
6406,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
6407,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
6408,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
6409,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
6410,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
6411,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
6412,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
6413,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
6414,157,0.010521281683405069,22,"frozenset({'tensor', 'uses'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
6415,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6416,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6417,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6418,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6419,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6420,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6421,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6422,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6423,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6424,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6425,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6426,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6427,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6428,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6429,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6430,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6431,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6432,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6433,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6434,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6435,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6436,186,0.010521281683405069,22,"frozenset({'record', 'autograd', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6437,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6438,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6439,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6440,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6441,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6442,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6443,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6444,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6445,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6446,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6447,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6448,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6449,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6450,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6451,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6452,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6453,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6454,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6455,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6456,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6457,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6458,222,0.010521281683405069,22,"frozenset({'operations', 'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6459,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6460,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6461,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6462,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6463,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6464,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6465,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6466,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6467,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6468,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6469,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6470,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6471,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6472,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6473,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6474,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6475,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6476,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6477,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6478,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6479,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6480,223,0.010521281683405069,22,"frozenset({'operations', 'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6481,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6482,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6483,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6484,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6485,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6486,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6487,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6488,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6489,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6490,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6491,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6492,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6493,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6494,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6495,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6496,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6497,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6498,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6499,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6500,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6501,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6502,224,0.010521281683405069,22,"frozenset({'operations', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6503,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6504,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6505,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6506,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6507,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6508,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6509,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6510,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6511,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6512,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6513,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6514,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6515,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6516,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6517,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6518,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6519,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6520,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6521,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6522,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6523,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6524,225,0.010521281683405069,22,"frozenset({'record', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6525,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6526,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6527,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6528,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6529,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6530,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6531,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6532,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6533,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6534,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6535,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6536,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6537,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6538,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6539,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6540,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6541,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6542,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6543,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6544,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6545,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6546,145,0.010521281683405069,22,"frozenset({'record', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6547,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,3
6548,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,3
6549,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,3
6550,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,3
6551,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,3
6552,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,3
6553,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,3
6554,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,3
6555,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,3
6556,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,3
6557,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,3
6558,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,3
6559,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,3
6560,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,3
6561,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,3
6562,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,3
6563,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,3
6564,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,3
6565,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,3
6566,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,3
6567,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,3
6568,187,0.010521281683405069,22,"frozenset({'autograd', 'tensor', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,3
6569,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6570,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6571,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6572,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6573,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6574,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6575,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6576,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6577,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6578,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6579,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6580,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6581,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6582,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6583,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6584,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6585,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6586,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6587,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6588,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6589,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6590,144,0.010521281683405069,22,"frozenset({'record', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6591,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_max_pool3d.yaml,2
6592,142,0.010521281683405069,22,"frozenset({'size', 'output'})",additional size added to one side of each dimension in the output shape.,torch.nn.functional.conv_transpose2d.yaml,2
6593,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the size of `input` will determine size of the output tensor.,torch.ones_like.yaml,2
6594,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer),torch.nn.functional.adaptive_max_pool1d.yaml,2
6595,142,0.010521281683405069,22,"frozenset({'size', 'output'})",Must be the same size as the output of `func`.,torch.autograd.functional.vjp.yaml,2
6596,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer or triple-integer tuple),torch.nn.functional.adaptive_avg_pool3d.yaml,2
6597,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer),torch.nn.functional.adaptive_avg_pool1d.yaml,2
6598,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the size of `input` will determine size of the output tensor.,torch.empty_like.yaml,2
6599,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.quantized.functional.adaptive_avg_pool2d.yaml,2
6600,142,0.010521281683405069,22,"frozenset({'size', 'output'})",additional size added to one side of each dimension in the output shape.,torch.nn.functional.conv_transpose3d.yaml,2
6601,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output image size.,torch.nn.functional.affine_grid.yaml,2
6602,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the size of `input` will determine size of the output tensor.,torch.zeros_like.yaml,2
6603,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_max_pool2d.yaml,2
6604,142,0.010521281683405069,22,"frozenset({'size', 'output'})",additional size added to one side of each dimension in the output shape.,torch.nn.functional.conv_transpose1d.yaml,2
6605,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the size of `input` will determine size of the output tensor.,torch.randn_like.yaml,2
6606,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the target output size (single integer or double-integer tuple),torch.nn.functional.adaptive_avg_pool2d.yaml,2
6607,142,0.010521281683405069,22,"frozenset({'size', 'output'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.quantized.functional.interpolate.yaml,2
6608,142,0.010521281683405069,22,"frozenset({'size', 'output'})",output spatial size.,torch.nn.quantized.functional.interpolate.yaml,2
6609,142,0.010521281683405069,22,"frozenset({'size', 'output'})",the size of `input` will determine size of the output tensor.,torch.rand_like.yaml,2
6610,142,0.010521281683405069,22,"frozenset({'size', 'output'})","If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same.",torch.nn.functional.interpolate.yaml,2
6611,142,0.010521281683405069,22,"frozenset({'size', 'output'})",output spatial size.,torch.nn.functional.interpolate.yaml,2
6612,142,0.010521281683405069,22,"frozenset({'size', 'output'})","a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.",torch.full.yaml,2
6613,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6614,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6615,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6616,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6617,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6618,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6619,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6620,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6621,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6622,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6623,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6624,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6625,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6626,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6627,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6628,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6629,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6630,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6631,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6632,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6633,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6634,141,0.010521281683405069,22,"frozenset({'operations', 'tensor'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6635,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6636,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6637,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6638,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6639,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6640,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6641,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6642,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6643,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6644,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6645,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6646,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6647,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6648,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6649,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6650,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6651,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6652,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6653,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6654,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6655,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6656,140,0.010521281683405069,22,"frozenset({'operations', 'returned'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6657,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6658,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6659,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6660,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6661,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6662,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6663,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6664,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6665,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6666,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6667,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,3
6668,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6669,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6670,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6671,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6672,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6673,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6674,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6675,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6676,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6677,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6678,231,0.010521281683405069,22,"frozenset({'tensor', 'type', 'torch'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,3
6679,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.empty_strided.yaml,2
6680,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.arange.yaml,2
6681,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.ones_like.yaml,2
6682,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.empty_like.yaml,2
6683,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.hann_window.yaml,2
6684,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.zeros_like.yaml,2
6685,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.rand.yaml,2
6686,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.eye.yaml,2
6687,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.randn_like.yaml,2
6688,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.ones.yaml,2
6689,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.randperm.yaml,2
6690,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.linspace.yaml,2
6691,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.hamming_window.yaml,2
6692,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.blackman_window.yaml,2
6693,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.bartlett_window.yaml,2
6694,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.logspace.yaml,2
6695,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.tensor.yaml,2
6696,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.sparse_coo_tensor.yaml,2
6697,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.zeros.yaml,2
6698,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.randn.yaml,2
6699,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.rand_like.yaml,2
6700,139,0.010521281683405069,22,"frozenset({'operations', 'record'})",If autograd should record operations on the returned tensor.,torch.full.yaml,2
6701,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
6702,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
6703,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
6704,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
6705,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
6706,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
6707,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
6708,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
6709,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.triu_indices.yaml,4
6710,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
6711,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, `torch.long`.",torch.tril_indices.yaml,4
6712,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
6713,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
6714,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
6715,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
6716,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
6717,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
6718,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
6719,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
6720,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
6721,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
6722,236,0.010521281683405069,22,"frozenset({'none', 'default', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
6723,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6724,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6725,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6726,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6727,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6728,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6729,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6730,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6731,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6732,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6733,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv2d.yaml,3
6734,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6735,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6736,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6737,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6738,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6739,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6740,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6741,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6742,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6743,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6744,179,0.010521281683405069,22,"frozenset({'type', 'SOME_DTYPE', 'tensor'})",The tensor type must be torch.float.,torch.nn.quantized.functional.conv3d.yaml,3
6745,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,2
6746,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,2
6747,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,2
6748,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,2
6749,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,2
6750,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,2
6751,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,2
6752,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,2
6753,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","When a module is passed to `torch.jit.trace`, only the `forward` method is run and traced (see `torch.jit.trace` for details).",torch.jit.trace.yaml,2
6754,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,2
6755,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,2
6756,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,2
6757,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,2
6758,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,2
6759,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,2
6760,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,2
6761,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,2
6762,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,2
6763,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,2
6764,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,2
6765,86,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,2
6766,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,3
6767,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,3
6768,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,3
6769,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,3
6770,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,3
6771,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,3
6772,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,3
6773,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,3
6774,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,3
6775,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,3
6776,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,3
6777,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,3
6778,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,3
6779,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,3
6780,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,3
6781,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,3
6782,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,3
6783,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,3
6784,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,3
6785,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,3
6786,160,0.010043041606886656,21,"frozenset({'cpu', 'current', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,3
6787,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
6788,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
6789,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
6790,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
6791,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
6792,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
6793,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
6794,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
6795,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
6796,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
6797,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
6798,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
6799,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
6800,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
6801,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
6802,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
6803,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
6804,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
6805,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
6806,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
6807,78,0.010043041606886656,21,"frozenset({'cpu', 'SOME_DTYPE'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
6808,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6809,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6810,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6811,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6812,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6813,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6814,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6815,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6816,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,3
6817,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6818,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6819,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6820,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6821,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6822,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6823,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6824,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6825,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6826,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6827,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6828,174,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6829,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6830,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6831,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6832,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6833,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6834,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})",Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.,torch.lobpcg.yaml,3
6835,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6836,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6837,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6838,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6839,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6840,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6841,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6842,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6843,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6844,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6845,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6846,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6847,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6848,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6849,209,0.010043041606886656,21,"frozenset({'default', 'type', 'tensor'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6850,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.empty_strided.yaml,2
6851,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.arange.yaml,2
6852,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hann_window.yaml,2
6853,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.rand.yaml,2
6854,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.eye.yaml,2
6855,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.ones.yaml,2
6856,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randperm.yaml,2
6857,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.triu_indices.yaml,2
6858,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tril_indices.yaml,2
6859,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.linspace.yaml,2
6860,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.hamming_window.yaml,2
6861,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.blackman_window.yaml,2
6862,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.as_tensor.yaml,2
6863,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.bartlett_window.yaml,2
6864,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.logspace.yaml,2
6865,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.tensor.yaml,2
6866,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.sparse_coo_tensor.yaml,2
6867,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.zeros.yaml,2
6868,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.randn.yaml,2
6869,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})","output device (-1 means CPU, default: current device)",torch.cuda.comm.gather.yaml,2
6870,101,0.010043041606886656,21,"frozenset({'cpu', 'current'})",`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.,torch.full.yaml,2
6871,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,4
6872,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,4
6873,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,4
6874,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,4
6875,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,4
6876,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,4
6877,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,4
6878,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,4
6879,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,4
6880,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,4
6881,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,4
6882,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,4
6883,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,4
6884,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,4
6885,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,4
6886,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,4
6887,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,4
6888,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,4
6889,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,4
6890,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,4
6891,239,0.010043041606886656,21,"frozenset({'none', 'type', 'SOME_DTYPE', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,4
6892,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6893,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6894,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6895,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6896,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6897,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6898,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6899,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6900,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})",None or fp32 bias of type torch.float,torch.nn.quantized.functional.linear.yaml,3
6901,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6902,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6903,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6904,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6905,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6906,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6907,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6908,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6909,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6910,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6911,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6912,220,0.010043041606886656,21,"frozenset({'none', 'type', 'torch'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
6913,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor A  of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric positive-definite matrices.",torch.cholesky.yaml,2
6914,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.det.yaml,2
6915,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.irfft.yaml,2
6916,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",torch.pinverse.yaml,2
6917,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.fft.yaml,2
6918,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input triangular coefficient matrix of size (*, m, m)  where *  is zero or more batch dimensions",torch.triangular_solve.yaml,2
6919,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})",the input tensor of at least `signal_ndim` `+ 1` dimensions,torch.ifft.yaml,2
6920,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","input matrix b  of size (*, m, k) , where *  is zero or more batch dimensions",torch.cholesky_solve.yaml,2
6921,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","input matrix u  of size (*, m, m) , where *  is zero of more batch dimensions composed of upper or lower triangular Cholesky factor",torch.cholesky_solve.yaml,2
6922,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions consisting of symmetric matrices.",torch.symeig.yaml,2
6923,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size (*, n, n)  where * is zero or more batch dimensions",torch.inverse.yaml,2
6924,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.slogdet.yaml,2
6925,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","If the value is None, matrix norm will be calculated when the input tensor only has two dimensions, vector norm will be calculated when the input tensor only has one dimension.",torch.norm.yaml,2
6926,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","If the input tensor has more than two dimensions, the vector norm will be applied to last dimension.",torch.norm.yaml,2
6927,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","input square matrix of size (*, m, m) , where *  is zero or more batch dimensions.",torch.solve.yaml,2
6928,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","input matrix B  of size (*, m, k)  , where *  is zero or more batch dimensions.",torch.solve.yaml,2
6929,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","m-elements tuple, where  m/2  <=  input dimensions and m  is even.",torch.nn.functional.pad.yaml,2
6930,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of matrices of dimension m  times n .",torch.qr.yaml,2
6931,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size (*, m, n)  where * is zero or more batch dimensions consisting of m  times n  matrices.",torch.svd.yaml,2
6932,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})","the input tensor of size `(*, n, n)` where `*` is zero or more batch dimensions.",torch.logdet.yaml,2
6933,125,0.010043041606886656,21,"frozenset({'dimensions', 'input'})",the input tensor of at least `signal_ndim` dimensions,torch.rfft.yaml,2
6934,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.empty_strided.yaml,3
6935,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.arange.yaml,3
6936,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hann_window.yaml,3
6937,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.rand.yaml,3
6938,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.eye.yaml,3
6939,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.ones.yaml,3
6940,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randperm.yaml,3
6941,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.triu_indices.yaml,3
6942,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","When a module is passed to `torch.jit.trace`, only the `forward` method is run and traced (see `torch.jit.trace` for details).",torch.jit.trace.yaml,3
6943,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tril_indices.yaml,3
6944,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.linspace.yaml,3
6945,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.hamming_window.yaml,3
6946,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.blackman_window.yaml,3
6947,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.as_tensor.yaml,3
6948,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.bartlett_window.yaml,3
6949,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.logspace.yaml,3
6950,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.tensor.yaml,3
6951,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if None, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.sparse_coo_tensor.yaml,3
6952,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.zeros.yaml,3
6953,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.randn.yaml,3
6954,177,0.010043041606886656,21,"frozenset({'SOME_DTYPE', 'torch', 'see'})","Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`).",torch.full.yaml,3
