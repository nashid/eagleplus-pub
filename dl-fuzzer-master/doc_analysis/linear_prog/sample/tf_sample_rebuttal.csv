API,Arg,Descp,Normalized_descp,dtype,structure,shape,ndim,range,enum
tf.keras.estimator.model_to_estimator,custom_objects,Dictionary for custom objects.,D_STRUCTURE for custom objects,,D_STRUCTURE,,,,
tf.keras.estimator.model_to_estimator,custom_objects,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.keras.backend.conv2d_transpose,output_shape,1D int tensor for the output shape.,CONSTANT_NUM D D_TYPE D_STRUCTURE for the output shape,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.bias_add,bias,"A 1-D `Tensor` with size matching the channel dimension of `value`. Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",A CONSTANT_NUM D D_STRUCTURE with size matching the channel dimension of PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.bias_add,bias,"A 1-D `Tensor` with size matching the channel dimension of `value`. Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",Must be the same type as PARAM unless PARAM is a quantized type in which case a different quantized type may be used,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.math.not_equal,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.not_equal,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.sign,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.sign,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.keras.layers.experimental.preprocessing.Normalization,reset_state,"Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. Subclasses may choose to throw if reset_state is set to 'False'.",Optional argument specifying whether to clear the state of the layer at the start of the call to QSTR or whether to start from the existing state,D_TYPE,,,,
tf.keras.layers.experimental.preprocessing.Normalization,reset_state,"Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. Subclasses may choose to throw if reset_state is set to 'False'.",Subclasses may choose to throw if reset_state is set to CONSTANT_BOOL,D_TYPE,,,,
tf.keras.layers.experimental.preprocessing.Normalization,reset_state,DF: None,DEFAULT None,D_TYPE,,,,
tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",If CONSTANT_BOOL reading performance will be improved at the cost of non deterministic ordering,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",If CONSTANT_BOOL the order of elements produced is deterministic prior to shuffling elements are still randomized if PARAM CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",Note that if the seed is set then order of elements after shuffling is deterministic,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",Defaults to CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,sloppy_ordering,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.reshape,shape,Target shape tuple.,Target shape D_STRUCTURE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.data.experimental.make_batched_features_dataset,shuffle,"A boolean, indicates whether the input should be shuffled. Defaults to `True`.",A D_TYPE indicates whether the input should be shuffled,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,shuffle,"A boolean, indicates whether the input should be shuffled. Defaults to `True`.",Defaults to CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_batched_features_dataset,shuffle,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.image.crop_to_bounding_box,image,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.sparse.eye,num_columns,Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix. Defaults to `num_rows`.,Optional non negative D_TYPE scalar D_STRUCTURE giving the number of columns in the resulting matrix,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.sparse.eye,num_columns,Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix. Defaults to `num_rows`.,Defaults to PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.sparse.eye,num_columns,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",Interpolation method used to resample the image if the target size is different from that of the loaded image,,,,,
tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",Supported methods are QSTR,,,,,
tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",If PIL version CONSTANT_FLOAT CONSTANT_NUM or newer is installed QSTR is also supported,,,,,
tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",If PIL version CONSTANT_FLOAT CONSTANT_NUM or newer is installed QSTR are also supported,,,,,
tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",By default QSTR is used,,,,,
tf.keras.preprocessing.image.load_img,interpolation,DF: nearest,DEFAULT DF_STR,,,,,
tf.image.psnr,max_val,"The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",The dynamic range of the images BSTR,,,,,
tf.summary.experimental.set_step,step,"An `int64`-castable default step value, or None to unset.",An D_TYPE castable default step value or None to unset,D_TYPE,,CONSTANT_VAL,,
tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",A D_TYPE either QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",The padding algorithm,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",See the QSTR section of tf nn convolution for details,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.conv2d_transpose,padding,DF: SAME,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.math.multiply_no_nan,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.multiply_no_nan,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.math.logical_and,x,A `Tensor` of type `bool`.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.data.experimental.from_variant,structure,A `tf.data.experimental.Structure` object representing the structure of each element in the dataset.,A tf data experimental Structure object representing the structure of each element in the dataset,,,,,
tf.image.draw_bounding_boxes,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.image.draw_bounding_boxes,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.all,x,Tensor or variable.,D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.debugging.assert_greater,name,"A name for this operation (optional).  Defaults to ""assert_greater"".",A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.assert_greater,name,"A name for this operation (optional).  Defaults to ""assert_greater"".",Defaults to QSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.assert_greater,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,The dtype that should be used for the `row_splits` of any new ragged tensors.  Existing `tf.RaggedTensor` elements do not have their row_splits dtype changed.,The dtype that should be used for the QSTR of any new ragged D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,The dtype that should be used for the `row_splits` of any new ragged tensors.  Existing `tf.RaggedTensor` elements do not have their row_splits dtype changed.,Existing tf RaggedTensor elements do not have their row_splits dtype changed,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,DF: tf.dtypes.int64,D_TYPE D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.io.parse_sequence_example,context_features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values. These features are associated with a `SequenceExample` as a whole.,A D_STRUCTURE mapping feature keys to QSTR values,,D_STRUCTURE,,,,
tf.io.parse_sequence_example,context_features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values. These features are associated with a `SequenceExample` as a whole.,These features are associated with a QSTR as a whole,,D_STRUCTURE,,,,
tf.io.parse_sequence_example,context_features,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.keras.layers.LocallyConnected1D,bias_constraint,Constraint function applied to the bias vector.,Constraint function applied to the bias vector,,,,,
tf.keras.layers.LocallyConnected1D,bias_constraint,DF: None,DEFAULT None,,,,,
tf.keras.backend.any,axis,axis along which to perform the reduction.,axis along which to perform the reduction,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.any,axis,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Activation function to use,,,,,
tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Default hyperbolic tangent QSTR,,,,,
tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you pass QSTR no activation is applied ie,,,,,
tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,
tf.keras.layers.LSTMCell,activation,DF: tanh,DEFAULT DF_STR,,,,,
tf.math.reduce_logsumexp,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.reduce_logsumexp,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.fingerprint,data,A `Tensor`. Must have rank 1 or higher.,A D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
tf.fingerprint,data,A `Tensor`. Must have rank 1 or higher.,Must have rank CONSTANT_NUM or higher,,D_STRUCTURE,,CONSTANT_VAL,,
tf.debugging.assert_non_positive,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.signal.hamming_window,dtype,The data type to produce. Must be a floating point type.,The data type to produce,D_TYPE,,CONSTANT_VAL,,
tf.signal.hamming_window,dtype,The data type to produce. Must be a floating point type.,Must be a D_TYPE point type,D_TYPE,,CONSTANT_VAL,,
tf.signal.hamming_window,dtype,DF: tf.dtypes.float32,D_TYPE D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.RNN,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.RNN,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",If CONSTANT_BOOL process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.RNN,go_backwards,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.image.hsv_to_rgb,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.image.hsv_to_rgb,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Dense,bias_initializer,Initializer for the bias vector.,Initializer for the bias vector,D_TYPE,,,,
tf.keras.layers.Dense,bias_initializer,DF: zeros,DEFAULT DF_STR,D_TYPE,,,,
tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,Signatures to save with the SavedModel,,,,,
tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,Applicable to the QSTR format only,,,,,
tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,Please see the QSTR argument in tf saved_model save for details,,,,,
tf.keras.models.save_model,signatures,DF: None,DEFAULT None,,,,,
tf.keras.utils.register_keras_serializable,package,The package that this class belongs to.,The package that this class belongs to,D_TYPE,,,,
tf.keras.utils.register_keras_serializable,package,DF: Custom,DEFAULT DF_STR,D_TYPE,,,,
tf.nn.avg_pool3d,ksize,"An int or list of `ints` that has length `1`, `3` or `5`. The size of the window for each dimension of the input tensor.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.nn.avg_pool3d,ksize,"An int or list of `ints` that has length `1`, `3` or `5`. The size of the window for each dimension of the input tensor.",The size of the window for each dimension of the PARAM D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.preprocessing.image.random_channel_shift,x,Input tensor. Must be 3D.,Input D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_channel_shift,x,Input tensor. Must be 3D.,Must be CONSTANT_NUM D,,D_STRUCTURE,,CONSTANT_VAL,,
tf.math.erfinv,x,`Tensor` with type `float` or `double`.,D_STRUCTURE with type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",A D_STRUCTURE whose shape is a prefix of PARAM shape,D_TYPE,D_STRUCTURE,,,,
tf.quantization.fake_quant_with_min_max_args_gradient,max,An optional `float`. Defaults to `6`.,An optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.quantization.fake_quant_with_min_max_args_gradient,max,An optional `float`. Defaults to `6`.,Defaults to CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.quantization.fake_quant_with_min_max_args_gradient,max,DF: 6,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,Must have the same type as D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,Updates to scatter into output,D_TYPE,D_STRUCTURE,,,,
tf.linalg.lu_solve,rhs,"Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`. To handle vector cases, use: `lu_solve(..., rhs[..., tf.newaxis])[..., 0]`.",Matrix shaped D_TYPE D_STRUCTURE representing targets for which to solve A X RHS,D_TYPE,D_STRUCTURE,,,,
tf.linalg.lu_solve,rhs,"Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`. To handle vector cases, use: `lu_solve(..., rhs[..., tf.newaxis])[..., 0]`.",To handle vector cases use lu_solve rhs BSTR BSTR,D_TYPE,D_STRUCTURE,,,,
tf.keras.layers.LocallyConnected1D,filters,"Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",D_TYPE the dimensionality of the output space i e,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.LocallyConnected1D,filters,"Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",the number of output filters in the convolution,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.io.decode_compressed,bytes,A `Tensor` of type `string`. A Tensor of string which is compressed.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.io.decode_compressed,bytes,A `Tensor` of type `string`. A Tensor of string which is compressed.,A D_STRUCTURE of D_TYPE which is compressed,D_TYPE,D_STRUCTURE,,,,
tf.nn.max_pool_with_argmax,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.nn.max_pool_with_argmax,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SeparableConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The number of depthwise convolution output channels for each input channel,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.SeparableConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The total number of depthwise convolution output channels will be equal to filters_in depth_multiplier,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.SeparableConv2D,depth_multiplier,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.split,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.strings.split,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.config.threading.set_inter_op_parallelism_threads,num_threads,Number of parallel threads,Number of parallel threads,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.debugging.check_numerics,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.check_numerics,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.quantization.quantized_concat,input_maxes,A list with the same length as `values` of `Tensor` objects with type `float32`. The maximum scalar values for each of the input tensors.,A D_STRUCTURE with the same length as PARAM of D_STRUCTURE objects with type D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.quantization.quantized_concat,input_maxes,A list with the same length as `values` of `Tensor` objects with type `float32`. The maximum scalar values for each of the input tensors.,The maximum scalar PARAM for each of the input D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.feature_column.sequence_categorical_column_with_identity,default_value,"If `None`, this column's graph operations will fail for out-of-range inputs. Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",If QSTR this column graph operations will fail for out of range inputs,,,,"[0,&num_buckets)",
tf.feature_column.sequence_categorical_column_with_identity,default_value,"If `None`, this column's graph operations will fail for out-of-range inputs. Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",Otherwise this value must be in the range BSTR and will replace out of range inputs,,,,"[0,&num_buckets)",
tf.feature_column.sequence_categorical_column_with_identity,default_value,DF: None,DEFAULT None,,,,"[0,&num_buckets)",
tf.keras.preprocessing.image.random_shift,fill_mode,"Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",Points outside the boundaries of the input are filled according to the given mode one of QSTR,D_TYPE,,,,QSTR
tf.keras.preprocessing.image.random_shift,fill_mode,DF: nearest,DEFAULT DF_STR,D_TYPE,,,,QSTR
tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Index D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.io.parse_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,A D_STRUCTURE mapping feature keys to QSTR values,,D_STRUCTURE,,,,
tf.io.parse_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,These features are associated with data within the QSTR section of the QSTR proto,,D_STRUCTURE,,,,
tf.io.parse_sequence_example,sequence_features,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.math.cumprod,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.cumprod,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping3D,data_format,DF: None,DEFAULT None,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.debugging.assert_positive,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.grad_pass_through,f,function `f(*x)` that returns a `Tensor` or nested structure of `Tensor`outputs.,function f BSTR that returns a D_STRUCTURE or nested structure of D_STRUCTUREoutputs,,,,,
tf.keras.layers.LocallyConnected2D,kernel_initializer,Initializer for the `kernel` weights matrix.,Initializer for the QSTR weights matrix,D_TYPE,,,,
tf.keras.layers.LocallyConnected2D,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,D_TYPE,,,,
tf.data.experimental.rejection_resample,seed,(Optional.) Python integer seed for the resampler.,ONE_WORD BSTR,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.rejection_resample,seed,(Optional.) Python integer seed for the resampler.,Python D_TYPE seed for the resampler,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.rejection_resample,seed,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.relu,max_value,float. Saturation threshold.,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.relu,max_value,float. Saturation threshold.,Saturation PARAM,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.relu,max_value,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.tanh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.tanh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.keras.backend.batch_normalization,epsilon,Fuzz factor.,Fuzz factor,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.batch_normalization,epsilon,DF: 0.001,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.sets.intersection,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,D_TYPE,D_STRUCTURE,,,,
tf.sets.intersection,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,D_TYPE,D_STRUCTURE,,,,
tf.keras.regularizers.l1_l2,l2,Float; L2 regularization factor.,D_TYPE L2 regularization factor,D_TYPE,,CONSTANT_VAL,,
tf.keras.regularizers.l1_l2,l2,DF: 0.01,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.nn.atrous_conv2d_transpose,name,Optional name for the returned tensor.,Optional name for the returned D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.nn.atrous_conv2d_transpose,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,An D_TYPE specifying the number of feature batches to prefetch for performance improvement,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,Recommended value is the number of batches consumed per training step,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,Defaults to auto tune,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.data.experimental.make_csv_dataset,prefetch_buffer_size,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",An optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Defaults to CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",The replacement character codepoint to be used in place of any invalid formatting in the PARAM when PARAM QSTR,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Any valid unicode codepoint may be used,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",The default value is the default unicode replacement character is 0xFFFD or U CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Note that for UTF CONSTANT_NUM passing a replacement character expressible in CONSTANT_NUM byte such as QSTR will preserve D_TYPE alignment to the source since invalid bytes will be replaced with a CONSTANT_NUM byte replacement,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",For UTF CONSTANT_NUM BE and UTF CONSTANT_NUM LE any CONSTANT_NUM byte replacement character will preserve byte alignment to the source,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,replacement_char,DF: 65533,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.function,inputs,List of placeholder tensors.,D_STRUCTURE of placeholder D_STRUCTURE,,D_STRUCTURE,,,,
tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,ONE_WORD Optional,,,,,
tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,Specifies the gradient value returned when the given input D_STRUCTURE are unconnected,,,,,
tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,Accepted values are constants defined in the class tf UnconnectedGradients QSTR none,,,,,
tf.gradients,unconnected_gradients,DF: tf.UnconnectedGradients.NONE,tf UnconnectedGradients NONE,,,,,
tf.math.reduce_sum,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,D_TYPE,D_STRUCTURE,,,,
tf.math.reduce_sum,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,D_STRUCTURE,,,,
tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Must have the same type as PARAM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Shape is BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.no_op,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.no_op,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.add_n,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.add_n,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.encode_proto,message_type,A `string`. Name of the proto message type to decode.,A D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.io.encode_proto,message_type,A `string`. Name of the proto message type to decode.,PARAM of the proto message type to decode,D_TYPE,,CONSTANT_VAL,,
tf.math.top_k,sorted,If true the resulting `k` elements will be sorted by the values in descending order.,If CONSTANT_BOOL the resulting QSTR elements will be sorted by the values in descending order,D_TYPE,,CONSTANT_VAL,,
tf.math.top_k,sorted,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.clip,min_value,"Python float, integer, or tensor.",Python D_TYPE or D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.random_binomial,dtype,"String, dtype of returned tensor.",D_TYPE dtype of returned D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.random_binomial,dtype,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Order of the norm,D_TYPE,,,,QSTR
tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Supported values are QSTR CONSTANT_NUM np inf and any positive real number yielding the corresponding p norm,D_TYPE,,,,QSTR
tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Default is QSTR which is equivalent to Frobenius norm ifD_STRUCTURE is a matrix and equivalent to CONSTANT_NUM norm for vectors,D_TYPE,,,,QSTR
tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Some restrictions apply a The Frobenius norm QSTR is not defined for vectors b If PARAM is a CONSTANT_NUM D_STRUCTURE BSTR only QSTR CONSTANT_NUM np inf are supported,D_TYPE,,,,QSTR
tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",See the description of PARAM on how to compute norms for a batch of vectors or matrices stored in a D_STRUCTURE,D_TYPE,,,,QSTR
tf.norm,ord,DF: euclidean,DEFAULT DF_STR,D_TYPE,,,,QSTR
tf.keras.preprocessing.image.img_to_array,dtype,Dtype to use for the returned array.,Dtype to use for the returned D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.img_to_array,dtype,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.nn.depthwise_conv2d_backprop_input,strides,A list of `ints`. The stride of the sliding window for each dimension of the input of the convolution.,A D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.nn.depthwise_conv2d_backprop_input,strides,A list of `ints`. The stride of the sliding window for each dimension of the input of the convolution.,The stride of the sliding window for each dimension of the input of the convolution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.random.stateless_uniform,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,A CONSTANT_NUM D D_TYPE D_STRUCTURE or Python D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.random.stateless_uniform,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,The shape of the output D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.linalg.tridiagonal_matmul,rhs,"A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",A D_STRUCTURE of shape BSTR and with the same dtype as PARAM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.backend.count_params,x,Variable or tensor.,Variable or D_STRUCTURE,,D_STRUCTURE,,,,
tf.keras.backend.local_conv2d,kernel_size,"a tuple of 2 integers, specifying the width and height of the 2D convolution window.",a D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the width and height of the CONSTANT_NUM D convolution window,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.math.lbeta,x,"A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",A rank n CONSTANT_NUM D_STRUCTURE n REXPR with type D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.linalg.set_diag,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.set_diag,name,DF: set_diag,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If QSTR is QSTR BSTR the input is considered a vector and a single vector norm is computed over the entire set of values in the D_STRUCTURE i e,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",norm D_STRUCTURE PARAM PARAM QSTR norm reshape D_STRUCTURE BSTR PARAM PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If QSTR is a Python D_TYPE the input is considered a batch of vectors and QSTR determines the axis inD_STRUCTURE over which to compute vector norms,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If QSTR is a CONSTANT_NUM D_STRUCTURE of Python D_TYPE it is considered a batch of matrices and QSTR determines the axes in D_STRUCTURE over which to compute a matrix norm,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",Negative indices are supported,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",Example If you are passing a D_STRUCTURE that can be either a matrix or a batch of matrices at runtime pass axis BSTR instead of axis None to make sure that matrix norms are computed,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.normalize,axis,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.sparse.segment_mean,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,An optional D_TYPE scalar,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.sparse.segment_mean,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,Indicates the size of the outputD_STRUCTURE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.sparse.segment_mean,num_segments,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.linalg.matrix_transpose,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.matrix_transpose,name,DF: matrix_transpose,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,
tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",A BSTR D_STRUCTURE,,BSTR,CONSTANT_VAL,,
tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",The rank and dimensions may be unknown,,BSTR,CONSTANT_VAL,,
tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",Rank must be at least CONSTANT_NUM,,BSTR,CONSTANT_VAL,,
tf.gather_nd,batch_dims,An integer or a scalar 'Tensor'. The number of batch dimensions.,An D_TYPE or a scalar QSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.gather_nd,batch_dims,An integer or a scalar 'Tensor'. The number of batch dimensions.,The number of batch dimensions,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.gather_nd,batch_dims,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.keras.backend.random_uniform,seed,"Integer, random seed.",D_TYPE random seed,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.random_uniform,seed,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.nn.embedding_lookup_sparse,sp_weights,"either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1. If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",either a D_STRUCTURE of D_TYPE weights or QSTR to indicate all weights should be taken to be CONSTANT_NUM,D_TYPE,D_STRUCTURE,,,,
tf.nn.embedding_lookup_sparse,sp_weights,"either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1. If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",If specified QSTR must have exactly the same shape and indices as PARAM,D_TYPE,D_STRUCTURE,,,,
tf.keras.preprocessing.image.random_shear,channel_axis,Index of axis for channels in the input tensor.,Index of axis for channels in the input D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_shear,channel_axis,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.reduce_all,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.reduce_all,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",Non negative D_TYPE the number of out of vocabulary buckets,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",A positive QSTR can not be specified with PARAM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.backend.function,**kwargs,Passed to `tf.Session.run`.,Passed to tf Session run,,,,,
tf.keras.layers.SimpleRNNCell,units,"Positive integer, dimensionality of the output space.",Positive D_TYPE dimensionality of the output space,D_TYPE,,CONSTANT_VAL,"(0,inf)",
tf.io.decode_image,name,A name for the operation (optional),A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_image,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.parse_sequence_example,serialized,A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,A vector BSTR of type D_TYPE containing binary serialized QSTR protos,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.dynamic_partition,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.dynamic_partition,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.signal.mfccs_from_log_mel_spectrograms,log_mel_spectrograms,"A `[..., num_mel_bins]` `float32`/`float64` `Tensor`of log-magnitude mel-scale spectrograms.",A BSTR D_TYPE D_STRUCTUREof log magnitude mel scale spectrograms,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.math.argmax,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.argmax,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.nn.avg_pool3d,name,Optional name for the operation.,Optional name for the operation,D_TYPE,,CONSTANT_VAL,,
tf.nn.avg_pool3d,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.scatter_nd,updates,A `Tensor`. Updates to scatter into output.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.scatter_nd,updates,A `Tensor`. Updates to scatter into output.,Updates to scatter into output,,D_STRUCTURE,,,,
tf.keras.models.save_model,include_optimizer,"If True, save optimizer's state together.",If CONSTANT_BOOL save optimizer state together,D_TYPE,,CONSTANT_VAL,,
tf.keras.models.save_model,include_optimizer,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.nn.RNNCellDropoutWrapper,seed,"(optional) integer, the randomness seed.",BSTR D_TYPE the randomness seed,D_TYPE,,CONSTANT_VAL,,
tf.nn.RNNCellDropoutWrapper,seed,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.compat.as_text,encoding,A string indicating the charset for decoding unicode.,A D_TYPE indicating the charset for decoding unicode,D_TYPE,,CONSTANT_VAL,,
tf.compat.as_text,encoding,DF: utf-8,utf CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",Output directory for profiler,,,,,
tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",It is required when profiler is enabled when trace was started,,,,,
tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",Otherwise it is ignored,,,,,
tf.summary.trace_export,profiler_outdir,DF: None,DEFAULT None,,,,,
tf.linalg.logdet,matrix,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.logdet,matrix,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",Must be D_TYPE with shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.datasets.imdb.load_data,oov_char,words that were cut out because of the `num_words`or `skip_top` limit will be replaced with this character.,words that were cut out because of the PARAMor PARAM limit will be replaced with this character,D_TYPE,,CONSTANT_VAL,,
tf.keras.datasets.imdb.load_data,oov_char,DF: 2,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.foldl,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE each of which will be unpacked along their first dimension,,D_STRUCTURE,,,,
tf.foldl,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM,,D_STRUCTURE,,,,
tf.random.normal,mean,"A Tensor or Python value of type `dtype`, broadcastable with `stddev`. The mean of the normal distribution.",A D_STRUCTURE or Python value of type PARAM broadcastable with PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.random.normal,mean,"A Tensor or Python value of type `dtype`, broadcastable with `stddev`. The mean of the normal distribution.",The mean of the normal distribution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.random.normal,mean,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",A D_TYPE D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.compat.forward_compatible,year,"A year (e.g., 2018). Must be an `int`.",A year BSTR,D_TYPE,,CONSTANT_VAL,,
tf.compat.forward_compatible,year,"A year (e.g., 2018). Must be an `int`.",Must be an D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.sets.difference,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,D_TYPE,D_STRUCTURE,,,,
tf.sets.difference,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,D_TYPE,D_STRUCTURE,,,,
tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,min,A `Tensor` of type `float32`.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Optional long form description for this summary as a constant D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Markdown is supported,D_TYPE,,CONSTANT_VAL,,
tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Defaults to empty,D_TYPE,,CONSTANT_VAL,,
tf.summary.scalar,description,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",A D_STRUCTURE of shape BSTR whose inner most CONSTANT_NUM dimensions form matrices of size BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",Let QSTR be the minimum of QSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,data_format,A string. 'NHWC' and 'NCHW' are supported.,A D_TYPE,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.conv2d_transpose,data_format,A string. 'NHWC' and 'NCHW' are supported.,QSTR are supported,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.conv2d_transpose,data_format,DF: NHWC,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",Only valid in QSTR modes,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",If CONSTANT_BOOL the output will have its feature axis padded to PARAM even if the number of unique tokens in the vocabulary is less than PARAM resulting in a D_STRUCTURE of shape BSTR regardless of vocabulary size,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",Defaults to CONSTANT_BOOL,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.image.extract_glimpse,offsets,"A `Tensor` of type `float32`. A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.image.extract_glimpse,offsets,"A `Tensor` of type `float32`. A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR containing the y x locations of the center of each window,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.layers.BatchNormalization,gamma_constraint,Optional constraint for the gamma weight.,Optional constraint for the gamma weight,,,,,
tf.keras.layers.BatchNormalization,gamma_constraint,DF: None,DEFAULT None,,,,,
tf.keras.layers.SeparableConv1D,use_bias,"Boolean, whether the layer uses a bias.",D_TYPE whether the layer uses a bias,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SeparableConv1D,use_bias,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.any,keepdims,whether the drop or broadcast the reduction axes.,whether the drop or broadcast the reduction axes,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.any,keepdims,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.math.count_nonzero,keepdims,"If true, retains reduced dimensions with length 1.",If CONSTANT_BOOL retains reduced dimensions with length CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.math.count_nonzero,keepdims,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.strings.unicode_transcode,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Activation function to use,,,,,
tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Default hyperbolic tangent QSTR,,,,,
tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you pass QSTR no activation is applied ie,,,,,
tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,
tf.keras.layers.SimpleRNNCell,activation,DF: tanh,DEFAULT DF_STR,,,,,
tf.signal.inverse_stft,window_fn,"A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype. If set to `None`, no windowing is used.",A callable that takes a window length and a QSTR keyword argument and returns a BSTR D_STRUCTURE of samples in the provided datatype,,,,,
tf.signal.inverse_stft,window_fn,"A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype. If set to `None`, no windowing is used.",If set to QSTR no windowing is used,,,,,
tf.signal.inverse_stft,window_fn,DF: tf.signal.hann_window,tf signal hann_window,,,,,
tf.io.deserialize_many_sparse,rank,"(optional) Python int, the rank of the `SparseTensor` objects.",BSTR Python D_TYPE the rank of the D_STRUCTURE objects,D_TYPE,,CONSTANT_VAL,,
tf.io.deserialize_many_sparse,rank,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.expand_dims,name,Optional string. The name of the output `Tensor`.,Optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.expand_dims,name,Optional string. The name of the output `Tensor`.,The name of the output D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.expand_dims,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Concatenate,axis,Axis along which to concatenate.,Axis along which to concatenate,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Concatenate,axis,DF: -1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.nn.avg_pool2d,name,Optional name for the operation.,Optional name for the operation,D_TYPE,,CONSTANT_VAL,,
tf.nn.avg_pool2d,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.local_conv1d,strides,"a tuple of a single integer, specifying the stride length of the convolution.",a D_STRUCTURE of a single D_TYPE specifying the stride length of the convolution,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.layers.BatchNormalization,trainable,"Boolean, if `True` the variables will be marked as trainable.",D_TYPE if CONSTANT_BOOL the variables will be marked as trainable,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.BatchNormalization,trainable,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.AlphaDropout,rate,"float, drop probability (as with `Dropout`). The multiplicative noise will have standard deviation `sqrt(rate / (1 - rate))`.",D_TYPE drop probability as with QSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.AlphaDropout,rate,"float, drop probability (as with `Dropout`). The multiplicative noise will have standard deviation `sqrt(rate / (1 - rate))`.",The multiplicative noise will have standard deviation sqrt BSTR,D_TYPE,,CONSTANT_VAL,,
tf.strings.unsorted_segment_join,inputs,A `Tensor` of type `string`. The input to be joined.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.strings.unsorted_segment_join,inputs,A `Tensor` of type `string`. The input to be joined.,The input to be joined,D_TYPE,D_STRUCTURE,,,,
tf.nn.dilation2d,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.",A D_TYPE from QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.dilation2d,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.",The type of padding algorithm to use,D_TYPE,,CONSTANT_VAL,,QSTR
tf.compat.forward_compatibility_horizon,year,"A year (e.g., 2018). Must be an `int`.",A year BSTR,D_TYPE,,CONSTANT_VAL,,
tf.compat.forward_compatibility_horizon,year,"A year (e.g., 2018). Must be an `int`.",Must be an D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",Optional specification for splitting the input text,D_TYPE,,,,
tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",Values can be None BSTR QSTR BSTR or a Callable,D_TYPE,,,,
tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",The default is QSTR,D_TYPE,,,,
tf.keras.layers.experimental.preprocessing.TextVectorization,split,DF: SPLIT_ON_WHITESPACE,DEFAULT DF_STR,D_TYPE,,,,
tf.keras.backend.batch_normalization,x,Input tensor or variable.,Input D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,A potentially ragged D_TYPE D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,QSTR shape must be a prefix of PARAMs shape,D_TYPE,D_STRUCTURE,,,,
tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,rank BSTR must be known statically,D_TYPE,D_STRUCTURE,,,,
tf.nn.avg_pool1d,input,A 3-D `Tensor` of the format specified by `data_format`.,A CONSTANT_NUM D D_STRUCTURE of the format specified by PARAM,,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.batch_norm_with_global_normalization,scale_after_normalization,A bool indicating whether the resulted tensor needs to be multiplied with gamma.,A D_TYPE indicating whether the resulted D_STRUCTURE needs to be multiplied with PARAM,D_TYPE,,CONSTANT_VAL,,
tf.data.experimental.make_csv_dataset,file_pattern,List of files or patterns of file paths containing CSV records. See `tf.io.gfile.glob` for pattern rules.,D_STRUCTURE of files or patterns of file paths containing CSV records,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,file_pattern,List of files or patterns of file paths containing CSV records. See `tf.io.gfile.glob` for pattern rules.,See tf io gfile glob for pattern rules,,D_STRUCTURE,,,,
tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.ConvLSTM2D,data_format,DF: None,DEFAULT None,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.UpSampling2D,interpolation,"A string, one of `nearest` or `bilinear`.",A D_TYPE one of QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.layers.UpSampling2D,interpolation,DF: nearest,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.avg_pool,name,Optional name for the operation.,Optional name for the operation,D_TYPE,,CONSTANT_VAL,,
tf.nn.avg_pool,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.apply_channel_shift,intensity,Transformation intensity.,Transformation intensity,,,,,
tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",A D_TYPE specifying how to reduce if there are multiple entries in a single row,D_TYPE,,CONSTANT_VAL,,QSTR
tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",Currently QSTR are supported with QSTR the default,D_TYPE,,CONSTANT_VAL,,QSTR
tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",QSTR often achieves good accuracy in particular with bag of words columns,D_TYPE,,CONSTANT_VAL,,QSTR
tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",Each of this can be thought as example level normalizations on the column,D_TYPE,,CONSTANT_VAL,,QSTR
tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",For more information see tf embedding_lookup_sparse,D_TYPE,,CONSTANT_VAL,,QSTR
tf.feature_column.embedding_column,combiner,DF: mean,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.layers.minimum,inputs,A list of input tensors (at least 2).,A D_STRUCTURE of input D_STRUCTURE BSTR,,D_STRUCTURE,,,,
tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",whether to perform partial pivoting,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",CONSTANT_BOOL by default,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",Partial pivoting makes the procedure more stable but slower,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",Partial pivoting is unnecessary in some cases including diagonally dominant and symmetric positive definite matrices see e g,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",theorem CONSTANT_FLOAT in BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tridiagonal_solve,partial_pivoting,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",A D_STRUCTURE whose shape is a prefix of data shape,D_TYPE,D_STRUCTURE,,,,
tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",Negative segment ids are not supported,D_TYPE,D_STRUCTURE,,,,
tf.keras.layers.LayerNormalization,beta_constraint,Optional constraint for the beta weight.,Optional constraint for the beta weight,,,,,
tf.keras.layers.LayerNormalization,beta_constraint,DF: None,DEFAULT None,,,,,
tf.io.gfile.listdir,path,"string, path to a directory",D_TYPE path to a directory,D_TYPE,,CONSTANT_VAL,,
tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",Expected shape of elements of PARAM BSTR,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",Also controls the output shape of this op which may affect type inference in other ops,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",A value of QSTR means infer the input shape from the shapes in PARAM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.math.accumulate_n,shape,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.ConvLSTM2D,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence.",ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.ConvLSTM2D,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence.",Whether to return the last output in the output D_STRUCTURE or the full D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.ConvLSTM2D,return_sequences,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.io.gfile.mkdir,path,"string, name of the directory to be created",D_TYPE name of the directory to be created,D_TYPE,,CONSTANT_VAL,,
tf.rank,input,A `Tensor` or `SparseTensor`.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.keras.backend.in_top_k,targets,A 1D tensor of length `batch_size` and type `int32` or `int64`.,A CONSTANT_NUM D D_STRUCTURE of length QSTR and type D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.backend.not_equal,x,Tensor or variable.,D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.math.l2_normalize,name,A name for this operation (optional).,A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.l2_normalize,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_shear,cval,Value used for points outside the boundaries     of the input if `mode='constant'`.,Value used for points outside the boundaries of the input if mode QSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_shear,cval,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_reconstruct,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_reconstruct').",Python D_TYPE name given to ops managed by this object,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_reconstruct,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_reconstruct').",Default value QSTR i e QSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_reconstruct,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.random.fixed_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,A D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.random.fixed_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,Determines whether all sampled classes in a batch are unique,D_TYPE,,CONSTANT_VAL,,
tf.math.segment_min,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.segment_min,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.feature_column.embedding_column,categorical_column,A `CategoricalColumn` created by a`categorical_column_with_*` function. This column produces the sparse IDs that are inputs to the embedding lookup.,A QSTR created by a categorical_column_with function,,,,,
tf.feature_column.embedding_column,categorical_column,A `CategoricalColumn` created by a`categorical_column_with_*` function. This column produces the sparse IDs that are inputs to the embedding lookup.,This column produces the sparse IDs that are inputs to the embedding lookup,,,,,
tf.keras.layers.ConvLSTM2D,bias_initializer,Initializer for the bias vector.,Initializer for the bias vector,D_TYPE,,,,
tf.keras.layers.ConvLSTM2D,bias_initializer,DF: zeros,DEFAULT DF_STR,D_TYPE,,,,
tf.linalg.tensor_diag,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.tensor_diag,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.sequence.pad_sequences,sequences,"List of lists, where each element is a sequence.",D_STRUCTURE of D_STRUCTURE where each element is a D_STRUCTURE,,D_STRUCTURE,,,,
tf.strided_slice,end_mask,An `int32` mask.,An D_TYPE mask,D_TYPE,,CONSTANT_VAL,,
tf.strided_slice,end_mask,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.device,device_name,The device name to use in the context.,The device name to use in the context,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.in_test_phase,training,"Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",Optional scalar D_STRUCTURE BSTR specifying the learning phase,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.backend.in_test_phase,training,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.sparse.maximum,sp_a,"a `SparseTensor` operand whose dtype is real, and indices lexicographically ordered.",a D_STRUCTURE operand whose dtype is real and indices lexicographically ordered,,D_STRUCTURE,,,,
tf.nn.RNNCellDropoutWrapper,**kwargs,dict of keyword arguments for base layer.,D_STRUCTURE of keyword arguments for base layer,,D_STRUCTURE,,,,
tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",implementation mode either CONSTANT_NUM CONSTANT_NUM loops over input spatial locations to perform the forward pass,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",It is memory efficient but performs a lot of BSTR ops CONSTANT_NUM stores layer weights in a dense but sparsely populated CONSTANT_NUM D matrix and implements the forward pass as a single matrix multiply,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",It uses a lot of RAM but performs few BSTR ops CONSTANT_NUM stores layer weights in a sparse D_STRUCTURE and implements the forward pass as a single sparse matrix multiply How to choose CONSTANT_NUM large dense models CONSTANT_NUM small models CONSTANT_NUM large sparse models where QSTR stands for large input output activations i e,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",many PARAM QSTR large np prod BSTR np prod BSTR and QSTR stands for few connections between inputs and outputs i e,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",small ratio PARAM input_filters np prod BSTR where inputs to and outputs of the layer are assumed to have shapes input_size BSTR output_size BSTR respectively,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,implementation,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_channel_shift,intensity_range,Transformation intensity.,Transformation intensity,,,,,
tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",CONSTANT_NUM D,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",Represents the shape of the output D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.sparse.from_dense,tensor,A dense `Tensor` to be converted to a `SparseTensor`.,A dense D_STRUCTURE to be converted to a D_STRUCTURE,,D_STRUCTURE,,,,
tf.keras.backend.map_fn,elems,tensor,ONE_WORD D_STRUCTURE,,,,,
tf.keras.layers.Conv1D,activity_regularizer,"Regularizer function applied to the output of the layer (its ""activation"")..",Regularizer function applied to the output of the layer BSTR,,,,,
tf.keras.layers.Conv1D,activity_regularizer,DF: None,DEFAULT None,,,,,
tf.sets.difference,aminusb,"Whether to subtract `b` from `a`, vs vice versa.",Whether to subtract QSTR from QSTR vs vice versa,D_TYPE,,CONSTANT_VAL,,
tf.sets.difference,aminusb,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.random.poisson,lam,A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM QSTR provides the rate parameter BSTR to sample,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.foldl,parallel_iterations,(optional) The number of iterations allowed to run in parallel.,BSTR The number of iterations allowed to run in parallel,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.foldl,parallel_iterations,DF: 10,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.GRU,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.GRU,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",If CONSTANT_BOOL process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.GRU,go_backwards,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.io.gfile.rename,overwrite,"boolean, if false it's an error for `dst` to be occupied by an existing file.",D_TYPE if CONSTANT_BOOL it an error for PARAM to be occupied by an existing file,D_TYPE,,CONSTANT_VAL,,
tf.io.gfile.rename,overwrite,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.autograph.to_graph,recursive,Whether to recursively convert any functions that the converted function may call.,Whether to recursively convert any functions that the converted function may call,D_TYPE,,CONSTANT_VAL,,
tf.autograph.to_graph,recursive,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",The PARAM stride for atrous morphological dilation,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",Must be BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.autograph.to_graph,entity,Python callable or class to convert.,Python callable or class to convert,,,,,
tf.math.confusion_matrix,weights,An optional `Tensor` whose shape matches `predictions`.,An optional D_STRUCTURE whose shape matches PARAM,D_TYPE,D_STRUCTURE,BSTR,,,
tf.math.confusion_matrix,weights,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,BSTR,,,
tf.keras.backend.normalize_batch_in_training,beta,Tensor with which to center the input.,D_STRUCTURE with which to center the input,,D_STRUCTURE,,,,
tf.debugging.assert_shapes,name,"A name for this operation (optional).  Defaults to ""assert_shapes"".",A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.assert_shapes,name,"A name for this operation (optional).  Defaults to ""assert_shapes"".",Defaults to QSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.assert_shapes,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.linalg.cholesky,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.cholesky,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.reduce_mean,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,D_TYPE,D_STRUCTURE,,,,
tf.math.reduce_mean,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,D_STRUCTURE,,,,
tf.image.non_max_suppression_padded,scores,A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.math.zeta,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.zeta,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.py_function,inp,A list of `Tensor` objects.,A D_STRUCTURE of D_STRUCTURE objects,,D_STRUCTURE,,,,
tf.test.create_local_cluster,num_workers,Number of worker servers to start.,Number of worker servers to start,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.feature_column.embedding_column,tensor_name_in_ckpt,Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights. Required if `ckpt_to_load_from` is not`None`.,Name of the D_STRUCTURE in PARAM from which to restore the column weights,D_TYPE,,CONSTANT_VAL,,
tf.feature_column.embedding_column,tensor_name_in_ckpt,Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights. Required if `ckpt_to_load_from` is not`None`.,Required if PARAM is not QSTR,D_TYPE,,CONSTANT_VAL,,
tf.feature_column.embedding_column,tensor_name_in_ckpt,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",If specified calls QSTR at an interval of QSTR seconds,D_TYPE,,CONSTANT_VAL,,
tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Defaults to CONSTANT_NUM seconds,D_TYPE,,CONSTANT_VAL,,
tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Either this or PARAM must be set,D_TYPE,,CONSTANT_VAL,,
tf.estimator.experimental.stop_if_lower_hook,run_every_secs,DF: 60,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.summary.create_file_writer,name,a name for the op that creates the writer.,a name for the op that creates the writer,D_TYPE,,CONSTANT_VAL,,
tf.summary.create_file_writer,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,An optional D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Defaults to CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Number of color channels for the decoded image,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.io.decode_image,channels,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNN,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.save_img,**kwargs,Additional keyword arguments passed to `PIL.Image.save()`.,Additional keyword arguments passed to PIL Image save,,,,,
tf.math.log_sigmoid,x,A Tensor with type `float32` or `float64`.,A D_STRUCTURE with type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.io.parse_tensor,serialized,A `Tensor` of type `string`. A scalar string containing a serialized TensorProto proto.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.io.parse_tensor,serialized,A `Tensor` of type `string`. A scalar string containing a serialized TensorProto proto.,A scalar D_TYPE containing a serialized TensorProto proto,D_TYPE,D_STRUCTURE,,,,
tf.extract_volume_patches,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.We specify the size-related attributes as:",A D_TYPE from QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.extract_volume_patches,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.We specify the size-related attributes as:",The type of padding algorithm to use We specify the size related attributes as,D_TYPE,,CONSTANT_VAL,,QSTR
tf.image.combined_non_max_suppression,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.image.combined_non_max_suppression,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.random.fixed_unigram_candidate_sampler,num_sampled,An `int`.  The number of classes to randomly sample.,An D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.random.fixed_unigram_candidate_sampler,num_sampled,An `int`.  The number of classes to randomly sample.,The number of classes to randomly sample,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.math.minimum,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.minimum,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.keras.backend.local_conv1d,data_format,"the data format, channels_first or channels_last.",the data format channels_first or channels_last,,,,,
tf.keras.backend.local_conv1d,data_format,DF: None,DEFAULT None,,,,,
tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.GRUCell,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.shape_n,out_type,The specified output type of the operation (`int32` or `int64`). Defaults to `tf.int32`(optional).,The specified output type of the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.shape_n,out_type,The specified output type of the operation (`int32` or `int64`). Defaults to `tf.int32`(optional).,Defaults to D_TYPE BSTR,D_TYPE,,CONSTANT_VAL,,
tf.shape_n,out_type,DF: tf.dtypes.int32,D_TYPE D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.variable,dtype,Tensor type.,D_STRUCTURE type,D_TYPE,D_STRUCTURE,,,,
tf.keras.backend.variable,dtype,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
tf.edit_distance,hypothesis,A `SparseTensor` containing hypothesis sequences.,A D_STRUCTURE containing hypothesis sequences,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",A optional D_STRUCTURE of default values for the CSV fields,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",One item per selected column of the input record,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",Each item in the D_STRUCTURE is either a valid CSV dtype BSTR or aD_STRUCTURE with one of the aforementioned types,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",The D_STRUCTURE can either be a scalar default value BSTR,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If a dtype is provided instead of a D_STRUCTURE the column is also treated as required,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If this D_STRUCTURE is not provided tries to infer types based on reading the first PARAM rows of files specified and assumes all columns are optional defaulting to CONSTANT_NUMfor D_TYPE values and for D_TYPE values,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If both this and PARAM are specified these must have the same lengths and QSTR is assumed to be sorted in order of increasing column index,,D_STRUCTURE,,,,
tf.data.experimental.make_csv_dataset,column_defaults,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.image.ssim,img1,First image batch.,First image batch,D_TYPE,,,,
tf.linalg.svd,tensor,"`Tensor` of shape `[..., M, N]`. Let `P` be the minimum of `M` and`N`.",D_STRUCTURE of shape BSTR,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.svd,tensor,"`Tensor` of shape `[..., M, N]`. Let `P` be the minimum of `M` and`N`.",Let QSTR be the minimum of QSTR,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.histogram_fixed_width_bins,name,A name for this operation (defaults to 'histogram_fixed_width').,A name for this operation defaults to QSTR,D_TYPE,,CONSTANT_VAL,,
tf.histogram_fixed_width_bins,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.reciprocal,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.reciprocal,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SimpleRNNCell,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.math.floor,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.floor,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",ONE_WORD BSTR,,D_STRUCTURE,,CONSTANT_VAL,,
tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",An QSTR proto with the BSTR D_STRUCTURE of QSTR used by the producer of the graph,,D_STRUCTURE,,CONSTANT_VAL,,
tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",If provided unrecognized attrs for ops in PARAM that have their default value according to QSTR will be removed,,D_STRUCTURE,,CONSTANT_VAL,,
tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",This will allow some more QSTR produced by later binaries to be accepted by earlier binaries,,D_STRUCTURE,,CONSTANT_VAL,,
tf.graph_util.import_graph_def,producer_op_list,DF: None,DEFAULT None,,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.backend.relu,threshold,float. Threshold value for thresholded activation.,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.relu,threshold,float. Threshold value for thresholded activation.,Threshold value for thresholded activation,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.relu,threshold,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.DenseFeatures,**kwargs,Keyword arguments to construct a layer.,Keyword arguments to construct a layer,,,,,
tf.keras.backend.batch_normalization,axis,"Integer, the axis that should be normalized. (typically the features axis).",D_TYPE the axis that should be normalized,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.batch_normalization,axis,"Integer, the axis that should be normalized. (typically the features axis).",ONE_WORD BSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.batch_normalization,axis,DF: -1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.argmin,x,Tensor or variable.,D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.keras.experimental.SequenceFeatures,name,Name to give to the SequenceFeatures.,Name to give to the SequenceFeatures,D_TYPE,,CONSTANT_VAL,,
tf.keras.experimental.SequenceFeatures,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.encode_proto,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.io.encode_proto,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.nn.batch_norm_with_global_normalization,beta,A 1D beta Tensor with size matching the last dimension of t. An offset to be added to the normalized tensor.,A CONSTANT_NUM D beta D_STRUCTURE with size matching the last dimension of t An offset to be added to the normalized D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.AveragePooling2D,data_format,DF: None,DEFAULT None,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.SeparableConv1D,trainable,"Boolean, if `True` the weights of this layer will be marked as trainable (and listed in `layer.trainable_weights`).",D_TYPE if CONSTANT_BOOL the weights of this layer will be marked as trainable and listed in layer trainable_weights,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.SeparableConv1D,trainable,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.parse_single_sequence_example,example_name,"A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",A scalar BSTR the PARAM of the PARAM proto,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.io.parse_single_sequence_example,example_name,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.Conv1D,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,
tf.keras.layers.Conv1D,kernel_regularizer,DF: None,DEFAULT None,,,,,
tf.tensor_scatter_nd_sub,tensor,A `Tensor`. Tensor to copy/update.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.tensor_scatter_nd_sub,tensor,A `Tensor`. Tensor to copy/update.,D_STRUCTURE to copy update,,D_STRUCTURE,,,,
tf.nn.conv1d,input,"A 3D `Tensor`.  Must be of type `float16`, `float32`, or `float64`.",A CONSTANT_NUM D D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.conv1d,input,"A 3D `Tensor`.  Must be of type `float16`, `float32`, or `float64`.",Must be of type D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.strings.to_number,input,A `Tensor` of type `string`.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.keras.layers.dot,**kwargs,Standard layer keyword arguments.,Standard layer keyword arguments,,,,,
tf.nn.compute_accidental_hits,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",A D_STRUCTURE of type D_TYPE and shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.compute_accidental_hits,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",The target classes,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.strings.ngrams,name,The op name.,The op name,D_TYPE,,CONSTANT_VAL,,
tf.strings.ngrams,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.temporal_padding,padding,"Tuple of 2 integers, how many zeros to add at the start and end of dim 1.",D_STRUCTURE of CONSTANT_NUM D_TYPE how many zeros to add at the start and end of dim CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.backend.temporal_padding,padding,"DF: (1, 1)",DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.io.encode_proto,sizes,"A `Tensor` of type `int32`. Tensor of int32 with shape `[batch_shape, len(field_names)]`.",A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.io.encode_proto,sizes,"A `Tensor` of type `int32`. Tensor of int32 with shape `[batch_shape, len(field_names)]`.",D_STRUCTURE of D_TYPE with shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.zeros,name,Optional string. A name for the operation.,Optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.zeros,name,Optional string. A name for the operation.,A name for the operation,D_TYPE,,CONSTANT_VAL,,
tf.zeros,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.nn.safe_embedding_lookup_sparse,max_norm,"If not `None`, all embeddings are l2-normalized to max_norm before combining.",If not QSTR all embeddings are l2 normalized to max_norm before combining,,,,,
tf.nn.safe_embedding_lookup_sparse,max_norm,DF: None,DEFAULT None,,,,,
tf.keras.layers.SeparableConv1D,padding,"One of `""valid""`, `""same""`, or `""causal""` (case-insensitive).",One of QSTR BSTR,D_TYPE,,,,QSTR
tf.keras.layers.SeparableConv1D,padding,DF: valid,DEFAULT DF_STR,D_TYPE,,,,QSTR
tf.ensure_shape,x,A `Tensor`.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.keras.layers.Conv3D,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,
tf.keras.layers.Conv3D,kernel_regularizer,DF: None,DEFAULT None,,,,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",Must be D_TYPE shape is BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",Cholesky factorization of QSTR e g,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",chol tf linalg cholesky BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",For that reason only the lower triangular parts BSTR of the last two dimensions of QSTR are used,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",The strictly upper part is assumed to be zero and not accessed,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.estimator.add_metrics,estimator,A `tf.estimator.Estimator` object.,A tf estimator Estimator object,,,,,
tf.keras.backend.prod,axis,"An integer, the axis to compute the product.",An D_TYPE the axis to compute the product,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.prod,axis,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.conv2d_transpose,kernel,kernel tensor.,kernel D_STRUCTURE,,D_STRUCTURE,,,,
tf.signal.inverse_stft_window_fn,frame_step,An integer scalar `Tensor`. The number of samples to step.,An D_TYPE scalar D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.signal.inverse_stft_window_fn,frame_step,An integer scalar `Tensor`. The number of samples to step.,The number of samples to step,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.math.reciprocal,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.reciprocal,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,An optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,Defaults to CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,If CONSTANT_BOOL try to recover an image from truncated input,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,try_recover_truncated,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.strings.lower,input,A `Tensor` of type `string`.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.quantization.quantize_and_dequantize,range_given,"If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",If CONSTANT_BOOL use PARAM and PARAM for the range of the PARAM otherwise determine min and max from the PARAM D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.quantization.quantize_and_dequantize,range_given,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.math.unsorted_segment_min,num_segments,"A `Tensor`. Must be one of the following types: `int32`, `int64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.math.unsorted_segment_min,num_segments,"A `Tensor`. Must be one of the following types: `int32`, `int64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.PReLU,alpha_initializer,Initializer function for the weights.,Initializer function for the weights,,,,,
tf.keras.layers.PReLU,alpha_initializer,DF: zeros,DEFAULT DF_STR,,,,,
tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",Must have the same type as PARAM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",A CONSTANT_NUM D D_STRUCTURE of shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",If not QSTR a function that can be used to normalize the value of the D_STRUCTURE after PARAM is applied for parsing,,,,,
tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Normalizer function takes the input D_STRUCTURE as its argument and returns the output D_STRUCTURE,,,,,
tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",e g,,,,,
tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",lambda x BSTR,,,,,
tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Please note that even though the most common use case of this function is normalization it can be used for any kind of Tensorflow transformations,,,,,
tf.feature_column.numeric_column,normalizer_fn,DF: None,DEFAULT None,,,,,
tf.linalg.solve,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.solve,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.nn.dropout,x,A floating point tensor.,A D_TYPE point D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Cropping2D,data_format,DF: None,DEFAULT None,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.math.equal,y,A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,A D_STRUCTURE or tf IndexedSlices,,D_STRUCTURE,,,,
tf.audio.decode_wav,contents,"A `Tensor` of type `string`. The WAV-encoded audio, usually from a file.",A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.audio.decode_wav,contents,"A `Tensor` of type `string`. The WAV-encoded audio, usually from a file.",The WAV encoded audio usually from a file,D_TYPE,D_STRUCTURE,,,,
tf.io.serialize_tensor,tensor,A `Tensor`. A Tensor of type `T`.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.io.serialize_tensor,tensor,A `Tensor`. A Tensor of type `T`.,A D_STRUCTURE of type QSTR,,D_STRUCTURE,,,,
tf.keras.layers.GRUCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,
tf.keras.layers.GRUCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Default QSTR,,,,,
tf.keras.layers.GRUCell,kernel_constraint,DF: None,DEFAULT None,,,,,
tf.bitwise.right_shift,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.bitwise.right_shift,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.feature_column.sequence_categorical_column_with_identity,key,A unique string identifying the input feature.,A unique D_TYPE identifying the input feature,D_TYPE,,CONSTANT_VAL,,
tf.scatter_nd,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.scatter_nd,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.math.logical_and,y,A `Tensor` of type `bool`.,A D_STRUCTURE of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.cond,false_fn,The callable to be performed if pred is false.,The callable to be performed if PARAM is CONSTANT_BOOL,,,,,
tf.cond,false_fn,DF: None,DEFAULT None,,,,,
tf.keras.layers.SeparableConv1D,activation,Activation function. Set it to None to maintain a linear activation.,Activation function,,,,,
tf.keras.layers.SeparableConv1D,activation,Activation function. Set it to None to maintain a linear activation.,Set it to None to maintain a linear activation,,,,,
tf.keras.layers.SeparableConv1D,activation,DF: None,DEFAULT None,,,,,
tf.math.atan2,y,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.atan2,y,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",if CONSTANT_BOOL BSTR types of sequences are checked as well including the keys of dictionaries,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",If set to CONSTANT_BOOL for example a D_STRUCTURE of objects will look the same if they have the same size,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",Note that namedtuples with identical name and fields are always considered to have the same shallow structure,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",Two types will also be considered the same if they are both D_STRUCTURE subtypes which allows QSTR from trackable dependency tracking to compare equal,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nest.assert_same_structure,check_types,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.embedding_lookup_sparse,max_norm,"If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",If not QSTR each embedding is clipped if its l2 norm is larger than this value before combining,,,,,
tf.nn.embedding_lookup_sparse,max_norm,DF: None,DEFAULT None,,,,,
tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,An optional D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Defaults to CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Pad pre decimal numbers to this width,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Applies to both D_TYPE point and D_TYPE numbers,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Only used if width CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.as_string,width,DF: -1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.math.is_non_decreasing,name,"A name for this operation (optional).  Defaults to ""is_non_decreasing""",A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.is_non_decreasing,name,"A name for this operation (optional).  Defaults to ""is_non_decreasing""",Defaults to QSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.is_non_decreasing,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.compat.as_text,bytes_or_text,"A `bytes`, `str`, or `unicode` object.",A QSTR D_TYPE or QSTR object,,,,,
tf.keras.layers.ConvLSTM2D,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs.",Initializer for the QSTR weights matrix used for the linear transformation of the inputs,D_TYPE,,,,
tf.keras.layers.ConvLSTM2D,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Sets the format of the checkpoint saved by the estimator when training,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",May be QSTR depending on whether to save checkpoints from tf compat v1 train Saver QSTR tf train Checkpoint,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",The default is QSTR,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Estimators use name based tf train Saver checkpoints while Keras models use object based checkpoints from tf train Checkpoint,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Currently saving object based checkpoints from QSTR is only supported by Functional and Sequential models,D_TYPE,,,,
tf.keras.estimator.model_to_estimator,checkpoint_format,DF: checkpoint,DEFAULT DF_STR,D_TYPE,,,,
tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LSTM,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,An optional name D_TYPE for the layer,D_TYPE,,CONSTANT_VAL,,
tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,Should be unique in a model BSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,It will be autogenerated if it isn t provided,D_TYPE,,CONSTANT_VAL,,
tf.keras.Input,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.apply_channel_shift,channel_axis,Index of axis for channels in the input tensor.`,Index of axis for channels in the input D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.apply_channel_shift,channel_axis,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.linalg.pinv,name,Python `str` prefixed to ops created by this function. Default value: 'pinv'.,Python D_TYPE prefixed to ops created by this function,D_TYPE,,CONSTANT_VAL,,
tf.linalg.pinv,name,Python `str` prefixed to ops created by this function. Default value: 'pinv'.,Default value QSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.pinv,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",A D_STRUCTURE representing audio data with shape BSTR where QSTR is the number of audio clips QSTR is the number of frames and QSTR is the number of channels,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[-1.0,1.0]",
tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",Elements should be D_TYPE point values in BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[-1.0,1.0]",
tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",Any of the dimensions may be statically unknown i e QSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[-1.0,1.0]",
tf.nn.convolution,filters,Alias of filter.,Alias of filter,,,,,
tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",An optional D_TYPE from QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Defaults to QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Specify the data format of the PARAM and output data,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",With the default format QSTR the data is stored in the order of BSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Alternatively the format could be QSTR the data storage order of BSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.depthwise_conv2d_backprop_filter,data_format,DF: NHWC,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.estimator.regressor_parse_example_spec,label_dimension,"Number of regression targets per example. This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",Number of regression targets per example,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.estimator.regressor_parse_example_spec,label_dimension,"Number of regression targets per example. This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",This is the size of the last dimension of the labels and logits D_STRUCTURE objects typically these have shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.estimator.regressor_parse_example_spec,label_dimension,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.utils.plot_model,show_layer_names,whether to display layer names.,whether to display layer names,D_TYPE,,CONSTANT_VAL,,
tf.keras.utils.plot_model,show_layer_names,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",Dump data from only the D_STRUCTURE from op types that matches to the regular expression through Python re match,,,,,
tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",QSTR refers to the names of the TensorFlow operations e g QSTR which may repeat in a TensorFlow function,,,,,
tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",It does not refer to the names of nodes e g dense MatMul dense CONSTANT_NUM MatMul CONSTANT_NUM which are unique within a function REXPR REXPR REXPR CONSTANT_NUM Dump D_STRUCTURE data from only MatMul and Relu ops op_regex MatMul Relu,,,,,
tf.debugging.experimental.enable_dump_debug_info,op_regex,DF: None,DEFAULT None,,,,,
tf.image.random_crop,name,A name for this operation (optional).,A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.image.random_crop,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.less_equal,y,Tensor or variable.,D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.linalg.matmul,adjoint_b,"If `True`, `b` is conjugated and transposed before multiplication.",If CONSTANT_BOOL QSTR is conjugated and transposed before multiplication,D_TYPE,,CONSTANT_VAL,,
tf.linalg.matmul,adjoint_b,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.make_tensor_proto,values,Values to put in the TensorProto.,Values to put in the TensorProto,,,,,
tf.io.parse_single_example,name,A name for this operation (optional).,A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.io.parse_single_example,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.variable_creator_scope,variable_creator,the passed creator,the passed creator,,,,,
tf.sparse.retain,sp_input,The input `SparseTensor` with `N` non-empty elements.,The input D_STRUCTURE with QSTR non empty elements,,D_STRUCTURE,,,,
tf.random.all_candidate_sampler,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",A D_STRUCTURE of type D_TYPE and shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.random.all_candidate_sampler,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",The target classes,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.layers.Conv3DTranspose,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,
tf.keras.layers.Conv3DTranspose,kernel_regularizer,DF: None,DEFAULT None,,,,,
tf.nn.safe_embedding_lookup_sparse,combiner,"A string specifying how to combine embedding results for each entry. Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",A D_TYPE specifying how to combine embedding results for each entry,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.safe_embedding_lookup_sparse,combiner,"A string specifying how to combine embedding results for each entry. Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",Currently QSTR are supported with QSTR the default,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.safe_embedding_lookup_sparse,combiner,DF: mean,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.normalize_moments,name,Name used to scope the operations that compute the moments.,Name used to scope the operations that compute the moments,D_TYPE,,CONSTANT_VAL,,
tf.nn.normalize_moments,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.debugging.Assert,name,A name for this operation (optional).,A name for this operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.debugging.Assert,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.debugging.assert_shapes,data,The tensors to print out if the condition is False.  Defaults to error message and first few entries of the violating tensor.,The D_STRUCTURE to print out if the condition is CONSTANT_BOOL,,D_STRUCTURE,,,,
tf.debugging.assert_shapes,data,The tensors to print out if the condition is False.  Defaults to error message and first few entries of the violating tensor.,Defaults to error PARAM and first few entries of the violating D_STRUCTURE,,D_STRUCTURE,,,,
tf.debugging.assert_shapes,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Python D_TYPE indicating whether arguments should be checked for correctness,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Note this function does not verify the implied matrix is actually invertible even when validate_args CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Default value CONSTANT_BOOL i e don t validate arguments,D_TYPE,,CONSTANT_VAL,,
tf.linalg.lu_matrix_inverse,validate_args,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_mean,axis,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,An optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,Defaults to CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,If CONSTANT_BOOL use a slower but nicer upscaling of the chroma planes BSTR,D_TYPE,,CONSTANT_VAL,,
tf.io.decode_jpeg,fancy_upscaling,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.conv1d,strides,stride integer.,stride D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.conv1d,strides,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.linalg.logm,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linalg.logm,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,A scalar D_TYPE D_STRUCTURE indicating the axis to frame,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,Defaults to the last axis,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,Supports negative values for indexing from the end,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.signal.frame,axis,DF: -1,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.math.zero_fraction,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.zero_fraction,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.sets.size,a,"`SparseTensor`, with indices sorted in row-major order.",D_STRUCTURE with indices sorted in row major order,,D_STRUCTURE,,,,
tf.space_to_batch,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.space_to_batch,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.sparse.softmax,sp_input,"N-D `SparseTensor`, where `N >= 2`.",N D D_STRUCTURE where N REXPR,,D_STRUCTURE,,CONSTANT_VAL,,
tf.data.experimental.from_variant,variant,A scalar `tf.variant` tensor representing a dataset.,A scalar tf variant D_STRUCTURE representing a dataset,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.image.adjust_jpeg_quality,jpeg_quality,Python int or Tensor of type int32. jpeg encoding quality.,Python D_TYPE or D_STRUCTURE of type D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.image.adjust_jpeg_quality,jpeg_quality,Python int or Tensor of type int32. jpeg encoding quality.,jpeg encoding quality,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Activation function to use,,,,,
tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you don t specify anything no activation is applied ie,,,,,
tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,
tf.keras.layers.LocallyConnected2D,activation,DF: None,DEFAULT None,,,,,
tf.math.asinh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.asinh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.sequence_mask,lengths,"integer tensor, all its values <= maxlen.",D_TYPE D_STRUCTURE all its values REXPR,D_TYPE,D_STRUCTURE,,,"[0,inf)",
tf.keras.layers.BatchNormalization,beta_regularizer,Optional regularizer for the beta weight.,Optional regularizer for the beta weight,,,,,
tf.keras.layers.BatchNormalization,beta_regularizer,DF: None,DEFAULT None,,,,,
tf.tensor_scatter_nd_update,tensor,A `Tensor`. Tensor to copy/update.,A D_STRUCTURE,,D_STRUCTURE,,,,
tf.tensor_scatter_nd_update,tensor,A `Tensor`. Tensor to copy/update.,D_STRUCTURE to copy update,,D_STRUCTURE,,,,
tf.nn.max_pool1d,data_format,"An optional string from: ""NWC"", ""NCW"". Defaults to ""NWC"".",An optional D_TYPE from QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.max_pool1d,data_format,"An optional string from: ""NWC"", ""NCW"". Defaults to ""NWC"".",Defaults to QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.max_pool1d,data_format,DF: NWC,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.backend.pool2d,padding,"string, `""same""` or `""valid""`.",D_TYPE QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.backend.pool2d,padding,DF: valid,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.keras.datasets.reuters.load_data,skip_top,skip the top N most frequently occurring words (which may not be informative).,skip the top N most frequently occurring words BSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.datasets.reuters.load_data,skip_top,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.keras.layers.Conv3D,data_format,DF: None,DEFAULT None,D_TYPE,BSTR,CONSTANT_VAL,,QSTR
tf.image.resize,images,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Optional specification for ngrams to create from the possibly PARAM input text,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Values can be None an D_TYPE or D_STRUCTURE of D_TYPE passing an D_TYPE will create ngrams up to that D_TYPE and passing a D_STRUCTURE of D_TYPE will create ngrams for the specified values in the D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Passing None means that no ngrams will be created,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.nn.avg_pool2d,data_format,A string. 'NHWC' and 'NCHW' are supported.,A D_TYPE,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.avg_pool2d,data_format,A string. 'NHWC' and 'NCHW' are supported.,QSTR are supported,D_TYPE,,CONSTANT_VAL,,QSTR
tf.nn.avg_pool2d,data_format,DF: NHWC,DEFAULT DF_STR,D_TYPE,,CONSTANT_VAL,,QSTR
tf.math.sqrt,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.sqrt,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.io.read_file,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.io.read_file,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.random.learned_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,A D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.random.learned_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,Determines whether all sampled classes in a batch are unique,D_TYPE,,CONSTANT_VAL,,
tf.linspace,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.linspace,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.sparse.cross,name,Optional name for the op.,Optional name for the op,D_TYPE,,CONSTANT_VAL,,
tf.sparse.cross,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.utils.get_file,cache_dir,"Location to store cached files, when None it defaults to the Keras   Directory.",Location to store cached files when None it defaults to the Keras Directory,,,,,
tf.keras.utils.get_file,cache_dir,DF: None,DEFAULT None,,,,,
tf.keras.backend.batch_get_value,tensors,list of ops to run.,D_STRUCTURE of ops to run,,D_STRUCTURE,,,,
tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the dilation rate to use for dilated convolution,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,1]",
tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,1]",
tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",Currently specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,1]",
tf.keras.layers.Conv2D,dilation_rate,"DF: (1, 1)",DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,1]",
tf.math.sigmoid,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.math.sigmoid,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.normalize_batch_in_training,x,Input tensor or variable.,Input D_STRUCTURE or variable,,D_STRUCTURE,,,,
tf.keras.backend.ctc_batch_cost,input_length,"tensor `(samples, 1)` containing the sequence length for each batch item in `y_pred`.",D_STRUCTURE BSTR containing the D_STRUCTURE length for each batch item in PARAM,D_TYPE,D_STRUCTURE,,,"[0,inf)",
tf.sparse.slice,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.sparse.slice,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the strides of the convolution along each spatial dimension,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.Conv3D,strides,"DF: (1, 1, 1)",DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.ConvLSTM2D,stateful,"Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",D_TYPE BSTR,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.ConvLSTM2D,stateful,"Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",If CONSTANT_BOOL the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.ConvLSTM2D,stateful,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM defaults to CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",The dilation factor for each dimension of PARAM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",If a single value is given it is replicated in the QSTR dimension,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",By default the QSTR dimensions are set to CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",If set to k REXPR there will be k CONSTANT_NUM skipped cells between each filter element on that dimension,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",The dimension order is determined by the value of PARAM see above for details,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",Dilations in the batch and depth dimensions if a CONSTANT_NUM d D_STRUCTURE must be CONSTANT_NUM,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.conv2d_transpose,dilations,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.nn.max_pool2d,input,A 4-D `Tensor` of the format specified by `data_format`.,A CONSTANT_NUM D D_STRUCTURE of the format specified by PARAM,,D_STRUCTURE,,CONSTANT_VAL,,
tf.estimator.experimental.call_logit_fn,logit_fn,A logit_fn as defined above.,A logit_fn as defined above,,,,,
tf.keras.preprocessing.text.text_to_word_sequence,lower,boolean. Whether to convert the input to lowercase.,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.text.text_to_word_sequence,lower,boolean. Whether to convert the input to lowercase.,Whether to convert the input to lowercase,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.text.text_to_word_sequence,lower,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.nn.softmax_cross_entropy_with_logits,labels,"Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",Each vector along the class dimension should hold a valid probability distribution e g,,BSTR,CONSTANT_VAL,,
tf.nn.softmax_cross_entropy_with_logits,labels,"Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",for the case in which labels are of shape BSTR each row of labels BSTR must be a valid probability distribution,,BSTR,CONSTANT_VAL,,
tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Shape is BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.linalg.band_part,input,A `Tensor`. Rank `k` tensor.,A D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
tf.linalg.band_part,input,A `Tensor`. Rank `k` tensor.,Rank QSTR D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
tf.keras.layers.Conv2DTranspose,kernel_size,"An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the height and width of the CONSTANT_NUM D convolution window,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.Conv2DTranspose,kernel_size,"An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
tf.math.nextafter,x1,"A `Tensor`. Must be one of the following types: `float64`, `float32`.",A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.nextafter,x1,"A `Tensor`. Must be one of the following types: `float64`, `float32`.",Must be one of the following types D_TYPE,D_TYPE,D_STRUCTURE,,,,
tf.keras.experimental.terminate_keras_multiprocessing_pools,grace_period,Time (in seconds) to wait for process cleanup to propagate.,Time BSTR to wait for process cleanup to propagate,D_TYPE,,CONSTANT_VAL,,
tf.keras.experimental.terminate_keras_multiprocessing_pools,grace_period,DF: 0.1,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
tf.py_function,func,"A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",A Python function which accepts a D_STRUCTURE of D_STRUCTURE objects having element types that match the corresponding D_STRUCTURE objects in PARAMand returns a D_STRUCTURE of D_STRUCTURE objects or a single D_STRUCTURE or QSTR having element types that match the corresponding values in PARAM,,,,,
tf.ensure_shape,shape,"A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",A QSTR representing the shape of this D_STRUCTURE a QSTR a D_STRUCTURE or None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.keras.layers.SimpleRNN,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Initializer for the bias vector,D_TYPE,,,,
tf.keras.layers.SimpleRNN,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Default QSTR,D_TYPE,,,,
tf.keras.layers.SimpleRNN,bias_initializer,DF: zeros,DEFAULT DF_STR,D_TYPE,,,,
tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,A CONSTANT_NUM D D_STRUCTURE or Python value of type PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,The lower bound on the range of random values to generate,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,Defaults to CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.random.stateless_uniform,minval,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
tf.io.gfile.remove,path,"string, a path",D_TYPE a path,D_TYPE,,CONSTANT_VAL,,
tf.estimator.experimental.stop_if_no_decrease_hook,max_steps_without_decrease,"`int`, maximum number of training steps with no decrease in the given metric.",D_TYPE maximum number of training steps with no decrease in the given metric,D_TYPE,,CONSTANT_VAL,"[0,inf)",
tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",An optional D_TYPE,D_TYPE,,CONSTANT_VAL,,
tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",Defaults to CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",When formatting the D_STRUCTURE show the first and last QSTR entries of each D_STRUCTURE dimension BSTR,D_TYPE,,CONSTANT_VAL,,
tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",If set to CONSTANT_NUM all elements of the D_STRUCTURE will be shown,D_TYPE,,CONSTANT_VAL,,
tf.strings.format,summarize,DF: 3,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
tf.keras.layers.deserialize,custom_objects,dict mapping class names (or function names) of custom (non-Keras) objects to class/functions,D_STRUCTURE mapping class names BSTR objects to class functions,,D_STRUCTURE,,,,
tf.keras.layers.deserialize,custom_objects,DF: None,DEFAULT None,,D_STRUCTURE,,,,
tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.math.reduce_logsumexp,axis,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[-ndim:&input_tensor,ndim:&input_tensor)",
tf.keras.layers.SimpleRNNCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,
tf.keras.layers.SimpleRNNCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Default QSTR,,,,,
tf.keras.layers.SimpleRNNCell,kernel_constraint,DF: None,DEFAULT None,,,,,
tf.shape,name,A name for the operation (optional).,A name for the operation BSTR,D_TYPE,,CONSTANT_VAL,,
tf.shape,name,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
tf.image.transpose,image,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
tf.math.squared_difference,y,A `Tensor`. Must have the same type as `x`.,A D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
tf.math.squared_difference,y,A `Tensor`. Must have the same type as `x`.,Must have the same type as QSTR,D_TYPE,D_STRUCTURE,,,,
tf.keras.layers.Conv3DTranspose,kernel_constraint,Constraint function applied to the kernel matrix.,Constraint function applied to the kernel matrix,,,,,
tf.keras.layers.Conv3DTranspose,kernel_constraint,DF: None,DEFAULT None,,,,,
tf.linalg.matvec,a_is_sparse,"If `True`, `a` is treated as a sparse matrix.",If CONSTANT_BOOL QSTR is treated as a sparse matrix,D_TYPE,,CONSTANT_VAL,,
tf.linalg.matvec,a_is_sparse,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
tf.linalg.matrix_rank,a,(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,BSTR which are to be pseudo inverted,D_TYPE,,CONSTANT_VAL,,
tf.keras.backend.clip,max_value,"Python float, integer, or tensor.",Python D_TYPE or D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_rotation,interpolation_order,"int, order of spline interpolation.     see `ndimage.interpolation.affine_transform``",D_TYPE order of spline interpolation,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_rotation,interpolation_order,"int, order of spline interpolation.     see `ndimage.interpolation.affine_transform``",see ndimage interpolation affine_transform,D_TYPE,,CONSTANT_VAL,,
tf.keras.preprocessing.image.random_rotation,interpolation_order,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
