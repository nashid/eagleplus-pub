constraints:
  create_graph:
    default: 'False'
    descp: If `True`, both the output and result will be computed in a differentiable
      way. Note that when `strict` is `False`, the result can not require gradients
      or be disconnected from the inputs. Defaults to `False`.
    doc_dtype: bool, optional
    dtype:
    - int
    - numeric
    - torch.bool
    ndim:
    - '0'
    - '1'
    range:
    - '[0,inf)'
  func:
    descp: a Python function that takes Tensor inputs and returns a Tensor with a
      single element.
    doc_dtype: function
    dtype:
    - int
    - string
    - torch.bool
    ndim:
    - '0'
    - '1'
    range:
    - '[0,inf)'
    shape:
    - '[c]'
    tensor_t:
    - torch.tensor
  inputs:
    descp: inputs to the function `func`.
    doc_dtype: tuple of Tensors or Tensor
    dtype:
    - int
    - numeric
    - string
    - torch.bool
    - torch.dtype
    ndim:
    - '0'
    - '1'
    - '3'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[b,p,m]'
    - '[c]'
    structure:
    - tuple
    tensor_t:
    - torch.tensor
  strict:
    default: 'False'
    descp: If `True`, an error will be raised when we detect that there exists an
      input such that all the outputs are independent of it. If `False`, we return
      a Tensor of zeros as the hvp for said inputs, which is the expected mathematical
      value. Defaults to `False`.
    doc_dtype: bool, optional
    dtype:
    - int
    - numeric
    - string
    - torch.bool
    - torch.dtype
    ndim:
    - '0'
    - '1'
    - '3'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[b,p,m]'
    - '[c]'
    tensor_t:
    - torch.tensor
  v:
    default: None
    descp: The vector for which the Hessian vector product is computed. Must be the
      same size as the input of `func`. This argument is optional when `func`'s input
      contains a single element and (if it is not provided) will be set as a Tensor
      containing a single `1`.
    doc_dtype: tuple of Tensors or Tensor
    dtype:
    - int
    - numeric
    - string
    - torch.bool
    - torch.dtype
    ndim:
    - '0'
    - '1'
    - '3'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[b,p,m]'
    - '[c]'
    structure:
    - list
    - tuple
    tensor_t:
    - torch.tensor
inputs:
  optional:
  - v
  - create_graph
  - strict
  required:
  - func
  - inputs
link: https://pytorch.org/docs/stable/autograd.html#torch.autograd.functional.hvp
package: torch
target: hvp
title: torch.autograd.functional.hvp
version: 1.5.0
