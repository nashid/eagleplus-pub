aliases:
- tf.compat.v1.nn.depthwise_conv2d_backprop_input
- tf.compat.v1.nn.depthwise_conv2d_native_backprop_input
constraints:
  data_format:
    default: NHWC
    descp: 'An optional `string` from: `"NHWC", "NCHW"`. Defaults to `"NHWC"`. Specify
      the data format of the input and output data. With the default format "NHWC",
      the data is stored in the order of:   [batch, height, width, channels]. Alternatively,
      the format could be "NCHW", the data storage order of:   [batch, channels, height,
      width].'
    dtype:
    - float
    - int
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - NCHW
    - NHWC
    - '[batch'
    - channels
    - channels]
    - height
    - string
    - width
    - width]
    ndim:
    - '0'
    - '1'
    - '4'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[2]'
    - '[batch,channels,height,width]'
    - '[batch,height,width,channels]'
    - '[nchw]'
    - '[nhwc]'
    tensor_t:
    - tf.tensor
  dilations:
    default: '[1, 1, 1, 1]'
    descp: An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length
      4.  The dilation factor for each dimension of`input`. If set to k > 1, there
      will be k-1 skipped cells between each filter element on that dimension. The
      dimension order is determined by the value of`data_format`, see above for details.
      Dilations in the batch and depth dimensions must be 1.
    dtype:
    - float
    - int
    - numeric
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - input
    ndim:
    - '0'
    - '1'
    - '4'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '&data_format'
    - '[1]'
    - '[4]'
    - '[input]'
    - '[n]'
    structure:
    - list
    tensor_t:
    - tf.tensor
  filter:
    descp: 'A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`,
      `float64`. 4-D with shape`[filter_height, filter_width, in_channels, depthwise_multiplier]`.'
    dtype:
    - int
    - numeric
    - tf.bfloat16
    - tf.bool
    - tf.dtype
    - tf.float16
    - tf.float32
    - tf.float64
    - tf.string
    ndim:
    - '0'
    - '1'
    - '4'
    - '>=4'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[4]'
    - '[filter_height,filter_width,in_channels,depthwise_multiplier]'
    tensor_t:
    - tf.tensor
  input_sizes:
    descp: A `Tensor` of type `int32`. An integer vector representing the shape of
      `input`, based on `data_format`.  For example, if `data_format` is 'NHWC' then`input`
      is a 4-D `[batch, height, width, channels]` tensor.
    dtype:
    - '&data_format'
    - int
    - numeric
    - tf.bool
    - tf.dtype
    - tf.int32
    - tf.string
    enum:
    - input
    ndim:
    - '0'
    - '1'
    - '2'
    - '4'
    - input
    - nhwc
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '&data_format'
    - '[1]'
    - '[4]'
    - '[batch,height,width,channels]'
    - '[input,input]'
    - '[input]'
    - '[n]'
    - '[nhwc,nhwc]'
    - '[nhwc]'
    structure:
    - list
    tensor_t:
    - tf.tensor
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - float
    - int
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - (optional)
    ndim:
    - '0'
    - '1'
    range:
    - (optional)
    - '[0,inf)'
    shape:
    - '[2]'
    tensor_t:
    - tf.tensor
  out_backprop:
    descp: A `Tensor`. Must have the same type as `filter`. 4-D with shape  based
      on `data_format`. For example, if `data_format` is 'NHWC' then out_backprop
      shape is `[batch, out_height, out_width, out_channels]`. Gradients w.r.t. the
      output of the convolution.
    dtype:
    - '&filter'
    - int
    - numeric
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - NHWC
    ndim:
    - '&filter'
    - '0'
    - '1'
    - '4'
    - '>=4'
    range:
    - '[0,inf)'
    shape:
    - '&filter'
    - '[1]'
    - '[2]'
    - '[4]'
    - '[batch,out_height,out_width,out_channels]'
    tensor_t:
    - tf.tensor
  padding:
    descp: 'A `string` from: `"SAME", "VALID"`. The type of padding algorithm to use.'
    dtype:
    - int
    - numeric
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - SAME
    - VALID
    ndim:
    - '0'
    - '1'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[same]'
    - '[valid]'
  strides:
    descp: A list of `ints`. The stride of the sliding window for each dimension of
      the input of the convolution.
    dtype:
    - int
    - numeric
    - tf.bool
    - tf.dtype
    - tf.string
    ndim:
    - '0'
    - '1'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[n]'
    structure:
    - list
inputs:
  optional:
  - data_format
  - dilations
  - name
  required:
  - input_sizes
  - filter
  - out_backprop
  - strides
  - padding
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/nn/depthwise_conv2d_backprop_input
outputs: A `Tensor`. Has the same type as `filter`.
package: tensorflow
target: depthwise_conv2d_backprop_input
title: tf.nn.depthwise_conv2d_backprop_input
version: 2.1.0
