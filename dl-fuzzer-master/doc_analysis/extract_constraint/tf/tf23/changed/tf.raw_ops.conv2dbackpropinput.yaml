constraints:
  data_format:
    default: NHWC
    descp: 'An optional string from: "NHWC", "NCHW". Defaults to "NHWC". Specify the
      data format of the input and output data. With the default format "NHWC", the
      data is stored in the order of: [batch, in_height, in_width, in_channels]. Alternatively,
      the format could be "NCHW", the data storage order of: [batch, in_channels,
      in_height, in_width].'
    dtype:
    - tf.string
    enum:
    - NCHW
    - NHWC
    ndim:
    - '0'
  dilations:
    default: '[1, 1, 1, 1]'
    descp: An optional list of ints. Defaults to [1, 1, 1, 1]. 1-D tensor of length
      4. The dilation factor for each dimension of input. If set to k > 1, there will
      be k-1 skipped cells between each filter element on that dimension. The dimension
      order is determined by the value of data_format, see above for details. Dilations
      in the batch and depth dimensions must be 1.
    dtype:
    - int
    ndim:
    - '1'
    shape:
    - '[4]'
    structure:
    - list(int)
    tensor_t:
    - tf.tensor
  explicit_paddings:
    default: '[]'
    descp: An optional list of ints. Defaults to []. If padding is "EXPLICIT", the
      list of explicit padding amounts. For the ith dimension, the amount of padding
      inserted before and after the dimension is explicit_paddings[2 * i] and explicit_paddings[2
      * i + 1], respectively. If padding is not "EXPLICIT", explicit_paddings must
      be empty.
    dtype:
    - int
    ndim:
    - '1'
    structure:
    - list
    - list(int)
  filter:
    descp: 'A Tensor. Must be one of the following types: half, bfloat16, float32,
      float64, int32. 4-D with shape [filter_height, filter_width, in_channels, out_channels].'
    ndim:
    - '4'
    shape:
    - '[filter_height,filter_width,in_channels,out_channels]'
    tensor_t:
    - tf.tensor
  input_sizes:
    descp: A Tensor of type int32. An integer vector representing the shape of input,
      where input is a 4-D [batch, height, width, channels] tensor.
    dtype:
    - tf.int32
    ndim:
    - '1'
    range:
    - '[0,inf)'
    tensor_t:
    - tf.tensor
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - tf.string
    ndim:
    - '0'
  out_backprop:
    descp: A Tensor. Must have the same type as filter. 4-D with shape [batch, out_height,
      out_width, out_channels]. Gradients w.r.t. the output of the convolution.
    dtype:
    - dtype:&filter
    ndim:
    - '4'
    shape:
    - '[batch,out_height,out_width,out_channels]'
    tensor_t:
    - tf.tensor
  padding:
    descp: 'A string from: "SAME", "VALID", "EXPLICIT". The type of padding algorithm
      to use.'
    dtype:
    - tf.string
    enum:
    - EXPLICIT
    - SAME
    - VALID
    ndim:
    - '0'
  strides:
    descp: A list of ints. The stride of the sliding window for each dimension of
      the input of the convolution. Must be in the same order as the dimension specified
      with format.
    dtype:
    - int
    ndim:
    - '1'
    range:
    - '[0,inf)'
    structure:
    - list(int)
  use_cudnn_on_gpu:
    default: 'True'
    descp: An optional bool. Defaults to True.
    dtype:
    - tf.bool
    ndim:
    - '0'
dependency:
- batch
- filter_height
- filter_width
- in_channels
- out_channels
- out_height
- out_width
inputs:
  optional:
  - use_cudnn_on_gpu
  - explicit_paddings
  - data_format
  - dilations
  - name
  required:
  - input_sizes
  - filter
  - out_backprop
  - strides
  - padding
link: https://www.tensorflow.org/versions/r2.3/api_docs/python/tf/raw_ops/Conv2DBackpropInput
outputs:
- A Tensor. Has the same type as filter.
package: tensorflow
target: Conv2DBackpropInput
title: tf.raw_ops.Conv2DBackpropInput
version: 2.3.0
