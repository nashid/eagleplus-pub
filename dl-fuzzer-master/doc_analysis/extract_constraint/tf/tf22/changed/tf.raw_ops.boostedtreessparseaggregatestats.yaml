constraints:
  feature_indices:
    descp: A Tensor of type int32. int32; Rank 2 indices of feature sparse Tensors
      (shape=[number of sparse entries, 2]). Number of sparse entries across all instances
      from the batch. The first value is the index of the instance, the second is
      dimension of the feature. The second axis can only have 2 values, i.e., the
      input dense version of Tensor can only be matrix.
    dtype:
    - tf.int32
    ndim:
    - '2'
    range:
    - '[0,inf)'
    tensor_t:
    - tf.tensor
  feature_shape:
    descp: A Tensor of type int32. int32; Rank 1 dense shape of feature sparse Tensors
      (shape=[2]). The first axis can only have 2 values, [batch_size, feature_dimension].
    dtype:
    - tf.int32
    ndim:
    - '1'
    tensor_t:
    - tf.tensor
  feature_values:
    descp: A Tensor of type int32. int32; Rank 1 values of feature sparse Tensors
      (shape=[number of sparse entries]). Number of sparse entries across all instances
      from the batch. The first value is the index of the instance, the second is
      dimension of the feature.
    dtype:
    - tf.int32
    ndim:
    - '1'
    range:
    - '[0,inf)'
    tensor_t:
    - tf.tensor
  gradients:
    descp: A Tensor of type float32. float32; Rank 2 Tensor (shape=[batch_size, logits_dimension])
      with gradients for each example.
    dtype:
    - tf.float32
    ndim:
    - '2'
    tensor_t:
    - tf.tensor
  hessians:
    descp: A Tensor of type float32. float32; Rank 2 Tensor (shape=[batch_size, hessian_dimension])
      with hessians for each example.
    dtype:
    - tf.float32
    ndim:
    - '2'
    tensor_t:
    - tf.tensor
  max_splits:
    descp: An int that is >= 1. int; the maximum number of splits possible in the
      whole tree.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - tf.string
    ndim:
    - '0'
  node_ids:
    descp: A Tensor of type int32. int32; Rank 1 Tensor containing node ids for each
      example, shape [batch_size].
    dtype:
    - tf.int32
    ndim:
    - '1'
    shape:
    - '[batch_size]'
    tensor_t:
    - tf.tensor
  num_buckets:
    descp: An int that is >= 1. int; equals to the maximum possible value of bucketized
      feature + 1.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
dependency:
- batch_size
inputs:
  optional:
  - name
  required:
  - node_ids
  - gradients
  - hessians
  - feature_indices
  - feature_values
  - feature_shape
  - max_splits
  - num_buckets
link: https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/raw_ops/BoostedTreesSparseAggregateStats
outputs:
- A tuple of Tensor objects (stats_summary_indices, stats_summary_values, stats_summary_shape).
- stats_summary_indices: A Tensor of type int32.
- stats_summary_values: A Tensor of type float32.
- stats_summary_shape: A Tensor of type int32.
package: tensorflow
target: BoostedTreesSparseAggregateStats
title: tf.raw_ops.BoostedTreesSparseAggregateStats
version: 2.2.0
