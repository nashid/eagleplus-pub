API,Arg,Descp,Normalized_descp,dtype,structure,shape,ndim,range,enum
torch.distributions.kl.kl_divergence,p,A `Distribution` object.,A QSTR object,,,,,,
torch.jit.save,m,A `ScriptModule` to save.,A QSTR to save,,,,,,
torch.utils.checkpoint.checkpoint_sequential,functions,A `torch.nn.Sequential` or the list of modules or functions (comprising the model) to run sequentially.,A torch nn Sequential or the D_STRUCTURE of modules or functions BSTR to run sequentially,,,,,,
torch.nn.BatchNorm3d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",a D_TYPE value that when set to CONSTANT_BOOL this module has learnable affine parameters,D_TYPE,,,0,,
torch.nn.BatchNorm3d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",Default CONSTANT_BOOL,bool,,,0,,
torch.nn.BatchNorm1d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",a D_TYPE value that when set to CONSTANT_BOOL this module has learnable affine parameters,D_TYPE,,,0,,
torch.nn.BatchNorm1d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",Default CONSTANT_BOOL,bool,,,0,,
torch.sparse.addmm,mat,a dense matrix to be added,a dense matrix to be added,,matrix,,,,
torch.quantization.swap_module,mapping,a dictionary that maps from nn module to nnq module,a D_STRUCTURE that maps from nn module to nnq module,,D_STRUCTURE,,,,
torch.nn.functional.gumbel_softmax,dim,A dimension along which softmax will be computed. Default: -1.,A dimension along which softmax will be computed,int,,,0,,
torch.nn.functional.gumbel_softmax,dim,A dimension along which softmax will be computed. Default: -1.,Default CONSTANT_NUM,int,,,0,,
torch.utils.cpp_extension.load,sources,A list of relative or absolute paths to C++ source files.,A D_STRUCTURE of relative or absolute paths to C source files,,D_STRUCTURE,,,,
torch.nn.functional.binary_cross_entropy_with_logits,weight,a manual rescaling weight if provided it's repeated to match input tensor shape,a manual rescaling weight if provided it repeated to match PARAM D_STRUCTURE shape,float,,,0,,
torch.multinomial,generator,a pseudorandom number generator for sampling,a pseudorandom number generator for sampling,,,,,,
torch.utils.dlpack.from_dlpack,dlpack,a PyCapsule object with the dltensor,a PyCapsule object with the dltensor,,,,,,
torch.normal,size,a sequence of integers defining the shape of the output tensor.,a D_STRUCTURE of D_TYPE defining the shape of the output D_STRUCTURE,D_TYPE,D_STRUCTURE,,,"[0,inf)",
torch.nn.utils.prune.global_unstructured,pruning_method,"a valid pruning function from this module, or a custom one implemented by the user that satisfies the implementation guidelines and has `PRUNING_TYPE='unstructured'`.",a valid pruning function from this module or a custom one implemented by the user that satisfies the implementation guidelines and has PRUNING_TYPE QSTR,,,,,,
torch.nn.InstanceNorm3d,eps,a value added to the denominator for numerical stability. Default: 1e-5,a value added to the denominator for numerical stability,,,,,,
torch.nn.InstanceNorm3d,eps,a value added to the denominator for numerical stability. Default: 1e-5,Default CONSTANT_FLOAT,float,,,0,,
torch.nn.functional.binary_cross_entropy_with_logits,pos_weight,a weight of positive examples. Must be a vector with length equal to the number of classes.,a PARAM of positive examples,numeric,,,,"[0,inf)",
torch.nn.functional.binary_cross_entropy_with_logits,pos_weight,a weight of positive examples. Must be a vector with length equal to the number of classes.,Must be a D_STRUCTURE with length equal to the number of classes,,vector,,,,
torch.nn.init.ones_,tensor,an n-dimensional torch.Tensor,an n dimensional D_STRUCTURE,,D_STRUCTURE,,,,
torch.cat,tensors,"any python sequence of tensors of the same type. Non-empty tensors provided must have the same shape, except in the cat dimension.",any python D_STRUCTURE of D_STRUCTURE of the same type,,D_STRUCTURE,,,,
torch.cat,tensors,"any python sequence of tensors of the same type. Non-empty tensors provided must have the same shape, except in the cat dimension.",Non empty D_STRUCTURE provided must have the same shape except in the cat dimension,,D_STRUCTURE,,,,
torch.nn.RReLU,inplace,can optionally do the operation in-place. Default: `False`,can optionally do the operation in place,,,,,,
torch.nn.RReLU,inplace,can optionally do the operation in-place. Default: `False`,Default CONSTANT_BOOL,bool,,,0,,
torch.nn.CELU,inplace,can optionally do the operation in-place. Default: `False`,can optionally do the operation in place,,,,,,
torch.nn.CELU,inplace,can optionally do the operation in-place. Default: `False`,Default CONSTANT_BOOL,bool,,,0,,
torch.argsort,descending,controls the sorting order (ascending or descending),controls the sorting order BSTR,bool,,,0,,
torch.triu_indices,row,DD: `int`,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,"[0,inf)",
torch.empty_like,device,"DD: `torch.device`, optional",torch device optional,,,,,,
torch.ones,device,"DD: `torch.device`, optional",torch device optional,,,,,,
torch.rand_like,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,
torch.eye,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,
torch.bartlett_window,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,
torch.multinomial,generator,"DD: `torch.Generator`, optional",torch Generator optional,,,,,,
torch.rand,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,
torch.linspace,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,
torch.empty_like,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,
torch.sparse_coo_tensor,values,DD: array_like,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
torch.sum,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,0,,
torch.kthvalue,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,0,,
torch.min,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,0,,
torch.onnx.export,verbose,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,,0,,
torch.nn.CTCLoss,zero_infinity,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.eye,requires_grad,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.autograd.functional.jacobian,strict,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.nn.MultiLabelMarginLoss,reduce,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.nn.BCELoss,reduce,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.distributed.all_gather,async_op,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.lu,get_infos,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,
torch.nn.utils.rnn.pack_padded_sequence,batch_first,"DD: bool, optional",D_TYPE optional,D_TYPE,,,0,,