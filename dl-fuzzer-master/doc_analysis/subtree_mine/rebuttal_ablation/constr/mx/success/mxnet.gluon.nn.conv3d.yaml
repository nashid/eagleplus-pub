constraints:
  '**kwargs':
    descp: ''
  activation:
    default: None
    descp: 'Activation function to use. See `Activation()`. If you don''t specify
      anything, no activation is applied (ie. "linear" activation: a(x) = x).'
    doc_dtype: str
    dtype:
    - string
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    doc_dtype: str or Initializer
    dtype:
    - boolean
    - int
    - numpy.dtype
    - string
    ndim:
    - '0'
    - '1'
    range:
    - '[0,inf)'
    structure:
    - list
  channels:
    descp: The dimensionality of the output space, i.e. the number of output channels
      (filters) in the convolution.
    doc_dtype: int
    dtype:
    - boolean
    - int
    - numeric
    - string
    ndim:
    - '0'
    - '1'
    range:
    - (filters)
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[filters]'
  dilation:
    default: (1,1,1)
    descp: Specifies the dilation rate to use for dilated convolution.
    doc_dtype: int or tuple/list of 3 int
    dtype:
    - int
    ndim:
    - '0'
    - '1'
    shape:
    - '[3]'
    structure:
    - list
    - tuple
  groups:
    default: '1'
    descp: Controls the connections between inputs and outputs. At groups=1, all inputs
      are convolved to all outputs. At groups=2, the operation becomes equivalent
      to having two conv layers side by side, each seeing half the input channels,
      and producing half the output channels, and both subsequently concatenated.
    doc_dtype: int
    dtype:
    - int
    - numpy.int64
    ndim:
    - '0'
    - '1'
    range:
    - '[0,inf)'
  in_channels:
    default: '0'
    descp: The number of input channels to this layer. If not specified, initialization
      will be deferred to the first time forward is called and in_channels will be
      inferred from the shape of input data.
    doc_dtype: int, default 0
    dtype:
    - boolean
    - int
    - numeric
    - numpy.dtype
    - numpy.int64
    - string
    ndim:
    - '0'
    - '1'
    range:
    - '[0,1]'
    - '[0,inf)'
  kernel_size:
    descp: Specifies the dimensions of the convolution window.
    doc_dtype: int or tuple/list of 3 int
    dtype:
    - int
    ndim:
    - '0'
    - '1'
    shape:
    - '[3]'
    structure:
    - list
    - tuple
  layout:
    default: NCDHW
    descp: Dimension ordering of data and weight. Only supports 'NCDHW' and 'NDHWC'
      layout for now. 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width
      and depth dimensions respectively. Convolution is applied on the 'D', 'H' and
      'W' dimensions.
    doc_dtype: str, default 'NCDHW'
    dtype:
    - string
    enum:
    - NCDHW
    ndim:
    - '0'
  padding:
    default: (0,0,0)
    descp: If padding is non-zero, then the input is implicitly zero-padded on both
      sides for padding number of points
    doc_dtype: int or a tuple/list of 3 int,
    dtype:
    - boolean
    - int
    - numeric
    - numpy.dtype
    - string
    ndim:
    - '0'
    - '1'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[3]'
    structure:
    - list
    - tuple
  strides:
    default: (1,1,1)
    descp: Specify the strides of the convolution.
    doc_dtype: int or tuple/list of 3 int,
    dtype:
    - int
    ndim:
    - '0'
    - '1'
    shape:
    - '[3]'
    structure:
    - list
    - tuple
  use_bias:
    default: 'True'
    descp: Whether the layer uses a bias vector.
    doc_dtype: bool
    dtype:
    - boolean
    - numeric
    ndim:
    - '0'
    - '1'
    structure:
    - list
  weight_initializer:
    default: None
    descp: Initializer for the weight weights matrix.
    doc_dtype: str or Initializer
    dtype:
    - boolean
    - numeric
    - string
    ndim:
    - '0'
    - '1'
inputs:
  optional:
  - strides
  - padding
  - dilation
  - groups
  - layout
  - activation
  - use_bias
  - weight_initializer
  - bias_initializer
  - in_channels
  required:
  - channels
  - kernel_size
  - '**kwargs'
link: https://mxnet.apache.org/versions/1.6.0/api/python/docs/api/gluon/nn/index.html#mxnet.gluon.nn.Conv3D
package: mxnet
target: Conv3D
title: mxnet.gluon.nn.Conv3D
version: 1.6.0
