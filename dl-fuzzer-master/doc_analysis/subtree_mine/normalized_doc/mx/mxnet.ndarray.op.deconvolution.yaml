constraints:
  '**kwargs':
    descp: ''
    normalized_descp: []
  adj:
    default: _Null
    descp: 'Adjustment for output shape: (w,), (h, w) or (d, h, w). If target_shape
      is set, adj will be ignored and computed accordingly.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Adjustment for output shape BSTR
    - If PARAM is set, adj will be ignored and computed accordingly
    normalized_docdtype: Shape BSTR, optional, default
  bias:
    default: None
    descp: Bias added to the result after the deconvolution operation.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Bias added to the result after the deconvolution operation
    normalized_docdtype: ONE_WORD D_STRUCTURE
  cudnn_off:
    default: _Null
    descp: Turn off cudnn for this layer.
    doc_dtype: boolean, optional, default=0
    normalized_default: DEFAULT Null
    normalized_descp:
    - Turn off cudnn for this layer
    normalized_docdtype: D_TYPE, optional, default CONSTANT_NUM
  cudnn_tune:
    default: _Null
    descp: Whether to pick convolution algorithm by running performance test.
    doc_dtype: '{None, ''fastest'', ''limited_workspace'', ''off''},optional, default=''None'''
    normalized_default: DEFAULT Null
    normalized_descp:
    - Whether to pick convolution algorithm by running performance test
    normalized_docdtype: None, QSTR ,optional, default QSTR
  data:
    default: None
    descp: Input tensor to the deconvolution operation.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Input D_STRUCTURE to the deconvolution operation
    normalized_docdtype: ONE_WORD D_STRUCTURE
  dilate:
    default: _Null
    descp: 'Dilation factor for each dimension of the input: (w,), (h, w) or (d, h,
      w). Defaults to 1 for each dimension.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Dilation factor for each dimension of the input BSTR
    - Defaults to CONSTANT_NUM for each dimension
    normalized_docdtype: Shape BSTR, optional, default
  kernel:
    default: _Null
    descp: 'Deconvolution kernel size: (w,), (h, w) or (d, h, w). This is same as
      the kernel size used for the corresponding convolution'
    doc_dtype: Shape(tuple), required
    normalized_default: DEFAULT Null
    normalized_descp:
    - Deconvolution kernel size BSTR
    - This is same as the kernel size used for the corresponding convolution
    normalized_docdtype: Shape BSTR, required
  layout:
    default: _Null
    descp: Set layout for input, output and weight. Empty for default layout, NCW
      for 1d, NCHW for 2d and NCDHW for 3d.NHWC and NDHWC are only supported on GPU.
    doc_dtype: '{None, ''NCDHW'', ''NCHW'', ''NCW'', ''NDHWC'', ''NHWC''},optional,
      default=''None'''
    normalized_default: DEFAULT Null
    normalized_descp:
    - Set layout for input, output and PARAM
    - Empty for default layout, NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for
      CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
    normalized_docdtype: None, QSTR ,optional, default QSTR
  name:
    default: None
    descp: ''
    normalized_default: DEFAULT None
    normalized_descp: []
  no_bias:
    default: _Null
    descp: Whether to disable bias parameter.
    doc_dtype: boolean, optional, default=1
    normalized_default: DEFAULT Null
    normalized_descp:
    - Whether to disable PARAM parameter
    normalized_docdtype: D_TYPE, optional, default CONSTANT_NUM
  num_filter:
    default: _Null
    descp: Number of output filters.
    doc_dtype: int (non-negative), required
    normalized_default: DEFAULT Null
    normalized_descp:
    - Number of output filters
    normalized_docdtype: D_TYPE BSTR, required
  num_group:
    default: _Null
    descp: Number of groups partition.
    doc_dtype: int (non-negative), optional, default=1
    normalized_default: DEFAULT Null
    normalized_descp:
    - Number of groups partition
    normalized_docdtype: D_TYPE BSTR, optional, default CONSTANT_NUM
  out:
    default: None
    descp: The output NDArray to hold the result.
    doc_dtype: NDArray, optional
    normalized_default: DEFAULT None
    normalized_descp:
    - The output D_STRUCTURE to hold the result
    normalized_docdtype: D_STRUCTURE, optional
  pad:
    default: _Null
    descp: 'The amount of implicit zero padding added during convolution for each
      dimension of the input: (w,), (h, w) or (d, h, w). `(kernel-1)/2` is usually
      a good choice. If target_shape is set, pad will be ignored and a padding that
      will generate the target shape will be used. Defaults to no padding.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - The amount of implicit zero padding added during convolution for each dimension
      of the input BSTR
    - BSTR CONSTANT_NUM is usually a good choice
    - If PARAM is set, pad will be ignored and a padding that will generate the target
      shape will be used
    - Defaults to no padding
    normalized_docdtype: Shape BSTR, optional, default
  stride:
    default: _Null
    descp: 'The stride used for the corresponding convolution: (w,), (h, w) or (d,
      h, w). Defaults to 1 for each dimension.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - The stride used for the corresponding convolution BSTR
    - Defaults to CONSTANT_NUM for each dimension
    normalized_docdtype: Shape BSTR, optional, default
  target_shape:
    default: _Null
    descp: 'Shape of the output tensor: (w,), (h, w) or (d, h, w).'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Shape of the output D_STRUCTURE BSTR
    normalized_docdtype: Shape BSTR, optional, default
  weight:
    default: None
    descp: Weights representing the kernel.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Weights representing the PARAM
    normalized_docdtype: ONE_WORD D_STRUCTURE
  workspace:
    default: _Null
    descp: Maximum temporary workspace allowed (MB) in deconvolution.This parameter
      has two usages. When CUDNN is not used, it determines the effective batch size
      of the deconvolution kernel. When CUDNN is used, it controls the maximum temporary
      storage used for tuning the best CUDNN kernel when limited_workspace strategy
      is used.
    doc_dtype: long (non-negative), optional, default=512
    normalized_default: DEFAULT Null
    normalized_descp:
    - Maximum temporary workspace allowed BSTR in deconvolution This parameter has
      two usages
    - When CUDNN is not used, it determines the effective batch size of the deconvolution
      PARAM
    - When CUDNN is used, it controls the maximum temporary storage used for tuning
      the best CUDNN PARAM when limited_workspace strategy is used
    normalized_docdtype: long BSTR, optional, default CONSTANT_NUM
inputs:
  optional:
  - data
  - weight
  - bias
  - kernel
  - stride
  - dilate
  - pad
  - adj
  - target_shape
  - num_filter
  - num_group
  - workspace
  - no_bias
  - cudnn_tune
  - cudnn_off
  - layout
  - out
  - name
  required:
  - '**kwargs'
link: https://mxnet.apache.org/versions/1.6/api/python/docs/api/ndarray/op/index.html#mxnet.ndarray.op.Deconvolution
package: mxnet
target: Deconvolution
title: mxnet.ndarray.op.Deconvolution
version: 1.6.0
