aliases:
- tf.keras.applications.mobilenet_v2.MobileNetV2
- tf.compat.v1.keras.applications.MobileNetV2
- tf.compat.v1.keras.applications.mobilenet_v2.MobileNetV2
constraints:
  '**kwargs':
    default: null
    descp: For backwards compatibility only.
  alpha:
    default: '1.0'
    descp: Float between 0 and 1. controls the width of the network. This is known
      as the width multiplier in the MobileNetV2 paper, but the name is kept for consistency
      with applications.MobileNetV1 model in Keras. If alpha < 1.0, proportionally
      decreases the number of filters in each layer. If alpha > 1.0, proportionally
      increases the number of filters in each layer. If alpha = 1, default number
      of filters from the paper are used at each layer.
    dtype:
    - float
    ndim:
    - '0'
    range:
    - '[0,inf)'
  classes:
    default: '1000'
    descp: Integer, optional number of classes to classify images into, only to be
      specified if include_top is True, and if no weights argument is specified.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  classifier_activation:
    default: softmax
    descp: A str or callable. The activation function to use on the "top" layer. Ignored
      unless include_top=True. Set classifier_activation=None to return the logits
      of the "top" layer.
    dtype:
    - callable
    - tf.string
    ndim:
    - '0'
  include_top:
    default: 'True'
    descp: Boolean, whether to include the fully-connected layer at the top of the
      network. Defaults to True.
    dtype:
    - tf.bool
    ndim:
    - '0'
  input_shape:
    default: None
    descp: Optional shape tuple, to be specified if you would like to use a model
      with an input image resolution that is not (224, 224, 3). It should have exactly
      3 inputs channels (224, 224, 3). You can also omit this option if you would
      like to infer input_shape from an input_tensor. If you choose to include both
      input_tensor and input_shape then input_shape will be used if they match, if
      the shapes do not match then we will throw an error. E.g. (160, 160, 3) would
      be one valid value.
    dtype:
    - int
    ndim:
    - '1'
    range:
    - '[0,inf)'
  input_tensor:
    default: None
    descp: Optional Keras tensor (i.e. output of layers.Input()) to use as image input
      for the model.
    tensor_t:
    - tf.tensor
  pooling:
    default: None
    descp: String, optional pooling mode for feature extraction when include_top is
      False. None means that the output of the model will be the 4D tensor output
      of the last convolutional block. avg means that global average pooling will
      be applied to the output of the last convolutional block, and thus the output
      of the model will be a 2D tensor. max means that global max pooling will be
      applied.
    dtype:
    - tf.string
    ndim:
    - '0'
    - '2'
    - '4'
    tensor_t:
    - tf.tensor
  weights:
    default: imagenet
    descp: String, one of None (random initialization), 'imagenet' (pre-training on
      ImageNet), or the path to the weights file to be loaded.
    dtype:
    - tf.string
    ndim:
    - '0'
exceptions:
- ValueError: in case of invalid argument for weights, or invalid input shape or invalid
    alpha, rows when weights='imagenet'
- ValueError: if classifier_activation is not softmax or None when using a pretrained
    top layer.
inputs:
  optional:
  - input_shape
  - alpha
  - include_top
  - weights
  - input_tensor
  - pooling
  - classes
  - classifier_activation
  - '**kwargs'
  required: []
link: https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/keras/applications/MobileNetV2
outputs:
- A keras.Model instance.
package: tensorflow
target: MobileNetV2
title: tf.keras.applications.MobileNetV2
version: 2.2.0
