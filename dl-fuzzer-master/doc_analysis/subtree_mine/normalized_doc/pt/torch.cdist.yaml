constraints:
  compute_mode:
    default: use_mm_for_euclid_dist_if_necessary
    descp: '''use_mm_for_euclid_dist_if_necessary'' - will use matrix multiplication
      approach to calculate euclidean distance (p = 2) if P > 25 or R > 25 ''use_mm_for_euclid_dist''
      - will always use matrix multiplication approach to calculate euclidean distance
      (p = 2) ''donot_use_mm_for_euclid_dist'' - will never use matrix multiplication
      approach to calculate euclidean distance (p = 2) Default: use_mm_for_euclid_dist_if_necessary.'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - QSTR will use matrix multiplication approach to calculate euclidean distance
      p CONSTANT_NUM if P REXPR or R REXPR QSTR will always use matrix multiplication
      approach to calculate euclidean distance p CONSTANT_NUM QSTR will never use
      matrix multiplication approach to calculate euclidean distance p CONSTANT_NUM
      Default use_mm_for_euclid_dist_if_necessary
  p:
    default: '2.0'
    descp: p value for the p-norm distance to calculate between each vector pair  in
      [0,  infty] .
    normalized_default: DEFAULT CONSTANT_FLOAT
    normalized_descp:
    - p value for the p norm distance to calculate between each D_STRUCTURE pair in
      BSTR
  x1:
    descp: input tensor of shape B  times P  times M .
    doc_dtype: Tensor
    normalized_descp:
    - input D_STRUCTURE of shape B times P times M
    normalized_docdtype: ONE_WORD D_STRUCTURE
  x2:
    descp: input tensor of shape B  times R  times M .
    doc_dtype: Tensor
    normalized_descp:
    - input D_STRUCTURE of shape B times R times M
    normalized_docdtype: ONE_WORD D_STRUCTURE
inputs:
  optional:
  - p
  - compute_mode
  required:
  - x1
  - x2
link: https://pytorch.org/docs/stable/torch.html#torch.cdist
package: torch
target: cdist
title: torch.cdist
version: 1.5.0
