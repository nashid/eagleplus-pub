,idx,support,cnt,itemsets,sentence,api,len
0,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.group.yaml,3
1,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.conv1d.yaml,3
2,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,3
3,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.band_part.yaml,3
4,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,3
5,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.mask.yaml,3
6,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,3
7,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,3
8,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,3
9,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,3
10,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reciprocal.yaml,3
11,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.xlogy.yaml,3
12,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,3
13,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,3
14,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.encode_png.yaml,3
15,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_max.yaml,3
16,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,3
17,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,3
18,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.split.yaml,3
19,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,3
20,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,3
21,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,3
22,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,3
23,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitcast.yaml,3
24,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,3
25,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,3
26,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,3
27,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,3
28,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.concat.yaml,3
29,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,3
30,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.zeta.yaml,3
31,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,3
32,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.solve.yaml,3
33,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,3
34,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.tanh.yaml,3
35,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,3
36,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,3
37,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,3
38,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,3
39,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,3
40,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,3
41,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.shuffle.yaml,3
42,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,3
43,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.lbeta.yaml,3
44,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,3
45,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.idct.yaml,3
46,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.polyval.yaml,3
47,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.relu6.yaml,3
48,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,3
49,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,3
50,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,3
51,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.resize.yaml,3
52,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,3
53,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.eig.yaml,3
54,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,3
55,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,3
56,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.conv3d.yaml,3
57,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.substr.yaml,3
58,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.split.yaml,3
59,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.cast.yaml,3
60,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,3
61,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.broadcast_to.yaml,3
62,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.total_variation.yaml,3
63,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.sigmoid.yaml,3
64,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.is_nan.yaml,3
65,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,3
66,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.clip_by_value.yaml,3
67,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.timestamp.yaml,3
68,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,3
69,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,3
70,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.sign.yaml,3
71,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,3
72,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,3
73,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,3
74,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,3
75,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,3
76,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.sqrt.yaml,3
77,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.nn.avg_pool.yaml,3
78,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.add_n.yaml,3
79,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,3
80,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.dtypes.complex.yaml,3
81,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.unstack.yaml,3
82,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,3
83,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,3
84,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.random.categorical.yaml,3
85,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.fft3d.yaml,3
86,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.trace.yaml,3
87,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,3
88,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,3
89,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,3
90,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",optional name of the operation.,tf.sparse.maximum.yaml,3
91,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.log1p.yaml,3
92,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.erfinv.yaml,3
93,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,3
94,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.floordiv.yaml,3
95,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,3
96,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_min.yaml,3
97,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.igamma.yaml,3
98,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.encode_base64.yaml,3
99,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,3
100,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.greater_equal.yaml,3
101,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,3
102,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,3
103,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,3
104,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,3
105,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,3
106,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,3
107,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,3
108,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,3
109,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,3
110,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.sin.yaml,3
111,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,3
112,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,3
113,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,3
114,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.softplus.yaml,3
115,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,3
116,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.unique.yaml,3
117,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,3
118,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.subtract.yaml,3
119,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.elu.yaml,3
120,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,3
121,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.dynamic_partition.yaml,3
122,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,3
123,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.tan.yaml,3
124,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.not_equal.yaml,3
125,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
126,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.write_file.yaml,3
127,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.zeros_like.yaml,3
128,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.asinh.yaml,3
129,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,3
130,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional),tf.io.decode_image.yaml,3
131,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,3
132,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,3
133,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",optional name of the operation.,tf.sparse.softmax.yaml,3
134,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,3
135,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.read_file.yaml,3
136,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.ifft.yaml,3
137,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,3
138,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,3
139,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.truediv.yaml,3
140,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,3
141,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,3
142,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,3
143,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,3
144,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
145,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,3
146,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,3
147,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,3
148,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.as_string.yaml,3
149,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,3
150,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.crelu.yaml,3
151,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,3
152,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,3
153,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.segment_mean.yaml,3
154,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,3
155,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.squared_difference.yaml,3
156,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.conv2d.yaml,3
157,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,3
158,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.ones_like.yaml,3
159,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,3
160,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,3
161,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,3
162,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,3
163,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.unravel_index.yaml,3
164,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
165,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,3
166,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,3
167,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,3
168,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,3
169,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.upper.yaml,3
170,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,3
171,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.ndtri.yaml,3
172,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.Assert.yaml,3
173,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.less.yaml,3
174,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
175,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.realdiv.yaml,3
176,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.hann_window.yaml,3
177,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,3
178,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,3
179,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,3
180,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,3
181,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,3
182,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,3
183,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,3
184,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.print.yaml,3
185,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",optional name of the operation.,tf.sparse.minimum.yaml,3
186,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,3
187,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,3
188,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,3
189,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,3
190,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,3
191,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,3
192,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,3
193,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,3
194,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,3
195,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,3
196,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.is_finite.yaml,3
197,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,3
198,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,3
199,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,3
200,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.truncatediv.yaml,3
201,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.softmax.yaml,3
202,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.imag.yaml,3
203,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
204,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.atan.yaml,3
205,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.angle.yaml,3
206,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.nextafter.yaml,3
207,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,3
208,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,3
209,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
210,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name of the operation (optional).,tf.where.yaml,3
211,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.log.yaml,3
212,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,3
213,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,3
214,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.gather.yaml,3
215,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,3
216,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.linalg.svd.yaml,3
217,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.asin.yaml,3
218,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
219,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.cosh.yaml,3
220,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.abs.yaml,3
221,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,3
222,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,3
223,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,3
224,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,3
225,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,3
226,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,3
227,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,3
228,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,3
229,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,3
230,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.searchsorted.yaml,3
231,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,3
232,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,3
233,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,3
234,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Name for the operation (optional).,tf.linalg.matvec.yaml,3
235,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.diag.yaml,3
236,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,3
237,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.rint.yaml,3
238,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,3
239,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,3
240,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,3
241,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,3
242,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,3
243,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.round.yaml,3
244,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.eigvals.yaml,3
245,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.greater.yaml,3
246,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,3
247,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.clip_by_norm.yaml,3
248,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,3
249,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,3
250,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.segment_prod.yaml,3
251,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,3
252,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,3
253,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,3
254,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.logm.yaml,3
255,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,3
256,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.ifftshift.yaml,3
257,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,3
258,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,3
259,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.identity_n.yaml,3
260,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.fingerprint.yaml,3
261,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_gif.yaml,3
262,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.transpose.yaml,3
263,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,3
264,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.inv.yaml,3
265,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,3
266,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,3
267,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,3
268,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.negative.yaml,3
269,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,3
270,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,3
271,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.fft2d.yaml,3
272,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,3
273,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.hamming_window.yaml,3
274,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,3
275,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,3
276,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.uniform.yaml,3
277,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.segment_sum.yaml,3
278,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.tensordot.yaml,3
279,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
280,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,3
281,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,3
282,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.add.yaml,3
283,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,3
284,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,3
285,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,3
286,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,3
287,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,3
288,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,3
289,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,3
290,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,3
291,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.sort.yaml,3
292,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.floor.yaml,3
293,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,3
294,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.squeeze.yaml,3
295,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,3
296,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.cumprod.yaml,3
297,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,3
298,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_any.yaml,3
299,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.floormod.yaml,3
300,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.selu.yaml,3
301,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.atan2.yaml,3
302,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,3
303,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.erf.yaml,3
304,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,3
305,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,3
306,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,3
307,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.normal.yaml,3
308,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,3
309,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,3
310,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,3
311,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.lower.yaml,3
312,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.conj.yaml,3
313,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,3
314,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.case.yaml,3
315,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,3
316,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
317,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.io.parse_example.yaml,3
318,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,3
319,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,3
320,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.logical_not.yaml,3
321,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,3
322,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.unique_with_counts.yaml,3
323,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.segment_max.yaml,3
324,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,3
325,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,3
326,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,3
327,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,3
328,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,3
329,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,3
330,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,3
331,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.fill.yaml,3
332,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,3
333,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",name: A name for the operation (optional).,tf.einsum.yaml,3
334,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,3
335,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,3
336,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.bias_add.yaml,3
337,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,3
338,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,3
339,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,3
340,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,3
341,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,3
342,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,3
343,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.scatter_nd.yaml,3
344,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.igammac.yaml,3
345,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_png.yaml,3
346,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,3
347,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.linalg.eigh.yaml,3
348,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.argmin.yaml,3
349,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,3
350,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.ensure_shape.yaml,3
351,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.xdivy.yaml,3
352,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,3
353,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strided_slice.yaml,3
354,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
355,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,3
356,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,3
357,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,3
358,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,3
359,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,3
360,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Name for the operation (optional).,tf.linalg.matmul.yaml,3
361,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.slice.yaml,3
362,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.dct.yaml,3
363,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.acos.yaml,3
364,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.argmax.yaml,3
365,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.fftshift.yaml,3
366,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,3
367,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,3
368,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,3
369,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,3
370,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.py_function.yaml,3
371,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,3
372,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,3
373,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,3
374,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.invert.yaml,3
375,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.square.yaml,3
376,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.segment_min.yaml,3
377,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,3
378,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linspace.yaml,3
379,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.det.yaml,3
380,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,3
381,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.stft.yaml,3
382,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.to_number.yaml,3
383,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,3
384,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,3
385,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,3
386,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
387,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,3
388,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,3
389,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.pow.yaml,3
390,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.exp.yaml,3
391,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,3
392,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.erfc.yaml,3
393,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_raw.yaml,3
394,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,3
395,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,3
396,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,3
397,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,3
398,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,3
399,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.slice.yaml,3
400,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,3
401,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.polygamma.yaml,3
402,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,3
403,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.minimum.yaml,3
404,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,3
405,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.transpose.yaml,3
406,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.atanh.yaml,3
407,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.qr.yaml,3
408,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.edit_distance.yaml,3
409,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.rank.yaml,3
410,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,3
411,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,3
412,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,3
413,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,3
414,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.relu.yaml,3
415,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.pad.yaml,3
416,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,3
417,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.multiply.yaml,3
418,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,3
419,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.matching_files.yaml,3
420,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.random.poisson.yaml,3
421,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,3
422,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,3
423,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,3
424,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.tile.yaml,3
425,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,3
426,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,3
427,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.equal.yaml,3
428,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional),tf.io.is_jpeg.yaml,3
429,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.shape.yaml,3
430,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,3
431,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.logical_and.yaml,3
432,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
433,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,3
434,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.betainc.yaml,3
435,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,3
436,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.acosh.yaml,3
437,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,3
438,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,3
439,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,3
440,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,3
441,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,3
442,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,3
443,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.random.gamma.yaml,3
444,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,3
445,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.join.yaml,3
446,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.stack.yaml,3
447,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.logical_or.yaml,3
448,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,3
449,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.no_op.yaml,3
450,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.quantize.yaml,3
451,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,3
452,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,3
453,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.switch_case.yaml,3
454,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.gather_nd.yaml,3
455,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name of the operation (optional),tf.compat.v1.where.yaml,3
456,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.encode_proto.yaml,3
457,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.rsqrt.yaml,3
458,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,3
459,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,3
460,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,3
461,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,3
462,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.less_equal.yaml,3
463,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,3
464,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,3
465,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.guarantee_const.yaml,3
466,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.softsign.yaml,3
467,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.lgamma.yaml,3
468,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,3
469,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.reduce_all.yaml,3
470,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",(Optional) A name for the operation.,tf.numpy_function.yaml,3
471,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.truncatemod.yaml,3
472,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,3
473,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,3
474,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,3
475,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.batch_to_space.yaml,3
476,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.is_inf.yaml,3
477,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,3
478,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
479,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.boolean_mask.yaml,3
480,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.identity.yaml,3
481,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,3
482,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,3
483,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,3
484,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.maximum.yaml,3
485,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.math.top_k.yaml,3
486,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,3
487,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,3
488,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,3
489,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,3
490,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,3
491,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_csv.yaml,3
492,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.one_hot.yaml,3
493,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,3
494,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.space_to_batch.yaml,3
495,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.argsort.yaml,3
496,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.cumsum.yaml,3
497,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,3
498,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.parallel_stack.yaml,3
499,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,3
500,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.in_top_k.yaml,3
501,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,3
502,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,3
503,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.sinh.yaml,3
504,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",An optional name for the operation.,tf.signal.frame.yaml,3
505,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,3
506,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,3
507,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.format.yaml,3
508,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,3
509,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,3
510,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,3
511,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,3
512,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.dropout.yaml,3
513,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_proto.yaml,3
514,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,3
515,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,3
516,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.reverse.yaml,3
517,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,3
518,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
519,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,3
520,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.digamma.yaml,3
521,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,3
522,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,3
523,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,3
524,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,3
525,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,3
526,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,3
527,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.cross.yaml,3
528,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.stop_gradient.yaml,3
529,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,3
530,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.expm1.yaml,3
531,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.summary.flush.yaml,3
532,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,3
533,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.ceil.yaml,3
534,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",Optional name for the operation.,tf.nn.max_pool.yaml,3
535,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,3
536,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,3
537,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.io.decode_base64.yaml,3
538,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,3
539,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,3
540,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,3
541,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,3
542,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.real.yaml,3
543,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.size.yaml,3
544,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,3
545,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.roll.yaml,3
546,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",name: A name for the operation (optional).,tf.meshgrid.yaml,3
547,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.math.cos.yaml,3
548,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.image.extract_patches.yaml,3
549,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,3
550,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,3
551,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.linalg.lu.yaml,3
552,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.strip.yaml,3
553,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.compat.v1.case.yaml,3
554,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,3
555,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.shape_n.yaml,3
556,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.signal.fft.yaml,3
557,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,3
558,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,3
559,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,3
560,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for this operation (optional).,tf.image.random_crop.yaml,3
561,943,0.06208863536638877,562,"frozenset({'operation', 'optional', 'name'})",A name for the operation (optional).,tf.strings.split.yaml,3
562,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,3
563,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
564,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
565,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,3
566,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
567,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,3
568,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,3
569,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
570,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,3
571,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,3
572,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,3
573,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,3
574,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,3
575,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,3
576,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,3
577,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional callable that returns a list of tensors.,tf.case.yaml,3
578,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,3
579,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,3
580,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,3
581,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,3
582,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,3
583,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,3
584,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,3
585,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,3
586,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,3
587,946,0.014480035103115402,26,"frozenset({'optional', 'tensor', 'SOME_DTYPE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,3
588,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,3
589,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,3
590,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,3
591,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,3
592,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,3
593,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
594,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
595,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
596,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,3
597,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,3
598,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
599,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
600,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,3
601,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,3
602,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,3
603,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,3
604,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.squeeze.yaml,3
605,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,3
606,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,3
607,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,3
608,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
609,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,3
610,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,3
611,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
612,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,3
613,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,3
614,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
615,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
616,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,3
617,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,3
618,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,3
619,940,0.012395787626151821,32,"frozenset({'optional', 'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,3
620,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,3
621,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,3
622,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,3
623,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,3
624,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
625,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
626,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,3
627,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
628,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,3
629,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,3
630,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,3
631,944,0.01086002632733655,12,"frozenset({'tensor', 'SOME_DTYPE', 'must'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
632,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Keras variable or tensor.,tf.keras.backend.ones_like.yaml,2
633,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.less.yaml,2
634,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.less.yaml,2
635,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.dtype.yaml,2
636,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.prod.yaml,2
637,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.expand_dims.yaml,2
638,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.softmax.yaml,2
639,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
640,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
641,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.temporal_padding.yaml,2
642,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.repeat_elements.yaml,2
643,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A `Tensor` representing the variable of the polynomial.,tf.math.polyval.yaml,2
644,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable,tf.keras.backend.tile.yaml,2
645,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Input tensor or variable.,tf.keras.backend.batch_normalization.yaml,2
646,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.relu.yaml,2
647,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.cumprod.yaml,2
648,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.mean.yaml,2
649,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.cumsum.yaml,2
650,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.bias_add.yaml,2
651,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.sin.yaml,2
652,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
653,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
654,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.flatten.yaml,2
655,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
656,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
657,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Variable or tensor.,tf.keras.backend.count_params.yaml,2
658,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.tanh.yaml,2
659,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.l2_normalize.yaml,2
660,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
661,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
662,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.max.yaml,2
663,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.round.yaml,2
664,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.permute_dimensions.yaml,2
665,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.std.yaml,2
666,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.squeeze.yaml,2
667,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.spatial_3d_padding.yaml,2
668,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.argmin.yaml,2
669,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor with the same shape as `variable`.,tf.keras.backend.moving_average_update.yaml,2
670,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
671,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
672,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.softsign.yaml,2
673,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.argmax.yaml,2
674,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.int_shape.yaml,2
675,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.conv2d_transpose.yaml,2
676,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable to resize.,tf.keras.backend.resize_images.yaml,2
677,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.square.yaml,2
678,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.log.yaml,2
679,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable to resize.,tf.keras.backend.resize_volumes.yaml,2
680,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.sqrt.yaml,2
681,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.abs.yaml,2
682,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.sign.yaml,2
683,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
684,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
685,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.min.yaml,2
686,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.shape.yaml,2
687,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.sigmoid.yaml,2
688,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.conv2d.yaml,2
689,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
690,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
691,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
692,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
693,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or list of tensors to consider constant with respect to any other variable.,tf.keras.backend.stop_gradient.yaml,2
694,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.var.yaml,2
695,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.sum.yaml,2
696,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
697,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.batch_flatten.yaml,2
698,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
699,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
700,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.reshape.yaml,2
701,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Input tensor or variable.,tf.keras.backend.normalize_batch_in_training.yaml,2
702,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.pool2d.yaml,2
703,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Keras tensor (or variable).,tf.keras.backend.cast.yaml,2
704,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.spatial_2d_padding.yaml,2
705,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.exp.yaml,2
706,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.pow.yaml,2
707,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
708,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
709,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
710,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.conv3d.yaml,2
711,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.repeat.yaml,2
712,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
713,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
714,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.any.yaml,2
715,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.softplus.yaml,2
716,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.ndim.yaml,2
717,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.all.yaml,2
718,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.conv1d.yaml,2
719,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
720,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Keras variable or Keras tensor.,tf.keras.backend.zeros_like.yaml,2
721,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.cos.yaml,2
722,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.clip.yaml,2
723,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.pool3d.yaml,2
724,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Input `tensor` or `variable`.,tf.keras.activations.relu.yaml,2
725,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",Tensor or variable.,tf.keras.backend.transpose.yaml,2
726,838,0.010421237384817903,95,"frozenset({'variable', 'tensor'})",A tensor or variable.,tf.keras.backend.hard_sigmoid.yaml,2
727,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_add.yaml,3
728,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_update.yaml,3
729,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})", The provided type must match the type of the serialized tensor and no implicit conversion will take place.,tf.io.parse_tensor.yaml,3
730,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Must be same type as `tensor`.,tf.compat.v1.pad.yaml,3
731,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
732,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,3
733,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
734,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Must be same type as `tensor`.,tf.pad.yaml,3
735,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
736,937,0.009872751206669592,10,"frozenset({'tensor', 'must', 'type'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_sub.yaml,3
737,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.eig.yaml,3
738,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,3
739,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",Optional name string for the placeholder.,tf.keras.backend.placeholder.yaml,3
740,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",Optional string name for this op.,tf.summary.write.yaml,3
741,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,3
742,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.linalg.svd.yaml,3
743,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,3
744,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.eigvals.yaml,3
745,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,3
746,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,3
747,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",Optional string name for this op.,tf.summary.experimental.write_raw_pb.yaml,3
748,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.linalg.eigh.yaml,3
749,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,3
750,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})",An optional name string for the layer.,tf.keras.Input.yaml,3
751,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,3
752,945,0.008885476086002632,16,"frozenset({'optional', 'SOME_DTYPE', 'name'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,3
753,611,0.007788503729706011,14,"frozenset({'graph', 'default'})",A `GraphDef` proto containing operations to be imported into the default graph.,tf.graph_util.import_graph_def.yaml,2
754,611,0.007788503729706011,14,"frozenset({'graph', 'default'})",This function will not write the default graph by default.,tf.compat.v1.summary.initialize.yaml,2
755,611,0.007788503729706011,14,"frozenset({'graph', 'default'})",Otherwise the default graph will be used.,tf.compat.v1.keras.backend.get_session.yaml,2
756,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.advise.yaml,2
757,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If missing, use default graph.",tf.compat.v1.train.get_global_step.yaml,2
758,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.write_op_log.yaml,2
759,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","Dict, where keys are names of the variables in the checkpoint and values are current variables or names of current variables (in default graph).",tf.compat.v1.train.init_from_checkpoint.yaml,2
760,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If `None`, use the default graph.",tf.compat.v1.train.export_meta_graph.yaml,2
761,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.pinv.yaml,2
762,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.profile.yaml,2
763,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.matrix_rank.yaml,2
764,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If missing, use default graph.",tf.compat.v1.train.get_or_create_global_step.yaml,2
765,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","If missing, use default graph.",tf.compat.v1.train.create_global_step.yaml,2
766,611,0.007788503729706011,14,"frozenset({'graph', 'default'})","When graph building, the default value is 10.",tf.map_fn.yaml,2
767,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
768,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.categorical_column_with_hash_bucket.yaml,2
769,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
770,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",The list of supported dtypes is the same as`x`.,tf.cast.yaml,2
771,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
772,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
773,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})","A `string`, only `""NHWC""` is currently supported.",tf.nn.erosion2d.yaml,2
774,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
775,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only float and integer weights are supported.,tf.feature_column.weighted_categorical_column.yaml,2
776,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})","A `string`, only `""NHWC""` is currently supported.",tf.nn.dilation2d.yaml,2
777,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
778,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
779,598,0.007459412022817025,13,"frozenset({'supported', 'SOME_DTYPE'})",Only string and integer types are supported.,tf.feature_column.sequence_categorical_column_with_hash_bucket.yaml,2
780,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,3
781,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,3
782,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,3
783,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
784,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
785,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,3
786,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
787,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,3
788,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
789,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,3
790,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,3
791,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,3
792,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,3
793,931,0.007130320315928039,14,"frozenset({'input', 'tensor', 'SOME_DTYPE'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,3
794,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,3
795,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
796,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,3
797,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,3
798,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
799,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
800,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
801,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
802,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
803,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
804,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
805,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
806,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,3
807,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,3
808,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
809,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,3
810,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,3
811,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
812,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,3
813,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","integer tensor, all its values <= maxlen.",tf.sequence_mask.yaml,3
814,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})",A string template to format tensor values into.,tf.strings.format.yaml,3
815,908,0.00669153137340939,22,"frozenset({'tensor', 'SOME_DTYPE', 'values'})","Debug mode for tensor values, as a string.",tf.debugging.experimental.enable_dump_debug_info.yaml,3
816,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.data.experimental.make_csv_dataset.yaml,2
817,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.data.experimental.make_csv_dataset.yaml,2
818,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.dequantize.yaml,2
819,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.linalg.solve.yaml,2
820,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.nn.max_pool_with_argmax.yaml,2
821,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to False.,tf.image.resize.yaml,2
822,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_nd_sub.yaml,2
823,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})", Defaults to `False`.,tf.nn.fractional_avg_pool.yaml,2
824,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})", Defaults to `False`.,tf.nn.fractional_avg_pool.yaml,2
825,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
826,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.assign_add.yaml,2
827,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.encode_base64.yaml,2
828,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_mul.yaml,2
829,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.encode_jpeg.yaml,2
830,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.encode_jpeg.yaml,2
831,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
832,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
833,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.sparse_matmul.yaml,2
834,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.sparse_matmul.yaml,2
835,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.sparse_matmul.yaml,2
836,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.sparse_matmul.yaml,2
837,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.strings.as_string.yaml,2
838,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.strings.as_string.yaml,2
839,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.linalg.triangular_solve.yaml,2
840,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_div.yaml,2
841,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
842,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
843,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.image.resize_area.yaml,2
844,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to false.,tf.compat.v1.image.resize_area.yaml,2
845,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_add.yaml,2
846,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.image.sample_distorted_bounding_box.yaml,2
847,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.linalg.inv.yaml,2
848,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_min.yaml,2
849,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to`False`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
850,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
851,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.image.resize.yaml,2
852,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to False.,tf.compat.v1.image.resize.yaml,2
853,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to False (will later change to True).,tf.compat.v1.get_local_variable.yaml,2
854,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.decode_jpeg.yaml,2
855,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.strings.unicode_transcode.yaml,2
856,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to`False`.,tf.data.experimental.make_batched_features_dataset.yaml,2
857,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.data.experimental.make_batched_features_dataset.yaml,2
858,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
859,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
860,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to False (will later change to True).,tf.compat.v1.get_variable.yaml,2
861,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_sub.yaml,2
862,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.linalg.qr.yaml,2
863,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_max.yaml,2
864,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})", Defaults to `False`.,tf.nn.fractional_max_pool.yaml,2
865,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})", Defaults to `False`.,tf.nn.fractional_max_pool.yaml,2
866,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.decode_and_crop_jpeg.yaml,2
867,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.scatter_nd_add.yaml,2
868,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to false.,tf.image.combined_non_max_suppression.yaml,2
869,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.quantize.yaml,2
870,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.image.resize_image_with_pad.yaml,2
871,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.compat.v1.assign_sub.yaml,2
872,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.io.decode_proto.yaml,2
873,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
874,803,0.0064721369021500655,59,"frozenset({'false', 'defaults'})",Defaults to `False`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
875,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,3
876,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,3
877,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
878,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
879,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
880,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
881,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,3
882,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,3
883,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,3
884,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
885,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,3
886,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
887,767,0.006252742430890742,13,"frozenset({'either', 'tensor', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,3
888,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
889,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
890,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})",A string specifying how to combine embedding results for each entry.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
891,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
892,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","An integer specifying dimension of the embedding, must be > 0.",tf.feature_column.shared_embeddings.yaml,2
893,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
894,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
895,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","An integer specifying dimension of the embedding, must be > 0.",tf.feature_column.embedding_column.yaml,2
896,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})",A string specifying how to combine embedding results for each entry.,tf.nn.safe_embedding_lookup_sparse.yaml,2
897,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
898,557,0.006033347959631417,11,"frozenset({'SOME_DTYPE', 'embedding'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
899,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,3
900,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
901,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,3
902,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,3
903,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_local_variable.yaml,3
904,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,3
905,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_variable.yaml,3
906,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
907,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
908,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
909,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})"," The tensors must all have the same shape, or be scalars.",tf.strings.join.yaml,3
910,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
911,935,0.005813953488372093,13,"frozenset({'tensor', 'must', 'shape'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
912,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,2
913,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,2
914,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","A single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv1D.yaml,2
915,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,2
916,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,2
917,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d_transpose.yaml,2
918,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
919,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
920,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d.yaml,2
921,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})"," The effective filter size used for the convolution will be `spatial_filter_shape + (spatial_filter_shape - 1) * (rate - 1)`, obtained by inserting (dilation_rate[i]-1) zeros between consecutive elements of the original filter in each spatial dimension i.",tf.compat.v1.nn.convolution.yaml,2
922,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
923,538,0.005704256252742431,12,"frozenset({'rate', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
924,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","An `int64`-castable default step value, or None to unset.",tf.summary.experimental.set_step.yaml,3
925,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
926,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[T], Text, None], the default value of the flag.",tf.compat.v1.flags.DEFINE_multi.yaml,3
927,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Default value: `None` (i.e., 'lu_solve').",tf.linalg.lu_solve.yaml,3
928,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[Enum], Iterable[Text], Enum, Text, None], the default value of the flag; see`DEFINE_multi`; only differences are documented here.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
929,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,3
930,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,3
931,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Default value: `None` (i.e., 'lu_reconstruct').",tf.linalg.lu_reconstruct.yaml,3
932,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
933,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
934,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_string.yaml,3
935,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Default value: `None` (i.e., `eps * max(rows, cols) * max(singular_val)`).",tf.linalg.matrix_rank.yaml,3
936,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})",A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column.,tf.feature_column.numeric_column.yaml,3
937,878,0.0055945590171127685,14,"frozenset({'value', 'none', 'default'})","Default value: `None` (i.e., 'lu_matrix_inverse').",tf.linalg.lu_matrix_inverse.yaml,3
938,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
939,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
940,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
941,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
942,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
943,526,0.005484861781483106,10,"frozenset({'computation', 'see'})", See the decay computation above.,tf.compat.v1.train.polynomial_decay.yaml,2
944,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.linear_cosine_decay.yaml,2
945,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.linear_cosine_decay.yaml,2
946,526,0.005484861781483106,10,"frozenset({'computation', 'see'})",See computation above.,tf.compat.v1.train.linear_cosine_decay.yaml,2
947,526,0.005484861781483106,10,"frozenset({'computation', 'see'})", See the decay computation above.,tf.compat.v1.train.exponential_decay.yaml,2
948,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_greater.yaml,4
949,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_rank_in.yaml,4
950,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_less.yaml,4
951,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_near.yaml,4
952,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.Assert.yaml,4
953,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of the tensor.,tf.debugging.assert_shapes.yaml,4
954,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_positive.yaml,4
955,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of the tensor.,tf.compat.v1.debugging.assert_shapes.yaml,4
956,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_negative.yaml,4
957,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_equal.yaml,4
958,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_greater_equal.yaml,4
959,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_greater.yaml,4
960,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_less.yaml,4
961,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_positive.yaml,4
962,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_none_equal.yaml,4
963,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_non_positive.yaml,4
964,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_rank.yaml,4
965,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_non_negative.yaml,4
966,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_none_equal.yaml,4
967,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_greater_equal.yaml,4
968,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_non_negative.yaml,4
969,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_negative.yaml,4
970,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_equal.yaml,4
971,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_non_positive.yaml,4
972,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_rank_at_least.yaml,4
973,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_less_equal.yaml,4
974,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.compat.v1.assert_less_equal.yaml,4
975,504,0.005046072838964458,28,"frozenset({'tensor', 'many', 'entries', 'print'})",Print this many entries of each tensor.,tf.debugging.assert_near.yaml,4
976,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","`rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot.",tf.keras.utils.model_to_dot.yaml,2
977,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","If the argument is a boolean, the argument's value is used for each output.",tf.compat.v1.tpu.shard.yaml,2
978,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})"," For backwards compatibility reasons, this is separate from the single-string argument type.A list of Variables to warm-start.",tf.compat.v1.train.warm_start.yaml,2
979,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
980,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
981,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","`rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot.",tf.keras.utils.plot_model.yaml,2
982,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
983,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_local_variable.yaml,2
984,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_variable.yaml,2
985,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
986,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
987,503,0.005046072838964458,12,"frozenset({'argument', 'SOME_DTYPE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
988,498,0.004936375603334796,43,"frozenset({'e', 'g'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
989,498,0.004936375603334796,43,"frozenset({'e', 'g'})",(e.g. lambda x: (x - 3.0) / 4.2).,tf.feature_column.sequence_numeric_column.yaml,2
990,498,0.004936375603334796,43,"frozenset({'e', 'g'})","E.g. if `shape=(2,)`, each example must contain `2 * sequence_length` values.",tf.feature_column.sequence_numeric_column.yaml,2
991,498,0.004936375603334796,43,"frozenset({'e', 'g'})","One of `""valid""`, `""causal""` or `""same""` (case-insensitive).`""causal""` results in causal (dilated) convolutions, e.g. output[t] does not depend on input[t+1:].",tf.keras.layers.Conv1D.yaml,2
992,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`.",tf.linalg.cholesky_solve.yaml,2
993,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",tf.linalg.tridiagonal_solve.yaml,2
994,498,0.004936375603334796,43,"frozenset({'e', 'g'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
995,498,0.004936375603334796,43,"frozenset({'e', 'g'})","(Optional.) If non-empty, the returned iterator will be shared under the given name across multiple sessions that share the same devices (e.g. when using a remote server).",tf.compat.v1.data.make_initializable_iterator.yaml,2
996,498,0.004936375603334796,43,"frozenset({'e', 'g'})","A year (e.g., 2018).",tf.compat.forward_compatibility_horizon.yaml,2
997,498,0.004936375603334796,43,"frozenset({'e', 'g'})","A year (e.g., 2018).",tf.compat.forward_compatible.yaml,2
998,498,0.004936375603334796,43,"frozenset({'e', 'g'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
999,498,0.004936375603334796,43,"frozenset({'e', 'g'})","A tuple of dimension indices, e.g. `(0, 2, 1)`.",tf.keras.backend.permute_dimensions.yaml,2
1000,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Valid keys: layout_optimizer: Optimize tensor layouts e.g. This will try to use NCHW layout on GPU which is faster.constant_folding: Fold constants Statically infer the value of tensors when possible, and materialize the result using constants.shape_optimization: Simplify computations made on shapes.remapping: Remap subgraphs onto more efficient implementations.arithmetic_optimization: Simplify arithmetic ops with common sub-expression elimination and arithmetic simplification.dependency_optimization: Control dependency optimizations.",tf.config.optimizer.set_experimental_options.yaml,2
1001,498,0.004936375603334796,43,"frozenset({'e', 'g'})","To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",tf.print.yaml,2
1002,498,0.004936375603334796,43,"frozenset({'e', 'g'})",E.g. 2 will halve the input.,tf.keras.layers.MaxPool1D.yaml,2
1003,498,0.004936375603334796,43,"frozenset({'e', 'g'})","XLA may be more efficient in some cases (e.g. TPU, XLA_GPU, dense tensor computations).",tf.function.yaml,2
1004,498,0.004936375603334796,43,"frozenset({'e', 'g'})",Normalization order (e.g. 2 for L2 norm).,tf.keras.utils.normalize.yaml,2
1005,498,0.004936375603334796,43,"frozenset({'e', 'g'})","When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",tf.keras.layers.BatchNormalization.yaml,2
1006,498,0.004936375603334796,43,"frozenset({'e', 'g'})",E.g. they can be categorical_column_with_vocabulary_file with the same vocabulary_file.,tf.feature_column.shared_embeddings.yaml,2
1007,498,0.004936375603334796,43,"frozenset({'e', 'g'})","]`),     if `True`, labels will be categorical, e.g.     `[[1,0],[0,1],[0,1] ..",tf.keras.preprocessing.sequence.skipgrams.yaml,2
1008,498,0.004936375603334796,43,"frozenset({'e', 'g'})","If using a `sampling_table`,     word indices are expected to match the rank     of the words in a reference dataset (e.g. 10 would encode     the 10-th most frequently occurring token).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
1009,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
1010,498,0.004936375603334796,43,"frozenset({'e', 'g'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
1011,498,0.004936375603334796,43,"frozenset({'e', 'g'})","When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1012,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
1013,498,0.004936375603334796,43,"frozenset({'e', 'g'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.nn.softmax_cross_entropy_with_logits.yaml,2
1014,498,0.004936375603334796,43,"frozenset({'e', 'g'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1015,498,0.004936375603334796,43,"frozenset({'e', 'g'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
1016,498,0.004936375603334796,43,"frozenset({'e', 'g'})"," The hint may be ignored (e.g., the internal jpeg library changes to a version that does not have that specific option.)",tf.io.decode_jpeg.yaml,2
1017,498,0.004936375603334796,43,"frozenset({'e', 'g'})",(e.g. MatMul) 'scope' view organizes profile using graph node name scope.,tf.compat.v1.profiler.profile.yaml,2
1018,498,0.004936375603334796,43,"frozenset({'e', 'g'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
1019,498,0.004936375603334796,43,"frozenset({'e', 'g'})",(e.g. lambda x: (x - 3.0) / 4.2).,tf.feature_column.numeric_column.yaml,2
1020,498,0.004936375603334796,43,"frozenset({'e', 'g'})",This must be a callable object that returns an object that supports the `iter()` protocol (e.g. a generator function).,tf.lite.RepresentativeDataset.yaml,2
1021,498,0.004936375603334796,43,"frozenset({'e', 'g'})"," The hint may be ignored (e.g., the internal jpeg library changes to a version that does not have that specific option.)",tf.io.decode_and_crop_jpeg.yaml,2
1022,498,0.004936375603334796,43,"frozenset({'e', 'g'})","By passing a custom callable, you can customize your copy of the model, e.g. by wrapping certain layers of interest (you might want to replace all `LSTM` instances with equivalent`Bidirectional(LSTM(...))` instances, for example).",tf.keras.models.clone_model.yaml,2
1023,498,0.004936375603334796,43,"frozenset({'e', 'g'})","(Optional.) Policy controlling how operations requiring inputs on a specific device (e.g., a GPU 0) handle inputs on a different device  (e.g. GPU 1 or CPU).",tf.compat.v1.enable_eager_execution.yaml,2
1024,498,0.004936375603334796,43,"frozenset({'e', 'g'})",E.g. 2 will halve the input.,tf.keras.layers.AveragePooling1D.yaml,2
1025,498,0.004936375603334796,43,"frozenset({'e', 'g'})","e.g. ""core/platform"".",tf.compat.v1.test.test_src_dir_path.yaml,2
1026,498,0.004936375603334796,43,"frozenset({'e', 'g'})",E.g. they can be categorical_column_with_vocabulary_file with the same vocabulary_file.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
1027,498,0.004936375603334796,43,"frozenset({'e', 'g'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
1028,498,0.004936375603334796,43,"frozenset({'e', 'g'})","An extension field can be decoded by using its full name, e.g. EXT_PACKAGE.EXT_FIELD_NAME.",tf.io.decode_proto.yaml,2
1029,498,0.004936375603334796,43,"frozenset({'e', 'g'})","""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
1030,498,0.004936375603334796,43,"frozenset({'e', 'g'})","It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
1031,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.nn.max_pool_with_argmax.yaml,3
1032,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,3
1033,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})"," Defaults to `splits.dtype`, or `tf.int64` if `splits` does not have a dtype.",tf.ragged.row_splits_to_segment_ids.yaml,3
1034,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.unique.yaml,3
1035,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.arg_min.yaml,3
1036,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.io.extract_jpeg_shape.yaml,3
1037,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.float32`.,tf.compat.v1.string_to_number.yaml,3
1038,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.arg_max.yaml,3
1039,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.compat.v1.shape.yaml,3
1040,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.argmin.yaml,3
1041,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",The output dtype; defaults to `tf.int64`.,tf.compat.v1.count_nonzero.yaml,3
1042,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.compat.v1.data.experimental.Counter.yaml,3
1043,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})"," Defaults to `segment_ids.dtype`, or `tf.int64` if `segment_ids` does not have a dtype.",tf.ragged.segment_ids_to_row_splits.yaml,3
1044,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.unique_with_counts.yaml,3
1045,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.uint8`.,tf.io.decode_png.yaml,3
1046,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.math.argmin.yaml,3
1047,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.math.argmax.yaml,3
1048,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.float32`.,tf.strings.to_number.yaml,3
1049,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.argmax.yaml,3
1050,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.shape.yaml,3
1051,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",The output dtype; defaults to `tf.int64`.,tf.math.count_nonzero.yaml,3
1052,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.data.experimental.Counter.yaml,3
1053,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.compat.v1.size.yaml,3
1054,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.linalg.lu.yaml,3
1055,899,0.004826678367705134,25,"frozenset({'defaults', 'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`(optional).,tf.shape_n.yaml,3
1056,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,3
1057,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,3
1058,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,3
1059,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
1060,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,3
1061,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,3
1062,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
1063,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
1064,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
1065,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
1066,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
1067,852,0.004826678367705134,12,"frozenset({'input', 'tensor', 'output'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,3
1068,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.idct.yaml,2
1069,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_batch_cost.yaml,2
1070,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_true`.",tf.keras.backend.ctc_batch_cost.yaml,2
1071,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, time_steps, num_categories)`containing the prediction, or output of the softmax.",tf.keras.backend.ctc_batch_cost.yaml,2
1072,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, max_string_length)`containing the truth labels.",tf.keras.backend.ctc_batch_cost.yaml,2
1073,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
1074,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.dct.yaml,2
1075,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` of real-valued signals.",tf.signal.stft.yaml,2
1076,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
1077,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
1078,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,2
1079,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","Binary tensor with shape `(samples, time, 1)`, with a zero for every element that is masked.",tf.keras.backend.rnn.yaml,2
1080,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
1081,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,2
1082,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, )` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_decode.yaml,2
1083,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","tensor `(samples, time_steps, num_categories)`containing the prediction, or output of the softmax.",tf.keras.backend.ctc_decode.yaml,2
1084,494,0.0047169811320754715,17,"frozenset({'samples', 'tensor'})","A `[..., samples, ...]` `Tensor`.",tf.signal.frame.yaml,2
1085,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
1086,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[T], Text, None], the default value of the flag.",tf.compat.v1.flags.DEFINE_multi.yaml,3
1087,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[Enum], Iterable[Text], Enum, Text, None], the default value of the flag; see`DEFINE_multi`; only differences are documented here.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
1088,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,3
1089,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,3
1090,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,3
1091,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,3
1092,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,3
1093,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
1094,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
1095,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
1096,877,0.004607283896445809,12,"frozenset({'value', 'none', 'SOME_STRUCTURE'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_string.yaml,3
1097,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.Conv3D.yaml,3
1098,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.MaxPool2D.yaml,3
1099,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.GlobalMaxPool3D.yaml,3
1100,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.MaxPool3D.yaml,3
1101,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.GlobalMaxPool2D.yaml,3
1102,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.SeparableConv2D.yaml,3
1103,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.Conv2D.yaml,3
1104,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.AveragePooling2D.yaml,3
1105,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.GlobalAveragePooling2D.yaml,3
1106,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.AveragePooling3D.yaml,3
1107,487,0.004497586660816147,11,"frozenset({'never', 'set', 'channels_last'})","If you never set it, then it will be ""channels_last"".",tf.keras.layers.GlobalAveragePooling3D.yaml,3
1108,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""sum"" the default for linear model.",tf.compat.v1.feature_column.linear_model.yaml,2
1109,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})",Only rank 2 shapes currently supported.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
1110,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
1111,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently`""div""` and `""mod""` are supported.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
1112,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently `""div""` and `""mod""` are supported.",tf.compat.v1.nn.nce_loss.yaml,2
1113,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})",Currently two sampling methods are supported: Bilinear and Nearest Neighbor.,tf.image.crop_and_resize.yaml,2
1114,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})",Currently two sampling methods are supported: Bilinear and Nearest Neighbor.,tf.compat.v1.image.crop_and_resize.yaml,2
1115,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.feature_column.shared_embeddings.yaml,2
1116,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently `""div""` and `""mod""` are supported.",tf.compat.v1.nn.embedding_lookup.yaml,2
1117,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})",Only rank 2 shapes currently supported.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
1118,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","A `string`, only `""NHWC""` is currently supported.",tf.nn.erosion2d.yaml,2
1119,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently `""div""` and `""mod""` are supported.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
1120,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","A `string`, only `""NHWC""` is currently supported.",tf.nn.dilation2d.yaml,2
1121,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",tf.compat.v1.keras.estimator.model_to_estimator.yaml,2
1122,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.feature_column.embedding_column.yaml,2
1123,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported.",tf.nn.embedding_lookup_sparse.yaml,2
1124,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",tf.keras.estimator.model_to_estimator.yaml,2
1125,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",tf.nn.safe_embedding_lookup_sparse.yaml,2
1126,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Only ""wav"" is currently supported, but this is not guaranteed to remain the default, so if you want ""wav"" in particular, set this explicitly.",tf.summary.audio.yaml,2
1127,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
1128,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
1129,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","Currently `""div""` and `""mod""` are supported.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
1130,470,0.0042781921895568235,23,"frozenset({'supported', 'currently'})","The currently supported options are: ""NO_TENSOR"": (Default) Only traces the execution of ops' output tensors, while not dumping the value of the ops' output tensors or any form of concise summary of them.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
1131,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,6
1132,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,6
1133,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,6
1134,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,6
1135,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,6
1136,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,6
1137,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,6
1138,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,6
1139,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,6
1140,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,6
1141,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,6
1142,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,6
1143,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,6
1144,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,6
1145,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,6
1146,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,6
1147,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,6
1148,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,6
1149,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,6
1150,462,0.004168494953927161,20,"frozenset({'input', 'stride', 'dimension', 'window', 'sliding', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,6
1151,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,4
1152,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,4
1153,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,4
1154,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,4
1155,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,4
1156,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,4
1157,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,4
1158,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,4
1159,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,4
1160,791,0.004058797718297499,10,"frozenset({'tensor', 'SOME_DTYPE', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,4
1161,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_rank_at_least.yaml,4
1162,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_greater.yaml,4
1163,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_rank.yaml,4
1164,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_scalar.yaml,4
1165,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_rank_in.yaml,4
1166,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_type.yaml,4
1167,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_less.yaml,4
1168,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_scalar.yaml,4
1169,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_near.yaml,4
1170,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_shapes.yaml,4
1171,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_positive.yaml,4
1172,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_rank_in.yaml,4
1173,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.debugging.assert_shapes.yaml,4
1174,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_negative.yaml,4
1175,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_equal.yaml,4
1176,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_greater_equal.yaml,4
1177,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_greater.yaml,4
1178,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_less.yaml,4
1179,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_type.yaml,4
1180,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_positive.yaml,4
1181,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_none_equal.yaml,4
1182,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_non_positive.yaml,4
1183,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_rank.yaml,4
1184,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_integer.yaml,4
1185,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_non_negative.yaml,4
1186,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_none_equal.yaml,4
1187,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_greater_equal.yaml,4
1188,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_non_negative.yaml,4
1189,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_negative.yaml,4
1190,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_equal.yaml,4
1191,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_non_positive.yaml,4
1192,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_integer.yaml,4
1193,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_rank_at_least.yaml,4
1194,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_less_equal.yaml,4
1195,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.compat.v1.assert_less_equal.yaml,4
1196,644,0.003949100482667837,36,"frozenset({'message', 'prefix', 'SOME_DTYPE', 'default'})",A string to prefix to the default message.,tf.debugging.assert_near.yaml,4
1197,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of input.,tf.nn.conv1d.yaml,4
1198,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d_transpose.yaml,4
1199,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of input.,tf.compat.v1.nn.conv1d.yaml,4
1200,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d.yaml,4
1201,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_transpose.yaml,4
1202,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.nn.conv3d.yaml,4
1203,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.nn.conv_transpose.yaml,4
1204,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d.yaml,4
1205,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d.yaml,4
1206,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
1207,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,4
1208,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.nn.conv3d_transpose.yaml,4
1209,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_transpose.yaml,4
1210,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.quantized_conv2d.yaml,4
1211,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})",The dilation factor for each dimension of input.,tf.nn.conv1d_transpose.yaml,4
1212,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,4
1213,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_input.yaml,4
1214,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
1215,459,0.003949100482667837,19,"frozenset({'input', 'factor', 'dimension', 'dilation'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
1216,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
1217,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","float, max values of the flag.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
1218,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
1219,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","Integer, size of the max pooling windows.",tf.keras.layers.MaxPool1D.yaml,2
1220,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","min, max: Quantization interval, floats of shape `[d]`.",tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
1221,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","float, max value of the flag.",tf.compat.v1.flags.DEFINE_float.yaml,2
1222,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
1223,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","int, max value of the flag.",tf.compat.v1.flags.DEFINE_integer.yaml,2
1224,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","int, max values of the flag.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
1225,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","string, `""max""` or `""avg""`.",tf.keras.backend.pool2d.yaml,2
1226,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
1227,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
1228,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
1229,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","min, max: Quantization interval, scalar floats.",tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1230,454,0.003949100482667837,15,"frozenset({'max', 'SOME_DTYPE'})","string, `""max""` or `""avg""`.",tf.keras.backend.pool3d.yaml,2
1231,455,0.003949100482667837,13,"frozenset({'new', 'name'})",The job name under which the new server will be accessible.,tf.config.experimental_connect_to_host.yaml,2
1232,455,0.003949100482667837,13,"frozenset({'new', 'name'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
1233,455,0.003949100482667837,13,"frozenset({'new', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
1234,455,0.003949100482667837,13,"frozenset({'new', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_k.yaml,2
1235,455,0.003949100482667837,13,"frozenset({'new', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
1236,455,0.003949100482667837,13,"frozenset({'new', 'name'})",The scope name will be striped from the node definitions for easy import later into new name scopes.,tf.compat.v1.train.export_meta_graph.yaml,2
1237,455,0.003949100482667837,13,"frozenset({'new', 'name'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
1238,455,0.003949100482667837,13,"frozenset({'new', 'name'})",The name of the new or existing variable.,tf.compat.v1.get_local_variable.yaml,2
1239,455,0.003949100482667837,13,"frozenset({'new', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
1240,455,0.003949100482667837,13,"frozenset({'new', 'name'})",The name of the new or existing variable.,tf.compat.v1.get_variable.yaml,2
1241,455,0.003949100482667837,13,"frozenset({'new', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_k.yaml,2
1242,455,0.003949100482667837,13,"frozenset({'new', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
1243,455,0.003949100482667837,13,"frozenset({'new', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1244,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
1245,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Must be in the range `[-rank(values), rank(values))`.",tf.concat.yaml,2
1246,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
1247,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Negative values wrap around, so the valid range is `[-R, R)`.",tf.unstack.yaml,2
1248,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",The upper bound on the range of random values to generate.,tf.random.stateless_uniform.yaml,2
1249,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",The lower bound on the range of random values to generate.,tf.random.stateless_uniform.yaml,2
1250,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
1251,753,0.0038394032470381746,35,"frozenset({'values', 'range'})"," Must be in the range [0, rank(values)).",tf.quantization.quantized_concat.yaml,2
1252,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
1253,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
1254,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim_multiscale.yaml,2
1255,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.ssim_multiscale.yaml,2
1256,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
1257,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",tf.image.crop_and_resize.yaml,2
1258,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use`extrapolation_value` to extrapolate the input image values.",tf.compat.v1.image.crop_and_resize.yaml,2
1259,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
1260,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.precision_at_k.yaml,2
1261,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","If set, values outside of range `[0, num_buckets)` will be replaced with this value.",tf.feature_column.categorical_column_with_identity.yaml,2
1262,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
1263,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",Values outside this range always count towards `false_negative_at_<k>`.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
1264,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","If this operation is assigned to CPU, values in `indices` are always validated to be within range.",tf.compat.v1.nn.embedding_lookup.yaml,2
1265,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
1266,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",The upper bound on the range of random values to generate (exclusive).,tf.random.uniform.yaml,2
1267,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",The lower bound on the range of random values to generate (inclusive).,tf.random.uniform.yaml,2
1268,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
1269,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim.yaml,2
1270,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.ssim.yaml,2
1271,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
1272,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
1273,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",Values outside this range always count towards `false_negative_at_<k>`.,tf.compat.v1.metrics.recall_at_k.yaml,2
1274,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Negative values wrap around, so the valid range is `[-(R+1), R+1)`.",tf.stack.yaml,2
1275,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.psnr.yaml,2
1276,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
1277,753,0.0038394032470381746,35,"frozenset({'values', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1278,753,0.0038394032470381746,35,"frozenset({'values', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
1279,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
1280,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
1281,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
1282,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,3
1283,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,3
1284,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
1285,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
1286,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
1287,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,3
1288,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width.yaml,3
1289,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
1290,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
1291,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
1292,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
1293,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,3
1294,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width_bins.yaml,3
1295,905,0.0038394032470381746,17,"frozenset({'tensor', 'values', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
1296,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
1297,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
1298,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
1299,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,3
1300,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,3
1301,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,3
1302,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,3
1303,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1304,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1305,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1306,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1307,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,3
1308,832,0.0038394032470381746,13,"frozenset({'tensor', 'SOME_DTYPE', 'length'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,3
1309,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,3
1310,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,3
1311,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.tuple.yaml,3
1312,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,3
1313,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,3
1314,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.clip_by_global_norm.yaml,3
1315,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.linalg.global_norm.yaml,3
1316,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,3
1317,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,3
1318,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.compat.v1.tuple.yaml,3
1319,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
1320,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,3
1321,876,0.0037297060114085123,13,"frozenset({'tensor', 'none', 'SOME_STRUCTURE'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,3
1322,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,3
1323,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.stateless_truncated_normal.yaml,3
1324,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,3
1325,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.stateless_normal.yaml,3
1326,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,3
1327,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.stateless_uniform.yaml,3
1328,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",Defines the shape of the output tensor.,tf.reshape.yaml,3
1329,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
1330,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,3
1331,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,3
1332,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
1333,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.uniform.yaml,3
1334,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,3
1335,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.truncated_normal.yaml,3
1336,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A tensor with the same shape as `output`.,tf.keras.backend.binary_crossentropy.yaml,3
1337,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",The shape of the output tensor.,tf.random.normal.yaml,3
1338,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",Represents the shape of the output tensor.,tf.fill.yaml,3
1339,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,3
1340,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
1341,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,3
1342,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
1343,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})",A tensor of the same shape as `output`.,tf.keras.backend.categorical_crossentropy.yaml,3
1344,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
1345,851,0.0037297060114085123,24,"frozenset({'tensor', 'shape', 'output'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
1346,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,4
1347,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,4
1348,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,4
1349,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,4
1350,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,4
1351,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,4
1352,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,4
1353,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,4
1354,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,4
1355,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,4
1356,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,4
1357,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,4
1358,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,4
1359,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,4
1360,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,4
1361,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1362,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1363,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1364,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1365,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1366,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,4
1367,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,4
1368,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,4
1369,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,4
1370,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,4
1371,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,4
1372,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,4
1373,784,0.0037297060114085123,28,"frozenset({'tensor', 'SOME_DTYPE', 'python', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,4
1374,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
1375,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
1376,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
1377,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.shared_embeddings.yaml,3
1378,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.embedding_column.yaml,3
1379,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.embedding_column.yaml,3
1380,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
1381,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
1382,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,3
1383,442,0.0037297060114085123,10,"frozenset({'single', 'row', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
1384,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",Tensor of true targets.,tf.keras.losses.cosine_similarity.yaml,2
1385,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to.",tf.compat.v1.assign.yaml,2
1386,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
1387,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not.",tf.io.decode_image.yaml,2
1388,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","if true, attempt to statically determine the shape of 'tensor' and encode it as a constant.",tf.compat.v1.ones_like.yaml,2
1389,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, returns a `SparseTensor` instead of a dense`Tensor` (the default).",tf.sparse.reduce_sum.yaml,2
1390,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If True, add offset of `beta` to normalized tensor.",tf.keras.layers.BatchNormalization.yaml,2
1391,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
1392,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
1393,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
1394,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If ""scale_after_normalization"" is true, this tensor will be multiplied with the normalized tensor.",tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
1395,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
1396,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.",tf.nest.flatten.yaml,2
1397,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If True, add offset of `beta` to normalized tensor.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1398,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
1399,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
1400,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",tensor of true targets.,tf.keras.losses.categorical_crossentropy.yaml,2
1401,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","can be True, False, a bool Tensor, or a callable providing such.",tf.summary.record_if.yaml,2
1402,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",(optional) True scans the tensor last to first (instead of first to last).,tf.scan.yaml,2
1403,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",Tensor of true targets.,tf.keras.losses.KLD.yaml,2
1404,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, returns a `SparseTensor` instead of a dense`Tensor` (the default).",tf.sparse.reduce_max.yaml,2
1405,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
1406,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
1407,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.assert_same_structure.yaml,2
1408,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",Tensor of true targets.,tf.keras.losses.poisson2.yaml,2
1409,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",tensor of true targets.,tf.keras.losses.logcosh2.yaml,2
1410,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","if true, attempt to statically determine the shape of 'tensor' and encode it as a constant.",tf.compat.v1.zeros_like.yaml,2
1411,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.categorical_crossentropy.yaml,2
1412,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If ""scale_after_normalization"" is true, this tensor will be multiplied with the normalized tensor.",tf.nn.batch_norm_with_global_normalization.yaml,2
1413,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If True, equal elements in the original tensor will not be re-ordered in the returned order.",tf.argsort.yaml,2
1414,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
1415,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
1416,886,0.0036200087757788505,33,"frozenset({'tensor', 'true'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.pack_sequence_as.yaml,2
1417,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
1418,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
1419,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Axis along which to determine similarity.,tf.keras.losses.cosine_similarity.yaml,2
1420,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Axis along which to repeat.,tf.keras.backend.repeat_elements.yaml,2
1421,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis that the output values are concatenated along.,tf.compat.v1.nn.crelu.yaml,2
1422,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis to compute the DCT along.,tf.signal.idct.yaml,2
1423,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Axis along which to partition the variable.,tf.compat.v1.min_max_variable_partitioner.yaml,2
1424,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis to unstack along.,tf.unstack.yaml,2
1425,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","Integer, axis along which the softmax normalization is applied.",tf.keras.activations.softmax.yaml,2
1426,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","If axis is specified, this should be a vector of maximum values for each slice along axis.",tf.quantization.quantize_and_dequantize.yaml,2
1427,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","If axis is specified, this should be a vector of minimum values for each slice along axis.",tf.quantization.quantize_and_dequantize.yaml,2
1428,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to perform normalization.,tf.keras.backend.l2_normalize.yaml,2
1429,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Which axis to join along.,tf.compat.v1.reduce_join.yaml,2
1430,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis that the output values are concatenated along.,tf.nn.crelu.yaml,2
1431,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to perform the reduction.,tf.keras.backend.argmin.yaml,2
1432,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to normalize.,tf.keras.utils.normalize.yaml,2
1433,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to perform the reduction.,tf.keras.backend.argmax.yaml,2
1434,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis along which to repeat values.,tf.repeat.yaml,2
1435,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
1436,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Whether to L2-normalize samples along the dot product axis before taking the dot product.,tf.keras.layers.Dot.yaml,2
1437,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis along which to sort.,tf.sort.yaml,2
1438,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Axis along which to perform stacking.,tf.keras.backend.stack.yaml,2
1439,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Axis along which to concatenate.,tf.keras.layers.Concatenate.yaml,2
1440,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis to compute the DCT along.,tf.signal.dct.yaml,2
1441,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis to partition along.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
1442,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
1443,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Whether to L2-normalize samples along the dot product axis before taking the dot product.,tf.keras.layers.dot2.yaml,2
1444,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to perform the reduction.,tf.keras.backend.any.yaml,2
1445,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis to stack along.,tf.stack.yaml,2
1446,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",axis along which to perform the reduction.,tf.keras.backend.all.yaml,2
1447,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",The axis along which to sort.,tf.argsort.yaml,2
1448,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",`shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`.,tf.roll.yaml,2
1449,662,0.0036200087757788505,33,"frozenset({'axis', 'along'})",Which axis to join along.,tf.strings.reduce_join.yaml,2
1450,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The maximum scalar value possibly produced for the input.,tf.quantization.dequantize.yaml,3
1451,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The minimum scalar value possibly produced for the input.,tf.quantization.dequantize.yaml,3
1452,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
1453,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
1454,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_max_pool.yaml,3
1455,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_max_pool.yaml,3
1456,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,3
1457,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1458,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1459,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})","input - dict, with keys() being flag_names, and value for each key     being the value of the corresponding flag (string, boolean, etc).",tf.compat.v1.flags.register_multi_flags_validator.yaml,3
1460,923,0.0036200087757788505,11,"frozenset({'input', 'value', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,3
1461,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.concatenate2.yaml,4
1462,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.subtract2.yaml,4
1463,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.maximum2.yaml,4
1464,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.add2.yaml,4
1465,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.Dot.yaml,4
1466,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.average2.yaml,4
1467,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",standard layer keyword arguments.,tf.keras.layers.Concatenate.yaml,4
1468,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.multiply2.yaml,4
1469,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.minimum2.yaml,4
1470,439,0.0036200087757788505,10,"frozenset({'layer', 'arguments', 'standard', 'keyword'})",Standard layer keyword arguments.,tf.keras.layers.dot2.yaml,4
1471,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,12
1472,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,12
1473,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,12
1474,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,12
1475,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,12
1476,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,12
1477,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,12
1478,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,12
1479,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,12
1480,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,12
1481,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,12
1482,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,12
1483,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,12
1484,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,12
1485,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,12
1486,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,12
1487,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,12
1488,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,12
1489,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,12
1490,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,12
1491,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,12
1492,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,12
1493,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,12
1494,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,12
1495,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,12
1496,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,12
1497,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,12
1498,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,12
1499,595,0.0036200087757788505,29,"frozenset({'rank', 'optional', 'e', 'dimension', 'dimensions', 'whose', 'corresponding', 'labels', 'must', 'either', 'broadcastable', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,12
1500,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of element in the resulting `Tensor`.,tf.sparse.eye.yaml,2
1501,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
1502,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,2
1503,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of the elements of the resulting tensor.,tf.keras.backend.constant.yaml,2
1504,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Optional dimensions of resulting tensor.,tf.keras.backend.constant.yaml,2
1505,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of an element in the resulting `Tensor`,tf.eye.yaml,2
1506,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of the elements of the resulting tensor.,tf.ragged.range.yaml,2
1507,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of the elements of the resulting tensor.,tf.range.yaml,2
1508,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
1509,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of the elements of the resulting tensor.,tf.compat.v1.constant.yaml,2
1510,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Optional dimensions of resulting tensor.,tf.compat.v1.constant.yaml,2
1511,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The shape of the resulting tensor.,tf.scatter_nd.yaml,2
1512,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Optional DType of an element in the resulting `Tensor`.,tf.ones.yaml,2
1513,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The DType of an element in the resulting `Tensor`.,tf.zeros.yaml,2
1514,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",The type of the elements of the resulting tensor.,tf.constant.yaml,2
1515,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",Optional dimensions of resulting tensor.,tf.constant.yaml,2
1516,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.categorical_crossentropy.yaml,2
1517,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",output type of the resulting tensor.,tf.sequence_mask.yaml,2
1518,429,0.0035103115401491883,19,"frozenset({'resulting', 'tensor'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
1519,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
1520,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,3
1521,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,3
1522,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,3
1523,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of (left_pad_value, right_pad_value), a single string, or None.",tf.strings.ngrams.yaml,3
1524,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple or list of integers with target dimensions, or single integer.",tf.keras.backend.batch_dot.yaml,3
1525,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})"," For backwards compatibility reasons, this is separate from the single-string argument type.A list of Variables to warm-start.",tf.compat.v1.train.warm_start.yaml,3
1526,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
1527,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,3
1528,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
1529,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
1530,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,3
1531,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,3
1532,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
1533,720,0.0035103115401491883,15,"frozenset({'single', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,3
1534,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_mul.yaml,3
1535,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,3
1536,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_div.yaml,3
1537,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",The first and last `summarize` elements within each dimension are recursively printed per Tensor.,tf.print.yaml,3
1538,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","If None, then the first 3 and last 3 elements of each dimension are printed for each tensor.",tf.print.yaml,3
1539,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_add.yaml,3
1540,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,3
1541,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
1542,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,3
1543,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
1544,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,3
1545,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_min.yaml,3
1546,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,3
1547,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,3
1548,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
1549,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,3
1550,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,3
1551,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_sub.yaml,3
1552,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_max.yaml,3
1553,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively).",tf.strings.format.yaml,3
1554,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,3
1555,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
1556,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_update.yaml,3
1557,711,0.0035103115401491883,24,"frozenset({'first', 'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,3
1558,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
1559,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
1560,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
1561,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",A real numeric Tensor containing a single value.,tf.compat.v1.summary.scalar.yaml,3
1562,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
1563,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
1564,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
1565,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
1566,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
1567,719,0.003400614304519526,10,"frozenset({'single', 'value', 'SOME_DTYPE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
1568,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
1569,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_overlaps.yaml,2
1570,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1571,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",This optimizer is also essential for pruning Identity and NoOp nodes.loop_optimization: Loop optimizations.function_optimization: Function optimizations and inlining.debug_stripper: Strips debug-related nodes from the graph.disable_model_pruning: Disable removal of unnecessary ops from the graphscoped_allocator_optimization: Try to allocate some independent Op outputs contiguously in order to merge or eliminate downstream Ops.pin_to_host_optimization: Force small ops onto the CPU.implementation_selector: Enable the swap of kernel implementations based on the device placement.auto_mixed_precision: Change certain float32 ops to float16 on Volta GPUs and above.,tf.config.optimizer.set_experimental_options.yaml,2
1572,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_with_scores.yaml,2
1573,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})","If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.compat.v1.ragged.constant_value.yaml,2
1574,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})","An integer vector representing the shape of `input`, based on `data_format`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
1575,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})"," If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.ragged.constant.yaml,2
1576,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.combined_non_max_suppression.yaml,2
1577,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression.yaml,2
1578,419,0.003400614304519526,11,"frozenset({'based', 'SOME_DTYPE'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_padded.yaml,2
1579,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,4
1580,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,4
1581,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,4
1582,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,4
1583,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,4
1584,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,4
1585,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,4
1586,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,4
1587,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,4
1588,422,0.003400614304519526,10,"frozenset({'boxes', 'tensor', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,4
1589,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
1590,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","The values of the tensor are expected to be 0.0 or 1.0. Internally the {0,1} labels are converted to {-1,1} when calculating the hinge loss.",tf.compat.v1.losses.hinge_loss.yaml,2
1591,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
1592,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1593,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
1594,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})",Whether `output` is expected to be a logits tensor.,tf.keras.backend.binary_crossentropy.yaml,2
1595,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.regression_signature_def.yaml,2
1596,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})",Whether `y_pred` is expected to be a logits tensor.,tf.keras.losses.categorical_crossentropy.yaml,2
1597,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
1598,423,0.003400614304519526,10,"frozenset({'expected', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.categorical_crossentropy.yaml,2
1599,424,0.003400614304519526,11,"frozenset({'images', 'image'})","indicates if the offset coordinates are centered relative to the image, in which case the (0, 0) offset is relative to the center of the input images.",tf.compat.v1.image.extract_glimpse.yaml,2
1600,424,0.003400614304519526,11,"frozenset({'images', 'image'})",An image or images to adjust.,tf.image.random_brightness.yaml,2
1601,424,0.003400614304519526,11,"frozenset({'images', 'image'})","If this is set, then `images` will be resized to a size that fits in `size` while preserving the aspect ratio of the original image.",tf.image.resize.yaml,2
1602,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images.,tf.image.adjust_saturation.yaml,2
1603,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images to adjust.,tf.image.adjust_gamma.yaml,2
1604,424,0.003400614304519526,11,"frozenset({'images', 'image'})","indicates if the offset coordinates are centered relative to the image, in which case the (0, 0) offset is relative to the center of the input images.",tf.image.extract_glimpse.yaml,2
1605,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images.,tf.image.adjust_hue.yaml,2
1606,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images.,tf.image.random_hue.yaml,2
1607,424,0.003400614304519526,11,"frozenset({'images', 'image'})","If this is set, then `images` will be resized to a size that fits in `size` while preserving the aspect ratio of the original image.",tf.compat.v1.image.resize.yaml,2
1608,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images.,tf.image.random_saturation.yaml,2
1609,424,0.003400614304519526,11,"frozenset({'images', 'image'})",RGB image or images to adjust.,tf.image.adjust_brightness.yaml,2
1610,922,0.003290917068889864,30,"frozenset({'value', 'must'})","Must be in the range `[-rank(value), rank(value))`.",tf.split.yaml,2
1611,922,0.003290917068889864,30,"frozenset({'value', 'must'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
1612,922,0.003290917068889864,30,"frozenset({'value', 'must'})", Must have the same type as `value`.,tf.compat.v1.nn.conv1d.yaml,2
1613,922,0.003290917068889864,30,"frozenset({'value', 'must'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
1614,922,0.003290917068889864,30,"frozenset({'value', 'must'})","Must be greater than (Note that 1-grams are never padded, regardless of this value.) ",tf.strings.ngrams.yaml,2
1615,922,0.003290917068889864,30,"frozenset({'value', 'must'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
1616,922,0.003290917068889864,30,"frozenset({'value', 'must'})","Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
1617,922,0.003290917068889864,30,"frozenset({'value', 'must'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
1618,922,0.003290917068889864,30,"frozenset({'value', 'must'})","This value must be provided, since two variables with shape = [num_classes] will be allocated.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
1619,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
1620,922,0.003290917068889864,30,"frozenset({'value', 'must'})", `filter`'s `in_channels` dimension must match that of `value`.,tf.nn.conv3d_transpose.yaml,2
1621,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.convolution.yaml,2
1622,922,0.003290917068889864,30,"frozenset({'value', 'must'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv3d_transpose.yaml,2
1623,922,0.003290917068889864,30,"frozenset({'value', 'must'})","This value must be provided, since a confusion matrix of dimension = [num_classes, num_classes] will be allocated.",tf.compat.v1.metrics.mean_iou.yaml,2
1624,922,0.003290917068889864,30,"frozenset({'value', 'must'})",Must have the same type as `value`.,tf.nn.erosion2d.yaml,2
1625,922,0.003290917068889864,30,"frozenset({'value', 'must'})",`filters`'`in_channels` dimension must match that of `value`.,tf.nn.atrous_conv2d_transpose.yaml,2
1626,922,0.003290917068889864,30,"frozenset({'value', 'must'})","If true, exactly one of the flags must have a value other than None.",tf.compat.v1.flags.mark_flags_as_mutual_exclusive.yaml,2
1627,922,0.003290917068889864,30,"frozenset({'value', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
1628,922,0.003290917068889864,30,"frozenset({'value', 'must'})","Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",tf.nn.bias_add.yaml,2
1629,922,0.003290917068889864,30,"frozenset({'value', 'must'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.nn.conv1d_transpose.yaml,2
1630,922,0.003290917068889864,30,"frozenset({'value', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
1631,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.pool.yaml,2
1632,922,0.003290917068889864,30,"frozenset({'value', 'must'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.pool.yaml,2
1633,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
1634,922,0.003290917068889864,30,"frozenset({'value', 'must'})",`filters`'`in_channels` dimension must match that of `value`.,tf.nn.atrous_conv2d.yaml,2
1635,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.convolution.yaml,2
1636,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.convolution.yaml,2
1637,922,0.003290917068889864,30,"frozenset({'value', 'must'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.nn.pool.yaml,2
1638,922,0.003290917068889864,30,"frozenset({'value', 'must'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.pool.yaml,2
1639,922,0.003290917068889864,30,"frozenset({'value', 'must'})",Must have the same type as `value`.,tf.compat.v1.nn.erosion2d.yaml,2
1640,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",integer type to use for the output.,tf.random.categorical.yaml,3
1641,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32`, or`int64`.",tf.random.stateless_uniform.yaml,3
1642,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,3
1643,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",The output type (`int32` or `int64`).,tf.searchsorted.yaml,3
1644,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,3
1645,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.random.uniform.yaml,3
1646,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",integer type to use for the output.,tf.random.stateless_categorical.yaml,3
1647,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32` or`int64`.",tf.random.poisson.yaml,3
1648,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32` or`int64`.",tf.compat.v1.random_poisson.yaml,3
1649,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,3
1650,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})","The type of alpha, beta, and the output: `float16`, `float32`, or`float64`.",tf.random.gamma.yaml,3
1651,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,3
1652,850,0.003290917068889864,13,"frozenset({'output', 'SOME_DTYPE', 'type'})",The specified output type of the operation (`int32` or `int64`).,tf.shape_n.yaml,3
1653,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
1654,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,3
1655,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
1656,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,3
1657,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,3
1658,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
1659,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,3
1660,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
1661,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,3
1662,797,0.003290917068889864,10,"frozenset({'axis', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` indicating the axis to frame.,tf.signal.frame.yaml,3
1663,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.MaxPool2D.yaml,3
1664,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","A tuple of (left_pad_value, right_pad_value), a single string, or None.",tf.strings.ngrams.yaml,3
1665,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,3
1666,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.MaxPool3D.yaml,3
1667,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,3
1668,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
1669,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
1670,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.AveragePooling2D.yaml,3
1671,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
1672,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
1673,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
1674,875,0.003290917068889864,12,"frozenset({'SOME_DTYPE', 'none', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.AveragePooling3D.yaml,3
1675,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.conv2d_transpose.yaml,7
1676,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.conv2d_transpose.yaml,7
1677,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.avg_pool2d.yaml,7
1678,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.conv_transpose.yaml,7
1679,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.avg_pool.yaml,7
1680,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.max_pool2d.yaml,7
1681,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.avg_pool3d.yaml,7
1682,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.avg_pool1d.yaml,7
1683,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.avg_pool.yaml,7
1684,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.conv3d_transpose.yaml,7
1685,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.max_pool3d.yaml,7
1686,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.max_pool1d.yaml,7
1687,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.conv3d_transpose.yaml,7
1688,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.separable_conv2d.yaml,7
1689,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.separable_conv2d.yaml,7
1690,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.conv1d_transpose.yaml,7
1691,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.pool.yaml,7
1692,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.max_pool.yaml,7
1693,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.pool.yaml,7
1694,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.compat.v1.nn.depthwise_conv2d.yaml,7
1695,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.max_pool.yaml,7
1696,411,0.003290917068889864,22,"frozenset({'see', 'tf', 'convolution', 'details', 'returns', 'section', 'nn'})","See the ""returns"" section of `tf.nn.convolution` for details.",tf.nn.depthwise_conv2d.yaml,7
1697,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,3
1698,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.conv2d_transpose.yaml,3
1699,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.conv2d_transpose.yaml,3
1700,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.avg_pool2d.yaml,3
1701,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.conv_transpose.yaml,3
1702,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.avg_pool.yaml,3
1703,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.max_pool2d.yaml,3
1704,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
1705,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.avg_pool3d.yaml,3
1706,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,3
1707,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,3
1708,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.avg_pool1d.yaml,3
1709,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
1710,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.avg_pool.yaml,3
1711,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.conv3d_transpose.yaml,3
1712,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.max_pool3d.yaml,3
1713,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.max_pool1d.yaml,3
1714,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `""VALID""` or `""SAME""`.",tf.nn.convolution.yaml,3
1715,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
1716,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.atrous_conv2d_transpose.yaml,3
1717,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.separable_conv2d.yaml,3
1718,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.separable_conv2d.yaml,3
1719,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.conv1d_transpose.yaml,3
1720,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.max_pool.yaml,3
1721,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.atrous_conv2d.yaml,3
1722,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `""VALID""` or `""SAME""`.",tf.compat.v1.nn.convolution.yaml,3
1723,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
1724,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.compat.v1.nn.depthwise_conv2d.yaml,3
1725,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.max_pool.yaml,3
1726,747,0.003290917068889864,30,"frozenset({'either', 'SOME_DTYPE', 'valid'})","A string, either `'VALID'` or `'SAME'`.",tf.nn.depthwise_conv2d.yaml,3
1727,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.image.extract_glimpse.yaml,2
1728,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.image.extract_glimpse.yaml,2
1729,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.image.extract_glimpse.yaml,2
1730,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.data.experimental.make_csv_dataset.yaml,2
1731,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.scatter_nd_update.yaml,2
1732,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to True.,tf.compat.v1.scatter_nd_update.yaml,2
1733,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})", Defaults to `True`.,tf.compat.v1.nn.conv1d.yaml,2
1734,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to True.,tf.compat.v1.scatter_nd_sub.yaml,2
1735,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.image.extract_glimpse.yaml,2
1736,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.image.extract_glimpse.yaml,2
1737,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.assign.yaml,2
1738,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.assign.yaml,2
1739,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.io.encode_jpeg.yaml,2
1740,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1741,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.nn.conv2d.yaml,2
1742,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.linalg.triangular_solve.yaml,2
1743,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1744,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.linalg.lstsq.yaml,2
1745,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
1746,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.decode_csv.yaml,2
1747,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to False (will later change to True).,tf.compat.v1.get_local_variable.yaml,2
1748,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1749,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.io.decode_jpeg.yaml,2
1750,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.data.experimental.make_batched_features_dataset.yaml,2
1751,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to False (will later change to True).,tf.compat.v1.get_variable.yaml,2
1752,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.io.decode_and_crop_jpeg.yaml,2
1753,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to true.,tf.image.combined_non_max_suppression.yaml,2
1754,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1755,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.io.decode_csv.yaml,2
1756,885,0.003290917068889864,30,"frozenset({'defaults', 'true'})",Defaults to `True`.,tf.compat.v1.scatter_update.yaml,2
1757,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",A bool value to specify if the operation is used for          training or inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
1758,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
1759,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
1760,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
1761,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",Integer hash_key that will be used by the `FingerprintCat64`function.,tf.sparse.cross_hashed.yaml,2
1762,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If None, no padding will be added; if a single string, then that string will be used for both left and right padding.",tf.strings.ngrams.yaml,2
1763,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",The separator string used between ngram elements.,tf.strings.ngrams.yaml,2
1764,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
1765,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If the argument is a boolean, the argument's value is used for each output.",tf.compat.v1.tpu.shard.yaml,2
1766,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.regressor_parse_example_spec.yaml,2
1767,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
1768,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
1769,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",A string used to name this data in TensorBoard.,tf.compat.v1.summary.tensor_summary.yaml,2
1770,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
1771,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1772,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split_with_offsets.yaml,2
1773,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
1774,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode_with_offsets.yaml,2
1775,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",string specifying a hint about the algorithm used for decompression.,tf.io.decode_jpeg.yaml,2
1776,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
1777,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",(optional) perturbation used to compute numeric Jacobian.,tf.test.compute_gradient.yaml,2
1778,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
1779,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.classifier_parse_example_spec.yaml,2
1780,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
1781,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",string specifying a hint about the algorithm used for decompression.,tf.io.decode_and_crop_jpeg.yaml,2
1782,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",Callable to be used to clone each layer in the target model (except `InputLayer` instances).,tf.keras.models.clone_model.yaml,2
1783,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
1784,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split.yaml,2
1785,868,0.003181219833260202,29,"frozenset({'SOME_DTYPE', 'used'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode.yaml,2
1786,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,3
1787,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,3
1788,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,3
1789,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,3
1790,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
1791,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,3
1792,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
1793,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
1794,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,3
1795,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,3
1796,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
1797,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,3
1798,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
1799,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
1800,930,0.003181219833260202,15,"frozenset({'input', 'tensor', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
1801,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
1802,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
1803,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
1804,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
1805,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.Tensor` or `tf.RaggedTensor`.,tf.ragged.stack.yaml,2
1806,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
1807,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1808,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
1809,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
1810,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,2
1811,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
1812,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
1813,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
1814,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
1815,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
1816,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
1817,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`.,tf.config.set_logical_device_configuration.yaml,2
1818,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
1819,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
1820,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
1821,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
1822,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
1823,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A `tf.TensorShape` or list of `int`s.,tf.compat.v1.placeholder_with_default.yaml,2
1824,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","`signatures` may also be a dictionary, in which case it maps from signature keys to either `tf.function` instances with input signatures or concrete functions.",tf.saved_model.save.yaml,2
1825,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
1826,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.Tensor` objects.,tf.numpy_function.yaml,2
1827,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",A list of `tf.DTypes`.,tf.io.decode_proto.yaml,2
1828,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,2
1829,898,0.003181219833260202,29,"frozenset({'tf', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
1830,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_std.yaml,2
1831,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_max.yaml,2
1832,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_min.yaml,2
1833,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_sum.yaml,2
1834,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The boolean tensor to reduce.,tf.compat.v1.reduce_all.yaml,2
1835,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_mean.yaml,2
1836,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The boolean tensor to reduce.,tf.compat.v1.reduce_any.yaml,2
1837,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
1838,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_prod.yaml,2
1839,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
1840,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmin.yaml,2
1841,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.count_nonzero.yaml,2
1842,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_min.yaml,2
1843,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The boolean tensor to reduce.,tf.math.reduce_any.yaml,2
1844,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_logsumexp.yaml,2
1845,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmin.yaml,2
1846,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmax.yaml,2
1847,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmax.yaml,2
1848,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_max.yaml,2
1849,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_euclidean_norm.yaml,2
1850,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.count_nonzero.yaml,2
1851,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_mean.yaml,2
1852,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The boolean tensor to reduce.,tf.reduce_all.yaml,2
1853,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_max.yaml,2
1854,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_variance.yaml,2
1855,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_min.yaml,2
1856,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.compat.v1.reduce_logsumexp.yaml,2
1857,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_sum.yaml,2
1858,618,0.003181219833260202,29,"frozenset({'tensor', 'reduce'})",The tensor to reduce.,tf.math.reduce_prod.yaml,2
1859,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.xlogy.yaml,3
1860,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.zeta.yaml,3
1861,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.greater_equal.yaml,3
1862,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.subtract.yaml,3
1863,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.squared_difference.yaml,3
1864,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.less.yaml,3
1865,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.realdiv.yaml,3
1866,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.compat.v1.floor_div.yaml,3
1867,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.truncatediv.yaml,3
1868,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x1`.,tf.math.nextafter.yaml,3
1869,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.bitwise.right_shift.yaml,3
1870,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.greater.yaml,3
1871,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.bitwise.bitwise_or.yaml,3
1872,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.add.yaml,3
1873,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.floormod.yaml,3
1874,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.bitwise.left_shift.yaml,3
1875,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.xdivy.yaml,3
1876,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.minimum.yaml,3
1877,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.multiply.yaml,3
1878,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.less_equal.yaml,3
1879,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.truncatemod.yaml,3
1880,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.math.maximum.yaml,3
1881,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.bitwise.bitwise_xor.yaml,3
1882,739,0.003181219833260202,24,"frozenset({'x', 'must', 'type'})",Must have the same type as `x`.,tf.bitwise.bitwise_and.yaml,3
1883,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",A bool value to specify if the operation is used for          training or inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
1884,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,2
1885,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,2
1886,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,2
1887,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,2
1888,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,2
1889,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,2
1890,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,2
1891,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,2
1892,401,0.003181219833260202,10,"frozenset({'SOME_DTYPE', 'specify'})","int, the verbosity level; larger values specify increased verbosity; 0 means no logging.",tf.autograph.set_verbosity.yaml,2
1893,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
1894,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv3d.yaml,3
1895,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
1896,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.nn.conv3d.yaml,3
1897,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","Shape `[batch, depth, rows, cols, in_channels]`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
1898,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
1899,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
1900,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,3
1901,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
1902,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d.yaml,3
1903,582,0.00307152259763054,11,"frozenset({'shape', 'in_channels', 'batch'})","4-D with shape `[batch, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
1904,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",A Tensor or RaggedTensor containing the source data for the ngrams.,tf.strings.ngrams.yaml,2
1905,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",A list of `tf.Tensor` or `tf.RaggedTensor`.,tf.ragged.stack.yaml,2
1906,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",`dtype` for the returned `RaggedTensor`'s `row_splits`tensor.,tf.ragged.range.yaml,2
1907,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
1908,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,2
1909,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.string_split.yaml,2
1910,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.",tf.nest.flatten.yaml,2
1911,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
1912,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",A string `Tensor` or `RaggedTensor`: the strings to split.,tf.strings.bytes_split.yaml,2
1913,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.strings.split.yaml,2
1914,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.assert_same_structure.yaml,2
1915,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.pack_sequence_as.yaml,2
1916,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",A `Tensor` or `RaggedTensor` containing the values to stack.,tf.ragged.stack_dynamic_partitions.yaml,2
1917,393,0.00307152259763054,14,"frozenset({'tensor', 'raggedtensor'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
1918,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.image.crop_and_resize.yaml,2
1919,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.compat.v1.image.crop_and_resize.yaml,2
1920,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
1921,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If True, add offset of `beta` to normalized tensor.",tf.keras.layers.BatchNormalization.yaml,2
1922,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If present, will be added to the normalized tensor.",tf.nn.batch_normalization.yaml,2
1923,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If present, the scale is applied to the normalized tensor.",tf.nn.batch_normalization.yaml,2
1924,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})",An offset to be added to the normalized tensor.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
1925,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If ""scale_after_normalization"" is true, this tensor will be multiplied with the normalized tensor.",tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
1926,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1927,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If True, add offset of `beta` to normalized tensor.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1928,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})",An offset to be added to the normalized tensor.,tf.nn.batch_norm_with_global_normalization.yaml,2
1929,394,0.00307152259763054,12,"frozenset({'tensor', 'normalized'})","If ""scale_after_normalization"" is true, this tensor will be multiplied with the normalized tensor.",tf.nn.batch_norm_with_global_normalization.yaml,2
1930,398,0.00307152259763054,10,"frozenset({'equal', 'must'})",Must be less than or equal to `frame_length`.,tf.signal.overlap_and_add.yaml,2
1931,398,0.00307152259763054,10,"frozenset({'equal', 'must'})",Must be greater than or equal to `batch_dims`.,tf.gather.yaml,2
1932,398,0.00307152259763054,10,"frozenset({'equal', 'must'})","The entries must increase monotonically, and the final entry must equal max_batch_size.",tf.nondifferentiable_batch_function.yaml,2
1933,398,0.00307152259763054,10,"frozenset({'equal', 'must'})",The number of axes for `a` and`b` must be equal.,tf.tensordot.yaml,2
1934,398,0.00307152259763054,10,"frozenset({'equal', 'must'})",`len(repeats)`must equal `input.shape[axis]` if axis is not None.,tf.repeat.yaml,2
1935,398,0.00307152259763054,10,"frozenset({'equal', 'must'})"," If this is a non-empty list, the last element must be equal to model_checkpoint_path.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1936,398,0.00307152259763054,10,"frozenset({'equal', 'must'})","If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",tf.random.uniform_candidate_sampler.yaml,2
1937,398,0.00307152259763054,10,"frozenset({'equal', 'must'})"," Values must be greater than or equal to zero, and less than `num_partitions`.`partitions` is not required to be sorted.",tf.ragged.stack_dynamic_partitions.yaml,2
1938,398,0.00307152259763054,10,"frozenset({'equal', 'must'})",Must be greater than or equal to `batch_dims`.,tf.compat.v1.gather.yaml,2
1939,398,0.00307152259763054,10,"frozenset({'equal', 'must'})","Each element of this dataset must have the same rank as`row_shape`, and must have size less than or equal to `row_shape` in each dimension.",tf.data.experimental.dense_to_sparse_batch.yaml,2
1940,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,3
1941,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",The values of the named input tensors in the imported graph will be re-mapped to the respective `Tensor` values.,tf.graph_util.import_graph_def.yaml,3
1942,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,3
1943,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
1944,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,3
1945,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,3
1946,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,3
1947,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,3
1948,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
1949,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,3
1950,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,3
1951,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,3
1952,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,3
1953,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,3
1954,904,0.00307152259763054,15,"frozenset({'input', 'tensor', 'values'})",Tensors of input values.,tf.debugging.assert_same_float_dtype.yaml,3
1955,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reorder.yaml,5
1956,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.boolean_mask.yaml,5
1957,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.row_splits_to_segment_ids.yaml,5
1958,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack.yaml,5
1959,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.while_loop.yaml,5
1960,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_many_sparse.yaml,5
1961,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.sparse_concat.yaml,5
1962,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_many_sparse.yaml,5
1963,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.to_indicator.yaml,5
1964,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.sparse.to_dense.yaml,5
1965,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_sparse.yaml,5
1966,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.sparse_dense_matmul.yaml,5
1967,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.segment_ids_to_row_splits.yaml,5
1968,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldr.yaml,5
1969,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",Optional name prefix for the returned tensors.,tf.cond.yaml,5
1970,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.scan.yaml,5
1971,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",Optional name prefix for the returned tensors.,tf.while_loop.yaml,5
1972,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.constant.yaml,5
1973,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.transpose.yaml,5
1974,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.fill_empty_rows.yaml,5
1975,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_sparse.yaml,5
1976,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.cond.yaml,5
1977,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldl.yaml,5
1978,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack_dynamic_partitions.yaml,5
1979,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reshape.yaml,5
1980,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.map_fn.yaml,5
1981,699,0.00307152259763054,27,"frozenset({'name', 'optional', 'prefix', 'returned', 'tensor'})",A name prefix for the returned tensors (optional),tf.io.deserialize_many_sparse.yaml,5
1982,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",the Tensor holding the summary data to write or a callable that returns this Tensor.,tf.summary.write.yaml,3
1983,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,3
1984,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",What to return in test phase (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,3
1985,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,3
1986,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,3
1987,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,3
1988,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",What to return in train phase (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,3
1989,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,3
1990,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",Optional callable that returns a list of tensors.,tf.case.yaml,3
1991,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,3
1992,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
1993,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,3
1994,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,3
1995,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,3
1996,647,0.00307152259763054,15,"frozenset({'tensor', 'SOME_DTYPE', 'returns'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,3
1997,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
1998,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.true_negatives.yaml,3
1999,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
2000,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean.yaml,3
2001,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.recall_at_thresholds.yaml,3
2002,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_absolute_error.yaml,3
2003,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.root_mean_squared_error.yaml,3
2004,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.accuracy.yaml,3
2005,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
2006,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.false_positives.yaml,3
2007,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
2008,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.precision_at_thresholds.yaml,3
2009,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_iou.yaml,3
2010,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.recall.yaml,3
2011,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
2012,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_relative_error.yaml,3
2013,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_squared_error.yaml,3
2014,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.false_negatives.yaml,3
2015,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.percentage_below.yaml,3
2016,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
2017,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_tensor.yaml,3
2018,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
2019,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.true_positives.yaml,3
2020,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.precision.yaml,3
2021,379,0.0029618253620008776,25,"frozenset({'optional', 'variable_scope', 'name'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_cosine_distance.yaml,3
2022,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,3
2023,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,3
2024,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,3
2025,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,3
2026,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,3
2027,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,3
2028,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,3
2029,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
2030,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
2031,926,0.0029618253620008776,10,"frozenset({'d', 'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,3
2032,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,3
2033,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset`.,tf.compat.v1.data.make_one_shot_iterator.yaml,3
2034,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,3
2035,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,3
2036,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset`.,tf.data.experimental.to_variant.yaml,3
2037,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.experimental.Structure` object representing the structure of each element in the dataset.,tf.data.experimental.from_variant.yaml,3
2038,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset`.,tf.compat.v1.data.make_initializable_iterator.yaml,3
2039,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` or `tf.data.Iterator`.,tf.compat.v1.data.get_output_types.yaml,3
2040,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
2041,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",Nested structure of `tf.TensorShape` to pass to`tf.data.Dataset.padded_batch`.,tf.data.experimental.bucket_by_sequence_length.yaml,3
2042,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})","Values to pad with, passed to`tf.data.Dataset.padded_batch`.",tf.data.experimental.bucket_by_sequence_length.yaml,3
2043,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` or `tf.data.Iterator`.,tf.data.experimental.get_structure.yaml,3
2044,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,3
2045,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,3
2046,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` for which to determine cardinality.,tf.data.experimental.cardinality.yaml,3
2047,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,3
2048,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,3
2049,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` or `tf.data.Iterator`.,tf.compat.v1.data.get_output_shapes.yaml,3
2050,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` object containing a single element.,tf.data.experimental.get_single_element.yaml,3
2051,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,3
2052,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,3
2053,556,0.0029618253620008776,22,"frozenset({'data', 'dataset', 'tf'})",A `tf.data.Dataset` or `tf.data.Iterator`.,tf.compat.v1.data.get_output_classes.yaml,3
2054,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})","`list<int>`, batch size per bucket.",tf.data.experimental.bucket_by_sequence_length.yaml,3
2055,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})","bool, if `False`, will pad dimensions with unknown size to maximum length in batch.",tf.data.experimental.bucket_by_sequence_length.yaml,3
2056,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
2057,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
2058,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
2059,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
2060,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})",N x M `SparseTensor` of int64 ids where N is typically batch size and M is arbitrary.,tf.nn.embedding_lookup_sparse.yaml,3
2061,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})",optional static batch size (integer).,tf.keras.Input.yaml,3
2062,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,3
2063,806,0.0029618253620008776,10,"frozenset({'size', 'SOME_DTYPE', 'batch'})",N x M `SparseTensor` of int64 ids where N is typically batch size and M is arbitrary.,tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
2064,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_std.yaml,2
2065,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_max.yaml,2
2066,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_min.yaml,2
2067,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_sum.yaml,2
2068,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_all.yaml,2
2069,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_mean.yaml,2
2070,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_any.yaml,2
2071,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_sum.yaml,2
2072,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
2073,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_prod.yaml,2
2074,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum.yaml,2
2075,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.count_nonzero.yaml,2
2076,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_any.yaml,2
2077,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_logsumexp.yaml,2
2078,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max.yaml,2
2079,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_max.yaml,2
2080,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
2081,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_euclidean_norm.yaml,2
2082,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.count_nonzero.yaml,2
2083,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_mean.yaml,2
2084,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.reduce_all.yaml,2
2085,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_max.yaml,2
2086,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_variance.yaml,2
2087,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_min.yaml,2
2088,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.compat.v1.reduce_logsumexp.yaml,2
2089,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_sum.yaml,2
2090,617,0.0029618253620008776,27,"frozenset({'dimensions', 'reduce'})",The dimensions to reduce.,tf.math.reduce_prod.yaml,2
2091,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_std.yaml,4
2092,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_max.yaml,4
2093,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_min.yaml,4
2094,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_sum.yaml,4
2095,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_all.yaml,4
2096,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_mean.yaml,4
2097,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_any.yaml,4
2098,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.sparse.reduce_sum.yaml,4
2099,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.sparse_reduce_sum_sparse.yaml,4
2100,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_prod.yaml,4
2101,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.sparse_reduce_sum.yaml,4
2102,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.count_nonzero.yaml,4
2103,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_any.yaml,4
2104,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_logsumexp.yaml,4
2105,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.sparse_reduce_max.yaml,4
2106,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.sparse.reduce_max.yaml,4
2107,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.sparse_reduce_max_sparse.yaml,4
2108,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_euclidean_norm.yaml,4
2109,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.count_nonzero.yaml,4
2110,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_mean.yaml,4
2111,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.reduce_all.yaml,4
2112,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_max.yaml,4
2113,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_variance.yaml,4
2114,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_min.yaml,4
2115,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.compat.v1.reduce_logsumexp.yaml,4
2116,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_sum.yaml,4
2117,382,0.0029618253620008776,27,"frozenset({'reduces', 'dimensions', 'none', 'default'})","If `None` (the default), reduces all dimensions.",tf.math.reduce_prod.yaml,4
2118,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})",Whether to validate the order and range of sparse indices in `a`.,tf.sets.size.yaml,3
2119,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,3
2120,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,3
2121,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})",Whether to validate the order and range of sparse indices in `a` and `b`.,tf.sets.union.yaml,3
2122,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,3
2123,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,3
2124,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})",Whether to validate the order and range of sparse indices in `a` and `b`.,tf.sets.intersection.yaml,3
2125,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,3
2126,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,3
2127,380,0.0029618253620008776,10,"frozenset({'ssparse', 'indices', 'order'})",Whether to validate the order and range of sparse indices in `a` and `b`.,tf.sets.difference.yaml,3
2128,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_rank_in.yaml,4
2129,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_near.yaml,4
2130,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out when condition is false.,tf.debugging.Assert.yaml,4
2131,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.debugging.assert_shapes.yaml,4
2132,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.debugging.assert_shapes.yaml,4
2133,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_greater_equal.yaml,4
2134,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_greater.yaml,4
2135,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_less.yaml,4
2136,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_positive.yaml,4
2137,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_non_positive.yaml,4
2138,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_rank.yaml,4
2139,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_none_equal.yaml,4
2140,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_non_negative.yaml,4
2141,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_negative.yaml,4
2142,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_equal.yaml,4
2143,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_rank_at_least.yaml,4
2144,383,0.0029618253620008776,17,"frozenset({'false', 'condition', 'tensor', 'print'})",The tensors to print out if the condition is False.,tf.compat.v1.assert_less_equal.yaml,4
2145,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.inverse_time_decay.yaml,2
2146,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2147,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})", See the decay computation above.,tf.compat.v1.train.polynomial_decay.yaml,2
2148,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.polynomial_decay.yaml,2
2149,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.natural_exp_decay.yaml,2
2150,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.cosine_decay.yaml,2
2151,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2152,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2153,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})", See the decay computation above.,tf.compat.v1.train.exponential_decay.yaml,2
2154,384,0.0029618253620008776,10,"frozenset({'computation', 'decay'})",Global step to use for the decay computation.,tf.compat.v1.train.exponential_decay.yaml,2
2155,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,3
2156,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of at least 2 `Tensor` objects with the same type.,tf.quantization.quantized_concat.yaml,3
2157,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,3
2158,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,3
2159,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,3
2160,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,3
2161,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,3
2162,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,3
2163,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,3
2164,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,3
2165,386,0.0029618253620008776,11,"frozenset({'least', 'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` object with the same type.,tf.shape_n.yaml,3
2166,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, name of the flag",tf.compat.v1.flags.mark_flag_as_required.yaml,3
2167,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","A string, the name of the module that defines this flag.",tf.compat.v1.flags.DEFINE_alias.yaml,3
2168,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_alias.yaml,3
2169,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the original flag name.",tf.compat.v1.flags.DEFINE_alias.yaml,3
2170,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_bool.yaml,3
2171,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_bool.yaml,3
2172,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
2173,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum.yaml,3
2174,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_enum.yaml,3
2175,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_spaceseplist.yaml,3
2176,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi.yaml,3
2177,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi.yaml,3
2178,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of an already declared flag.",tf.compat.v1.flags.declare_key_flag.yaml,3
2179,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
2180,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
2181,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, name of the flag to be checked.",tf.compat.v1.flags.validator.yaml,3
2182,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_float.yaml,3
2183,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_integer.yaml,3
2184,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
2185,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
2186,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_multi_string.yaml,3
2187,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_list.yaml,3
2188,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE.yaml,3
2189,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE.yaml,3
2190,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_flag.yaml,3
2191,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,3
2192,709,0.0029618253620008776,27,"frozenset({'name', 'SOME_DTYPE', 'flag'})","str, the flag name.",tf.compat.v1.flags.DEFINE_enum_class.yaml,3
2193,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",The minimum scalar value possibly produced for the input.,tf.quantization.dequantize.yaml,2
2194,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",The minimum value to clip by.,tf.clip_by_value.yaml,2
2195,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})","If range_given=True, the minimum input value, that needs to be represented in the quantized representation.",tf.quantization.quantize_and_dequantize.yaml,2
2196,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})","If true, then the absolute value of the quantized minimum value is the same as the quantized maximum value, instead of 1 greater.",tf.quantization.quantize_and_dequantize.yaml,2
2197,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})","i.e. for 8 bit quantization, the minimum value is -127 instead of -128.",tf.quantization.quantize_and_dequantize.yaml,2
2198,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
2199,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",Minimum learning rate value as a fraction of learning_rate.,tf.compat.v1.train.cosine_decay.yaml,2
2200,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",Minimum learning rate value as a fraction of the learning_rate.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2201,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",The minimum value of the quantization range.,tf.quantization.quantize.yaml,2
2202,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
2203,370,0.0028521281263712154,11,"frozenset({'value', 'minimum'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
2204,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
2205,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,3
2206,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2207,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2208,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
2209,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,3
2210,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,3
2211,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,3
2212,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,3
2213,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,3
2214,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","A string `Tensor` of rank `N`, the strings to split.",tf.compat.v1.strings.split.yaml,3
2215,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,3
2216,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,3
2217,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,3
2218,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
2219,799,0.0028521281263712154,16,"frozenset({'rank', 'tensor', 'SOME_DTYPE'})","A string `Tensor` of rank `N`, the strings to split.",tf.strings.split.yaml,3
2220,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",A object that can be converted to `str`.,tf.compat.as_str_any.yaml,2
2221,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split_with_offsets.yaml,2
2222,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode_with_offsets.yaml,2
2223,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",class vector to be converted into a matrix (integers from 0 to num_classes).,tf.keras.utils.to_categorical.yaml,2
2224,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})","For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",tf.batch_to_space.yaml,2
2225,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})","A Policy, or a string that will be converted to a Policy..",tf.keras.mixed_precision.experimental.set_policy.yaml,2
2226,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
2227,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split.yaml,2
2228,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
2229,374,0.0028521281263712154,10,"frozenset({'converted', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode.yaml,2
2230,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","2D numpy array, single image.",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
2231,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.compat.v1.while_loop.yaml,2
2232,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",Input Numpy array.,tf.keras.preprocessing.image.array_to_img.yaml,2
2233,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",Numpy array.,tf.keras.preprocessing.image.save_img.yaml,2
2234,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",Numpy array or TensorFlow tensor.,tf.keras.backend.cast_to_floatx.yaml,2
2235,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","a list of tuples `(tensor, value)`.`value` should be a Numpy array.",tf.keras.backend.batch_set_value.yaml,2
2236,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",Numpy array to normalize.,tf.keras.utils.normalize.yaml,2
2237,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","Value to set the tensor to, as a Numpy array (of the same shape).",tf.keras.backend.set_value.yaml,2
2238,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","If True, the returned numpy array is allowed to have partially evaluated values.",tf.get_static_value.yaml,2
2239,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.while_loop.yaml,2
2240,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",numpy array object or dict of numpy array objects.,tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
2241,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})",numpy array object or dict of numpy array object.,tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
2242,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","Numpy array, initial value of the tensor.",tf.keras.backend.variable.yaml,2
2243,371,0.0028521281263712154,14,"frozenset({'array', 'numpy'})","For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",tf.batch_to_space.yaml,2
2244,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
2245,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.data.experimental.make_csv_dataset.yaml,2
2246,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})",(Optional.) The required `DType` of the returned `Tensor` or`IndexedSlices`.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
2247,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2248,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2249,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})",Valid values: None: Switch to a system default.'warn': Copies the tensors which are not on the right device and logs a warning.'explicit': Raises an error if the placement is not as required.'silent': Silently copies the tensors.,tf.config.experimental.set_device_policy.yaml,2
2250,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
2251,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
2252,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
2253,372,0.0028521281263712154,10,"frozenset({'required', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
2254,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The possible number of labels the classification task can have.,tf.compat.v1.confusion_matrix.yaml,2
2255,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.random.fixed_unigram_candidate_sampler.yaml,2
2256,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.nn.nce_loss.yaml,2
2257,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.compat.v1.nn.nce_loss.yaml,2
2258,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The possible number of labels the prediction task can have.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
2259,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The possible number of labels the classification task can          have.,tf.math.confusion_matrix.yaml,2
2260,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The possible number of labels the prediction task can have.,tf.compat.v1.metrics.mean_iou.yaml,2
2261,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2262,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})","Int, number of possible words to sample.",tf.keras.preprocessing.sequence.make_sampling_table.yaml,2
2263,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})", The number of possible classes.,tf.random.all_candidate_sampler.yaml,2
2264,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.random.uniform_candidate_sampler.yaml,2
2265,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.nn.sampled_softmax_loss.yaml,2
2266,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.random.log_uniform_candidate_sampler.yaml,2
2267,373,0.0028521281263712154,14,"frozenset({'possible', 'number'})",The number of possible classes.,tf.random.learned_unigram_candidate_sampler.yaml,2
2268,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
2269,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,3
2270,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
2271,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
2272,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
2273,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
2274,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
2275,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
2276,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
2277,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,3
2278,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,3
2279,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,3
2280,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
2281,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
2282,915,0.0028521281263712154,15,"frozenset({'tensor', 'dimension', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
2283,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function to use.,tf.keras.layers.Conv3D.yaml,2
2284,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv3D.yaml,2
2285,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function to use.,tf.keras.layers.Conv1D.yaml,2
2286,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv1D.yaml,2
2287,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function applied to each layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
2288,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function.,tf.keras.layers.SeparableConv1D.yaml,2
2289,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function to use.,tf.keras.layers.SeparableConv2D.yaml,2
2290,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.SeparableConv2D.yaml,2
2291,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Activation function to use.,tf.keras.layers.Conv2D.yaml,2
2292,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv2D.yaml,2
2293,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",Slope of the activation function at x < 0.,tf.nn.leaky_relu.yaml,2
2294,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
2295,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
2296,376,0.0028521281263712154,14,"frozenset({'activation', 'function'})",A `float` giving the threshold value of the activation function below which values will be damped or set to zero.,tf.keras.activations.relu.yaml,2
2297,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
2298,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d.yaml,3
2299,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d.yaml,3
2300,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.nn.conv3d.yaml,3
2301,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.nn.conv3d.yaml,3
2302,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2303,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2304,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
2305,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,3
2306,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.compat.v1.nn.quantized_conv2d.yaml,3
2307,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
2308,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.nn.depthwise_conv2d_backprop_input.yaml,3
2309,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,3
2310,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
2311,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",1-D tensor of length 4.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
2312,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",A 1-D Tensor of length 4.,tf.image.extract_patches.yaml,3
2313,831,0.0028521281263712154,17,"frozenset({'d', 'tensor', 'length'})",A 1-D Tensor of length 4.,tf.image.extract_patches.yaml,3
2314,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","The logits, a float tensor.",tf.compat.v1.losses.hinge_loss.yaml,2
2315,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
2316,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,2
2317,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
2318,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
2319,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
2320,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",Whether `output` is expected to be a logits tensor.,tf.keras.backend.binary_crossentropy.yaml,2
2321,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",Whether `y_pred` is expected to be a logits tensor.,tf.keras.losses.categorical_crossentropy.yaml,2
2322,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
2323,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
2324,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.categorical_crossentropy.yaml,2
2325,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
2326,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
2327,367,0.002742430890741553,14,"frozenset({'logits', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
2328,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.nn.conv2d_transpose.yaml,7
2329,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.nn.conv2d_transpose.yaml,7
2330,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv3d.yaml,7
2331,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv2d_transpose.yaml,7
2332,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.compat.v1.nn.conv2d_transpose.yaml,7
2333,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.nn.conv3d.yaml,7
2334,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.nn.conv_transpose.yaml,7
2335,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.nn.conv_transpose.yaml,7
2336,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv2d.yaml,7
2337,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.compat.v1.nn.conv2d.yaml,7
2338,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.nn.conv2d.yaml,7
2339,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.nn.conv2d.yaml,7
2340,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,7
2341,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
2342,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.nn.conv3d_transpose.yaml,7
2343,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see below for details.",tf.nn.conv3d_transpose.yaml,7
2344,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv3d_transpose.yaml,7
2345,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.quantized_conv2d.yaml,7
2346,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of`data_format`, see above for details.",tf.nn.depthwise_conv2d_backprop_filter.yaml,7
2347,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of`data_format`, see above for details.",tf.nn.depthwise_conv2d_backprop_input.yaml,7
2348,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of`data_format`, see above for details.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,7
2349,360,0.002742430890741553,22,"frozenset({'data_format', 'value', 'see', 'details', 'order', 'dimension', 'determined'})","The dimension order is determined by the value of `data_format`, see above for details.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,7
2350,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,3
2351,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,3
2352,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,3
2353,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
2354,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,3
2355,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
2356,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,3
2357,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,3
2358,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,3
2359,815,0.002742430890741553,10,"frozenset({'input', 'tensor', 'function'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,3
2360,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
2361,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2362,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","String, data type of returned Keras variable.",tf.keras.backend.ones.yaml,3
2363,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,3
2364,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
2365,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
2366,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
2367,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,3
2368,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","The data type expected by the input, as a string (`float32`, `float64`, `int32`...)",tf.keras.Input.yaml,3
2369,827,0.002742430890741553,10,"frozenset({'data', 'SOME_DTYPE', 'type'})","String, data type of returned Keras variable.",tf.keras.backend.eye.yaml,3
2370,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
2371,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2372,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",the Tensor holding the summary data to write or a callable that returns this Tensor.,tf.summary.write.yaml,3
2373,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
2374,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,3
2375,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,3
2376,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,3
2377,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
2378,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,3
2379,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
2380,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,3
2381,828,0.002742430890741553,12,"frozenset({'data', 'tensor', 'SOME_DTYPE'})",Dump data from only the tensors of which the specified dtypes.,tf.debugging.experimental.enable_dump_debug_info.yaml,3
2382,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",Should have real numeric type.,tf.math.reduce_max.yaml,2
2383,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})","Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.",tf.compat.v1.sparse_add.yaml,2
2384,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",A real numeric Tensor containing a single value.,tf.compat.v1.summary.scalar.yaml,2
2385,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,2
2386,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,2
2387,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",Should have real numeric type.,tf.math.reduce_min.yaml,2
2388,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",A real numeric `Tensor`.,tf.compat.v1.summary.histogram.yaml,2
2389,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})","Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.",tf.sparse.add.yaml,2
2390,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})","A real numeric scalar value, convertible to a `float32` Tensor.",tf.summary.scalar.yaml,2
2391,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})","A `[..., samples]` `float32`/`float64` `Tensor` of real-valued signals.",tf.signal.stft.yaml,2
2392,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})","Must be a non-quantized, real integer or floating point type.",tf.feature_column.numeric_column.yaml,2
2393,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",Should have real numeric type.,tf.compat.v1.reduce_max.yaml,2
2394,368,0.002742430890741553,13,"frozenset({'real', 'SOME_DTYPE'})",Should have real numeric type.,tf.compat.v1.reduce_min.yaml,2
2395,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,3
2396,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
2397,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
2398,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
2399,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
2400,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,3
2401,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
2402,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
2403,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,3
2404,856,0.002742430890741553,10,"frozenset({'SOME_DTYPE', 'number', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
2405,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,3
2406,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,3
2407,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,3
2408,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,3
2409,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,3
2410,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
2411,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (exactly 2).,tf.keras.layers.subtract2.yaml,3
2412,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,3
2413,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,3
2414,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,3
2415,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,3
2416,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,3
2417,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,3
2418,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,3
2419,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
2420,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,3
2421,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,3
2422,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,3
2423,929,0.002742430890741553,19,"frozenset({'input', 'tensor', 'SOME_STRUCTURE'})","If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",tf.strings.format.yaml,3
2424,903,0.002742430890741553,25,"frozenset({'value', 'values'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
2425,903,0.002742430890741553,25,"frozenset({'value', 'values'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
2426,903,0.002742430890741553,25,"frozenset({'value', 'values'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
2427,903,0.002742430890741553,25,"frozenset({'value', 'values'})","It is recommended to keep this as its default value of `""dynamic""`, which will adjust the scaling automatically to prevent `Inf` or `NaN` values.",tf.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
2428,903,0.002742430890741553,25,"frozenset({'value', 'values'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim_multiscale.yaml,2
2429,903,0.002742430890741553,25,"frozenset({'value', 'values'})","If the value is a non-string iterable, it will be iterated over to create a shallow copy of the values.",tf.compat.v1.flags.DEFINE_multi.yaml,2
2430,903,0.002742430890741553,25,"frozenset({'value', 'values'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
2431,903,0.002742430890741553,25,"frozenset({'value', 'values'})","If set, values outside of range `[0, num_buckets)` will be replaced with this value.",tf.feature_column.categorical_column_with_identity.yaml,2
2432,903,0.002742430890741553,25,"frozenset({'value', 'values'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.convolution.yaml,2
2433,903,0.002742430890741553,25,"frozenset({'value', 'values'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
2434,903,0.002742430890741553,25,"frozenset({'value', 'values'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
2435,903,0.002742430890741553,25,"frozenset({'value', 'values'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
2436,903,0.002742430890741553,25,"frozenset({'value', 'values'})","If not `None`, embedding values are l2-normalized to this value.",tf.feature_column.embedding_column.yaml,2
2437,903,0.002742430890741553,25,"frozenset({'value', 'values'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim.yaml,2
2438,903,0.002742430890741553,25,"frozenset({'value', 'values'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.pool.yaml,2
2439,903,0.002742430890741553,25,"frozenset({'value', 'values'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.pool.yaml,2
2440,903,0.002742430890741553,25,"frozenset({'value', 'values'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
2441,903,0.002742430890741553,25,"frozenset({'value', 'values'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.convolution.yaml,2
2442,903,0.002742430890741553,25,"frozenset({'value', 'values'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.convolution.yaml,2
2443,903,0.002742430890741553,25,"frozenset({'value', 'values'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
2444,903,0.002742430890741553,25,"frozenset({'value', 'values'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.nn.pool.yaml,2
2445,903,0.002742430890741553,25,"frozenset({'value', 'values'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.pool.yaml,2
2446,903,0.002742430890741553,25,"frozenset({'value', 'values'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
2447,903,0.002742430890741553,25,"frozenset({'value', 'values'})","It is recommended to keep this as its default value of `""dynamic""`, which will adjust the scaling automatically to prevent `Inf` or `NaN` values.",tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
2448,903,0.002742430890741553,25,"frozenset({'value', 'values'})",A `float` giving the threshold value of the activation function below which values will be damped or set to zero.,tf.keras.activations.relu.yaml,2
2449,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
2450,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.linalg.normalize.yaml,2
2451,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.gradients.yaml,2
2452,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.compat.v1.gradients.yaml,2
2453,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
2454,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
2455,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.norm.yaml,2
2456,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
2457,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.compat.v1.norm.yaml,2
2458,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
2459,348,0.0026327336551118913,11,"frozenset({'tensor', 'computed'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
2460,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.with_space_to_batch.yaml,2
2461,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d.yaml,2
2462,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.nn.conv3d.yaml,2
2463,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.conv_transpose.yaml,2
2464,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.avg_pool.yaml,2
2465,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
2466,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","With the default format ""NDHWC"", the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels].",tf.nn.max_pool3d.yaml,2
2467,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.convolution.yaml,2
2468,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.pool.yaml,2
2469,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.convolution.yaml,2
2470,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.pool.yaml,2
2471,358,0.0026327336551118913,12,"frozenset({'ndhwc', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.max_pool.yaml,2
2472,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.inverse_time_decay.yaml,2
2473,346,0.0026327336551118913,19,"frozenset({'global', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
2474,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2475,346,0.0026327336551118913,19,"frozenset({'global', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
2476,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",`Tensor` or the `name` of the operation that contains the global step.,tf.compat.v1.train.global_step.yaml,2
2477,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.polynomial_decay.yaml,2
2478,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",The graph to find the global step in.,tf.compat.v1.train.get_global_step.yaml,2
2479,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.natural_exp_decay.yaml,2
2480,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
2481,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.cosine_decay.yaml,2
2482,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
2483,346,0.0026327336551118913,19,"frozenset({'global', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_lower_hook.yaml,2
2484,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2485,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2486,346,0.0026327336551118913,19,"frozenset({'global', 'step'})","The frequency, in number of global steps, that the global step/sec is logged.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
2487,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",The graph in which to create the global step tensor.,tf.compat.v1.train.get_or_create_global_step.yaml,2
2488,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",Global step to use for the decay computation.,tf.compat.v1.train.exponential_decay.yaml,2
2489,346,0.0026327336551118913,19,"frozenset({'global', 'step'})",The graph in which to create the global step tensor.,tf.compat.v1.train.create_global_step.yaml,2
2490,346,0.0026327336551118913,19,"frozenset({'global', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_higher_hook.yaml,2
2491,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
2492,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
2493,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.data.experimental.make_csv_dataset.yaml,2
2494,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A optional string corresponding to the label column.,tf.data.experimental.make_csv_dataset.yaml,2
2495,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
2496,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string specifying how to reduce if a categorical column is multivalent.,tf.compat.v1.feature_column.linear_model.yaml,2
2497,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string specifying how to reduce if a categorical column is multivalent.,tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,2
2498,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
2499,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
2500,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2501,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2502,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A optional string corresponding to the label column.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2503,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2504,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
2505,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.shared_embeddings.yaml,2
2506,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
2507,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","str, name to give the target column `y`.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
2508,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
2509,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
2510,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.embedding_column.yaml,2
2511,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
2512,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
2513,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
2514,591,0.0026327336551118913,24,"frozenset({'column', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
2515,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2516,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","Tensor of shape [batch, max value in seq_length]",tf.nn.collapse_repeated.yaml,3
2517,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to.",tf.compat.v1.assign.yaml,3
2518,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,3
2519,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,3
2520,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
2521,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","Value to set the tensor to, as a Numpy array (of the same shape).",tf.keras.backend.set_value.yaml,3
2522,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,3
2523,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,3
2524,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,3
2525,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,3
2526,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,3
2527,921,0.0026327336551118913,13,"frozenset({'value', 'tensor', 'shape'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
2528,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
2529,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,3
2530,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,3
2531,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
2532,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.debugging.assert_shapes.yaml,3
2533,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,3
2534,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.compat.v1.debugging.assert_shapes.yaml,3
2535,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
2536,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
2537,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
2538,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
2539,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,3
2540,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,3
2541,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,3
2542,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
2543,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
2544,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,3
2545,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
2546,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
2547,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,3
2548,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,3
2549,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,3
2550,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,3
2551,934,0.0026327336551118913,24,"frozenset({'tensor', 'shape', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
2552,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
2553,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,3
2554,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
2555,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.idct.yaml,3
2556,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A real numeric Tensor containing a single value.,tf.compat.v1.summary.scalar.yaml,3
2557,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
2558,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,3
2559,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,3
2560,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
2561,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,3
2562,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,3
2563,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
2564,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.dct.yaml,3
2565,670,0.0026327336551118913,14,"frozenset({'containing', 'tensor', 'SOME_DTYPE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,3
2566,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.inverse_time_decay.yaml,2
2567,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2568,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})", The minimal end learning rate.,tf.compat.v1.train.polynomial_decay.yaml,2
2569,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.polynomial_decay.yaml,2
2570,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.natural_exp_decay.yaml,2
2571,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
2572,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The learning rate.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
2573,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",Minimum learning rate value as a fraction of learning_rate.,tf.compat.v1.train.cosine_decay.yaml,2
2574,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.cosine_decay.yaml,2
2575,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
2576,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",Minimum learning rate value as a fraction of the learning_rate.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2577,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2578,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",Used to derive the initial learning rate of the i-th period:,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2579,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2580,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The learning rate.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
2581,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})",The initial learning rate.,tf.compat.v1.train.exponential_decay.yaml,2
2582,341,0.002523036419482229,17,"frozenset({'learning', 'rate'})", If `True` decay the learning rate at discrete intervals,tf.compat.v1.train.exponential_decay.yaml,2
2583,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_std.yaml,5
2584,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_max.yaml,5
2585,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_min.yaml,5
2586,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_sum.yaml,5
2587,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_all.yaml,5
2588,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_join.yaml,5
2589,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_mean.yaml,5
2590,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_any.yaml,5
2591,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_prod.yaml,5
2592,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.count_nonzero.yaml,5
2593,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_any.yaml,5
2594,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_logsumexp.yaml,5
2595,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_euclidean_norm.yaml,5
2596,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.count_nonzero.yaml,5
2597,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_mean.yaml,5
2598,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.reduce_all.yaml,5
2599,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_max.yaml,5
2600,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_variance.yaml,5
2601,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_min.yaml,5
2602,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.compat.v1.reduce_logsumexp.yaml,5
2603,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_sum.yaml,5
2604,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.math.reduce_prod.yaml,5
2605,344,0.002523036419482229,23,"frozenset({'retains', 'dimensions', 'reduced', 'length', 'true'})","If true, retains reduced dimensions with length 1.",tf.strings.reduce_join.yaml,5
2606,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
2607,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Positive axis in the rage of `[0, rank(values))` refers to `axis`-th dimension.",tf.concat.yaml,2
2608,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",And negative axis refers to `axis + rank(values)`-th dimension.,tf.concat.yaml,2
2609,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
2610,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",tf.ragged.stack.yaml,2
2611,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
2612,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
2613,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
2614,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.precision_at_k.yaml,2
2615,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
2616,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
2617,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,2
2618,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
2619,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
2620,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,2
2621,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
2622,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.recall_at_k.yaml,2
2623,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",Last dimension must have size 3 and should contain RGB values.,tf.image.rgb_to_grayscale.yaml,2
2624,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
2625,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
2626,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,2
2627,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
2628,902,0.002523036419482229,23,"frozenset({'values', 'dimension'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
2629,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,4
2630,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,4
2631,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,4
2632,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,4
2633,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,4
2634,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,4
2635,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,4
2636,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,4
2637,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,4
2638,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,4
2639,783,0.002523036419482229,11,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,4
2640,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, path to a file",tf.io.gfile.stat.yaml,2
2641,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})",The expected hash string of the file after download.,tf.keras.utils.get_file.yaml,2
2642,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","boolean, whether the file should be decompressed",tf.keras.utils.get_file.yaml,2
2643,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
2644,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})",[Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.,tf.compat.v1.train.warm_start.yaml,2
2645,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
2646,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",tf.print.yaml,2
2647,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, pathname to which the file needs to be moved",tf.io.gfile.rename.yaml,2
2648,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","boolean, if false it's an error for `dst` to be occupied by an existing file.",tf.io.gfile.rename.yaml,2
2649,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, pathname for a file",tf.io.gfile.rename.yaml,2
2650,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, path to a file",tf.compat.v1.gfile.Stat.yaml,2
2651,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})",a string specifying the directory in which to write an event file.,tf.summary.create_file_writer.yaml,2
2652,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, name of the file to which to copy to",tf.io.gfile.copy.yaml,2
2653,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","boolean, if false it's an error for `dst` to be occupied by an existing file.",tf.io.gfile.copy.yaml,2
2654,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, name of the file whose contents need to be copied",tf.io.gfile.copy.yaml,2
2655,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, name of the file to which to copy to",tf.compat.v1.gfile.Copy.yaml,2
2656,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, name of the file who's contents need to be copied",tf.compat.v1.gfile.Copy.yaml,2
2657,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","boolean, if false it's an error for `newpath` to be occupied by an existing file.",tf.compat.v1.gfile.Copy.yaml,2
2658,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
2659,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, pathname to which the file needs to be moved",tf.compat.v1.gfile.Rename.yaml,2
2660,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","string, pathname for a file",tf.compat.v1.gfile.Rename.yaml,2
2661,679,0.002413339183852567,22,"frozenset({'file', 'SOME_DTYPE'})","boolean, if false it's an error for `newname` to be occupied by an existing file.",tf.compat.v1.gfile.Rename.yaml,2
2662,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","If false, treats double quotation marks as regular characters inside of the string fields.",tf.data.experimental.make_csv_dataset.yaml,2
2663,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.multi_flags_validator.yaml,2
2664,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","If false, treats double quotation marks as regular characters inside of the string fields.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2665,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
2666,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","boolean, if false it's an error for `dst` to be occupied by an existing file.",tf.io.gfile.rename.yaml,2
2667,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","bool, if `False`, will pad dimensions with unknown size to maximum length in batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
2668,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.validator.yaml,2
2669,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","if False, labels will be     integers (eg.",tf.keras.preprocessing.sequence.skipgrams.yaml,2
2670,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})",A `bool` (default: False).,tf.math.cumprod.yaml,2
2671,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","If false, treats double quotation marks as regular characters inside of the string fields (ignoring RFC 4180, Section 2, Bullet 5).",tf.compat.v1.decode_csv.yaml,2
2672,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","can be True, False, a bool Tensor, or a callable providing such.",tf.summary.record_if.yaml,2
2673,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})",The callable to be performed if pred is false.,tf.cond.yaml,2
2674,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","boolean, if false it's an error for `dst` to be occupied by an existing file.",tf.io.gfile.copy.yaml,2
2675,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","bool, Traverse pre order if True, post order if False.",tf.io.gfile.walk.yaml,2
2676,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","boolean, if false it's an error for `newpath` to be occupied by an existing file.",tf.compat.v1.gfile.Copy.yaml,2
2677,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})",The callable to be performed if pred is false.,tf.compat.v1.cond.yaml,2
2678,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","bool, Traverse in order if True, post order if False.",tf.compat.v1.gfile.Walk.yaml,2
2679,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
2680,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","If false, treats double quotation marks as regular characters inside of the string fields (ignoring RFC 4180, Section 2, Bullet 5).",tf.io.decode_csv.yaml,2
2681,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})",A `bool` (default: False).,tf.math.cumsum.yaml,2
2682,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
2683,802,0.002413339183852567,22,"frozenset({'false', 'SOME_DTYPE'})","boolean, if false it's an error for `newname` to be occupied by an existing file.",tf.compat.v1.gfile.Rename.yaml,2
2684,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})",A bool vector of length `N` with `M` true values.,tf.sparse.retain.yaml,2
2685,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Boolean, if `True` the weights of this layer will be marked as trainable (and listed in `layer.trainable_weights`).",tf.keras.layers.SeparableConv1D.yaml,2
2686,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","`bool`, if `True` replace all non-overlapping matches, else replace only the first match.",tf.strings.regex_replace.yaml,2
2687,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Boolean, if `True` the variables will be marked as trainable.",tf.keras.layers.BatchNormalization.yaml,2
2688,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","(Boolean.) If True, the function should be considered stateful.",tf.compat.v1.py_func.yaml,2
2689,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","If `True`, skip the empty strings from the result.",tf.compat.v1.string_split.yaml,2
2690,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Boolean, if `True` the variables will be marked as trainable.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
2691,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
2692,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_local_variable.yaml,2
2693,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","can be True, False, a bool Tensor, or a callable providing such.",tf.summary.record_if.yaml,2
2694,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})",The callable to be performed if pred is true.,tf.cond.yaml,2
2695,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_variable.yaml,2
2696,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","Boolean, if True shuffles the queue.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
2697,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","bool, Traverse pre order if True, post order if False.",tf.io.gfile.walk.yaml,2
2698,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","If `True`, will create a scalar variable to scale the attention scores.",tf.keras.layers.Attention.yaml,2
2699,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","if `True` (default) types of sequences are checked as well, including the keys of dictionaries.",tf.nest.assert_same_structure.yaml,2
2700,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})",The callable to be performed if pred is true.,tf.compat.v1.cond.yaml,2
2701,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","stateful (bool): If True, the function should be considered stateful.",tf.numpy_function.yaml,2
2702,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","bool, Traverse in order if True, post order if False.",tf.compat.v1.gfile.Walk.yaml,2
2703,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","output - bool, True if validator constraint is satisfied.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
2704,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
2705,883,0.002413339183852567,22,"frozenset({'SOME_DTYPE', 'true'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
2706,884,0.002413339183852567,22,"frozenset({'true', 'default'})",`True` by default.,tf.linalg.tridiagonal_solve.yaml,2
2707,884,0.002413339183852567,22,"frozenset({'true', 'default'})","(optional) If True (default), logits is shaped [time, batch, logits].",tf.nn.ctc_loss.yaml,2
2708,884,0.002413339183852567,22,"frozenset({'true', 'default'})", Default: True.,tf.nn.ctc_greedy_decoder.yaml,2
2709,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If true, returns a `SparseTensor` instead of a dense`Tensor` (the default).",tf.sparse.reduce_sum.yaml,2
2710,884,0.002413339183852567,22,"frozenset({'true', 'default'})",The default is True.,tf.summary.trace_on.yaml,2
2711,884,0.002413339183852567,22,"frozenset({'true', 'default'})", Default: True.,tf.compat.v1.nn.ctc_loss.yaml,2
2712,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
2713,884,0.002413339183852567,22,"frozenset({'true', 'default'})",Using `time_major = True` (default) is a bit more efficient because it avoids transposes at the beginning of the ctc_loss calculation.,tf.compat.v1.nn.ctc_loss.yaml,2
2714,884,0.002413339183852567,22,"frozenset({'true', 'default'})",Default is True.,tf.feature_column.shared_embeddings.yaml,2
2715,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If `True`, default-valued attributes will be removed from the NodeDefs.",tf.compat.v1.train.export_meta_graph.yaml,2
2716,884,0.002413339183852567,22,"frozenset({'true', 'default'})", Default is True.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2717,884,0.002413339183852567,22,"frozenset({'true', 'default'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
2718,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_local_variable.yaml,2
2719,884,0.002413339183852567,22,"frozenset({'true', 'default'})",Default is True.,tf.feature_column.embedding_column.yaml,2
2720,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_variable.yaml,2
2721,884,0.002413339183852567,22,"frozenset({'true', 'default'})", Default is True.,tf.nn.sampled_softmax_loss.yaml,2
2722,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If true, returns a `SparseTensor` instead of a dense`Tensor` (the default).",tf.sparse.reduce_max.yaml,2
2723,884,0.002413339183852567,22,"frozenset({'true', 'default'})","if `True` (default) types of sequences are checked as well, including the keys of dictionaries.",tf.nest.assert_same_structure.yaml,2
2724,884,0.002413339183852567,22,"frozenset({'true', 'default'})","If True and a cluster resolver is passed, will automatically enter the master task device scope, which indicates the master becomes the default device to run ops.",tf.config.experimental_connect_to_cluster.yaml,2
2725,884,0.002413339183852567,22,"frozenset({'true', 'default'})",Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,tf.config.experimental.set_synchronous_execution.yaml,2
2726,884,0.002413339183852567,22,"frozenset({'true', 'default'})",Default is True.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
2727,884,0.002413339183852567,22,"frozenset({'true', 'default'})", Default: True.,tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
2728,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",Input `Tensor` of 4 dimensions.,tf.compat.v1.nn.fused_batch_norm.yaml,2
2729,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",Monotonically increasing sequence of `num_spatial_dims`integers (which are >= 1) specifying the spatial dimensions of `input`and output.,tf.nn.with_space_to_batch.yaml,2
2730,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})","Must be in range [-rank, rank), where rank is the number of dimensions in each input `SparseTensor`.",tf.compat.v1.sparse_concat.yaml,2
2731,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
2732,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})", The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
2733,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
2734,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
2735,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d_transpose.yaml,2
2736,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
2737,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
2738,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
2739,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
2740,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",filter's input_depth dimension must match input's depth dimensions.,tf.compat.v1.nn.quantized_conv2d.yaml,2
2741,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})","Given an input of D dimensions, `axis` must be in range`[-(D+1), D]` (inclusive).",tf.expand_dims.yaml,2
2742,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
2743,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",Length must be the same as the number of dimensions in `input`,tf.tile.yaml,2
2744,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2745,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d.yaml,2
2746,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
2747,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
2748,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
2749,891,0.002413339183852567,22,"frozenset({'input', 'dimensions'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
2750,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.conv3d.yaml,4
2751,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.max_pool_with_argmax.yaml,4
2752,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.conv3d.yaml,4
2753,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.max_pool_with_argmax.yaml,4
2754,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,4
2755,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,4
2756,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
2757,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.quantized_avg_pool.yaml,4
2758,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
2759,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.erosion2d.yaml,4
2760,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.quantized_max_pool.yaml,4
2761,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.dilation2d.yaml,4
2762,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.extract_image_patches.yaml,4
2763,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.quantized_conv2d.yaml,4
2764,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.We specify the size-related attributes as:,tf.extract_volume_patches.yaml,4
2765,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.depthwise_conv2d_backprop_filter.yaml,4
2766,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.nn.depthwise_conv2d_backprop_input.yaml,4
2767,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
2768,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
2769,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.dilation2d.yaml,4
2770,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.compat.v1.nn.erosion2d.yaml,4
2771,544,0.002413339183852567,22,"frozenset({'use', 'padding', 'algorithm', 'type'})",The type of padding algorithm to use.,tf.image.extract_patches.yaml,4
2772,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","str, text to wrap.",tf.compat.v1.flags.text_wrap.yaml,2
2773,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})",Input text (string).,tf.keras.preprocessing.text.hashing_trick.yaml,2
2774,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.multi_flags_validator.yaml,2
2775,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})",Input text (string).,tf.keras.preprocessing.text.text_to_word_sequence.yaml,2
2776,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
2777,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})",A string tensor of the text to be processed.,tf.strings.regex_full_match.yaml,2
2778,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.validator.yaml,2
2779,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,2
2780,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})",Text encoding of the input strings.,tf.strings.unicode_transcode.yaml,2
2781,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
2782,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})","str, error text to be shown to the user if checker returns False.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
2783,329,0.002413339183852567,12,"frozenset({'text', 'SOME_DTYPE'})",Input text (string).,tf.keras.preprocessing.text.one_hot.yaml,2
2784,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.nn.conv2d_transpose.yaml,5
2785,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 0.,tf.nn.conv2d_transpose.yaml,5
2786,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.compat.v1.nn.conv2d_transpose.yaml,5
2787,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 0.,tf.compat.v1.nn.conv2d_transpose.yaml,5
2788,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.nn.conv_transpose.yaml,5
2789,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 0.,tf.nn.conv_transpose.yaml,5
2790,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.compat.v1.nn.conv2d.yaml,5
2791,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.compat.v1.nn.conv2d.yaml,5
2792,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.nn.conv2d.yaml,5
2793,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.nn.conv2d.yaml,5
2794,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.nn.conv3d_transpose.yaml,5
2795,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 0.,tf.nn.conv3d_transpose.yaml,5
2796,326,0.002413339183852567,13,"frozenset({'default', 'n', 'dimensions', 'c', 'set'})",By default the `N` and `C` dimensions are set to 1.,tf.compat.v1.nn.conv3d_transpose.yaml,5
2797,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d.yaml,7
2798,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d.yaml,7
2799,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.nn.conv3d.yaml,7
2800,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.nn.conv3d.yaml,7
2801,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,7
2802,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,7
2803,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
2804,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
2805,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels].",tf.nn.max_pool3d.yaml,7
2806,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is: [batch, in_channels, in_depth, in_height, in_width].",tf.nn.max_pool3d.yaml,7
2807,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,7
2808,324,0.002413339183852567,12,"frozenset({'in_width', 'in_channels', 'order', 'batch', 'data', 'format', 'in_height'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,7
2809,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,3
2810,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,3
2811,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,3
2812,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.multi_flags_validator.yaml,3
2813,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
2814,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,3
2815,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,3
2816,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,3
2817,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,3
2818,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,3
2819,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,3
2820,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.encode_proto.yaml,3
2821,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.register_multi_flags_validator.yaml,3
2822,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,3
2823,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.decode_proto.yaml,3
2824,525,0.002413339183852567,16,"frozenset({'SOME_DTYPE', 'names', 'SOME_STRUCTURE'})","dict, a mapping where the keys are flag names (strings).",tf.compat.v1.flags.flag_dict_to_args.yaml,3
2825,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
2826,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
2827,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
2828,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.nn.nce_loss.yaml,2
2829,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
2830,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2831,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","A list of categorical columns returned from`categorical_column_with_identity`, `weighted_categorical_column`,`categorical_column_with_vocabulary_file`,`categorical_column_with_vocabulary_list`,`sequence_categorical_column_with_identity`,`sequence_categorical_column_with_vocabulary_file`,`sequence_categorical_column_with_vocabulary_list`",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
2832,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
2833,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
2834,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.compat.v1.nn.nce_loss.yaml,2
2835,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
2836,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","If True, add a tuple around the gradients returned for an operations.",tf.gradients.yaml,2
2837,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","If True, add a tuple around the gradients returned for an operations.",tf.compat.v1.gradients.yaml,2
2838,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2839,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
2840,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
2841,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.nn.sampled_softmax_loss.yaml,2
2842,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
2843,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
2844,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
2845,757,0.0023036419482229046,21,"frozenset({'SOME_STRUCTURE', 'returned'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
2846,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,5
2847,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,5
2848,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,5
2849,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,5
2850,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,5
2851,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,5
2852,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,5
2853,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,5
2854,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,5
2855,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,5
2856,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,5
2857,927,0.0023036419482229046,12,"frozenset({'SOME_DTYPE', 'shape', 'type', 'd', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,5
2858,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","An option sequence of tensors or ops, which will be used to determine the current graph.",tf.compat.v1.keras.backend.get_session.yaml,2
2859,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,2
2860,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
2861,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
2862,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_batch_cost.yaml,2
2863,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_true`.",tf.keras.backend.ctc_batch_cost.yaml,2
2864,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
2865,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})",N-D `Tensor` containing a sorted sequence.,tf.searchsorted.yaml,2
2866,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,2
2867,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})",function `f(*x)` that returns a `Tensor` or sequence of `Tensor` outputs.,tf.recompute_grad.yaml,2
2868,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})",Used in combination with `tf.random.set_seed` to create a reproducible sequence of tensors across multiple calls.,tf.random.uniform.yaml,2
2869,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,2
2870,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldr.yaml,2
2871,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,2
2872,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
2873,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","tensor `(samples, )` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_decode.yaml,2
2874,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
2875,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})", `grad_ys` is a `Tensor` or sequence of`Tensor`s the same size as `y` holding the initial value gradients for each `Tensor` in `y`.,tf.custom_gradient.yaml,2
2876,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,2
2877,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldl.yaml,2
2878,615,0.0023036419482229046,21,"frozenset({'tensor', 'sequence'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,2
2879,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv1d.yaml,7
2880,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv2d_transpose.yaml,7
2881,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv1d.yaml,7
2882,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv3d.yaml,7
2883,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv2d_transpose.yaml,7
2884,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv3d.yaml,7
2885,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv_transpose.yaml,7
2886,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv2d.yaml,7
2887,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv2d.yaml,7
2888,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,7
2889,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
2890,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv3d_transpose.yaml,7
2891,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv3d_transpose.yaml,7
2892,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.quantized_conv2d.yaml,7
2893,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.conv1d_transpose.yaml,7
2894,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.depthwise_conv2d_backprop_filter.yaml,7
2895,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.nn.depthwise_conv2d_backprop_input.yaml,7
2896,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,7
2897,316,0.0023036419482229046,19,"frozenset({'k', 'dimension', 'element', 'cells', 'filter', 'skipped', 'set'})","If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,7
2898,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
2899,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",Expected data type of `inputs` (optional).,tf.math.accumulate_n.yaml,2
2900,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional) Only configure devices matching this device type.,tf.config.set_visible_devices.yaml,2
2901,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
2902,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
2903,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
2904,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
2905,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
2906,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional.) The data type for counter elements.,tf.compat.v1.data.experimental.Counter.yaml,2
2907,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
2908,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
2909,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
2910,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional) The data type for the initial state and expected output.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2911,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
2912,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional.) The data type for counter elements.,tf.data.experimental.Counter.yaml,2
2913,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional string) Only include devices matching this device type.,tf.config.list_logical_devices.yaml,2
2914,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional string) Only include devices matching this device type.,tf.config.get_visible_devices.yaml,2
2915,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
2916,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
2917,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional string) Only include devices matching this device type.,tf.config.list_physical_devices.yaml,2
2918,936,0.0023036419482229046,21,"frozenset({'optional', 'type'})",(optional) The output type(s) of `fn`.,tf.map_fn.yaml,2
2919,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",Randomization seed to use for shuffling.,tf.data.experimental.make_csv_dataset.yaml,2
2920,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.data.experimental.make_csv_dataset.yaml,2
2921,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",random seed for sample shuffling.,tf.keras.datasets.imdb.load_data.yaml,2
2922,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",Randomization seed to use for shuffling.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2923,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2924,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",random seed for sample shuffling.,tf.keras.datasets.reuters.load_data.yaml,2
2925,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",Randomization seed to use for shuffling.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
2926,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
2927,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",Randomization seed to use for shuffling.,tf.data.experimental.make_batched_features_dataset.yaml,2
2928,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.data.experimental.make_batched_features_dataset.yaml,2
2929,309,0.0023036419482229046,11,"frozenset({'seed', 'shuffling'})",Random seed for shuffling the data before computing the test split.,tf.keras.datasets.boston_housing.load_data.yaml,2
2930,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.feature_column.input_layer.yaml,2
2931,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing CSV records.,tf.data.experimental.make_csv_dataset.yaml,2
2932,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
2933,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.keras.layers.DenseFeatures.yaml,2
2934,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
2935,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.feature_column.linear_model.yaml,2
2936,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all the feature columns used by the model.,tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,2
2937,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
2938,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.feature_column.make_parse_example_spec.yaml,2
2939,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.estimator.regressor_parse_example_spec.yaml,2
2940,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing CSV records.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2941,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing`Example` records.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
2942,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",a list of vectors containing the example state data.,tf.compat.v1.train.sdca_optimizer.yaml,2
2943,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing`Example` records.,tf.data.experimental.make_batched_features_dataset.yaml,2
2944,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.estimator.classifier_parse_example_spec.yaml,2
2945,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.encode_proto.yaml,2
2946,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
2947,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
2948,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.feature_column.make_parse_example_spec.yaml,2
2949,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.decode_proto.yaml,2
2950,669,0.0023036419482229046,21,"frozenset({'containing', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
2951,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_std.yaml,4
2952,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_max.yaml,4
2953,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_min.yaml,4
2954,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_sum.yaml,4
2955,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_all.yaml,4
2956,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_mean.yaml,4
2957,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_any.yaml,4
2958,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_prod.yaml,4
2959,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.count_nonzero.yaml,4
2960,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_any.yaml,4
2961,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_logsumexp.yaml,4
2962,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_euclidean_norm.yaml,4
2963,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_mean.yaml,4
2964,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.reduce_all.yaml,4
2965,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_max.yaml,4
2966,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_variance.yaml,4
2967,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_min.yaml,4
2968,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.compat.v1.reduce_logsumexp.yaml,4
2969,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_sum.yaml,4
2970,312,0.0023036419482229046,20,"frozenset({'input_tensor', 'rank', 'must', 'range'})","Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",tf.math.reduce_prod.yaml,4
2971,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,6
2972,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,6
2973,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,6
2974,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,6
2975,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,6
2976,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,6
2977,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,6
2978,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,6
2979,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,6
2980,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,6
2981,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,6
2982,703,0.0023036419482229046,12,"frozenset({'height', 'SOME_DTYPE', 'shape', 'd', 'width', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,6
2983,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.sequence_numeric_column.yaml,2
2984,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If None, the default initializer will be used.",tf.keras.layers.SeparableConv1D.yaml,2
2985,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If None, no padding will be added; if a single string, then that string will be used for both left and right padding.",tf.strings.ngrams.yaml,2
2986,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
2987,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If embedding_config is None, no hardware embeddings can be used.",tf.compat.v1.tpu.initialize_system.yaml,2
2988,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If set to `None`, no windowing is used.",tf.signal.inverse_stft.yaml,2
2989,867,0.0023036419482229046,21,"frozenset({'used', 'none'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
2990,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
2991,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If None, the default configuration will be used.",tf.config.set_logical_device_configuration.yaml,2
2992,867,0.0023036419482229046,21,"frozenset({'used', 'none'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
2993,867,0.0023036419482229046,21,"frozenset({'used', 'none'})",The first value used (`elems[0]` in case of None),tf.keras.backend.foldl.yaml,2
2994,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If set to `None`, no windowing is used.",tf.signal.stft.yaml,2
2995,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.numeric_column.yaml,2
2996,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If both `save_checkpoint_steps` and`save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
2997,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If both`save_checkpoint_steps` and `save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
2998,867,0.0023036419482229046,21,"frozenset({'used', 'none'})"," If both `save_summaries_steps` and`save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
2999,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If both`save_summaries_steps` and `save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3000,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If None, checkpoint_dir is used instead.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3001,867,0.0023036419482229046,21,"frozenset({'used', 'none'})",The first value used (`elems[-1]` in case of None),tf.keras.backend.foldr.yaml,2
3002,867,0.0023036419482229046,21,"frozenset({'used', 'none'})",The thread default will be used if this parameter is None.,tf.summary.flush.yaml,2
3003,867,0.0023036419482229046,21,"frozenset({'used', 'none'})","If None, the class's name will be used.",tf.keras.utils.register_keras_serializable.yaml,2
3004,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv3D.yaml,3
3005,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,3
3006,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv3D.yaml,3
3007,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv1D.yaml,3
3008,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,3
3009,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv1D.yaml,3
3010,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.SeparableConv2D.yaml,3
3011,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,3
3012,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the depthwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,3
3013,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the pointwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,3
3014,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv2D.yaml,3
3015,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,3
3016,310,0.0023036419482229046,13,"frozenset({'function', 'applied', 'regularizer'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv2D.yaml,3
3017,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph.,tf.graph_util.import_graph_def.yaml,2
3018,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional, used to specify the number of outputs when it cannot be inferred from the shape of `size_splits`.",tf.split.yaml,2
3019,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
3020,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional scope used to filter the summary ops, using `re.match`",tf.compat.v1.summary.merge_all.yaml,2
3021,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
3022,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",Optional custom getter for variables used in `func_`.,tf.compat.v1.make_template.yaml,2
3023,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.scalar.yaml,2
3024,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.histogram.yaml,2
3025,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.image2.yaml,2
3026,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,2
3027,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
3028,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
3029,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",Specify the hash_key that will be used by the `FingerprintCat64`function to combine the crosses fingerprints on SparseCrossOp (optional).,tf.feature_column.crossed_column.yaml,2
3030,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
3031,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",(optional) perturbation used to compute numeric Jacobian.,tf.test.compute_gradient.yaml,2
3032,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",A function pointer that can be used to write intermediate steps of graph transformation (optional).,tf.compat.v1.lite.experimental.convert_op_hints_to_stubs.yaml,2
3033,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
3034,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
3035,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
3036,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
3037,866,0.0023036419482229046,21,"frozenset({'optional', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.audio2.yaml,2
3038,320,0.0023036419482229046,15,"frozenset({'known', 'must'})",Must have known shape.,tf.math.scalar_mul.yaml,2
3039,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", `rank(mask)` must be known statically.,tf.ragged.boolean_mask.yaml,2
3040,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
3041,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
3042,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", `N` must be statically known.,tf.strings.unicode_split_with_offsets.yaml,2
3043,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", `N` must be statically known.,tf.strings.unicode_decode_with_offsets.yaml,2
3044,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_local_variable.yaml,2
3045,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_local_variable.yaml,2
3046,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", Must have a statically known rank (`N`).,tf.strings.bytes_split.yaml,2
3047,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_variable.yaml,2
3048,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_variable.yaml,2
3049,320,0.0023036419482229046,15,"frozenset({'known', 'must'})",Must have known shape.,tf.compat.v1.scalar_mul.yaml,2
3050,320,0.0023036419482229046,15,"frozenset({'known', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
3051,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", `N` must be statically known.,tf.strings.unicode_split.yaml,2
3052,320,0.0023036419482229046,15,"frozenset({'known', 'must'})", `N` must be statically known.,tf.strings.unicode_decode.yaml,2
3053,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If true, then ensure that at least one ngram is generated for each input sequence.",tf.strings.ngrams.yaml,2
3054,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If `True`, clip the input before casting (if necessary).",tf.image.convert_image_dtype.yaml,2
3055,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If range_given=True, the maximum input value that needs to be represented in the quantized representation.",tf.quantization.quantize_and_dequantize.yaml,2
3056,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If range_given=True, the minimum input value, that needs to be represented in the quantized representation.",tf.quantization.quantize_and_dequantize.yaml,2
3057,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
3058,882,0.002193944712593243,20,"frozenset({'input', 'true'})","When True, `tf.function` may generate fewer, graphs that are less specialized on input shapes.",tf.function.yaml,2
3059,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
3060,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If true, assume an implicit bounding box covering the whole input.",tf.image.sample_distorted_bounding_box.yaml,2
3061,882,0.002193944712593243,20,"frozenset({'input', 'true'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode_with_offsets.yaml,2
3062,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If `True`, and the batch size does not evenly divide the input dataset size, the final smaller batch will be dropped.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
3063,882,0.002193944712593243,20,"frozenset({'input', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
3064,882,0.002193944712593243,20,"frozenset({'input', 'true'})",If true try to recover an image from truncated input.,tf.io.decode_jpeg.yaml,2
3065,882,0.002193944712593243,20,"frozenset({'input', 'true'})","If `True`, and the batch size does not evenly divide the input dataset size, the final smaller batch will be dropped.",tf.data.experimental.make_batched_features_dataset.yaml,2
3066,882,0.002193944712593243,20,"frozenset({'input', 'true'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.transpose.yaml,2
3067,882,0.002193944712593243,20,"frozenset({'input', 'true'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.compat.v1.transpose.yaml,2
3068,882,0.002193944712593243,20,"frozenset({'input', 'true'})",If true try to recover an image from truncated input.,tf.io.decode_and_crop_jpeg.yaml,2
3069,882,0.002193944712593243,20,"frozenset({'input', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
3070,882,0.002193944712593243,20,"frozenset({'input', 'true'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
3071,882,0.002193944712593243,20,"frozenset({'input', 'true'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.linalg.matrix_transpose(input)).,tf.linalg.matrix_transpose.yaml,2
3072,882,0.002193944712593243,20,"frozenset({'input', 'true'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode.yaml,2
3073,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,4
3074,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,4
3075,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3076,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3077,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3078,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3079,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3080,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3081,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3082,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3083,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})","scalar integer tensor, size of last dimension of returned tensor.",tf.sequence_mask.yaml,4
3084,609,0.002193944712593243,12,"frozenset({'last', 'size', 'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,4
3085,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","Must be in range [-rank, rank), where rank is the number of dimensions in each input `SparseTensor`.",tf.compat.v1.sparse_concat.yaml,4
3086,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_min.yaml,4
3087,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_max.yaml,4
3088,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmin.yaml,4
3089,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","Must be in the range`[-rank(input), rank(input))`.",tf.squeeze.yaml,4
3090,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmin.yaml,4
3091,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmax.yaml,4
3092,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmax.yaml,4
3093,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","Must be in the range `[-rank(input), rank(input))`.",tf.math.count_nonzero.yaml,4
3094,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","Must be in the range `[-rank(input) - 1, rank(input)]`.",tf.compat.v1.expand_dims.yaml,4
3095,752,0.002193944712593243,11,"frozenset({'input', 'rank', 'must', 'range'})","Must be in the range`[-rank(input), rank(input))`.",tf.compat.v1.squeeze.yaml,4
3096,865,0.002193944712593243,20,"frozenset({'value', 'used'})",A bool value to specify if the operation is used for          training or inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
3097,865,0.002193944712593243,20,"frozenset({'value', 'used'})",A single value compatible with `dtype` that is used for padding the sparse data into a dense `Tensor`.,tf.feature_column.sequence_numeric_column.yaml,2
3098,865,0.002193944712593243,20,"frozenset({'value', 'used'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.sequence_numeric_column.yaml,2
3099,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.apply_affine_transform.yaml,2
3100,865,0.002193944712593243,20,"frozenset({'value', 'used'})","For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.",tf.nn.fractional_avg_pool.yaml,2
3101,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
3102,865,0.002193944712593243,20,"frozenset({'value', 'used'})","If the argument is a boolean, the argument's value is used for each output.",tf.compat.v1.tpu.shard.yaml,2
3103,865,0.002193944712593243,20,"frozenset({'value', 'used'})","Value used for extrapolation, when applicable.",tf.image.crop_and_resize.yaml,2
3104,865,0.002193944712593243,20,"frozenset({'value', 'used'})","Value used for extrapolation, when applicable.",tf.compat.v1.image.crop_and_resize.yaml,2
3105,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_rotation.yaml,2
3106,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_zoom.yaml,2
3107,865,0.002193944712593243,20,"frozenset({'value', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
3108,865,0.002193944712593243,20,"frozenset({'value', 'used'})","Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",tf.nn.bias_add.yaml,2
3109,865,0.002193944712593243,20,"frozenset({'value', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
3110,865,0.002193944712593243,20,"frozenset({'value', 'used'})",The first value used (`elems[0]` in case of None),tf.keras.backend.foldl.yaml,2
3111,865,0.002193944712593243,20,"frozenset({'value', 'used'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.numeric_column.yaml,2
3112,865,0.002193944712593243,20,"frozenset({'value', 'used'})","For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.",tf.nn.fractional_max_pool.yaml,2
3113,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shear.yaml,2
3114,865,0.002193944712593243,20,"frozenset({'value', 'used'})",The first value used (`elems[-1]` in case of None),tf.keras.backend.foldr.yaml,2
3115,865,0.002193944712593243,20,"frozenset({'value', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shift.yaml,2
3116,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,4
3117,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,4
3118,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,4
3119,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,4
3120,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,4
3121,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,4
3122,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,4
3123,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,4
3124,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,4
3125,552,0.002193944712593243,10,"frozenset({'predictions', 'tensor', 'whose', 'shape'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,4
3126,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,3
3127,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",N-D tensor.,tf.compat.v1.boolean_mask.yaml,3
3128,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",N-D `Tensor` containing a sorted sequence.,tf.searchsorted.yaml,3
3129,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,3
3130,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
3131,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
3132,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
3133,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
3134,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,3
3135,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,3
3136,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,3
3137,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,3
3138,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
3139,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
3140,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,3
3141,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",N-D tensor.,tf.boolean_mask.yaml,3
3142,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
3143,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","An n-D Tensor with at least 3 dimensions, the last 3 of which are the dimensions of each image.",tf.image.per_image_standardization.yaml,3
3144,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
3145,790,0.002193944712593243,20,"frozenset({'d', 'tensor', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
3146,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to`bool`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3147,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.true_negatives.yaml,2
3148,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.true_negatives.yaml,2
3149,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3150,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3151,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to`bool`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3152,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.false_positives.yaml,2
3153,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.false_positives.yaml,2
3154,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3155,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.recall.yaml,2
3156,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.recall.yaml,2
3157,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to`bool`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3158,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.false_negatives.yaml,2
3159,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.false_negatives.yaml,2
3160,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3161,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to`bool`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3162,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.true_positives.yaml,2
3163,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.true_positives.yaml,2
3164,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.precision.yaml,2
3165,301,0.002193944712593243,20,"frozenset({'SOME_DTYPE', 'cast'})",Will be cast to `bool`.,tf.compat.v1.metrics.precision.yaml,2
3166,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",Whether GPU-CPU memory swap is enabled for this loop.,tf.compat.v1.while_loop.yaml,2
3167,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
3168,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
3169,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","For example ""CPU"" or ""GPU"".",tf.config.set_visible_devices.yaml,2
3170,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",Transparently swap the tensors produced in forward inference but needed for back prop from GPU to CPU.,tf.compat.v1.nn.raw_rnn.yaml,2
3171,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",(optional) True enables GPU-CPU memory swapping.,tf.foldr.yaml,2
3172,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",(optional) True enables GPU-CPU memory swapping.,tf.scan.yaml,2
3173,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",Whether GPU-CPU memory swap is enabled for this loop.,tf.while_loop.yaml,2
3174,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",Transparently swap the tensors produced in forward inference but needed for back prop from GPU to CPU.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3175,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
3176,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","(Optional.) Policy controlling how operations requiring inputs on a specific device (e.g., a GPU 0) handle inputs on a different device  (e.g. GPU 1 or CPU).",tf.compat.v1.enable_eager_execution.yaml,2
3177,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","For example ""CPU"" or ""GPU"".",tf.config.list_logical_devices.yaml,2
3178,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",(optional) True enables GPU-CPU memory swapping.,tf.foldl.yaml,2
3179,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","For example ""CPU"" or ""GPU"".",tf.config.get_visible_devices.yaml,2
3180,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})","For example ""CPU"" or ""GPU"".",tf.config.list_physical_devices.yaml,2
3181,303,0.002193944712593243,16,"frozenset({'gpu', 'cpu'})",(optional) True enables GPU-CPU memory swapping.,tf.map_fn.yaml,2
3182,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,3
3183,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,3
3184,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,3
3185,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,3
3186,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,3
3187,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,3
3188,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,3
3189,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,3
3190,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,3
3191,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,3
3192,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,3
3193,299,0.002193944712593243,12,"frozenset({'experimental', 'none', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,3
3194,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,5
3195,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,5
3196,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean.yaml,5
3197,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall_at_thresholds.yaml,5
3198,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_absolute_error.yaml,5
3199,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.root_mean_squared_error.yaml,5
3200,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.accuracy.yaml,5
3201,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,5
3202,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,5
3203,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision_at_thresholds.yaml,5
3204,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_iou.yaml,5
3205,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall.yaml,5
3206,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,5
3207,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_relative_error.yaml,5
3208,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_squared_error.yaml,5
3209,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,5
3210,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean_tensor.yaml,5
3211,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,5
3212,302,0.002193944712593243,19,"frozenset({'collections', 'added', 'optional', 'SOME_STRUCTURE', 'update_op'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision.yaml,5
3213,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.Conv3D.yaml,9
3214,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.MaxPool2D.yaml,9
3215,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, length, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, length)`.",tf.keras.layers.SeparableConv1D.yaml,9
3216,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalMaxPool3D.yaml,9
3217,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.MaxPool3D.yaml,9
3218,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalMaxPool2D.yaml,9
3219,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.SeparableConv2D.yaml,9
3220,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.Conv2D.yaml,9
3221,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.AveragePooling2D.yaml,9
3222,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalAveragePooling2D.yaml,9
3223,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.AveragePooling3D.yaml,9
3224,295,0.002193944712593243,12,"frozenset({'inputs', 'channels', 'ordering', 'corresponds', 'dimensions', 'channels_last', 'shape', 'batch', 'channels_first'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalAveragePooling3D.yaml,9
3225,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d.yaml,6
3226,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.nn.conv3d.yaml,6
3227,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.conv2d.yaml,6
3228,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.conv2d.yaml,6
3229,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,6
3230,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_input.yaml,6
3231,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NDHWC"", the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels].",tf.nn.max_pool3d.yaml,6
3232,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_filter.yaml,6
3233,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_input.yaml,6
3234,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,6
3235,292,0.002193944712593243,11,"frozenset({'default', 'order', 'stored', 'batch', 'data', 'format'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,6
3236,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
3237,291,0.002193944712593243,12,"frozenset({'update', 'ops'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
3238,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
3239,291,0.002193944712593243,12,"frozenset({'update', 'ops'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_k.yaml,2
3240,291,0.002193944712593243,12,"frozenset({'update', 'ops'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
3241,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
3242,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
3243,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",List of update ops.,tf.keras.backend.function.yaml,2
3244,291,0.002193944712593243,12,"frozenset({'update', 'ops'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_k.yaml,2
3245,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
3246,291,0.002193944712593243,12,"frozenset({'update', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3247,291,0.002193944712593243,12,"frozenset({'update', 'ops'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
3248,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,2
3249,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
3250,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
3251,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
3252,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
3253,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1-D `Tensor` with size matching the channel dimension of `value`.,tf.nn.bias_add.yaml,2
3254,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
3255,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
3256,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
3257,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
3258,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
3259,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
3260,305,0.002193944712593243,13,"frozenset({'matching', 'tensor'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
3261,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})",A `Tensor` of shape `[num_classes]`.,tf.nn.nce_loss.yaml,3
3262,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
3263,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,3
3264,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})",A `Tensor` of shape `[num_classes]`.,tf.compat.v1.nn.nce_loss.yaml,3
3265,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
3266,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})",A `Tensor` of shape `[num_classes]`.,tf.compat.v1.nn.sampled_softmax_loss.yaml,3
3267,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
3268,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,3
3269,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})",A `Tensor` of shape `[num_classes]`.,tf.nn.sampled_softmax_loss.yaml,3
3270,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
3271,535,0.002193944712593243,11,"frozenset({'num_classes', 'tensor', 'shape'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
3272,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
3273,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.nn.nce_loss.yaml,2
3274,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
3275,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3276,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
3277,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.compat.v1.nn.nce_loss.yaml,2
3278,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})",List of categorical columns created by a`categorical_column_with_*` function.,tf.feature_column.shared_embeddings.yaml,2
3279,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","A Python function, which accepts `ndarray` objects as arguments and returns a list of `ndarray` objects (or a single `ndarray`).",tf.compat.v1.py_func.yaml,2
3280,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3281,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})",dict mapping class names (or function names) of custom (non-Keras) objects to class/functions,tf.keras.layers.deserialize.yaml,2
3282,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
3283,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","The values of the dict are the results of calling a metric function, namely a `(metric_tensor, update_op)` tuple.",tf.estimator.add_metrics.yaml,2
3284,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})",a list arguments for the function,tf.test.compute_gradient.yaml,2
3285,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
3286,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function.",tf.nn.sampled_softmax_loss.yaml,2
3287,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
3288,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","`signatures` may also be a dictionary, in which case it maps from signature keys to either `tf.function` instances with input signatures or concrete functions.",tf.saved_model.save.yaml,2
3289,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`).",tf.numpy_function.yaml,2
3290,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})",List of categorical columns created by a`categorical_column_with_*` function.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
3291,811,0.002193944712593243,20,"frozenset({'function', 'SOME_STRUCTURE'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
3292,812,0.002193944712593243,20,"frozenset({'function', 'used'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.sequence_numeric_column.yaml,2
3293,812,0.002193944712593243,20,"frozenset({'function', 'used'})","Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",tf.feature_column.sequence_numeric_column.yaml,2
3294,812,0.002193944712593243,20,"frozenset({'function', 'used'})",Integer hash_key that will be used by the `FingerprintCat64`function.,tf.sparse.cross_hashed.yaml,2
3295,812,0.002193944712593243,20,"frozenset({'function', 'used'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
3296,812,0.002193944712593243,20,"frozenset({'function', 'used'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
3297,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
3298,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.shared_embeddings.yaml,2
3299,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3300,812,0.002193944712593243,20,"frozenset({'function', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
3301,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
3302,812,0.002193944712593243,20,"frozenset({'function', 'used'})",Specify the hash_key that will be used by the `FingerprintCat64`function to combine the crosses fingerprints on SparseCrossOp (optional).,tf.feature_column.crossed_column.yaml,2
3303,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.embedding_column.yaml,2
3304,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A function pointer that can be used to write intermediate steps of graph transformation (optional).,tf.compat.v1.lite.experimental.convert_op_hints_to_stubs.yaml,2
3305,812,0.002193944712593243,20,"frozenset({'function', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
3306,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
3307,812,0.002193944712593243,20,"frozenset({'function', 'used'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.numeric_column.yaml,2
3308,812,0.002193944712593243,20,"frozenset({'function', 'used'})","Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",tf.feature_column.numeric_column.yaml,2
3309,812,0.002193944712593243,20,"frozenset({'function', 'used'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
3310,812,0.002193944712593243,20,"frozenset({'function', 'used'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
3311,812,0.002193944712593243,20,"frozenset({'function', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
3312,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_alias.yaml,4
3313,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_bool.yaml,4
3314,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi_float.yaml,4
3315,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_enum.yaml,4
3316,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_spaceseplist.yaml,4
3317,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi.yaml,4
3318,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,4
3319,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_float.yaml,4
3320,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_integer.yaml,4
3321,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,4
3322,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,4
3323,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_multi_string.yaml,4
3324,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_list.yaml,4
3325,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE.yaml,4
3326,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_flag.yaml,4
3327,300,0.002193944712593243,16,"frozenset({'flagvalues', 'registered', 'instance', 'flag'})","FlagValues, the FlagValues instance with which the flag will be registered.",tf.compat.v1.flags.DEFINE_enum_class.yaml,4
3328,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,2
3329,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
3330,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})"," If the function returns True, then it means that no new checkpoints will be generated and the iterator will exit.",tf.train.checkpoints_iterator.yaml,2
3331,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
3332,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","If `func` is None, `tf.function` returns a decorator that can be invoked with a single argument - `func`.",tf.function.yaml,2
3333,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","A Python function, which accepts `ndarray` objects as arguments and returns a list of `ndarray` objects (or a single `ndarray`).",tf.compat.v1.py_func.yaml,2
3334,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3335,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",function `f(*x)` that returns a `Tensor` or sequence of `Tensor` outputs.,tf.recompute_grad.yaml,2
3336,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
3337,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",function `f(*x)` that returns a `Tensor` or nested structure of `Tensor`outputs.,tf.grad_pass_through.yaml,2
3338,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
3339,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
3340,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
3341,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","`callable`, function that takes no arguments and returns a`bool`.",tf.estimator.experimental.make_early_stopping_hook.yaml,2
3342,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","If the function returns `True`, stopping will be initiated by the chief.",tf.estimator.experimental.make_early_stopping_hook.yaml,2
3343,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,2
3344,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})",This must be a callable object that returns an object that supports the `iter()` protocol (e.g. a generator function).,tf.lite.RepresentativeDataset.yaml,2
3345,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`).",tf.numpy_function.yaml,2
3346,646,0.0020842474769635806,19,"frozenset({'function', 'returns'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
3347,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",JSON string encoding a tokenizer configuration.`,tf.keras.preprocessing.text.tokenizer_from_json.yaml,2
3348,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split_with_offsets.yaml,2
3349,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split_with_offsets.yaml,2
3350,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode_with_offsets.yaml,2
3351,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode_with_offsets.yaml,2
3352,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Text encoding of the input strings.,tf.strings.unicode_transcode.yaml,2
3353,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",YAML string encoding a model configuration.,tf.keras.models.model_from_yaml.yaml,2
3354,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",JSON string encoding a model configuration.,tf.keras.models.model_from_json.yaml,2
3355,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Optional constant `str` for the desired encoding.,tf.summary.audio.yaml,2
3356,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split.yaml,2
3357,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split.yaml,2
3358,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",A string indicating the charset for encoding unicode.,tf.compat.as_bytes.yaml,2
3359,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode.yaml,2
3360,279,0.0020842474769635806,14,"frozenset({'encoding', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode.yaml,2
3361,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",Default is   False.,tf.nn.nce_loss.yaml,2
3362,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default is False, meaning the scope is created when the template is called.",tf.compat.v1.make_template.yaml,2
3363,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",Default is False.,tf.compat.v1.nn.nce_loss.yaml,2
3364,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",The default is False.,tf.summary.trace_on.yaml,2
3365,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_solve.yaml,2
3366,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","If false (the default), compute only the leading `P` singular vectors.",tf.linalg.svd.yaml,2
3367,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",Default: False.,tf.compat.v1.nn.ctc_loss.yaml,2
3368,801,0.0020842474769635806,19,"frozenset({'false', 'default'})", Default: False.,tf.compat.v1.nn.ctc_loss.yaml,2
3369,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.pinv.yaml,2
3370,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_reconstruct.yaml,2
3371,801,0.0020842474769635806,19,"frozenset({'false', 'default'})"," If `False` (the default), then composite tensors are not expanded.",tf.nest.map_structure.yaml,2
3372,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",A `bool` (default: False).,tf.math.cumprod.yaml,2
3373,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",Default is false.,tf.strings.unicode_transcode.yaml,2
3374,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.matrix_rank.yaml,2
3375,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","If false (the default), compute only the leading `P` columns of `q`.",tf.linalg.qr.yaml,2
3376,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3377,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,tf.config.experimental.set_synchronous_execution.yaml,2
3378,801,0.0020842474769635806,19,"frozenset({'false', 'default'})",A `bool` (default: False).,tf.math.cumsum.yaml,2
3379,801,0.0020842474769635806,19,"frozenset({'false', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_matrix_inverse.yaml,2
3380,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
3381,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If not `None`, must be a dictionary that will be filled with a mapping from `_FeatureColumn` to list of `Variable`s.",tf.compat.v1.feature_column.input_layer.yaml,2
3382,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If not `None`, must be a dictionary that will be filled with a mapping from `_FeatureColumn` to associated list of `Variable`s.",tf.compat.v1.feature_column.linear_model.yaml,2
3383,874,0.0020842474769635806,19,"frozenset({'must', 'none'})",Must be `None`.,tf.signal.idct.yaml,2
3384,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
3385,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If not `None`, there must be one dimension per output.",tf.compat.v1.tpu.shard.yaml,2
3386,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,2
3387,874,0.0020842474769635806,19,"frozenset({'must', 'none'})",`len(repeats)`must equal `input.shape[axis]` if axis is not None.,tf.repeat.yaml,2
3388,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If true, exactly one of the flags must have a value other than None.",tf.compat.v1.flags.mark_flags_as_mutual_exclusive.yaml,2
3389,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,2
3390,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,2
3391,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,2
3392,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If non-None, must be the same shape as arr.",tf.compat.v1.bincount.yaml,2
3393,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,2
3394,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,2
3395,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,2
3396,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If non-None, must be the same shape as arr.",tf.math.bincount.yaml,2
3397,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,2
3398,874,0.0020842474769635806,19,"frozenset({'must', 'none'})","Size of the last dimension must be None, 1 or 3.",tf.image.adjust_jpeg_quality.yaml,2
3399,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
3400,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})", Half-width of the 1-D normalization window.,tf.nn.local_response_normalization.yaml,2
3401,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,2
3402,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
3403,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
3404,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
3405,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
3406,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,2
3407,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hann_window.yaml,2
3408,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,2
3409,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,2
3410,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","Int, size of sampling windows (technically half-window).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
3411,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hamming_window.yaml,2
3412,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,2
3413,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
3414,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
3415,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
3416,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
3417,634,0.0020842474769635806,19,"frozenset({'window', 'SOME_DTYPE'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,2
3418,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a potential directory",tf.io.gfile.isdir.yaml,2
3419,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a file",tf.io.gfile.stat.yaml,2
3420,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})",a string resource path relative to tensorflow/.,tf.compat.v1.resource_loader.load_resource.yaml,2
3421,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a potential directory",tf.compat.v1.gfile.IsDirectory.yaml,2
3422,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})",Absolute string path to possible export location.,tf.compat.v1.saved_model.contains_saved_model.yaml,2
3423,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
3424,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})",a string resource path relative to tensorflow/,tf.compat.v1.resource_loader.get_path_to_datafile.yaml,2
3425,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, a path",tf.io.gfile.remove.yaml,2
3426,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})",[Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.,tf.compat.v1.train.warm_start.yaml,2
3427,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, a path",tf.io.gfile.rmtree.yaml,2
3428,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",tf.print.yaml,2
3429,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a directory",tf.compat.v1.gfile.ListDirectory.yaml,2
3430,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a file",tf.compat.v1.gfile.Stat.yaml,2
3431,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, path to a directory",tf.io.gfile.listdir.yaml,2
3432,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, a path",tf.io.gfile.exists.yaml,2
3433,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, a path to a directory",tf.compat.v1.gfile.DeleteRecursively.yaml,2
3434,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","string, a path",tf.compat.v1.gfile.Exists.yaml,2
3435,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})",Absolute string path to possible export location.,tf.saved_model.contains_saved_model.yaml,2
3436,506,0.0020842474769635806,19,"frozenset({'path', 'SOME_DTYPE'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
3437,507,0.0020842474769635806,19,"frozenset({'path', 'file'})","string, path to a file",tf.io.gfile.stat.yaml,2
3438,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",If an absolute path `/path/to/folder` is specified the file will be saved at that location.,tf.keras.utils.get_file.yaml,2
3439,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",If an absolute path `/path/to/file.txt` is specified the file will be saved at that location.,tf.keras.utils.get_file.yaml,2
3440,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Directory with checkpoints file or path to checkpoint.,tf.train.list_variables.yaml,2
3441,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Relative or absolute filesystem path to a dynamic library file or folder.,tf.load_library.yaml,2
3442,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Directory with checkpoints file or path to checkpoint file.,tf.train.load_checkpoint.yaml,2
3443,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Limit to the file path included in the printed stack trace.,tf.debugging.enable_check_numerics.yaml,2
3444,507,0.0020842474769635806,19,"frozenset({'path', 'file'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
3445,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Directory with checkpoints file or path to checkpoint.,tf.train.load_variable.yaml,2
3446,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Relative or absolute filesystem path to a dynamic library file.,tf.load_op_library.yaml,2
3447,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Path or file object.,tf.keras.preprocessing.image.save_img.yaml,2
3448,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",[Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.,tf.compat.v1.train.warm_start.yaml,2
3449,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Path to image file.,tf.keras.preprocessing.image.load_img.yaml,2
3450,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Directory with checkpoints file or path to checkpoint.,tf.compat.v1.train.init_from_checkpoint.yaml,2
3451,507,0.0020842474769635806,19,"frozenset({'path', 'file'})","To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",tf.print.yaml,2
3452,507,0.0020842474769635806,19,"frozenset({'path', 'file'})","string, path to a file",tf.compat.v1.gfile.Stat.yaml,2
3453,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",The path to an event file created by a `SummaryWriter`.,tf.compat.v1.train.summary_iterator.yaml,2
3454,507,0.0020842474769635806,19,"frozenset({'path', 'file'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
3455,507,0.0020842474769635806,19,"frozenset({'path', 'file'})",Either the special value `local://` or a path to a file containing a serialized `FileDescriptorSet`.,tf.io.decode_proto.yaml,2
3456,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.mean_squared_error.yaml,4
3457,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.hinge_loss.yaml,4
3458,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.softmax_cross_entropy.yaml,4
3459,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.sigmoid_cross_entropy.yaml,4
3460,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.huber_loss.yaml,4
3461,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.cosine_distance.yaml,4
3462,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.compute_weighted_loss.yaml,4
3463,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,4
3464,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.absolute_difference.yaml,4
3465,278,0.0020842474769635806,10,"frozenset({'apply', 'type', 'reduction', 'loss'})",Type of reduction to apply to loss.,tf.compat.v1.losses.log_loss.yaml,4
3466,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,3
3467,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,3
3468,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,3
3469,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,3
3470,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
3471,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,3
3472,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})",`int` or shape `tuple` Axes over which to calculate.,tf.signal.ifftshift.yaml,3
3473,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,3
3474,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
3475,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,3
3476,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,3
3477,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,3
3478,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,3
3479,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,3
3480,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,3
3481,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,3
3482,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,3
3483,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,3
3484,933,0.0020842474769635806,19,"frozenset({'SOME_DTYPE', 'shape', 'SOME_STRUCTURE'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,3
3485,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",Produce moments with the same dimensionality as the input.,tf.nn.weighted_moments.yaml,2
3486,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",produce moments with the same dimensionality as the input.,tf.compat.v1.nn.moments.yaml,2
3487,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",Produce moments with the same dimensionality as the input.,tf.compat.v1.nn.weighted_moments.yaml,2
3488,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
3489,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",produce moments with the same dimensionality as the input.,tf.nn.moments.yaml,2
3490,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",The value of 'strict' will cause the operation to produce a InvalidArgument error on any invalid input formatting.,tf.strings.unicode_transcode.yaml,2
3491,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",A value of 'ignore' will cause the operation to skip any invalid formatting in the input and produce no corresponding output character.,tf.strings.unicode_transcode.yaml,2
3492,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
3493,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",produce statistics with the same dimensionality as the input.,tf.compat.v1.nn.sufficient_statistics.yaml,2
3494,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
3495,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
3496,284,0.0020842474769635806,12,"frozenset({'input', 'produce'})",produce statistics with the same dimensionality as the input.,tf.nn.sufficient_statistics.yaml,2
3497,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
3498,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
3499,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.data.experimental.make_csv_dataset.yaml,2
3500,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
3501,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
3502,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3503,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3504,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3505,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
3506,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.shared_embeddings.yaml,2
3507,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
3508,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
3509,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
3510,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
3511,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.embedding_column.yaml,2
3512,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
3513,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})",The `Tensor` representing the column will have the shape of [batch_size] + `shape`.,tf.feature_column.numeric_column.yaml,2
3514,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
3515,590,0.0020842474769635806,19,"frozenset({'column', 'tensor'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
3516,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
3517,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,3
3518,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,3
3519,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D with shape based on `data_format`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
3520,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D with shape  based on `data_format`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
3521,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,3
3522,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D with shape  based on `data_format`.,tf.nn.depthwise_conv2d_backprop_input.yaml,3
3523,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
3524,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D with shape according to `data_format`.,tf.compat.v1.nn.depthwise_conv2d.yaml,3
3525,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,3
3526,585,0.0020842474769635806,11,"frozenset({'data_format', 'd', 'shape'})",4-D with shape according to `data_format`.,tf.nn.depthwise_conv2d.yaml,3
3527,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
3528,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
3529,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
3530,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",Optional tensor_pb2 DataType value.,tf.make_tensor_proto.yaml,2
3531,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3532,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
3533,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",Optional SummaryMetadata proto (which describes which plugins may use the summary value).,tf.compat.v1.summary.tensor_summary.yaml,2
3534,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",(Optional.) The starting value for the counter.,tf.compat.v1.data.experimental.Counter.yaml,2
3535,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",Optional global batch size value.,tf.nn.compute_average_loss.yaml,2
3536,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
3537,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldr.yaml,2
3538,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
3539,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
3540,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
3541,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
3542,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",(Optional.) The starting value for the counter.,tf.data.experimental.Counter.yaml,2
3543,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
3544,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldl.yaml,2
3545,920,0.0020842474769635806,19,"frozenset({'optional', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3546,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,2
3547,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
3548,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
3549,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})",A function that takes global step and returns learning rate for the embedding table.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3550,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","A callable that takes inputs `(time, cell_output, cell_state, loop_state)` and returns the tuple `(finished, next_input, next_cell_state, emit_output, next_loop_state)`.",tf.compat.v1.nn.raw_rnn.yaml,2
3551,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
3552,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
3553,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","`callable`, function that takes no arguments and returns a`bool`.",tf.estimator.experimental.make_early_stopping_hook.yaml,2
3554,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,2
3555,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","It takes as argument the layer instance to be cloned, and returns the corresponding layer instance to be used in the model copy.",tf.keras.models.clone_model.yaml,2
3556,282,0.0020842474769635806,11,"frozenset({'takes', 'returns'})","A callable invoked for every ps `Operation` (i.e. matched by`ps_ops`), that takes the `Operation` and returns the ps task index to use.",tf.compat.v1.train.replica_device_setter.yaml,2
3557,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.with_space_to_batch.yaml,2
3558,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d.yaml,2
3559,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.nn.conv3d.yaml,2
3560,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.conv_transpose.yaml,2
3561,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.avg_pool.yaml,2
3562,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})",'NDHWC' and 'NCDHW' are supported.,tf.nn.avg_pool3d.yaml,2
3563,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3564,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})",'NDHWC' and 'NCDHW' are supported.,tf.nn.conv3d_transpose.yaml,2
3565,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","An optional string from: ""NDHWC"", ""NCDHW"".",tf.nn.max_pool3d.yaml,2
3566,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.convolution.yaml,2
3567,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,2
3568,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.pool.yaml,2
3569,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.convolution.yaml,2
3570,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.pool.yaml,2
3571,273,0.0020842474769635806,15,"frozenset({'ncdhw', 'ndhwc'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.max_pool.yaml,2
3572,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
3573,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split_with_offsets.yaml,2
3574,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode_with_offsets.yaml,2
3575,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})","The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement.",tf.strings.unicode_transcode.yaml,2
3576,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",A Tensor of int32 Unicode code points.,tf.strings.unicode_script.yaml,2
3577,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})","A `bytes`, `str`, or `unicode` object.",tf.compat.as_text.yaml,2
3578,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",A string indicating the charset for decoding unicode.,tf.compat.as_text.yaml,2
3579,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_split.yaml,2
3580,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})","A `bytearray`, `bytes`, `str`, or `unicode` object.",tf.compat.as_bytes.yaml,2
3581,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",A string indicating the charset for encoding unicode.,tf.compat.as_bytes.yaml,2
3582,280,0.0020842474769635806,11,"frozenset({'unicode', 'SOME_DTYPE'})",String name for the unicode encoding that should be used to decode each string.,tf.strings.unicode_decode.yaml,2
3583,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
3584,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,3
3585,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,3
3586,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,3
3587,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,3
3588,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
3589,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
3590,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
3591,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
3592,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,3
3593,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,3
3594,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,3
3595,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,3
3596,567,0.0020842474769635806,14,"frozenset({'non', 'tensor', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,3
3597,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.global_variables.yaml,5
3598,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.global_variables.yaml,5
3599,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.trainable_variables.yaml,5
3600,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.trainable_variables.yaml,5
3601,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.moving_average_variables.yaml,5
3602,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.moving_average_variables.yaml,5
3603,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.local_variables.yaml,5
3604,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.local_variables.yaml,5
3605,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.model_variables.yaml,5
3606,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.model_variables.yaml,5
3607,281,0.0020842474769635806,11,"frozenset({'supplied', 'items', 'scope', 'attribute', 'name'})",Items without a `name` attribute are never returned if a scope is supplied and the choice or `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.get_collection.yaml,5
3608,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",Monotonically increasing sequence of `num_spatial_dims`integers (which are >= 1) specifying the spatial dimensions of `input`and output.,tf.nn.with_space_to_batch.yaml,2
3609,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.nn.ctc_greedy_decoder.yaml,2
3610,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
3611,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","String, 'pre' or 'post':     pad either before or after each sequence.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
3612,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
3613,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","A word sequence (sentence), encoded as a list     of word indices (integers).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
3614,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})", Sequence of N ints >= 1.,tf.nn.convolution.yaml,2
3615,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3616,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3617,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})", Sequence of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
3618,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",Sequence of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
3619,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.nn.ctc_beam_search_decoder.yaml,2
3620,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","Sequence[str], names of the flags.",tf.compat.v1.flags.mark_flags_as_required.yaml,2
3621,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})", Sequence of N ints >= 1.,tf.compat.v1.nn.convolution.yaml,2
3622,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})", Sequence of N ints >= 1.,tf.compat.v1.nn.convolution.yaml,2
3623,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",Sequence of N ints >= 1.,tf.nn.pool.yaml,2
3624,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})",Sequence of N ints >= 1.,tf.nn.pool.yaml,2
3625,614,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'sequence'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
3626,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
3627,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
3628,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,3
3629,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,3
3630,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,3
3631,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,3
3632,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
3633,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
3634,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
3635,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
3636,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,3
3637,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,3
3638,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,3
3639,566,0.0019745502413339184,14,"frozenset({'non', 'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,3
3640,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,4
3641,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,4
3642,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,4
3643,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,4
3644,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,4
3645,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,4
3646,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,4
3647,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,4
3648,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,4
3649,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,4
3650,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})",The 4D (batch x rows x cols x depth) Tensor to MaxReduce over.,tf.compat.v1.nn.quantized_max_pool.yaml,4
3651,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,4
3652,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,4
3653,522,0.0019745502413339184,14,"frozenset({'d', 'tensor', 'depth', 'batch'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,4
3654,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
3655,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
3656,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,3
3657,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","float, must be non-negative.",tf.image.random_brightness.yaml,3
3658,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,3
3659,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
3660,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
3661,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
3662,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
3663,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
3664,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
3665,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,3
3666,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
3667,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,3
3668,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,3
3669,528,0.0019745502413339184,16,"frozenset({'non', 'negative', 'SOME_DTYPE'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,3
3670,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,7
3671,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,7
3672,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,7
3673,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,7
3674,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,7
3675,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,7
3676,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,7
3677,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
3678,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,7
3679,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,7
3680,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,7
3681,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,7
3682,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,7
3683,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,7
3684,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,7
3685,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,7
3686,656,0.0019745502413339184,17,"frozenset({'channels', 'height', 'shape', 'batch', 'd', 'width', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,7
3687,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,7
3688,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,7
3689,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,7
3690,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,7
3691,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,7
3692,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,7
3693,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,7
3694,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,7
3695,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,7
3696,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,7
3697,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,7
3698,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,7
3699,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,7
3700,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,7
3701,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,7
3702,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,7
3703,444,0.0019745502413339184,17,"frozenset({'following', 'one', 'SOME_DTYPE', 'must', 'bfloat', 'quint', 'qint'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,7
3704,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
3705,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","Inputs may be python primitives, tensors, data structures such as dicts and lists that may contain tensors (with the data structures possibly nested in arbitrary ways), and printable python objects.",tf.print.yaml,2
3706,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","XLA may be more efficient in some cases (e.g. TPU, XLA_GPU, dense tensor computations).",tf.function.yaml,2
3707,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","A Tensor which is of the same type as `y`, and may be broadcastable with`condition` and `y`.",tf.where.yaml,2
3708,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","A Tensor which is of the same type as `x`, and may be broadcastable with`condition` and `x`.",tf.where.yaml,2
3709,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
3710,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","It accepts one argument, which will have the same (possibly nested) structure as `elems`, and returns a possibly nested structure of Tensors and Operations, which may be different than the structure of `elems`.",tf.vectorized_map.yaml,2
3711,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
3712,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,2
3713,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
3714,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","In some cases, a caller may not have a dtype in mind when converting to a tensor, so dtype_hint can be used as a soft preference.",tf.convert_to_tensor.yaml,2
3715,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.'silent_for_int32': silently copies `int32` tensors, raising errors on the other ones.",tf.config.experimental.set_device_policy.yaml,2
3716,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
3717,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","In some cases, a caller may not have a dtype in mind when converting to a tensor, so preferred_dtype can be used as a soft preference.",tf.compat.v1.convert_to_tensor.yaml,2
3718,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})",This may also be a (possibly nested) tuple of Tensors satisfying this property.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3719,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
3720,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})",A Tensor which may have the same shape as `condition`.,tf.compat.v1.where.yaml,2
3721,658,0.0019745502413339184,18,"frozenset({'tensor', 'may'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
3722,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
3723,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
3724,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",tf.ragged.stack.yaml,2
3725,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,2
3726,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","Values to pad with, passed to`tf.data.Dataset.padded_batch`.",tf.data.experimental.bucket_by_sequence_length.yaml,2
3727,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
3728,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
3729,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_local_variable.yaml,2
3730,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_local_variable.yaml,2
3731,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Allowed values are documented in the documentation of `tf.distribute.Server`.,tf.test.create_local_cluster.yaml,2
3732,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
3733,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_variable.yaml,2
3734,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_variable.yaml,2
3735,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
3736,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
3737,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Valid values: tf.contrib.eager.DEVICE_PLACEMENT_EXPLICIT: raises an error if the placement is not correct.tf.contrib.eager.DEVICE_PLACEMENT_WARN: copies the tensors which are not on the right device but logs a warning.tf.contrib.eager.DEVICE_PLACEMENT_SILENT: silently copies the tensors.,tf.compat.v1.enable_eager_execution.yaml,2
3738,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",Valid values:<ul><li>tf.contrib.eager.SYNC: executes each operation synchronously.,tf.compat.v1.enable_eager_execution.yaml,2
3739,897,0.0019745502413339184,18,"frozenset({'values', 'tf'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
3740,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,4
3741,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,4
3742,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,4
3743,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,4
3744,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,4
3745,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,4
3746,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,4
3747,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,4
3748,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,4
3749,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,4
3750,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,4
3751,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,4
3752,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,4
3753,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,4
3754,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,4
3755,651,0.0019745502413339184,16,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'convolution', 'specifying'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,4
3756,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.write.yaml,2
3757,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
3758,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",the Tensor holding the summary data to write or a callable that returns this Tensor.,tf.summary.write.yaml,2
3759,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.scalar.yaml,2
3760,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.scalar.yaml,2
3761,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.image.yaml,2
3762,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.image.yaml,2
3763,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.experimental.write_raw_pb.yaml,2
3764,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",the string Tensor holding one or more serialized `Summary` protobufs,tf.summary.experimental.write_raw_pb.yaml,2
3765,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.text.yaml,2
3766,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.text.yaml,2
3767,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.audio.yaml,2
3768,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.audio.yaml,2
3769,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",string name for the summary.,tf.summary.experimental.summary_scope.yaml,2
3770,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.histogram.yaml,2
3771,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.histogram.yaml,2
3772,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.trace_export.yaml,2
3773,579,0.0019745502413339184,18,"frozenset({'SOME_DTYPE', 'summary'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
3774,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
3775,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
3776,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,3
3777,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,3
3778,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
3779,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
3780,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
3781,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
3782,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,3
3783,677,0.0019745502413339184,10,"frozenset({'tensor', 'SOME_DTYPE', 'corresponding'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
3784,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
3785,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
3786,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,3
3787,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
3788,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
3789,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.nn.safe_embedding_lookup_sparse.yaml,3
3790,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
3791,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
3792,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,3
3793,707,0.0019745502413339184,10,"frozenset({'ssparsetensor', 'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
3794,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If None, it is set to the length of `vocabulary_file`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
3795,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
3796,763,0.0019745502413339184,18,"frozenset({'set', 'none'})",Set it to None to maintain a linear activation.,tf.keras.layers.SeparableConv1D.yaml,2
3797,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If None, it is set to the length of `vocabulary_file`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
3798,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If `None`, it will be set roughly to the size of `x`.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
3799,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","Default to None, which doesn't set the op-level random seed for candidate sampling.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3800,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If set to `None`, no windowing is used.",tf.signal.inverse_stft.yaml,2
3801,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If None, it is set to the length of `vocabulary_file`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
3802,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If set to `None`, no windowing is used.",tf.signal.stft.yaml,2
3803,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","Default to None, which doesn't set the op-level random seed for candidate sampling.",tf.nn.sampled_softmax_loss.yaml,2
3804,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
3805,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If both `save_checkpoint_steps` and`save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3806,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If both`save_checkpoint_steps` and `save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3807,763,0.0019745502413339184,18,"frozenset({'set', 'none'})"," If both `save_summaries_steps` and`save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3808,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If both`save_summaries_steps` and `save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3809,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
3810,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","When set to None, an appropriate value will be picked automatically.",tf.compat.v1.enable_eager_execution.yaml,2
3811,763,0.0019745502413339184,18,"frozenset({'set', 'none'})","When set to None, an appropriate value will be picked automatically.",tf.compat.v1.enable_eager_execution.yaml,2
3812,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
3813,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.strings.substr.yaml,2
3814,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.strings.substr.yaml,2
3815,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
3816,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.strings.substr.yaml,2
3817,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.compat.v1.strings.substr.yaml,2
3818,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.substr.yaml,2
3819,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.compat.v1.substr.yaml,2
3820,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
3821,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A scalar defining the depth of the one hot dimension.,tf.one_hot.yaml,2
3822,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A scalar defining the value to fill in output when `indices[j] != i`.,tf.one_hot.yaml,2
3823,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A scalar defining the value to fill in output when `indices[j] = i`.,tf.one_hot.yaml,2
3824,262,0.0019745502413339184,13,"frozenset({'defining', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
3825,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
3826,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
3827,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
3828,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",A real numeric Tensor containing a single value.,tf.compat.v1.summary.scalar.yaml,3
3829,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
3830,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
3831,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A scalar string Tensor, a single serialized Example.",tf.compat.v1.parse_single_example.yaml,3
3832,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
3833,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
3834,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
3835,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
3836,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",An integer can be given which means a single dimension `Tensor` with given width.,tf.feature_column.numeric_column.yaml,3
3837,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
3838,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
3839,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
3840,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
3841,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A scalar string Tensor, a single serialized Example.",tf.io.parse_single_example.yaml,3
3842,718,0.0019745502413339184,18,"frozenset({'single', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
3843,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
3844,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Initializer for the bias vector.,tf.keras.layers.Conv3D.yaml,2
3845,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
3846,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv3D.yaml,2
3847,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
3848,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Initializer for the bias vector.,tf.keras.layers.Conv1D.yaml,2
3849,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
3850,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv1D.yaml,2
3851,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",An initializer for the bias vector.,tf.keras.layers.SeparableConv1D.yaml,2
3852,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Optional regularizer for the bias vector.,tf.keras.layers.SeparableConv1D.yaml,2
3853,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
3854,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Initializer for the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
3855,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
3856,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.SeparableConv2D.yaml,2
3857,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
3858,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Initializer for the bias vector.,tf.keras.layers.Conv2D.yaml,2
3859,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
3860,400,0.0019745502413339184,18,"frozenset({'vector', 'bias'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv2D.yaml,2
3861,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,4
3862,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,4
3863,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,4
3864,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3865,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3866,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3867,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,4
3868,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,4
3869,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D `Tensor` with size matching the channel dimension of `value`.,tf.nn.bias_add.yaml,4
3870,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,4
3871,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,4
3872,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,4
3873,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3874,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3875,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3876,807,0.0019745502413339184,16,"frozenset({'d', 'size', 'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,4
3877,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_alias.yaml,4
3878,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_bool.yaml,4
3879,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi_float.yaml,4
3880,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_enum.yaml,4
3881,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_spaceseplist.yaml,4
3882,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi.yaml,4
3883,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.declare_key_flag.yaml,4
3884,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,4
3885,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_float.yaml,4
3886,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.adopt_module_key_flags.yaml,4
3887,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_integer.yaml,4
3888,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi_enum.yaml,4
3889,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi_integer.yaml,4
3890,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_multi_string.yaml,4
3891,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_list.yaml,4
3892,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE.yaml,4
3893,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_flag.yaml,4
3894,261,0.0019745502413339184,18,"frozenset({'need', 'never', 'almost', 'overridden'})",This should almost never need to be overridden.,tf.compat.v1.flags.DEFINE_enum_class.yaml,4
3895,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,3
3896,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,3
3897,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
3898,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
3899,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
3900,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
3901,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
3902,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
3903,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,3
3904,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
3905,737,0.0019745502413339184,11,"frozenset({'labels', 'tensor', 'shape'})",A `Tensor` of the same shape as `labels`.,tf.compat.v1.metrics.mean_cosine_distance.yaml,3
3906,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.nn.conv1d.yaml,5
3907,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,5
3908,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.conv1d.yaml,5
3909,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.conv3d.yaml,5
3910,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,5
3911,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.nn.conv3d.yaml,5
3912,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,5
3913,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,5
3914,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
3915,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.conv2d_backprop_input.yaml,5
3916,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,5
3917,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,5
3918,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.quantized_conv2d.yaml,5
3919,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.nn.conv1d_transpose.yaml,5
3920,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.nn.depthwise_conv2d_backprop_filter.yaml,5
3921,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.nn.depthwise_conv2d_backprop_input.yaml,5
3922,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,5
3923,265,0.0019745502413339184,18,"frozenset({'depth', 'dimensions', 'must', 'dilations', 'batch'})",Dilations in the batch and depth dimensions must be 1.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
3924,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})"," If set to be non-zero, the random number generator is seeded by the given seed.",tf.nn.fractional_avg_pool.yaml,3
3925,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.compat.v1.keras.initializers.he_normal.yaml,3
3926,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.keras.initializers.lecun_uniform.yaml,3
3927,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.keras.initializers.he_normal.yaml,3
3928,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.keras.initializers.he_uniform.yaml,3
3929,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})","If `seed` is set to non-zero, the random number generator is seeded by the given `seed`.",tf.image.sample_distorted_bounding_box.yaml,3
3930,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.compat.v1.keras.initializers.lecun_normal.yaml,3
3931,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.keras.initializers.lecun_normal.yaml,3
3932,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.compat.v1.keras.initializers.lecun_uniform.yaml,3
3933,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})"," If set to be non-zero, the random number generator is seeded by the given seed.",tf.nn.fractional_max_pool.yaml,3
3934,268,0.0019745502413339184,11,"frozenset({'generator', 'seed', 'random'})",Used to seed the random generator.,tf.compat.v1.keras.initializers.he_uniform.yaml,3
3935,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.nn.max_pool_with_argmax.yaml,4
3936,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
3937,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique.yaml,4
3938,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_min.yaml,4
3939,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.io.extract_jpeg_shape.yaml,4
3940,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.compat.v1.string_to_number.yaml,4
3941,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_max.yaml,4
3942,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmin.yaml,4
3943,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique_with_counts.yaml,4
3944,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.uint8, tf.uint16`.",tf.io.decode_png.yaml,4
3945,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmin.yaml,4
3946,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmax.yaml,4
3947,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.strings.to_number.yaml,4
3948,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmax.yaml,4
3949,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,4
3950,778,0.0019745502413339184,16,"frozenset({'optional', 'dtype', 'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.linalg.lu.yaml,4
3951,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.with_space_to_batch.yaml,4
3952,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.with_space_to_batch.yaml,4
3953,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.with_space_to_batch.yaml,4
3954,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.conv_transpose.yaml,4
3955,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.conv_transpose.yaml,4
3956,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.conv_transpose.yaml,4
3957,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.convolution.yaml,4
3958,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.convolution.yaml,4
3959,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.convolution.yaml,4
3960,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.compat.v1.nn.pool.yaml,4
3961,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.compat.v1.nn.pool.yaml,4
3962,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.pool.yaml,4
3963,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.compat.v1.nn.convolution.yaml,4
3964,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.compat.v1.nn.convolution.yaml,4
3965,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.compat.v1.nn.convolution.yaml,4
3966,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.pool.yaml,4
3967,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.pool.yaml,4
3968,746,0.0019745502413339184,18,"frozenset({'default', 'values', 'valid', 'n'})","For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".",tf.nn.pool.yaml,4
3969,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,5
3970,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,5
3971,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,5
3972,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,5
3973,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,5
3974,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,5
3975,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,5
3976,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,5
3977,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,5
3978,691,0.0019745502413339184,10,"frozenset({'SOME_DTYPE', 'shape', 'batch_size', 'd', 'tensor'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,5
3979,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
3980,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,3
3981,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
3982,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
3983,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
3984,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`.,tf.linalg.lu_solve.yaml,3
3985,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.pinv.yaml,3
3986,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.matrix_rank.yaml,3
3987,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
3988,593,0.0018648530057042562,10,"frozenset({'tensor', 'SOME_DTYPE', 'matrix'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
3989,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Size of the last dimension must be 3.,tf.image.adjust_saturation.yaml,4
3990,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.rgb_to_hsv.yaml,4
3991,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Size of the last dimension must be 3.,tf.image.adjust_hue.yaml,4
3992,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Size of the last dimension must be 3.,tf.image.random_hue.yaml,4
3993,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.hsv_to_rgb.yaml,4
3994,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.yiq_to_rgb.yaml,4
3995,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 1.,tf.image.grayscale_to_rgb.yaml,4
3996,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.yuv_to_rgb.yaml,4
3997,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must have size 3 and should contain RGB values.,tf.image.rgb_to_grayscale.yaml,4
3998,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Size of the last dimension must be 3.,tf.image.random_saturation.yaml,4
3999,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})","Size of the last dimension must be None, 1 or 3.",tf.image.adjust_jpeg_quality.yaml,4
4000,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.rgb_to_yiq.yaml,4
4001,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Last dimension must be size 3.,tf.image.rgb_to_yuv.yaml,4
4002,608,0.0018648530057042562,14,"frozenset({'last', 'size', 'dimension', 'must'})",Size of the last dimension must be 1 or 3.,tf.image.random_jpeg_quality.yaml,4
4003,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
4004,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,3
4005,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
4006,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
4007,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
4008,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
4009,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,3
4010,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
4011,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","If the value is a non-string iterable, it will be iterated over to create a shallow copy of the values.",tf.compat.v1.flags.DEFINE_multi.yaml,3
4012,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,3
4013,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
4014,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
4015,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,3
4016,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,3
4017,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,3
4018,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
4019,907,0.0018648530057042562,17,"frozenset({'values', 'SOME_DTYPE', 'SOME_STRUCTURE'})",All keys and values in the dictionary should be convertible to str.,tf.lite.experimental.load_delegate.yaml,3
4020,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})",The dtype of the returned argmax tensor.,tf.nn.max_pool_with_argmax.yaml,3
4021,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})",(Optional.) The required `DType` of the returned `Tensor` or`IndexedSlices`.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,3
4022,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})",The desired DType of the returned `Tensor`.,tf.io.decode_image.yaml,3
4023,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})",`dtype` for the returned `RaggedTensor`'s `row_splits`tensor.,tf.ragged.range.yaml,3
4024,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,3
4025,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","String, dtype of returned tensor.",tf.keras.backend.random_binomial.yaml,3
4026,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","String, dtype of returned tensor.",tf.keras.backend.truncated_normal.yaml,3
4027,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,3
4028,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","String, dtype of returned tensor.",tf.keras.backend.random_normal.yaml,3
4029,756,0.0018648530057042562,10,"frozenset({'dtype', 'tensor', 'returned'})","String, dtype of returned tensor.",tf.keras.backend.random_uniform.yaml,3
4030,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4031,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
4032,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,2
4033,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_k.yaml,2
4034,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
4035,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
4036,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
4037,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,2
4038,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
4039,257,0.0018648530057042562,10,"frozenset({'binary', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_k.yaml,2
4040,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,4
4041,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,4
4042,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,4
4043,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,4
4044,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,4
4045,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,4
4046,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,4
4047,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,4
4048,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,4
4049,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,4
4050,682,0.0018648530057042562,11,"frozenset({'tensor', 'SOME_DTYPE', 'tf', 'representing'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,4
4051,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4052,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","Optimizer identifier, one of String: name of an optimizerDictionary: configuration dictionary.",tf.keras.optimizers.get.yaml,2
4053,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.global_variables.yaml,2
4054,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.trainable_variables.yaml,2
4055,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
4056,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.moving_average_variables.yaml,2
4057,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.local_variables.yaml,2
4058,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
4059,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","Variable length list of dictionaries of name, class pairs to add to custom objects.",tf.keras.utils.custom_object_scope.yaml,2
4060,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4061,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
4062,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4063,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
4064,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
4065,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.model_variables.yaml,2
4066,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})",Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames.,tf.train.latest_checkpoint.yaml,2
4067,939,0.0018648530057042562,17,"frozenset({'SOME_STRUCTURE', 'name'})","(Optional.) If supplied, the resulting list is filtered to include only items whose `name` attribute matches using `re.match`.",tf.compat.v1.get_collection.yaml,2
4068,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4069,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
4070,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4071,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
4072,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",What to return in test phase (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
4073,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","If this first`emit_output` return value is `None`, then the `emit_ta` result of`raw_rnn` will have the same structure and dtypes as `cell.output_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
4074,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","int, size of batches to return.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
4075,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
4076,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",What to return in train phase (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
4077,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4078,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",A scalar determining whether to return the result of `true_fn` or`false_fn`.,tf.cond.yaml,2
4079,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
4080,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","Integer, size of batches to return.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
4081,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
4082,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
4083,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",A scalar determining whether to return the result of `true_fn` or`false_fn`.,tf.compat.v1.cond.yaml,2
4084,549,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'return'})",A `float` that sets the saturation threshold (the largest value the function will return).,tf.keras.activations.relu.yaml,2
4085,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
4086,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
4087,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
4088,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,3
4089,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
4090,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
4091,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
4092,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,3
4093,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,3
4094,805,0.0018648530057042562,10,"frozenset({'size', 'shape', 'batch'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
4095,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",The type of element in the resulting `Tensor`.,tf.sparse.eye.yaml,2
4096,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
4097,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
4098,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",The type of an element in the resulting `Tensor`,tf.eye.yaml,2
4099,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
4100,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
4101,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
4102,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
4103,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
4104,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Optional DType of an element in the resulting `Tensor`.,tf.ones.yaml,2
4105,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
4106,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Each element of the input Tensor is converted to an array of bytes.,tf.io.decode_raw.yaml,2
4107,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",The DType of an element in the resulting `Tensor`.,tf.zeros.yaml,2
4108,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})","Binary tensor with shape `(samples, time, 1)`, with a zero for every element that is masked.",tf.keras.backend.rnn.yaml,2
4109,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Each element of the input Tensor is converted to an array of bytes.,tf.compat.v1.decode_raw.yaml,2
4110,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
4111,574,0.0018648530057042562,17,"frozenset({'tensor', 'element'})",A tensor containing 3-element vectors.,tf.linalg.cross.yaml,2
4112,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool1D.yaml,5
4113,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv3D.yaml,5
4114,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool2D.yaml,5
4115,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv1D.yaml,5
4116,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.SeparableConv1D.yaml,5
4117,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool3D.yaml,5
4118,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool3D.yaml,5
4119,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool2D.yaml,5
4120,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.SeparableConv2D.yaml,5
4121,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv2D.yaml,5
4122,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool1D.yaml,5
4123,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling2D.yaml,5
4124,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling2D.yaml,5
4125,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling3D.yaml,5
4126,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling1D.yaml,5
4127,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling1D.yaml,5
4128,563,0.0018648530057042562,17,"frozenset({'default', 'SOME_DTYPE', 'channels_last', 'channels_first', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling3D.yaml,5
4129,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.svd.yaml,3
4130,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.lstsq.yaml,3
4131,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,3
4132,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
4133,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",tf.linalg.tridiagonal_matmul.yaml,3
4134,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,3
4135,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
4136,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","Shape is `[N, M, M]`.",tf.linalg.slogdet.yaml,3
4137,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","A `SparseTensor` with shape `[N, M]`.",tf.sparse.fill_empty_rows.yaml,3
4138,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
4139,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
4140,519,0.0018648530057042562,12,"frozenset({'n', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
4141,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.apply_channel_shift.yaml,4
4142,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,4
4143,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,4
4144,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,4
4145,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,4
4146,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,4
4147,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,4
4148,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.random_channel_shift.yaml,4
4149,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,4
4150,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,4
4151,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,4
4152,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,4
4153,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,4
4154,558,0.0018648530057042562,14,"frozenset({'input', 'axis', 'tensor', 'index'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,4
4155,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
4156,849,0.0018648530057042562,17,"frozenset({'output', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv3D.yaml,2
4157,849,0.0018648530057042562,17,"frozenset({'output', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv1D.yaml,2
4158,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
4159,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The total number of depthwise convolution output channels will be equal to `num_filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv1D.yaml,2
4160,849,0.0018648530057042562,17,"frozenset({'output', 'number'})","Integer, the dimensionality of the output space (i.e. the number of filters in the convolution).",tf.keras.layers.SeparableConv1D.yaml,2
4161,849,0.0018648530057042562,17,"frozenset({'output', 'number'})"," If provided, the `cond` output is AND-ed with an additional condition ensuring the number of iterations executed is no greater than`maximum_iterations`.",tf.compat.v1.while_loop.yaml,2
4162,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The number of partitions to output.,tf.dynamic_partition.yaml,2
4163,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
4164,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv2D.yaml,2
4165,849,0.0018648530057042562,17,"frozenset({'output', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.SeparableConv2D.yaml,2
4166,849,0.0018648530057042562,17,"frozenset({'output', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv2D.yaml,2
4167,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The number of columns of the output matrix.,tf.linalg.diag.yaml,2
4168,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",The number of rows of the output matrix.,tf.linalg.diag.yaml,2
4169,849,0.0018648530057042562,17,"frozenset({'output', 'number'})"," If provided, the `cond` output is AND-ed with an additional condition ensuring the number of iterations executed is no greater than`maximum_iterations`.",tf.while_loop.yaml,2
4170,849,0.0018648530057042562,17,"frozenset({'output', 'number'})",An `int32` or `int64` scalar specifying the number of partitions to output.,tf.ragged.stack_dynamic_partitions.yaml,2
4171,849,0.0018648530057042562,17,"frozenset({'output', 'number'})", This determines the number of rows in `output`.,tf.ragged.stack_dynamic_partitions.yaml,2
4172,745,0.0018648530057042562,17,"frozenset({'e', 'value'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
4173,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","i.e. for 8 bit quantization, the minimum value is -127 instead of -128.",tf.quantization.quantize_and_dequantize.yaml,2
4174,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Valid keys: layout_optimizer: Optimize tensor layouts e.g. This will try to use NCHW layout on GPU which is faster.constant_folding: Fold constants Statically infer the value of tensors when possible, and materialize the result using constants.shape_optimization: Simplify computations made on shapes.remapping: Remap subgraphs onto more efficient implementations.arithmetic_optimization: Simplify arithmetic ops with common sub-expression elimination and arithmetic simplification.dependency_optimization: Control dependency optimizations.",tf.config.optimizer.set_experimental_options.yaml,2
4175,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `None` (i.e., 'lu_solve').",tf.linalg.lu_solve.yaml,2
4176,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_solve.yaml,2
4177,745,0.0018648530057042562,17,"frozenset({'e', 'value'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
4178,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
4179,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.pinv.yaml,2
4180,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `None` (i.e., 'lu_reconstruct').",tf.linalg.lu_reconstruct.yaml,2
4181,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_reconstruct.yaml,2
4182,745,0.0018648530057042562,17,"frozenset({'e', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
4183,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
4184,745,0.0018648530057042562,17,"frozenset({'e', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
4185,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `None` (i.e., `eps * max(rows, cols) * max(singular_val)`).",tf.linalg.matrix_rank.yaml,2
4186,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.matrix_rank.yaml,2
4187,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `None` (i.e., 'lu_matrix_inverse').",tf.linalg.lu_matrix_inverse.yaml,2
4188,745,0.0018648530057042562,17,"frozenset({'e', 'value'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_matrix_inverse.yaml,2
4189,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.fixed_unigram_candidate_sampler.yaml,2
4190,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
4191,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
4192,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.uniform_candidate_sampler.yaml,2
4193,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
4194,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
4195,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
4196,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
4197,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.log_uniform_candidate_sampler.yaml,2
4198,256,0.0018648530057042562,10,"frozenset({'determines', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.learned_unigram_candidate_sampler.yaml,2
4199,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if a categorical column is multivalent.,tf.compat.v1.feature_column.linear_model.yaml,2
4200,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if a categorical column is multivalent.,tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,2
4201,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The boolean tensor to reduce.,tf.compat.v1.reduce_all.yaml,2
4202,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
4203,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The boolean tensor to reduce.,tf.compat.v1.reduce_any.yaml,2
4204,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_sum.yaml,2
4205,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
4206,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.shared_embeddings.yaml,2
4207,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum.yaml,2
4208,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
4209,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The boolean tensor to reduce.,tf.math.reduce_any.yaml,2
4210,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.embedding_column.yaml,2
4211,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max.yaml,2
4212,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_max.yaml,2
4213,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
4214,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",The boolean tensor to reduce.,tf.reduce_all.yaml,2
4215,616,0.0018648530057042562,17,"frozenset({'SOME_DTYPE', 'reduce'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
4216,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})","Note that if the shape of `rhs` and/or `diags` isn't known statically, `rhs` will be treated as a matrix rather than a vector.",tf.linalg.tridiagonal_solve.yaml,2
4217,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", `rank(mask)` must be known statically.,tf.ragged.boolean_mask.yaml,2
4218,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
4219,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
4220,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", `N` must be statically known.,tf.strings.unicode_split_with_offsets.yaml,2
4221,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", `N` must be statically known.,tf.strings.unicode_decode_with_offsets.yaml,2
4222,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", Must have a statically known rank (`N`).,tf.strings.bytes_split.yaml,2
4223,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})"," If`rank(input)` is not known statically, then it is assumed to be `1`.",tf.compat.v1.strings.split.yaml,2
4224,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
4225,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", `N` must be statically known.,tf.strings.unicode_split.yaml,2
4226,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})", `N` must be statically known.,tf.strings.unicode_decode.yaml,2
4227,244,0.0018648530057042562,12,"frozenset({'known', 'statically'})"," If`rank(input)` is not known statically, then it is assumed to be `1`.",tf.strings.split.yaml,2
4228,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_max.yaml,3
4229,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
4230,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
4231,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_min.yaml,3
4232,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
4233,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,3
4234,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A `Tensor` representing pixel data with shape `[k, h, w, c]`, where `k` is the number of images, `h` and `w` are the height and width of the images, and `c` is the number of channels, which should be 1, 2, 3, or 4 (grayscale, grayscale with alpha, RGB, RGBA).",tf.summary.image.yaml,3
4235,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
4236,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_prod.yaml,3
4237,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels.",tf.summary.audio.yaml,3
4238,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,3
4239,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",A tensor whose shape is a prefix of data.shape.,tf.strings.unsorted_segment_join.yaml,3
4240,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,3
4241,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sum.yaml,3
4242,826,0.0018648530057042562,15,"frozenset({'data', 'tensor', 'shape'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
4243,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","By default, `estimator.eval_dir()` will be used.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
4244,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","If None, the default initializer will be used.",tf.keras.layers.SeparableConv1D.yaml,2
4245,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","By default, `estimator.eval_dir()` will be used.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
4246,864,0.0018648530057042562,17,"frozenset({'used', 'default'})",Otherwise the default graph will be used.,tf.compat.v1.keras.backend.get_session.yaml,2
4247,864,0.0018648530057042562,17,"frozenset({'used', 'default'})",Only used for the default op name.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
4248,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","By default, ""nearest"" is used.`",tf.keras.preprocessing.image.load_img.yaml,2
4249,864,0.0018648530057042562,17,"frozenset({'used', 'default'})",Only used for the default op name.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
4250,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","By default, `estimator.eval_dir()` will be used.",tf.estimator.experimental.stop_if_lower_hook.yaml,2
4251,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","If None, the default configuration will be used.",tf.config.set_logical_device_configuration.yaml,2
4252,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","If both `save_checkpoint_steps` and`save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
4253,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","If both`save_checkpoint_steps` and `save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
4254,864,0.0018648530057042562,17,"frozenset({'used', 'default'})"," If both `save_summaries_steps` and`save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
4255,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","If both`save_summaries_steps` and `save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
4256,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
4257,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
4258,864,0.0018648530057042562,17,"frozenset({'used', 'default'})",The thread default will be used if this parameter is None.,tf.summary.flush.yaml,2
4259,864,0.0018648530057042562,17,"frozenset({'used', 'default'})","By default, `estimator.eval_dir()` will be used.",tf.estimator.experimental.stop_if_higher_hook.yaml,2
4260,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.tuple.yaml,2
4261,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `Tensor` or `IndexedSlices` to be scaled.,tf.math.scalar_mul.yaml,2
4262,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,2
4263,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `Tensor` or `IndexedSlices`.,tf.clip_by_value.yaml,2
4264,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",(Optional.) The required `DType` of the returned `Tensor` or`IndexedSlices`.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
4265,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
4266,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.not_equal.yaml,2
4267,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.not_equal.yaml,2
4268,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.clip_by_global_norm.yaml,2
4269,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.linalg.global_norm.yaml,2
4270,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `Tensor` or `IndexedSlices`.,tf.clip_by_norm.yaml,2
4271,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.compat.v1.tuple.yaml,2
4272,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.equal.yaml,2
4273,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.equal.yaml,2
4274,236,0.0018648530057042562,15,"frozenset({'tensor', 'indexedslices'})",A `Tensor` or `IndexedSlices` to be scaled.,tf.compat.v1.scalar_mul.yaml,2
4275,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.global_variables.yaml,3
4276,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.global_variables.yaml,3
4277,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.trainable_variables.yaml,3
4278,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.trainable_variables.yaml,3
4279,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","Optional scope used to filter the summary ops, using `re.match`",tf.compat.v1.summary.merge_all.yaml,3
4280,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.moving_average_variables.yaml,3
4281,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.moving_average_variables.yaml,3
4282,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.local_variables.yaml,3
4283,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.local_variables.yaml,3
4284,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.model_variables.yaml,3
4285,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.model_variables.yaml,3
4286,240,0.0018648530057042562,12,"frozenset({'re', 'scope', 'match'})",Items without a `name` attribute are never returned if a scope is supplied and the choice or `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.get_collection.yaml,3
4287,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",A potentially ragged boolean tensor.,tf.ragged.boolean_mask.yaml,2
4288,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})","Boolean, whether the placeholder should have a ragged type.",tf.keras.backend.placeholder.yaml,2
4289,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An integer specifying the ragged rank of the returned`RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
4290,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
4291,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
4292,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
4293,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An integer specifying the ragged rank of the returned`RaggedTensor`.,tf.ragged.constant.yaml,2
4294,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",A boolean specifying whether the placeholder to be created is ragged.,tf.keras.Input.yaml,2
4295,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
4296,241,0.0018648530057042562,10,"frozenset({'ragged', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
4297,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,3
4298,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,3
4299,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,3
4300,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,3
4301,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,3
4302,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,3
4303,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,3
4304,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
4305,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
4306,821,0.0018648530057042562,10,"frozenset({'use', 'SOME_DTYPE', 'SOME_STRUCTURE'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,3
4307,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","Location to store cached files, when None it defaults to the Keras   Directory.",tf.keras.utils.get_file.yaml,2
4308,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})",Defaults to None.,tf.compat.v1.make_template.yaml,2
4309,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,2
4310,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","Defaults to None, which shifts all axes.",tf.signal.ifftshift.yaml,2
4311,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If None, defaults to the value of `start` while the first entry of the range defaults to 0.",tf.range.yaml,2
4312,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","Acts as first entry in the range if `limit`is not None; otherwise, acts as range limit and first entry defaults to 0.",tf.range.yaml,2
4313,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})",Defaults to `None`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4314,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,2
4315,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,2
4316,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,2
4317,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})",Defaults to `None`.,tf.data.experimental.make_batched_features_dataset.yaml,2
4318,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,2
4319,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,2
4320,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,2
4321,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})"," If `None`, defaults to `STANDARD_PS_OPS`.",tf.compat.v1.train.replica_device_setter.yaml,2
4322,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})"," If `None`, defaults to a round-robin strategy across all `ps`devices.",tf.compat.v1.train.replica_device_setter.yaml,2
4323,873,0.0018648530057042562,17,"frozenset({'defaults', 'none'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,2
4324,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
4325,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.data.experimental.make_csv_dataset.yaml,2
4326,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","str, indent for first line; if None, fall back to indent.",tf.compat.v1.flags.text_wrap.yaml,2
4327,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","str, indent for all but first line.",tf.compat.v1.flags.text_wrap.yaml,2
4328,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.strings.substr.yaml,2
4329,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4330,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4331,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
4332,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","`bool`, if `True` replace all non-overlapping matches, else replace only the first match.",tf.strings.regex_replace.yaml,2
4333,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
4334,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If this first`emit_output` return value is `None`, then the `emit_ta` result of`raw_rnn` will have the same structure and dtypes as `cell.output_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
4335,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If axes is a scalar, sum over the last N axes of a and the first N axes of b in order.",tf.tensordot.yaml,2
4336,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
4337,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_local_variable.yaml,2
4338,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.compat.v1.strings.substr.yaml,2
4339,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})","Callable that takes as a first argument the true getter, and allows overwriting the internal get_variable method.",tf.compat.v1.get_variable.yaml,2
4340,710,0.0018648530057042562,17,"frozenset({'first', 'SOME_DTYPE'})",Scalar defining the position of first character in each substring,tf.compat.v1.substr.yaml,2
4341,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_regularization_losses.yaml,2
4342,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
4343,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
4344,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
4345,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
4346,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
4347,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
4348,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
4349,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_total_loss.yaml,2
4350,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_regularization_loss.yaml,2
4351,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
4352,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})",Optional losses collection.,tf.compat.v1.losses.get_losses.yaml,2
4353,243,0.0018648530057042562,13,"frozenset({'optional', 'losses'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_losses.yaml,2
4354,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.image.random_brightness.yaml,6
4355,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.data.experimental.sample_from_datasets.yaml,6
4356,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.random.shuffle.yaml,6
4357,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See `tf.compat.v1.set_random_seed` for behavior.,tf.random.categorical.yaml,6
4358,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.image.random_flip_up_down.yaml,6
4359,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.random.truncated_normal.yaml,6
4360,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.random.normal.yaml,6
4361,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.image.random_flip_left_right.yaml,6
4362,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.random.poisson.yaml,6
4363,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.compat.v1.random_poisson.yaml,6
4364,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,6
4365,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.random.gamma.yaml,6
4366,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed` for behavior.,tf.image.random_contrast.yaml,6
4367,247,0.0018648530057042562,14,"frozenset({'behavior', 'see', 'tf', 'set_random_seed', 'compat', 'v'})",See`tf.compat.v1.set_random_seed`for behavior.,tf.image.random_crop.yaml,6
4368,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split_with_offsets.yaml,2
4369,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode_with_offsets.yaml,2
4370,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",Error handling policy when there is invalid formatting found in the input.,tf.strings.unicode_transcode.yaml,2
4371,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The value of 'strict' will cause the operation to produce a InvalidArgument error on any invalid input formatting.,tf.strings.unicode_transcode.yaml,2
4372,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",A value of 'replace' (the default) will cause the operation to replace any invalid formatting in the input with the`replacement_char` codepoint.,tf.strings.unicode_transcode.yaml,2
4373,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",A value of 'ignore' will cause the operation to skip any invalid formatting in the input and produce no corresponding output character.,tf.strings.unicode_transcode.yaml,2
4374,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`.,tf.strings.unicode_transcode.yaml,2
4375,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement character codepoint to be used in place of any invalid input when `errors='replace'`.,tf.strings.unicode_encode.yaml,2
4376,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split.yaml,2
4377,248,0.0018648530057042562,10,"frozenset({'input', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode.yaml,2
4378,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,5
4379,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.categorical_column_with_hash_bucket.yaml,5
4380,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,5
4381,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.sequence_categorical_column_with_identity.yaml,5
4382,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,5
4383,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.categorical_column_with_identity.yaml,5
4384,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,5
4385,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.numeric_column.yaml,5
4386,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,5
4387,249,0.0018648530057042562,10,"frozenset({'input', 'SOME_DTYPE', 'unique', 'identifying', 'feature'})",A unique string identifying the input feature.,tf.feature_column.sequence_categorical_column_with_hash_bucket.yaml,5
4388,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})"," The glimpse height must be specified first, following by the glimpse width.",tf.compat.v1.image.extract_glimpse.yaml,2
4389,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",tf.data.experimental.make_csv_dataset.yaml,2
4390,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",tf.data.experimental.make_csv_dataset.yaml,2
4391,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})"," The glimpse height must be specified first, following by the glimpse width.",tf.image.extract_glimpse.yaml,2
4392,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4393,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4394,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","At least one of {`shape`, `ndim`} must be specified.",tf.keras.backend.placeholder.yaml,2
4395,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
4396,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})",Must be in the same order as the dimension specified with format.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4397,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})",Must be specified if `input` is a`RaggedTensor`.,tf.squeeze.yaml,2
4398,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",tf.nn.embedding_lookup_sparse.yaml,2
4399,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})",Data will be zero-padded or truncated to the specified length.`fixed_length` must be a multiple of the size of `out_type`.`fixed_length` must be specified if the elements of `input_bytes` are of variable length.,tf.io.decode_raw.yaml,2
4400,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
4401,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
4402,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})",Must be in the same order as the dimension specified with format.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4403,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})","If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
4404,730,0.0018648530057042562,17,"frozenset({'specified', 'must'})",Must be specified if `input` is a`RaggedTensor`.,tf.compat.v1.squeeze.yaml,2
4405,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",The function must take as input the unprojected variable and must return the projected variable (which must have the same shape).,tf.keras.layers.SeparableConv1D.yaml,2
4406,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
4407,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.shared_embeddings.yaml,2
4408,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
4409,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_local_variable.yaml,2
4410,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
4411,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
4412,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
4413,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.embedding_column.yaml,2
4414,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
4415,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_variable.yaml,2
4416,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
4417,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
4418,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
4419,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
4420,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",Optional projection function to be applied to the variable after an optimizer update.,tf.keras.backend.variable.yaml,2
4421,810,0.0018648530057042562,17,"frozenset({'variable', 'function'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
4422,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,5
4423,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,5
4424,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,5
4425,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,5
4426,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,5
4427,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,5
4428,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,5
4429,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,5
4430,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,5
4431,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,5
4432,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,5
4433,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,5
4434,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,5
4435,633,0.0018648530057042562,14,"frozenset({'input', 'size', 'dimension', 'window', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,5
4436,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
4437,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4438,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
4439,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",A value that can be converted to a `tf.DType` object.,tf.dtypes.as_dtype.yaml,2
4440,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.keras.layers.BatchNormalization.yaml,2
4441,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
4442,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
4443,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
4444,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
4445,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
4446,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
4447,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
4448,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
4449,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
4450,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column.,tf.feature_column.numeric_column.yaml,2
4451,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})",Default value is `tf.float32`.,tf.feature_column.numeric_column.yaml,2
4452,896,0.0018648530057042562,17,"frozenset({'value', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
4453,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})","If True, enables collection of executed graphs.",tf.summary.trace_on.yaml,2
4454,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})","If True, enables the advanced profiler.",tf.summary.trace_on.yaml,2
4455,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables support for back propagation.,tf.foldr.yaml,2
4456,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.foldr.yaml,2
4457,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables support for back propagation.,tf.scan.yaml,2
4458,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.scan.yaml,2
4459,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables support for back propagation.,tf.foldl.yaml,2
4460,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.foldl.yaml,2
4461,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables support for back propagation.,tf.map_fn.yaml,2
4462,254,0.0018648530057042562,10,"frozenset({'enables', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.map_fn.yaml,2
4463,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,3
4464,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
4465,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,3
4466,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sum.yaml,3
4467,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,3
4468,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sqrt_n.yaml,3
4469,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
4470,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,3
4471,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,3
4472,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,3
4473,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
4474,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_mean.yaml,3
4475,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,3
4476,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_mean.yaml,3
4477,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
4478,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
4479,848,0.0018648530057042562,17,"frozenset({'d', 'tensor', 'output'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sum.yaml,3
4480,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional function to call after a timeout.,tf.train.checkpoints_iterator.yaml,2
4481,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional regularizer function for the output.,tf.keras.layers.SeparableConv1D.yaml,2
4482,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional projection function to be applied to the bias after being updated by an `Optimizer`.,tf.keras.layers.SeparableConv1D.yaml,2
4483,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
4484,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional projection function to be applied to the pointwise kernel after being updated by an `Optimizer`.,tf.keras.layers.SeparableConv1D.yaml,2
4485,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4486,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_local_variable.yaml,2
4487,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
4488,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Specify the hash_key that will be used by the `FingerprintCat64`function to combine the crosses fingerprints on SparseCrossOp (optional).,tf.feature_column.crossed_column.yaml,2
4489,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
4490,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",A function pointer that can be used to write intermediate steps of graph transformation (optional).,tf.compat.v1.lite.experimental.convert_op_hints_to_stubs.yaml,2
4491,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_variable.yaml,2
4492,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
4493,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional projection function to be applied to the variable after an optimizer update.,tf.keras.backend.variable.yaml,2
4494,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})",Optional integer that indicates the priority for applying this conversion function.,tf.register_tensor_conversion_function.yaml,2
4495,809,0.0017551557700745941,16,"frozenset({'optional', 'function'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
4496,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
4497,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
4498,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",The value to be added to the variable.,tf.compat.v1.assign_add.yaml,2
4499,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",The value to be assigned to the variable.,tf.compat.v1.assign.yaml,2
4500,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
4501,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
4502,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
4503,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})","If False, allows the variable to be initialized with a value of unknown shape.",tf.compat.v1.get_local_variable.yaml,2
4504,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
4505,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
4506,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
4507,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
4508,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})","If False, allows the variable to be initialized with a value of unknown shape.",tf.compat.v1.get_variable.yaml,2
4509,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
4510,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",The value to be subtracted to the variable.,tf.compat.v1.assign_sub.yaml,2
4511,837,0.0017551557700745941,16,"frozenset({'variable', 'value'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
4512,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
4513,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
4514,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
4515,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
4516,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
4517,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
4518,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
4519,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
4520,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
4521,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","This value must be provided, since a confusion matrix of dimension = [num_classes, num_classes] will be allocated.",tf.compat.v1.metrics.mean_iou.yaml,2
4522,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
4523,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.nn.softmax_cross_entropy_with_logits.yaml,2
4524,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
4525,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
4526,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
4527,534,0.0017551557700745941,16,"frozenset({'num_classes', 'dimension'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
4528,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.eig.yaml,3
4529,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,3
4530,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.svd.yaml,3
4531,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,3
4532,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.eigvals.yaml,3
4533,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,3
4534,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.eigh.yaml,3
4535,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,3
4536,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,3
4537,942,0.0017551557700745941,10,"frozenset({'operation', 'optional', 'SOME_DTYPE'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,3
4538,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
4539,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
4540,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sum.yaml,3
4541,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,3
4542,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sqrt_n.yaml,3
4543,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
4544,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,3
4545,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,3
4546,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
4547,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_mean.yaml,3
4548,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,3
4549,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
4550,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,3
4551,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_mean.yaml,3
4552,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,3
4553,825,0.0017551557700745941,16,"frozenset({'d', 'data', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sum.yaml,3
4554,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4555,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",The dtype for the return value.,tf.ragged.row_splits_to_segment_ids.yaml,2
4556,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
4557,547,0.0017551557700745941,16,"frozenset({'value', 'return'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
4558,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4559,547,0.0017551557700745941,16,"frozenset({'value', 'return'})", This last parameter may be ignored by `loop_fn` and the return value may be`None`.,tf.compat.v1.nn.raw_rnn.yaml,2
4560,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","If this first`emit_output` return value is `None`, then the `emit_ta` result of`raw_rnn` will have the same structure and dtypes as `cell.output_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
4561,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4562,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",The dtype for the return value.,tf.ragged.segment_ids_to_row_splits.yaml,2
4563,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
4564,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",The`sampled_candidates` return value will have shape `[num_sampled]`.,tf.random.uniform_candidate_sampler.yaml,2
4565,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
4566,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
4567,547,0.0017551557700745941,16,"frozenset({'value', 'return'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
4568,547,0.0017551557700745941,16,"frozenset({'value', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
4569,547,0.0017551557700745941,16,"frozenset({'value', 'return'})",A `float` that sets the saturation threshold (the largest value the function will return).,tf.keras.activations.relu.yaml,2
4570,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",Optional name prefix for the return tensor.,tf.compat.v1.delete_session_tensor.yaml,2
4571,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_tensor.yaml,2
4572,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
4573,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
4574,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",It must take two arguments and return a pair of nested structures of tensors.,tf.data.experimental.scan.yaml,2
4575,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
4576,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",What to return in test phase (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
4577,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_handle.yaml,2
4578,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
4579,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",What to return in train phase (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
4580,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
4581,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
4582,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
4583,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
4584,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
4585,548,0.0017551557700745941,16,"frozenset({'tensor', 'return'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
4586,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
4587,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
4588,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
4589,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
4590,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
4591,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
4592,919,0.0017551557700745941,16,"frozenset({'input', 'default'})",A value of 'replace' (the default) will cause the operation to replace any invalid formatting in the input with the`replacement_char` codepoint.,tf.strings.unicode_transcode.yaml,2
4593,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
4594,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
4595,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
4596,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.keras.backend.rnn.yaml,2
4597,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
4598,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
4599,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
4600,919,0.0017551557700745941,16,"frozenset({'input', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
4601,919,0.0017551557700745941,16,"frozenset({'input', 'default'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
4602,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
4603,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,3
4604,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,3
4605,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_top_k.yaml,3
4606,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
4607,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_k.yaml,3
4608,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_top_k.yaml,3
4609,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,3
4610,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","A string `Tensor` of rank `N`, the strings to split.",tf.compat.v1.strings.split.yaml,3
4611,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_k.yaml,3
4612,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
4613,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,3
4614,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,3
4615,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","A string `Tensor` of rank `N`, the strings to split.",tf.strings.split.yaml,3
4616,788,0.0017551557700745941,15,"frozenset({'rank', 'tensor', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.average_precision_at_k.yaml,3
4617,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})", Must have the same type as `input`.,tf.nn.conv1d.yaml,3
4618,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.conv3d.yaml,3
4619,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.nn.conv3d.yaml,3
4620,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.conv2d.yaml,3
4621,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.nn.conv2d.yaml,3
4622,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
4623,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.nn.dilation2d.yaml,3
4624,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
4625,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
4626,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
4627,928,0.0017551557700745941,11,"frozenset({'input', 'must', 'type'})",Must have the same type as `input`.,tf.compat.v1.nn.dilation2d.yaml,3
4628,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
4629,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",A object that can be converted to `str`.,tf.compat.as_str_any.yaml,2
4630,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
4631,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",Each string is a JSON object serialized according to the JSON mapping of the Example proto.,tf.io.decode_json_example.yaml,2
4632,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","    To pad sequences with variable length strings, you can use `object`.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
4633,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_solve.yaml,2
4634,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",an arbitrarily nested structure or a scalar object.,tf.nest.flatten.yaml,2
4635,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_reconstruct.yaml,2
4636,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",Any callable object.,tf.compat.v1.flags.tf_decorator.unwrap.yaml,2
4637,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",This must be a callable object that returns an object that supports the `iter()` protocol (e.g. a generator function).,tf.lite.RepresentativeDataset.yaml,2
4638,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","A `bytes`, `str`, or `unicode` object.",tf.compat.as_text.yaml,2
4639,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","If eager execution is enabled, any callable object in the `control_inputs` list will be called.",tf.control_dependencies.yaml,2
4640,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
4641,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_matrix_inverse.yaml,2
4642,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})","A `bytearray`, `bytes`, `str`, or `unicode` object.",tf.compat.as_bytes.yaml,2
4643,561,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'object'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
4644,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.fused_batch_norm.yaml,2
4645,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
4646,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.avg_pool.yaml,2
4647,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4648,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,2
4649,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","It can be either `""bilinear""` or `""nearest""` and default to `""bilinear""`.",tf.image.crop_and_resize.yaml,2
4650,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","It can be either`""bilinear""` or `""nearest""` and default to `""bilinear""`.",tf.compat.v1.image.crop_and_resize.yaml,2
4651,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.separable_conv2d.yaml,2
4652,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
4653,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.nn.separable_conv2d.yaml,2
4654,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
4655,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
4656,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.depthwise_conv2d.yaml,2
4657,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.max_pool.yaml,2
4658,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","- indexing: Either 'xy' or 'ij' (optional, default: 'xy').",tf.meshgrid.yaml,2
4659,766,0.0017551557700745941,16,"frozenset({'either', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.nn.depthwise_conv2d.yaml,2
4660,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,5
4661,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,5
4662,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,5
4663,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,5
4664,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,5
4665,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,5
4666,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,5
4667,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,5
4668,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,5
4669,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,5
4670,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,5
4671,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,5
4672,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,5
4673,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,5
4674,581,0.0017551557700745941,15,"frozenset({'in_channels', 'shape', 'type', 'd', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,5
4675,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,3
4676,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})",Note that the batch size of the input tensor must be divisible by`block_size * block_size`.,tf.compat.v1.batch_to_space.yaml,3
4677,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
4678,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
4679,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
4680,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,3
4681,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
4682,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,3
4683,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,3
4684,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
4685,855,0.0017551557700745941,11,"frozenset({'input', 'tensor', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
4686,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4687,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
4688,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4689,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})",Each feature is mapped to the index of its value (if present) in `vocabulary_list`.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4690,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.keras.layers.BatchNormalization.yaml,2
4691,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
4692,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
4693,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
4694,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})",a list of vectors where each value is the weight associated with a feature group.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
4695,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
4696,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4697,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
4698,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})",a list of vectors which contains feature value associated with each feature group.,tf.compat.v1.train.sdca_optimizer.yaml,2
4699,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})",a list of vectors where each value is the weight associated with a sparse feature group.,tf.compat.v1.train.sdca_optimizer.yaml,2
4700,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
4701,597,0.0017551557700745941,16,"frozenset({'feature', 'value'})",Each feature is mapped to the index of its value (if present) in `vocabulary_list`.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
4702,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,3
4703,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,3
4704,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,3
4705,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
4706,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
4707,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_top_k.yaml,3
4708,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,3
4709,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_k.yaml,3
4710,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_top_k.yaml,3
4711,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_k.yaml,3
4712,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,3
4713,901,0.0017551557700745941,12,"frozenset({'optional', 'values', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.average_precision_at_k.yaml,3
4714,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4715,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})"," Note that the ClassificationResponse message requires that class labels are strings, not integers or anything else.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
4716,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","`[batch_size, num_classes]` target integer labels in`{0, 1}`.",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
4717,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
4718,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
4719,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
4720,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
4721,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","An `int32` `SparseTensor`.`labels.indices[i, :] == [b, t]` means `labels.values[i]` stores the id for (batch b, time t).",tf.compat.v1.nn.ctc_loss.yaml,2
4722,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","if False, labels will be     integers (eg.",tf.keras.preprocessing.sequence.skipgrams.yaml,2
4723,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
4724,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
4725,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4726,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
4727,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
4728,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
4729,736,0.0017551557700745941,16,"frozenset({'labels', 'SOME_DTYPE'})",This must be scalar or broadcastable to`labels` (i.e. same rank and each dimension is either 1 or the same).,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
4730,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",Rank `k` tensor.,tf.linalg.band_part.yaml,2
4731,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",A `Tensor` with `rank k >= 2`.,tf.linalg.diag_part.yaml,2
4732,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor`, same type as `chol`, shape is `[..., M, K]`.",tf.linalg.cholesky_solve.yaml,2
4733,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor` of shape [..., M] or [..., M, K] and with the same dtype as`diagonals`.",tf.linalg.tridiagonal_solve.yaml,2
4734,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",Rank k tensor where k is even and not zero.,tf.linalg.tensor_diag_part.yaml,2
4735,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
4736,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",Rank k tensor where k is at most 1.,tf.linalg.tensor_diag.yaml,2
4737,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","`Tensor` of shape `[..., M, K]`.",tf.linalg.lstsq.yaml,2
4738,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",A `Tensor` with `rank k >= 1`.,tf.linalg.diag.yaml,2
4739,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
4740,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor` representing pixel data with shape `[k, h, w, c]`, where `k` is the number of images, `h` and `w` are the height and width of the images, and `c` is the number of channels, which should be 1, 2, 3, or 4 (grayscale, grayscale with alpha, RGB, RGBA).",tf.summary.image.yaml,2
4741,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels.",tf.summary.audio.yaml,2
4742,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
4743,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,2
4744,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor` with rank `k`, when `d_lower == d_upper`, or `k + 1`, otherwise.",tf.linalg.set_diag.yaml,2
4745,641,0.0017551557700745941,16,"frozenset({'k', 'tensor'})","A `Tensor` with rank `k + 1`, where `k >= 1`.",tf.linalg.set_diag.yaml,2
4746,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
4747,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",A 1-D tensor of 2 elements containing the size of the glimpses to extract.,tf.compat.v1.image.extract_glimpse.yaml,3
4748,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
4749,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
4750,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",A 1-D tensor of 2 elements containing the size of the glimpses to extract.,tf.image.extract_glimpse.yaml,3
4751,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",N-D `Tensor` containing a sorted sequence.,tf.searchsorted.yaml,3
4752,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,3
4753,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
4754,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
4755,668,0.0017551557700745941,10,"frozenset({'containing', 'tensor', 'd'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,3
4756,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.diag_part.yaml,3
4757,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,3
4758,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,3
4759,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,3
4760,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","A single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv1D.yaml,3
4761,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A single integer specifying the spatial dimensions of the filters.,tf.keras.layers.SeparableConv1D.yaml,3
4762,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A single integer specifying the strides of the convolution.,tf.keras.layers.SeparableConv1D.yaml,3
4763,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
4764,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.shared_embeddings.yaml,3
4765,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.diag.yaml,3
4766,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column.,tf.compat.v1.tpu.experimental.embedding_column.yaml,3
4767,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.feature_column.embedding_column.yaml,3
4768,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,3
4769,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,3
4770,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",A string specifying how to reduce if there are multiple entries in a single row.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,3
4771,700,0.0017551557700745941,16,"frozenset({'single', 'SOME_DTYPE', 'specifying'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.set_diag.yaml,3
4772,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
4773,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
4774,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,3
4775,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,3
4776,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,3
4777,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,3
4778,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,3
4779,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
4780,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
4781,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,3
4782,675,0.0017551557700745941,11,"frozenset({'elements', 'tensor', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
4783,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
4784,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4785,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4786,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4787,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.estimator.regressor_parse_example_spec.yaml,2
4788,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.regressor_parse_example_spec.yaml,2
4789,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
4790,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.keras.layers.BatchNormalization.yaml,2
4791,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
4792,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
4793,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column.,tf.feature_column.numeric_column.yaml,2
4794,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.estimator.classifier_parse_example_spec.yaml,2
4795,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
4796,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.classifier_parse_example_spec.yaml,2
4797,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
4798,695,0.0017551557700745941,16,"frozenset({'example', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
4799,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,3
4800,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,3
4801,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,3
4802,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,3
4803,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,3
4804,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,3
4805,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,3
4806,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,3
4807,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})","`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.batch_to_space.yaml,3
4808,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,3
4809,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})",Specifies the dimension index at which to expand the shape of `input`.,tf.compat.v1.expand_dims.yaml,3
4810,521,0.0017551557700745941,12,"frozenset({'input', 'dimension', 'specifies'})",Specifies the dimension index at which to expand the shape of `input`.,tf.sparse.expand_dims.yaml,3
4811,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,4
4812,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,4
4813,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
4814,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
4815,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,4
4816,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,4
4817,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,4
4818,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,4
4819,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,4
4820,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
4821,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
4822,604,0.0017551557700745941,12,"frozenset({'d', 'tensor', 'SOME_DTYPE', 'vector'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,4
4823,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","An optional `string` from `""NWC"", ""NCW""`.",tf.nn.conv1d.yaml,2
4824,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","An optional `string` from `""NWC"", ""NCW""`.",tf.compat.v1.nn.conv1d.yaml,2
4825,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.with_space_to_batch.yaml,2
4826,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.conv_transpose.yaml,2
4827,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.avg_pool.yaml,2
4828,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.avg_pool1d.yaml,2
4829,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.max_pool1d.yaml,2
4830,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.convolution.yaml,2
4831,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})",`'NWC'` and `'NCW'` are supported.,tf.nn.conv1d_transpose.yaml,2
4832,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
4833,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.compat.v1.nn.pool.yaml,2
4834,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.compat.v1.nn.convolution.yaml,2
4835,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})"," For N=1, the valid values are ""NWC"" (default) and ""NCW"".",tf.nn.pool.yaml,2
4836,233,0.0017551557700745941,14,"frozenset({'ncw', 'nwc'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.max_pool.yaml,2
4837,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","string, name of the directory to be created",tf.io.gfile.mkdir.yaml,2
4838,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","string, name of the directory to be created",tf.io.gfile.makedirs.yaml,2
4839,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4840,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",Boolean controlling whether the scope should be created when the template is constructed or when the template is called.,tf.compat.v1.make_template.yaml,2
4841,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
4842,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",Python `str` prefixed to ops created by this function.,tf.linalg.pinv.yaml,2
4843,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
4844,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","string, name of the directory to be created",tf.compat.v1.gfile.MkDir.yaml,2
4845,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",The maximum number of shards in int created taking precedence over `max_shard_bytes`.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
4846,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
4847,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",Python `str` prefixed to ops created by this function.,tf.linalg.matrix_rank.yaml,2
4848,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
4849,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})","string, name of the directory to be created",tf.compat.v1.gfile.MakeDirs.yaml,2
4850,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A boolean specifying whether the placeholder to be created is ragged.,tf.keras.Input.yaml,2
4851,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A boolean specifying whether the placeholder to be created is sparse.,tf.keras.Input.yaml,2
4852,513,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'created'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
4853,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","An integer, the axis to compute the product.",tf.keras.backend.prod.yaml,3
4854,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,3
4855,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
4856,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","An integer, the axis to compute the product.",tf.keras.backend.cumprod.yaml,3
4857,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","An integer, the axis to compute the sum.",tf.keras.backend.cumsum.yaml,3
4858,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","An integer, the axis to compute the standard deviation.",tf.keras.backend.std.yaml,3
4859,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","An integer, the axis to compute the variance.",tf.keras.backend.var.yaml,3
4860,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,3
4861,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
4862,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,3
4863,483,0.0017551557700745941,11,"frozenset({'axis', 'SOME_DTYPE', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
4864,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.classification_signature_def.yaml,3
4865,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,3
4866,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,3
4867,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A scalar string Tensor, a single serialized Example.",tf.compat.v1.parse_single_example.yaml,3
4868,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,3
4869,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
4870,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,3
4871,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
4872,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,3
4873,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,3
4874,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.regression_signature_def.yaml,3
4875,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})",the string Tensor holding one or more serialized `Summary` protobufs,tf.summary.experimental.write_raw_pb.yaml,3
4876,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,3
4877,359,0.0017551557700745941,14,"frozenset({'serialized', 'tensor', 'SOME_DTYPE'})","A scalar string Tensor, a single serialized Example.",tf.io.parse_single_example.yaml,3
4878,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4879,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
4880,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
4881,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4882,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_k.yaml,2
4883,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","An `int32` `SparseTensor`.`labels.indices[i, :] == [b, t]` means `labels.values[i]` stores the id for (batch b, time t).",tf.compat.v1.nn.ctc_loss.yaml,2
4884,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
4885,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4886,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_k.yaml,2
4887,213,0.0017551557700745941,10,"frozenset({'id', 'SOME_DTYPE'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
4888,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
4889,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
4890,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
4891,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
4892,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
4893,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
4894,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
4895,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
4896,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
4897,218,0.0017551557700745941,10,"frozenset({'compatible', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
4898,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",The maximum scalar value possibly produced for the input.,tf.quantization.dequantize.yaml,2
4899,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","int, maximum length of a line, includes indentation.",tf.compat.v1.flags.text_wrap.yaml,2
4900,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
4901,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","`int`, maximum number of training steps with no increase in the given metric.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
4902,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","`int`, maximum number of training steps with no decrease in the given metric.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
4903,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
4904,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","An integer, the axis to find maximum values.",tf.keras.backend.max.yaml,2
4905,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
4906,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","Int, maximum length of all sequences.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
4907,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","bool, if `False`, will pad dimensions with unknown size to maximum length in batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
4908,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})","Int, maximum possible word index + 1",tf.keras.preprocessing.sequence.skipgrams.yaml,2
4909,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",The maximum number of shards in int created taking precedence over `max_shard_bytes`.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
4910,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
4911,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar representing maximum number of boxes retained over all classes.,tf.image.combined_non_max_suppression.yaml,2
4912,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
4913,486,0.0017551557700745941,16,"frozenset({'SOME_DTYPE', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
4914,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""sum"" the default for linear model.",tf.compat.v1.feature_column.linear_model.yaml,3
4915,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","""sum"": do not normalize features in the column""mean"": do l1 normalization on features in the column""sqrtn"": do l2 normalization on features in the column ",tf.compat.v1.feature_column.linear_model.yaml,3
4916,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})"," One of ""mean"", ""sqrtn"", and ""sum"".",tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,3
4917,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
4918,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.feature_column.shared_embeddings.yaml,3
4919,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.feature_column.embedding_column.yaml,3
4920,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported.",tf.nn.embedding_lookup_sparse.yaml,3
4921,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",tf.nn.safe_embedding_lookup_sparse.yaml,3
4922,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,3
4923,221,0.0017551557700745941,10,"frozenset({'sum', 'mean', 'sqrtn'})","Currently ""mean"", ""sqrtn"" and ""sum"" are supported.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
4924,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.data.experimental.make_csv_dataset.yaml,2
4925,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Recommended value is the number of batches consumed per training step.,tf.data.experimental.make_csv_dataset.yaml,2
4926,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4927,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Recommended value is the number of batches consumed per training step.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4928,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Number of scheduling threads for processing batches of work.,tf.nondifferentiable_batch_function.yaml,2
4929,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Determines the number of batches processed in parallel.,tf.nondifferentiable_batch_function.yaml,2
4930,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Number of feature batches to prefetch in order to improve performance.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4931,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Recommended value is the number of batches consumed per training step.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4932,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Number of feature batches to prefetch in order to improve performance.,tf.data.experimental.make_batched_features_dataset.yaml,2
4933,231,0.0017551557700745941,10,"frozenset({'batches', 'number'})",Recommended value is the number of batches consumed per training step.,tf.data.experimental.make_batched_features_dataset.yaml,2
4934,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
4935,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","Boolean, if `True` the weights of this layer will be marked as trainable (and listed in `layer.trainable_weights`).",tf.keras.layers.SeparableConv1D.yaml,2
4936,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
4937,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
4938,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","A string specifying the partitioning strategy, relevant if `len(weights) > 1`.",tf.compat.v1.nn.nce_loss.yaml,2
4939,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.shared_embeddings.yaml,2
4940,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","A string specifying the partitioning strategy, relevant if `len(weights) > 1`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
4941,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","Type of weights, such as `tf.float32`.",tf.feature_column.weighted_categorical_column.yaml,2
4942,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",Only float and integer weights are supported.,tf.feature_column.weighted_categorical_column.yaml,2
4943,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.embedding_column.yaml,2
4944,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1.",tf.nn.embedding_lookup_sparse.yaml,2
4945,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.nn.safe_embedding_lookup_sparse.yaml,2
4946,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
4947,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",String representing checkpoint name/pattern from which to restore column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
4948,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})","either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
4949,492,0.0017551557700745941,16,"frozenset({'weights', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
4950,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
4951,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.sequence_numeric_column.yaml,2
4952,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
4953,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
4954,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
4955,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
4956,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
4957,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4958,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
4959,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
4960,224,0.0017551557700745941,11,"frozenset({'parsing', 'tensor'})","If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing.",tf.feature_column.numeric_column.yaml,2
4961,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
4962,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
4963,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A value that can be converted to a `tf.DType` object.,tf.dtypes.as_dtype.yaml,2
4964,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
4965,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.data.experimental.Structure` object representing the structure of each element in the dataset.,tf.data.experimental.from_variant.yaml,2
4966,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.compat.v1.data.Iterator` object.,tf.data.experimental.get_next_as_optional.yaml,2
4967,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",Optional `tf.saved_model.SaveOptions` object that specifies options for saving to SavedModel.,tf.keras.models.save_model.yaml,2
4968,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.distribute.Strategy` object or None.,tf.distribute.experimental_set_strategy.yaml,2
4969,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`.",tf.compat.v1.keras.estimator.model_to_estimator.yaml,2
4970,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.estimator.Estimator` object.,tf.estimator.add_metrics.yaml,2
4971,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`.",tf.keras.estimator.model_to_estimator.yaml,2
4972,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.data.Dataset` object containing a single element.,tf.data.experimental.get_single_element.yaml,2
4973,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
4974,560,0.001645458534444932,15,"frozenset({'tf', 'object'})","Optional, `tf.saved_model.SaveOptions` object that specifies options for saving.",tf.saved_model.save.yaml,2
4975,560,0.001645458534444932,15,"frozenset({'tf', 'object'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
4976,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
4977,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,3
4978,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
4979,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,3
4980,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,3
4981,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.gradients.yaml,3
4982,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.gradients.yaml,3
4983,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
4984,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.hessians.yaml,3
4985,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
4986,862,0.001645458534444932,11,"frozenset({'tensor', 'used', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,3
4987,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,3
4988,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","A callable that takes inputs `(time, cell_output, cell_state, loop_state)` and returns the tuple `(finished, next_input, next_cell_state, emit_output, next_loop_state)`.",tf.compat.v1.nn.raw_rnn.yaml,3
4989,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,3
4990,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,3
4991,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,3
4992,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,3
4993,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
4994,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,3
4995,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,3
4996,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,3
4997,645,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'returns', 'SOME_STRUCTURE'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,3
4998,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
4999,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
5000,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
5001,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
5002,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5003,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5004,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
5005,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
5006,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",a list of vectors containing the example state data.,tf.compat.v1.train.sdca_optimizer.yaml,2
5007,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
5008,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
5009,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
5010,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
5011,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
5012,824,0.001645458534444932,15,"frozenset({'data', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
5013,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
5014,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
5015,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
5016,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool2d.yaml,2
5017,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5018,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.avg_pool1d.yaml,2
5019,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",The shape format of the `inputs` Tensors.,tf.compat.v1.nn.ctc_loss.yaml,2
5020,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
5021,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A 5-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool3d.yaml,2
5022,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool1d.yaml,2
5023,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
5024,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.compat.v1.nn.max_pool.yaml,2
5025,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",The shape format of the `inputs` and `outputs` Tensors.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
5026,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
5027,698,0.001645458534444932,15,"frozenset({'format', 'tensor'})",A string template to format tensor values into.,tf.strings.format.yaml,2
5028,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,4
5029,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,4
5030,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,4
5031,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,4
5032,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,4
5033,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,4
5034,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,4
5035,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,4
5036,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,4
5037,489,0.001645458534444932,10,"frozenset({'array', 'tensor', 'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,4
5038,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher rank.,tf.image.rgb_to_hsv.yaml,2
5039,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,2
5040,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher rank.,tf.image.hsv_to_rgb.yaml,2
5041,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",2-D or higher rank.,tf.image.yiq_to_rgb.yaml,2
5042,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",2-D or higher rank.,tf.image.yuv_to_rgb.yaml,2
5043,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher.,tf.tile.yaml,2
5044,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,2
5045,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,2
5046,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",2-D or higher rank.,tf.image.rgb_to_yiq.yaml,2
5047,211,0.001645458534444932,10,"frozenset({'d', 'higher'})",2-D or higher rank.,tf.image.rgb_to_yuv.yaml,2
5048,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,3
5049,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,3
5050,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,3
5051,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,3
5052,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,3
5053,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,3
5054,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,3
5055,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,3
5056,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,3
5057,836,0.001645458534444932,10,"frozenset({'optional', 'variable', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,3
5058,925,0.001645458534444932,15,"frozenset({'input', 'd'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
5059,925,0.001645458534444932,15,"frozenset({'input', 'd'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
5060,925,0.001645458534444932,15,"frozenset({'input', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
5061,925,0.001645458534444932,15,"frozenset({'input', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,2
5062,925,0.001645458534444932,15,"frozenset({'input', 'd'})",A 4D input Tensor.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
5063,925,0.001645458534444932,15,"frozenset({'input', 'd'})","Given an input of D dimensions, `axis` must be in range`[-(D+1), D]` (inclusive).",tf.expand_dims.yaml,2
5064,925,0.001645458534444932,15,"frozenset({'input', 'd'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
5065,925,0.001645458534444932,15,"frozenset({'input', 'd'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
5066,925,0.001645458534444932,15,"frozenset({'input', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,2
5067,925,0.001645458534444932,15,"frozenset({'input', 'd'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
5068,925,0.001645458534444932,15,"frozenset({'input', 'd'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
5069,925,0.001645458534444932,15,"frozenset({'input', 'd'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5070,925,0.001645458534444932,15,"frozenset({'input', 'd'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5071,925,0.001645458534444932,15,"frozenset({'input', 'd'})",A 4D input Tensor.,tf.nn.batch_norm_with_global_normalization.yaml,2
5072,925,0.001645458534444932,15,"frozenset({'input', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,2
5073,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,5
5074,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,5
5075,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
5076,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,5
5077,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,5
5078,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,5
5079,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,5
5080,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,5
5081,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, depthwise_multiplier]`.",tf.nn.depthwise_conv2d_backprop_input.yaml,5
5082,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,5
5083,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
5084,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.depthwise_conv2d.yaml,5
5085,272,0.001645458534444932,13,"frozenset({'in_channels', 'shape', 'filter_width', 'filter_height', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.depthwise_conv2d.yaml,5
5086,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Number of the elements in the vocabulary.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
5087,674,0.001645458534444932,15,"frozenset({'elements', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
5088,674,0.001645458534444932,15,"frozenset({'elements', 'number'})","An `int`, number of top elements to consider.",tf.keras.backend.in_top_k.yaml,2
5089,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Number of the elements in the vocabulary.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
5090,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Max number of batch elements to generate images for.,tf.compat.v1.summary.image2.yaml,2
5091,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Number of the elements in the vocabulary.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
5092,674,0.001645458534444932,15,"frozenset({'elements', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
5093,674,0.001645458534444932,15,"frozenset({'elements', 'number'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
5094,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Number of top elements to look at for computing precision.,tf.compat.v1.math.in_top_k.yaml,2
5095,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",(Optional.) The number of elements to buffer on `device`.,tf.data.experimental.prefetch_to_device.yaml,2
5096,674,0.001645458534444932,15,"frozenset({'elements', 'number'})", Number of top elements to look for along the last dimension (along each row for matrices).,tf.math.top_k.yaml,2
5097,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Number of top elements to look at for computing precision.,tf.math.in_top_k.yaml,2
5098,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",Max number of batch elements to generate audio for.,tf.compat.v1.summary.audio2.yaml,2
5099,674,0.001645458534444932,15,"frozenset({'elements', 'number'})",`shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`.,tf.roll.yaml,2
5100,674,0.001645458534444932,15,"frozenset({'elements', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
5101,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,2
5102,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","A value of `None` means ""infer the input shape from the shapes in `inputs`"".",tf.math.accumulate_n.yaml,2
5103,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","In this case, values of 'None' in the 'shape' argument represent ragged dimensions.",tf.keras.backend.placeholder.yaml,2
5104,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,2
5105,872,0.001645458534444932,15,"frozenset({'none', 'shape'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
5106,872,0.001645458534444932,15,"frozenset({'none', 'shape'})",None or a vector representing the new shape for the returned`SparseTensor`.,tf.sparse.reset_shape.yaml,2
5107,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
5108,872,0.001645458534444932,15,"frozenset({'none', 'shape'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
5109,872,0.001645458534444932,15,"frozenset({'none', 'shape'})",`len(repeats)`must equal `input.shape[axis]` if axis is not None.,tf.repeat.yaml,2
5110,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","If non-None, must be the same shape as arr.",tf.compat.v1.bincount.yaml,2
5111,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,2
5112,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.nn.safe_embedding_lookup_sparse.yaml,2
5113,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","In this case, values of 'None' in the 'shape' argument represent ragged dimensions.",tf.keras.Input.yaml,2
5114,872,0.001645458534444932,15,"frozenset({'none', 'shape'})",Elements of this tuple can be None; 'None' elements represent dimensions where the shape is not known.,tf.keras.Input.yaml,2
5115,872,0.001645458534444932,15,"frozenset({'none', 'shape'})","If non-None, must be the same shape as arr.",tf.math.bincount.yaml,2
5116,911,0.001645458534444932,15,"frozenset({'input', 'one'})",One item per selected column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
5117,911,0.001645458534444932,15,"frozenset({'input', 'one'})",One per column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
5118,911,0.001645458534444932,15,"frozenset({'input', 'one'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
5119,911,0.001645458534444932,15,"frozenset({'input', 'one'})","One of `""valid""`, `""causal""` or `""same""` (case-insensitive).`""causal""` results in causal (dilated) convolutions, e.g. output[t] does not depend on input[t+1:].",tf.keras.layers.Conv1D.yaml,2
5120,911,0.001645458534444932,15,"frozenset({'input', 'one'})","If true, then ensure that at least one ngram is generated for each input sequence.",tf.strings.ngrams.yaml,2
5121,911,0.001645458534444932,15,"frozenset({'input', 'one'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
5122,911,0.001645458534444932,15,"frozenset({'input', 'one'})",One item per selected column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5123,911,0.001645458534444932,15,"frozenset({'input', 'one'})",One per column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5124,911,0.001645458534444932,15,"frozenset({'input', 'one'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
5125,911,0.001645458534444932,15,"frozenset({'input', 'one'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_rotation.yaml,2
5126,911,0.001645458534444932,15,"frozenset({'input', 'one'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_zoom.yaml,2
5127,911,0.001645458534444932,15,"frozenset({'input', 'one'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
5128,911,0.001645458534444932,15,"frozenset({'input', 'one'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shear.yaml,2
5129,911,0.001645458534444932,15,"frozenset({'input', 'one'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
5130,911,0.001645458534444932,15,"frozenset({'input', 'one'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shift.yaml,2
5131,820,0.001645458534444932,15,"frozenset({'use', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,2
5132,820,0.001645458534444932,15,"frozenset({'use', 'name'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
5133,820,0.001645458534444932,15,"frozenset({'use', 'name'})"," Note that this has no effect on the set of variables that is warm-started, and only controls name mapping (use `vars_to_warm_start` for controlling what variables to warm-start).",tf.compat.v1.train.warm_start.yaml,2
5134,820,0.001645458534444932,15,"frozenset({'use', 'name'})",The device name to use in the context.,tf.device.yaml,2
5135,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.gradients.yaml,2
5136,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.gradients.yaml,2
5137,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
5138,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.hessians.yaml,2
5139,820,0.001645458534444932,15,"frozenset({'use', 'name'})","Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`.",tf.compat.v1.keras.estimator.model_to_estimator.yaml,2
5140,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
5141,820,0.001645458534444932,15,"frozenset({'use', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,2
5142,820,0.001645458534444932,15,"frozenset({'use', 'name'})","Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`.",tf.keras.estimator.model_to_estimator.yaml,2
5143,820,0.001645458534444932,15,"frozenset({'use', 'name'})",The prefix to use on all names created within the name scope.,tf.keras.backend.name_scope.yaml,2
5144,820,0.001645458534444932,15,"frozenset({'use', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
5145,820,0.001645458534444932,15,"frozenset({'use', 'name'})",The device name or function to use in the context.,tf.compat.v1.device.yaml,2
5146,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,5
5147,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,5
5148,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,5
5149,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,5
5150,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,5
5151,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,5
5152,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,5
5153,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,5
5154,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,5
5155,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,5
5156,857,0.001645458534444932,11,"frozenset({'SOME_DTYPE', 'shape', 'batch', 'd', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,5
5157,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,3
5158,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,3
5159,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,3
5160,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,3
5161,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
5162,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,3
5163,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
5164,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
5165,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,3
5166,847,0.001645458534444932,10,"frozenset({'input', 'output', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
5167,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
5168,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.feature_column.categorical_column_with_hash_bucket.yaml,2
5169,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.strings.to_hash_bucket_strong.yaml,2
5170,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
5171,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.strings.to_hash_bucket.yaml,2
5172,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.compat.v1.string_to_hash_bucket.yaml,2
5173,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
5174,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
5175,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.feature_column.crossed_column.yaml,2
5176,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
5177,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.strings.to_hash_bucket_fast.yaml,2
5178,201,0.001645458534444932,12,"frozenset({'number', 'buckets'})",The number of buckets.,tf.feature_column.sequence_categorical_column_with_hash_bucket.yaml,2
5179,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",This can not be specified with a positive`num_oov_buckets`.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
5180,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",A positive `num_oov_buckets` can not be specified with`default_value`.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
5181,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",This can not be specified with a positive`num_oov_buckets`.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,3
5182,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",A positive `num_oov_buckets` can not be specified with`default_value`.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,3
5183,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",This can not be specified with a positive`num_oov_buckets`.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
5184,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",A positive `num_oov_buckets` can not be specified with `default_value`.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
5185,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",This can not be specified with a positive`num_oov_buckets`.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
5186,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",A positive `num_oov_buckets` can not be specified with`default_value`.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
5187,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",This can not be specified with a positive`num_oov_buckets`.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,3
5188,206,0.001645458534444932,10,"frozenset({'specified', 'positive', 'num_oov_buckets'})",A positive `num_oov_buckets` can not be specified with `default_value`.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,3
5189,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
5190,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
5191,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
5192,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
5193,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
5194,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
5195,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5196,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5197,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
5198,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
5199,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
5200,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.compat.v1.decode_csv.yaml,2
5201,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
5202,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
5203,589,0.001645458534444932,15,"frozenset({'column', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.io.decode_csv.yaml,2
5204,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_greater.yaml,5
5205,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_less.yaml,5
5206,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Float or complex `Tensor`, same `dtype` as, and broadcastable to, `x`.",tf.compat.v1.assert_near.yaml,5
5207,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_equal.yaml,5
5208,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_greater_equal.yaml,5
5209,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_greater.yaml,5
5210,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_less.yaml,5
5211,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_none_equal.yaml,5
5212,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_none_equal.yaml,5
5213,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_greater_equal.yaml,5
5214,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_equal.yaml,5
5215,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_less_equal.yaml,5
5216,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_less_equal.yaml,5
5217,594,0.001645458534444932,14,"frozenset({'dtype', 'SOME_DTYPE', 'x', 'broadcastable', 'tensor'})","Float or complex `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_near.yaml,5
5218,755,0.001645458534444932,15,"frozenset({'type', 'returned'})","String, data type of returned Keras variable.",tf.keras.backend.ones.yaml,2
5219,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",A type for the returned `Tensor`.,tf.zeros_like.yaml,2
5220,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",A type for the returned `Tensor`.,tf.compat.v1.ones_like.yaml,2
5221,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",A type for the returned `Tensor`.,tf.ones_like.yaml,2
5222,755,0.001645458534444932,15,"frozenset({'type', 'returned'})", The type of elements for the returned `RaggedTensor`.,tf.compat.v1.ragged.constant_value.yaml,2
5223,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
5224,755,0.001645458534444932,15,"frozenset({'type', 'returned'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
5225,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
5226,755,0.001645458534444932,15,"frozenset({'type', 'returned'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
5227,755,0.001645458534444932,15,"frozenset({'type', 'returned'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
5228,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",The type of elements for the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
5229,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",A type for the returned `Tensor`.,tf.compat.v1.zeros_like.yaml,2
5230,755,0.001645458534444932,15,"frozenset({'type', 'returned'})","String, data type of returned Keras variable.",tf.keras.backend.eye.yaml,2
5231,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
5232,755,0.001645458534444932,15,"frozenset({'type', 'returned'})",data type of returned Keras variable,tf.keras.backend.zeros.yaml,2
5233,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.image.draw_bounding_boxes.yaml,4
5234,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.space_to_batch.yaml,4
5235,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,4
5236,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,4
5237,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,4
5238,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.image.draw_bounding_boxes.yaml,4
5239,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,4
5240,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.erosion2d.yaml,4
5241,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.dilation2d.yaml,4
5242,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,4
5243,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,4
5244,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,4
5245,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,4
5246,523,0.001645458534444932,14,"frozenset({'d', 'shape', 'depth', 'batch'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,4
5247,895,0.001645458534444932,15,"frozenset({'tf', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
5248,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",By default it is`tf.int64`.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
5249,895,0.001645458534444932,15,"frozenset({'tf', 'default'})","By default default_value is none, which means`tf.parse_example` will error out if there is any missing label.",tf.estimator.regressor_parse_example_spec.yaml,2
5250,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",By default it is`tf.float32`.,tf.estimator.regressor_parse_example_spec.yaml,2
5251,895,0.001645458534444932,15,"frozenset({'tf', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
5252,895,0.001645458534444932,15,"frozenset({'tf', 'default'})", Default is `tf.int32`.,tf.searchsorted.yaml,2
5253,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
5254,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
5255,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",Default is`tf.float32`.,tf.ones.yaml,2
5256,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column.,tf.feature_column.numeric_column.yaml,2
5257,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",Default value is `tf.float32`.,tf.feature_column.numeric_column.yaml,2
5258,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",By default it is`tf.int64`.,tf.estimator.classifier_parse_example_spec.yaml,2
5259,895,0.001645458534444932,15,"frozenset({'tf', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
5260,895,0.001645458534444932,15,"frozenset({'tf', 'default'})","By default default_value is none, which means`tf.parse_example` will error out if there is any missing label.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
5261,895,0.001645458534444932,15,"frozenset({'tf', 'default'})",By default it is`tf.float32`.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
5262,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})",The default is -1 which indicates the last dimension.,tf.keras.backend.softmax.yaml,3
5263,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,3
5264,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,3
5265,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})",The default is -1 which indicates the last dimension.,tf.compat.v1.math.softmax.yaml,3
5266,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})",The default is -1 which indicates the last dimension.,tf.nn.softmax.yaml,3
5267,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,3
5268,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,3
5269,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,3
5270,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,3
5271,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})",The default is -1 which indicates the last dimension.,tf.nn.log_softmax.yaml,3
5272,607,0.001645458534444932,11,"frozenset({'last', 'dimension', 'default'})",The default is -1 which indicates the last dimension.,tf.compat.v1.math.log_softmax.yaml,3
5273,751,0.001645458534444932,15,"frozenset({'value', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
5274,751,0.001645458534444932,15,"frozenset({'value', 'range'})","Must be in the range `[-rank(value), rank(value))`.",tf.split.yaml,2
5275,751,0.001645458534444932,15,"frozenset({'value', 'range'})","A scalar value in range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
5276,751,0.001645458534444932,15,"frozenset({'value', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
5277,751,0.001645458534444932,15,"frozenset({'value', 'range'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim_multiscale.yaml,2
5278,751,0.001645458534444932,15,"frozenset({'value', 'range'})","Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
5279,751,0.001645458534444932,15,"frozenset({'value', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
5280,751,0.001645458534444932,15,"frozenset({'value', 'range'})","If set, values outside of range `[0, num_buckets)` will be replaced with this value.",tf.feature_column.categorical_column_with_identity.yaml,2
5281,751,0.001645458534444932,15,"frozenset({'value', 'range'})","If None, defaults to the value of `start` while the first entry of the range defaults to 0.",tf.range.yaml,2
5282,751,0.001645458534444932,15,"frozenset({'value', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
5283,751,0.001645458534444932,15,"frozenset({'value', 'range'})","Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",tf.image.ssim.yaml,2
5284,751,0.001645458534444932,15,"frozenset({'value', 'range'})","A scalar value in range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
5285,751,0.001645458534444932,15,"frozenset({'value', 'range'})",The maximum value of the quantization range.,tf.quantization.quantize.yaml,2
5286,751,0.001645458534444932,15,"frozenset({'value', 'range'})",The minimum value of the quantization range.,tf.quantization.quantize.yaml,2
5287,751,0.001645458534444932,15,"frozenset({'value', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
5288,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_bool.yaml,3
5289,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
5290,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_enum.yaml,3
5291,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_spaceseplist.yaml,3
5292,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_multi.yaml,3
5293,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","help: str, the help message.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
5294,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_float.yaml,3
5295,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_integer.yaml,3
5296,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
5297,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
5298,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_multi_string.yaml,3
5299,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_list.yaml,3
5300,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE.yaml,3
5301,200,0.001645458534444932,14,"frozenset({'message', 'help', 'SOME_DTYPE'})","str, the help message.",tf.compat.v1.flags.DEFINE_enum_class.yaml,3
5302,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,3
5303,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,3
5304,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,3
5305,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})","A nested structure of tensors, representing the initial state of the accumulator.",tf.data.experimental.scan.yaml,3
5306,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})","It accepts one argument, which will have the same (possibly nested) structure as `elems`, and returns a possibly nested structure of Tensors and Operations, which may be different than the structure of `elems`.",tf.vectorized_map.yaml,3
5307,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})", It should be a (possibly nested) tuple structure of tensors.,tf.compat.v1.nn.raw_rnn.yaml,3
5308,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,3
5309,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",function `f(*x)` that returns a `Tensor` or nested structure of `Tensor`outputs.,tf.grad_pass_through.yaml,3
5310,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,3
5311,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,3
5312,481,0.001645458534444932,11,"frozenset({'tensor', 'structure', 'nested'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,3
5313,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
5314,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.linalg.normalize.yaml,2
5315,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",See the description of `axis`on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.linalg.normalize.yaml,2
5316,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,2
5317,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
5318,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.norm.yaml,2
5319,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.norm.yaml,2
5320,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
5321,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.compat.v1.norm.yaml,2
5322,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.compat.v1.norm.yaml,2
5323,186,0.001645458534444932,11,"frozenset({'tensor', 'matrices'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,2
5324,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer's variables will be updated via gradient descent during training.",tf.compat.v1.keras.layers.DenseFeatures.yaml,2
5325,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv3D.yaml,2
5326,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv1D.yaml,2
5327,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})",An int indicating the dimension of the logit layer.,tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,2
5328,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})",Iterable of integer number of hidden units per layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
5329,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})",An int indicating the dimension of the logit layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
5330,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","A string, the name of the layer.",tf.keras.layers.SeparableConv1D.yaml,2
5331,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, if `True` the weights of this layer will be marked as trainable (and listed in `layer.trainable_weights`).",tf.keras.layers.SeparableConv1D.yaml,2
5332,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer uses a bias.",tf.keras.layers.SeparableConv1D.yaml,2
5333,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.SeparableConv2D.yaml,2
5334,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv2D.yaml,2
5335,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","Boolean, whether the layer's variables will be updated via gradient descent during training.",tf.keras.experimental.SequenceFeatures.yaml,2
5336,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})",Callable to be used to clone each layer in the target model (except `InputLayer` instances).,tf.keras.models.clone_model.yaml,2
5337,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})","If unspecified, this callable defaults to the following serialization/deserialization function:`lambda layer: layer.__class__.from_config(layer.get_config())`.",tf.keras.models.clone_model.yaml,2
5338,509,0.001645458534444932,15,"frozenset({'layer', 'SOME_DTYPE'})",An optional name string for the layer.,tf.keras.Input.yaml,2
5339,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_csv_dataset.yaml,2
5340,800,0.001645458534444932,15,"frozenset({'false', 'true'})","Otherwise, at most one flag can be True, and it is valid for all flags to be False.",tf.compat.v1.flags.mark_bool_flags_as_mutual_exclusive.yaml,2
5341,800,0.001645458534444932,15,"frozenset({'false', 'true'})","True, False or None.",tf.compat.v1.experimental.output_all_intermediates.yaml,2
5342,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
5343,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
5344,800,0.001645458534444932,15,"frozenset({'false', 'true'})",Defaults to False (will later change to True).,tf.compat.v1.get_local_variable.yaml,2
5345,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_batched_features_dataset.yaml,2
5346,800,0.001645458534444932,15,"frozenset({'false', 'true'})","can be True, False, a bool Tensor, or a callable providing such.",tf.summary.record_if.yaml,2
5347,800,0.001645458534444932,15,"frozenset({'false', 'true'})",Defaults to False (will later change to True).,tf.compat.v1.get_variable.yaml,2
5348,800,0.001645458534444932,15,"frozenset({'false', 'true'})","bool, Traverse pre order if True, post order if False.",tf.io.gfile.walk.yaml,2
5349,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If true, the inputs and outputs will be in shape`(timesteps, batch, ...)`, whereas in the False case, it will be`(batch, timesteps, ...)`.",tf.keras.backend.rnn.yaml,2
5350,800,0.001645458534444932,15,"frozenset({'false', 'true'})","If True, the output for masked timestep will be zeros, whereas in the False case, output from previous timestep is returned.",tf.keras.backend.rnn.yaml,2
5351,800,0.001645458534444932,15,"frozenset({'false', 'true'})",Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,tf.config.experimental.set_synchronous_execution.yaml,2
5352,800,0.001645458534444932,15,"frozenset({'false', 'true'})","bool, Traverse in order if True, post order if False.",tf.compat.v1.gfile.Walk.yaml,2
5353,800,0.001645458534444932,15,"frozenset({'false', 'true'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
5354,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
5355,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
5356,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
5357,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","(Boolean.) If True, the function should be considered stateful.",tf.compat.v1.py_func.yaml,2
5358,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
5359,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
5360,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
5361,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
5362,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
5363,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",tf.nest.assert_same_structure.yaml,2
5364,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
5365,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
5366,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})","stateful (bool): If True, the function should be considered stateful.",tf.numpy_function.yaml,2
5367,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
5368,362,0.001645458534444932,15,"frozenset({'considered', 'SOME_DTYPE'})",Note: numpy arrays and strings are considered scalars.,tf.nest.pack_sequence_as.yaml,2
5369,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.mean_squared_error.yaml,5
5370,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.hinge_loss.yaml,5
5371,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",the scope for the operations performed in computing the loss.,tf.compat.v1.losses.softmax_cross_entropy.yaml,5
5372,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.sigmoid_cross_entropy.yaml,5
5373,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.huber_loss.yaml,5
5374,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.cosine_distance.yaml,5
5375,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",the scope for the operations performed in computing the loss.,tf.compat.v1.losses.compute_weighted_loss.yaml,5
5376,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",the scope for the operations performed in computing the loss.,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,5
5377,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.absolute_difference.yaml,5
5378,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.mean_pairwise_squared_error.yaml,5
5379,191,0.001645458534444932,11,"frozenset({'operations', 'performed', 'scope', 'computing', 'loss'})",The scope for the operations performed in computing the loss.,tf.compat.v1.losses.log_loss.yaml,5
5380,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
5381,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_negatives.yaml,3
5382,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
5383,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
5384,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
5385,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_positives.yaml,3
5386,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
5387,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.recall.yaml,3
5388,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
5389,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_negatives.yaml,3
5390,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
5391,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
5392,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_positives.yaml,3
5393,418,0.001645458534444932,14,"frozenset({'tensor', 'arbitrary', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.precision.yaml,3
5394,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.apply_affine_transform.yaml,2
5395,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Samples per second of the input signal used to create the spectrogram.,tf.signal.linear_to_mel_weight_matrix.yaml,2
5396,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_rotation.yaml,2
5397,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split_with_offsets.yaml,2
5398,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_zoom.yaml,2
5399,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode_with_offsets.yaml,2
5400,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`.,tf.strings.unicode_transcode.yaml,2
5401,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement character codepoint to be used in place of any invalid input when `errors='replace'`.,tf.strings.unicode_encode.yaml,2
5402,863,0.001645458534444932,15,"frozenset({'input', 'used'})",an input generator that can be used to generate input samples for the model.,tf.lite.RepresentativeDataset.yaml,2
5403,863,0.001645458534444932,15,"frozenset({'input', 'used'})","In case of variable length input, it is used for masking in case there's no mask specified.",tf.keras.backend.rnn.yaml,2
5404,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shear.yaml,2
5405,863,0.001645458534444932,15,"frozenset({'input', 'used'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
5406,863,0.001645458534444932,15,"frozenset({'input', 'used'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shift.yaml,2
5407,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split.yaml,2
5408,863,0.001645458534444932,15,"frozenset({'input', 'used'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode.yaml,2
5409,468,0.00153576129881527,14,"frozenset({'means', 'none'})","`None` means ""shard all inputs along dimension 0"".",tf.compat.v1.tpu.shard.yaml,2
5410,468,0.00153576129881527,14,"frozenset({'means', 'none'})","`None` means ""concatenate all outputs along dimension 0"".",tf.compat.v1.tpu.shard.yaml,2
5411,468,0.00153576129881527,14,"frozenset({'means', 'none'})","A value of `None` means ""infer the input shape from the shapes in `inputs`"".",tf.math.accumulate_n.yaml,2
5412,468,0.00153576129881527,14,"frozenset({'means', 'none'})","A value of `None`means ""infer the input dtype from `inputs[0]`"".",tf.math.accumulate_n.yaml,2
5413,468,0.00153576129881527,14,"frozenset({'means', 'none'})","By default default_value is none, which means`tf.parse_example` will error out if there is any missing label.",tf.estimator.regressor_parse_example_spec.yaml,2
5414,468,0.00153576129881527,14,"frozenset({'means', 'none'})","By default, `virtual_batch_size` is `None`, which means batch normalization is performed across the whole batch.",tf.keras.layers.BatchNormalization.yaml,2
5415,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
5416,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
5417,468,0.00153576129881527,14,"frozenset({'means', 'none'})","By default, `virtual_batch_size` is `None`, which means batch normalization is performed across the whole batch.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
5418,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
5419,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
5420,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
5421,468,0.00153576129881527,14,"frozenset({'means', 'none'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
5422,468,0.00153576129881527,14,"frozenset({'means', 'none'})","By default default_value is none, which means`tf.parse_example` will error out if there is any missing label.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
5423,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
5424,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.",tf.compat.v1.sparse_add.yaml,2
5425,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","Their ranks and types must match, and their sizes must match in all dimensions except `concat_dim`.",tf.quantization.quantized_concat.yaml,2
5426,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,2
5427,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","`bool`, if `True` replace all non-overlapping matches, else replace only the first match.",tf.strings.regex_replace.yaml,2
5428,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,2
5429,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
5430,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
5431,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
5432,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.",tf.sparse.add.yaml,2
5433,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
5434,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
5435,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
5436,610,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'match'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
5437,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
5438,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",The total number of depthwise convolution output channels will be equal to `num_filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv1D.yaml,2
5439,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",An initializer for the depthwise convolution kernel.,tf.keras.layers.SeparableConv1D.yaml,2
5440,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",Optional regularizer for the depthwise convolution kernel.,tf.keras.layers.SeparableConv1D.yaml,2
5441,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
5442,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv2D.yaml,2
5443,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})", The strides for the depthwise convolution for each dimension of `input`.,tf.compat.v1.nn.separable_conv2d.yaml,2
5444,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})", The strides for the depthwise convolution for each dimension of `input`.,tf.nn.separable_conv2d.yaml,2
5445,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",convolution kernel for the depthwise convolution.,tf.keras.backend.depthwise_conv2d.yaml,2
5446,178,0.00153576129881527,10,"frozenset({'depthwise', 'convolution'})",convolution kernel for the depthwise convolution.,tf.keras.backend.separable_conv2d.yaml,2
5447,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.random_uniform_variable.yaml,2
5448,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
5449,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
5450,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
5451,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
5452,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
5453,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","bool, whether to read the records in random order.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
5454,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
5455,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.random_binomial.yaml,2
5456,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.truncated_normal.yaml,2
5457,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.random_normal_variable.yaml,2
5458,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
5459,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.random_normal.yaml,2
5460,619,0.00153576129881527,14,"frozenset({'SOME_DTYPE', 'random'})","Integer, random seed.",tf.keras.backend.random_uniform.yaml,2
5461,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.feature_column.input_layer.yaml,2
5462,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to computation.",tf.compat.v1.tpu.replicate.yaml,2
5463,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.keras.layers.DenseFeatures.yaml,2
5464,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})",An iterable containing the FeatureColumns to use as inputs to your model.,tf.compat.v1.feature_column.linear_model.yaml,2
5465,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})",Iterable of `feature_column._FeatureColumn` model inputs.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
5466,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","A list of dimensions along which to shard `inputs`, or`None`.",tf.compat.v1.tpu.shard.yaml,2
5467,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
5468,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})",A list of inputs or `None` (equivalent to an empty list).,tf.xla.experimental.compile.yaml,2
5469,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to `computation`.",tf.compat.v1.tpu.batch_parallel.yaml,2
5470,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","A callable that takes inputs `(time, cell_output, cell_state, loop_state)` and returns the tuple `(finished, next_input, next_cell_state, emit_output, next_loop_state)`.",tf.compat.v1.nn.raw_rnn.yaml,2
5471,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
5472,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to `computation`.",tf.compat.v1.tpu.rewrite.yaml,2
5473,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
5474,638,0.00153576129881527,14,"frozenset({'inputs', 'SOME_STRUCTURE'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
5475,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.global_variables.yaml,2
5476,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.global_variables.yaml,2
5477,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.trainable_variables.yaml,2
5478,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.trainable_variables.yaml,2
5479,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.moving_average_variables.yaml,2
5480,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.moving_average_variables.yaml,2
5481,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.local_variables.yaml,2
5482,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.local_variables.yaml,2
5483,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied.,tf.compat.v1.model_variables.yaml,2
5484,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",The choice of `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.model_variables.yaml,2
5485,175,0.00153576129881527,11,"frozenset({'scope', 'without'})",Items without a `name` attribute are never returned if a scope is supplied and the choice or `re.match` means that a `scope` without special tokens filters by prefix.,tf.compat.v1.get_collection.yaml,2
5486,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",Optional maximum number of iterations of the while loop to run.,tf.compat.v1.while_loop.yaml,3
5487,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",The number of iterations allowed to run in parallel.,tf.compat.v1.while_loop.yaml,3
5488,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})", The number of iterations to run in parallel.,tf.compat.v1.nn.raw_rnn.yaml,3
5489,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",(optional) The number of iterations allowed to run in parallel.,tf.foldr.yaml,3
5490,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",(optional) The number of iterations allowed to run in parallel.,tf.scan.yaml,3
5491,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",Optional maximum number of iterations of the while loop to run.,tf.while_loop.yaml,3
5492,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",The number of iterations allowed to run in parallel.,tf.while_loop.yaml,3
5493,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})", The number of iterations to run in parallel.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
5494,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",(optional) The number of iterations allowed to run in parallel.,tf.foldl.yaml,3
5495,174,0.00153576129881527,10,"frozenset({'run', 'number', 'iterations'})",(optional) The number of iterations allowed to run in parallel.,tf.map_fn.yaml,3
5496,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
5497,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,2
5498,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
5499,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A list of dimensions along which to shard `inputs`, or`None`.",tf.compat.v1.tpu.shard.yaml,2
5500,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A list of dimensions along which to concatenate the outputs of `computation`, or `None`.",tf.compat.v1.tpu.shard.yaml,2
5501,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,2
5502,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
5503,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,2
5504,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
5505,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
5506,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
5507,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
5508,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
5509,661,0.00153576129881527,14,"frozenset({'along', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,2
5510,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.prod.yaml,2
5511,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.prod.yaml,2
5512,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1 for each entry in `axis`.",tf.keras.backend.mean.yaml,2
5513,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimensions are retained with length 1.",tf.keras.backend.mean.yaml,2
5514,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.max.yaml,2
5515,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.max.yaml,2
5516,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.std.yaml,2
5517,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.std.yaml,2
5518,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.min.yaml,2
5519,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.min.yaml,2
5520,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.var.yaml,2
5521,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.var.yaml,2
5522,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `False`, the rank of the tensor is reduced by 1.",tf.keras.backend.sum.yaml,2
5523,396,0.00153576129881527,14,"frozenset({'keepdims', 'reduced'})","If `keepdims` is `True`, the reduced dimension is retained with length 1.",tf.keras.backend.sum.yaml,2
5524,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed.,tf.image.random_brightness.yaml,4
5525,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,4
5526,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distribution.,tf.random.shuffle.yaml,4
5527,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distribution.,tf.random.categorical.yaml,4
5528,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed.,tf.image.random_flip_up_down.yaml,4
5529,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distribution.,tf.random.truncated_normal.yaml,4
5530,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distribution.,tf.random.normal.yaml,4
5531,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed.,tf.image.random_flip_left_right.yaml,4
5532,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distributions.,tf.random.poisson.yaml,4
5533,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distributions.,tf.compat.v1.random_poisson.yaml,4
5534,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,4
5535,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed for the distributions.,tf.random.gamma.yaml,4
5536,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed.,tf.image.random_contrast.yaml,4
5537,451,0.00153576129881527,14,"frozenset({'seed', 'random', 'used', 'create'})",Used to create a random seed.,tf.image.random_crop.yaml,4
5538,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,3
5539,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
5540,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
5541,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,3
5542,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,3
5543,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,3
5544,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,3
5545,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
5546,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
5547,765,0.00153576129881527,10,"frozenset({'either', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
5548,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
5549,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not.",tf.io.decode_image.yaml,2
5550,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hann_window.yaml,2
5551,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
5552,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",Whether or not to clear the device field for an `Operation`or `Tensor` during export.,tf.compat.v1.train.export_meta_graph.yaml,2
5553,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hamming_window.yaml,2
5554,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
5555,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
5556,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",Whether `output` is expected to be a logits tensor.,tf.keras.backend.binary_crossentropy.yaml,2
5557,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",Whether `y_pred` is expected to be a logits tensor.,tf.keras.losses.categorical_crossentropy.yaml,2
5558,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",Whether or not to clear the device field for an `Operation`or `Tensor` during import.,tf.compat.v1.train.import_meta_graph.yaml,2
5559,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
5560,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
5561,772,0.00153576129881527,14,"frozenset({'whether', 'tensor'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.nn.batch_norm_with_global_normalization.yaml,2
5562,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
5563,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","A `Tensor` of shape [..., M] or [..., M, K] and with the same dtype as`diagonals`.",tf.linalg.tridiagonal_solve.yaml,2
5564,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign_add.yaml,2
5565,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign.yaml,2
5566,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
5567,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","Unscaled log probabilities of shape `[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or `float64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
5568,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
5569,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","Per-label activations (typically a linear output) of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or`float64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
5570,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width.yaml,2
5571,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",tf.linalg.tridiagonal_matmul.yaml,2
5572,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
5573,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})","Unscaled log probabilities of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32` or`float64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
5574,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width_bins.yaml,2
5575,777,0.00153576129881527,14,"frozenset({'dtype', 'shape'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign_sub.yaml,2
5576,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds the computation to replicate.,tf.compat.v1.tpu.replicate.yaml,2
5577,781,0.00153576129881527,14,"frozenset({'python', 'function'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
5578,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds the computation to place on the host.,tf.compat.v1.tpu.outside_compilation.yaml,2
5579,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds a computation to apply to each shard of the input.,tf.compat.v1.tpu.shard.yaml,2
5580,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds a computation to apply to the input.,tf.xla.experimental.compile.yaml,2
5581,781,0.00153576129881527,14,"frozenset({'python', 'function'})",python function to be wrapped,tf.compat.v1.wrap_function.yaml,2
5582,781,0.00153576129881527,14,"frozenset({'python', 'function'})",the placeholder and python arguments to be passed to the wrapped function,tf.compat.v1.wrap_function.yaml,2
5583,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds a computation to apply to each shard of the input.,tf.compat.v1.tpu.batch_parallel.yaml,2
5584,781,0.00153576129881527,14,"frozenset({'python', 'function'})","A Python function, which accepts `ndarray` objects as arguments and returns a list of `ndarray` objects (or a single `ndarray`).",tf.compat.v1.py_func.yaml,2
5585,781,0.00153576129881527,14,"frozenset({'python', 'function'})",Python `str` prefixed to ops created by this function.,tf.linalg.pinv.yaml,2
5586,781,0.00153576129881527,14,"frozenset({'python', 'function'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
5587,781,0.00153576129881527,14,"frozenset({'python', 'function'})",Python `str` prefixed to ops created by this function.,tf.linalg.matrix_rank.yaml,2
5588,781,0.00153576129881527,14,"frozenset({'python', 'function'})",A Python function that builds a computation to apply to the input.,tf.compat.v1.tpu.rewrite.yaml,2
5589,781,0.00153576129881527,14,"frozenset({'python', 'function'})","A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`).",tf.numpy_function.yaml,2
5590,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,3
5591,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,3
5592,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,3
5593,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,3
5594,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,3
5595,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
5596,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,3
5597,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,3
5598,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
5599,406,0.00153576129881527,10,"frozenset({'input', 'tensor', 'equivalent'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
5600,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
5601,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
5602,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
5603,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
5604,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
5605,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,3
5606,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
5607,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
5608,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
5609,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
5610,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
5611,782,0.00153576129881527,12,"frozenset({'python', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
5612,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
5613,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,3
5614,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.conv_transpose.yaml,3
5615,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,3
5616,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,3
5617,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
5618,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
5619,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})", List of N ints >= 1.,tf.compat.v1.nn.pool.yaml,3
5620,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
5621,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})", List of N ints >= 1.,tf.nn.pool.yaml,3
5622,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,3
5623,786,0.00153576129881527,12,"frozenset({'SOME_STRUCTURE', 'SOME_DTYPE', 'n'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,3
5624,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
5625,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,3
5626,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","3-D with shape `[batch, N, 4]`describing the N bounding boxes associated with the image.",tf.image.sample_distorted_bounding_box.yaml,3
5627,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
5628,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,3
5629,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
5630,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
5631,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,3
5632,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
5633,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
5634,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
5635,787,0.00153576129881527,12,"frozenset({'shape', 'batch', 'n'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
5636,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","3-D with shape `[batch, N, 4]`describing the N bounding boxes associated with the image.",tf.image.sample_distorted_bounding_box.yaml,3
5637,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
5638,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
5639,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
5640,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
5641,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
5642,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
5643,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
5644,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
5645,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
5646,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
5647,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
5648,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
5649,789,0.00153576129881527,14,"frozenset({'d', 'shape', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
5650,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv3D.yaml,2
5651,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv1D.yaml,2
5652,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of filters in the convolution).",tf.keras.layers.SeparableConv1D.yaml,2
5653,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
5654,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.SeparableConv2D.yaml,2
5655,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",tf.print.yaml,2
5656,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv2D.yaml,2
5657,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
5658,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
5659,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
5660,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})",This must be a callable object that returns an object that supports the `iter()` protocol (e.g. a generator function).,tf.lite.RepresentativeDataset.yaml,2
5661,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})",This must be scalar or broadcastable to`labels` (i.e. same rank and each dimension is either 1 or the same).,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
5662,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","By passing a custom callable, you can customize your copy of the model, e.g. by wrapping certain layers of interest (you might want to replace all `LSTM` instances with equivalent`Bidirectional(LSTM(...))` instances, for example).",tf.keras.models.clone_model.yaml,2
5663,744,0.00153576129881527,14,"frozenset({'e', 'SOME_DTYPE'})","A callable invoked for every ps `Operation` (i.e. matched by`ps_ops`), that takes the `Operation` and returns the ps task index to use.",tf.compat.v1.train.replica_device_setter.yaml,2
5664,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
5665,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,3
5666,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point type tensor, shaped `[num_classes]`.",tf.data.experimental.rejection_resample.yaml,3
5667,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
5668,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
5669,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
5670,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
5671,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})",A floating point tensor.,tf.compat.v1.nn.dropout.yaml,3
5672,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
5673,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})",A `Tensor` with floating point or complex dtype.,tf.math.unsorted_segment_mean.yaml,3
5674,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
5675,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})",A `Tensor` with floating point or complex dtype.,tf.math.unsorted_segment_sqrt_n.yaml,3
5676,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
5677,413,0.00153576129881527,14,"frozenset({'tensor', 'point', 'floating'})",A floating point tensor.,tf.nn.dropout.yaml,3
5678,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","If the shape is not specified, you can feed a sparse tensor of any shape.",tf.compat.v1.sparse_placeholder.yaml,2
5679,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool2d.yaml,2
5680,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
5681,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.image.crop_and_resize.yaml,2
5682,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.avg_pool1d.yaml,2
5683,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
5684,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.compat.v1.image.crop_and_resize.yaml,2
5685,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",A 5-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool3d.yaml,2
5686,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool1d.yaml,2
5687,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.compat.v1.nn.max_pool.yaml,2
5688,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5689,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5690,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})","If the shape is not specified, you can feed a tensor of any shape.",tf.compat.v1.placeholder.yaml,2
5691,729,0.00153576129881527,14,"frozenset({'specified', 'tensor'})",Dump data from only the tensors of which the specified dtypes.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
5692,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.compat.v1.sparse_segment_sum.yaml,2
5693,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.sparse.segment_sqrt_n.yaml,2
5694,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
5695,804,0.00153576129881527,14,"frozenset({'size', 'output'})","If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",tf.linalg.diag.yaml,2
5696,804,0.00153576129881527,14,"frozenset({'size', 'output'})","If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",tf.linalg.diag.yaml,2
5697,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
5698,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.sparse.segment_mean.yaml,2
5699,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.compat.v1.sparse_segment_mean.yaml,2
5700,804,0.00153576129881527,14,"frozenset({'size', 'output'})","An int scalar >= 0, <= beam_width (controls output size).",tf.nn.ctc_beam_search_decoder.yaml,2
5701,804,0.00153576129881527,14,"frozenset({'size', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5702,804,0.00153576129881527,14,"frozenset({'size', 'output'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
5703,804,0.00153576129881527,14,"frozenset({'size', 'output'})"," If True, size of `selected_indices` output is padded to `max_output_size`.",tf.image.non_max_suppression_padded.yaml,2
5704,804,0.00153576129881527,14,"frozenset({'size', 'output'})",Indicates the size of the output`Tensor`.,tf.sparse.segment_sum.yaml,2
5705,804,0.00153576129881527,14,"frozenset({'size', 'output'})","An int scalar >= 0, <= beam_width (controls output size).",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
5706,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,3
5707,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,3
5708,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,3
5709,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
5710,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,3
5711,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,3
5712,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,3
5713,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,3
5714,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
5715,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
5716,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,3
5717,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,3
5718,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,3
5719,814,0.00153576129881527,14,"frozenset({'tensor', 'function', 'tf'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,3
5720,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","bool|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_bool.yaml,3
5721,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,3
5722,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,3
5723,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","list|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_spaceseplist.yaml,3
5724,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[T], Text, None], the default value of the flag.",tf.compat.v1.flags.DEFINE_multi.yaml,3
5725,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[Enum], Iterable[Text], Enum, Text, None], the default value of the flag; see`DEFINE_multi`; only differences are documented here.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
5726,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","float|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_float.yaml,3
5727,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","int|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_integer.yaml,3
5728,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,3
5729,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,3
5730,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_string.yaml,3
5731,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","list|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_list.yaml,3
5732,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})",The default value of the flag.,tf.compat.v1.flags.DEFINE.yaml,3
5733,708,0.00153576129881527,14,"frozenset({'flag', 'value', 'default'})","Enum|str|None, the default value of the flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,3
5734,818,0.00153576129881527,14,"frozenset({'optional', 'use'})","(Optional.) Deprecated, do not use.",tf.graph_util.import_graph_def.yaml,2
5735,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,2
5736,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
5737,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",(optional) Set the class index to use for the blank label.,tf.nn.ctc_loss.yaml,2
5738,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional SummaryMetadata proto (which describes which plugins may use the summary value).,tf.compat.v1.summary.tensor_summary.yaml,2
5739,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use for grouping all the gradient ops together.,tf.gradients.yaml,2
5740,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.gradients.yaml,2
5741,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
5742,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.hessians.yaml,2
5743,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
5744,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,2
5745,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",(Optional.) A `tf.compat.v1.ConfigProto` to use to configure the environment in which operations are executed.,tf.compat.v1.enable_eager_execution.yaml,2
5746,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
5747,818,0.00153576129881527,14,"frozenset({'optional', 'use'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
5748,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
5749,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
5750,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})","Valid keys: layout_optimizer: Optimize tensor layouts e.g. This will try to use NCHW layout on GPU which is faster.constant_folding: Fold constants Statically infer the value of tensors when possible, and materialize the result using constants.shape_optimization: Simplify computations made on shapes.remapping: Remap subgraphs onto more efficient implementations.arithmetic_optimization: Simplify arithmetic ops with common sub-expression elimination and arithmetic simplification.dependency_optimization: Control dependency optimizations.",tf.config.optimizer.set_experimental_options.yaml,2
5751,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})","string or scalar string `Tensor`, regular expression to use, see more details at https://github.com/google/re2/wiki/Syntax",tf.strings.regex_replace.yaml,2
5752,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,2
5753,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
5754,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
5755,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
5756,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
5757,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
5758,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
5759,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
5760,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
5761,819,0.00153576129881527,14,"frozenset({'use', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
5762,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.linalg.normalize.yaml,2
5763,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,2
5764,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","A scalar string Tensor, a single serialized Example.",tf.compat.v1.parse_single_example.yaml,2
5765,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
5766,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
5767,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,2
5768,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
5769,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
5770,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
5771,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
5772,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.norm.yaml,2
5773,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.compat.v1.norm.yaml,2
5774,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","A scalar string Tensor, a single serialized Example.",tf.io.parse_single_example.yaml,2
5775,694,0.00153576129881527,14,"frozenset({'example', 'tensor'})","It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
5776,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.convolution.yaml,3
5777,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.separable_conv2d.yaml,3
5778,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.separable_conv2d.yaml,3
5779,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.pool.yaml,3
5780,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.pool.yaml,3
5781,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.compat.v1.nn.convolution.yaml,3
5782,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})"," If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.compat.v1.nn.convolution.yaml,3
5783,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})"," If any value of dilation_rate is > 1, then all values of strides must be 1.",tf.nn.pool.yaml,3
5784,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If any value of strides is > 1, then all values of dilation_rate must be 1.",tf.nn.pool.yaml,3
5785,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.depthwise_conv2d.yaml,3
5786,435,0.00153576129881527,11,"frozenset({'values', 'must', 'strides'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.depthwise_conv2d.yaml,3
5787,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of `values` elements in the tensor to be fed.,tf.compat.v1.sparse_placeholder.yaml,2
5788,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of the elements of the resulting tensor.,tf.keras.backend.constant.yaml,2
5789,673,0.00153576129881527,14,"frozenset({'elements', 'type'})", The type of elements for the returned `RaggedTensor`.,tf.compat.v1.ragged.constant_value.yaml,2
5790,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of the elements of the resulting tensor.,tf.ragged.range.yaml,2
5791,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of the elements of the resulting tensor.,tf.range.yaml,2
5792,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",(Optional.) The data type for counter elements.,tf.compat.v1.data.experimental.Counter.yaml,2
5793,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of the elements of the resulting tensor.,tf.compat.v1.constant.yaml,2
5794,673,0.00153576129881527,14,"frozenset({'elements', 'type'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
5795,673,0.00153576129881527,14,"frozenset({'elements', 'type'})","It should have one more element than `boundaries`, and all elements should have the same type.",tf.compat.v1.train.piecewise_constant.yaml,2
5796,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The elements generated must have same type and shape as inputs to the model.,tf.lite.RepresentativeDataset.yaml,2
5797,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of elements for the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
5798,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of the elements of the resulting tensor.,tf.constant.yaml,2
5799,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",(Optional.) The data type for counter elements.,tf.data.experimental.Counter.yaml,2
5800,673,0.00153576129881527,14,"frozenset({'elements', 'type'})",The type of elements in the tensor to be fed.,tf.compat.v1.placeholder.yaml,2
5801,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If True, output has same structure as `loop_vars`.",tf.compat.v1.while_loop.yaml,2
5802,845,0.00153576129881527,14,"frozenset({'output', 'true'})","For each output, if`True`, outputs from all shards are concatenated along the corresponding`output_shard_axes` entry.",tf.compat.v1.tpu.shard.yaml,2
5803,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
5804,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If set to True, then the output of the dot product is the cosine proximity between the two samples.",tf.keras.layers.Dot.yaml,2
5805,845,0.00153576129881527,14,"frozenset({'output', 'true'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
5806,845,0.00153576129881527,14,"frozenset({'output', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
5807,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If True, the output for masked timestep will be zeros, whereas in the False case, output from previous timestep is returned.",tf.keras.backend.rnn.yaml,2
5808,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If set to True, then the output of the dot product is the cosine proximity between the two samples.",tf.keras.layers.dot2.yaml,2
5809,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If true, the coordinates of output nmsed boxes will be clipped to [0, 1].",tf.image.combined_non_max_suppression.yaml,2
5810,845,0.00153576129881527,14,"frozenset({'output', 'true'})","If true, the output nmsed boxes, scores and classes are padded to be of length`max_size_per_class`*`num_classes`, unless it exceeds `max_total_size` in which case it is clipped to `max_total_size`.",tf.image.combined_non_max_suppression.yaml,2
5811,845,0.00153576129881527,14,"frozenset({'output', 'true'})","A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",tf.keras.backend.categorical_crossentropy.yaml,2
5812,845,0.00153576129881527,14,"frozenset({'output', 'true'})","output - bool, True if validator constraint is satisfied.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
5813,845,0.00153576129881527,14,"frozenset({'output', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
5814,845,0.00153576129881527,14,"frozenset({'output', 'true'})"," If True, size of `selected_indices` output is padded to `max_output_size`.",tf.image.non_max_suppression_padded.yaml,2
5815,846,0.00153576129881527,14,"frozenset({'value', 'output'})",The magnitude threshold that determines if an output value/index pair takes space.,tf.compat.v1.sparse_add.yaml,2
5816,846,0.00153576129881527,14,"frozenset({'value', 'output'})","If the argument is a boolean, the argument's value is used for each output.",tf.compat.v1.tpu.shard.yaml,2
5817,846,0.00153576129881527,14,"frozenset({'value', 'output'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
5818,846,0.00153576129881527,14,"frozenset({'value', 'output'})",The magnitude threshold that determines if an output value/index pair takes space.,tf.sparse.add.yaml,2
5819,846,0.00153576129881527,14,"frozenset({'value', 'output'})",A constant value (or list) of output type `dtype`.,tf.compat.v1.constant.yaml,2
5820,846,0.00153576129881527,14,"frozenset({'value', 'output'})",A value of 'ignore' will cause the operation to skip any invalid formatting in the input and produce no corresponding output character.,tf.strings.unicode_transcode.yaml,2
5821,846,0.00153576129881527,14,"frozenset({'value', 'output'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
5822,846,0.00153576129881527,14,"frozenset({'value', 'output'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
5823,846,0.00153576129881527,14,"frozenset({'value', 'output'})",The default value to produce when output is not fed.,tf.compat.v1.placeholder_with_default.yaml,2
5824,846,0.00153576129881527,14,"frozenset({'value', 'output'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
5825,846,0.00153576129881527,14,"frozenset({'value', 'output'})",A constant value (or list) of output type `dtype`.,tf.constant.yaml,2
5826,846,0.00153576129881527,14,"frozenset({'value', 'output'})",A scalar defining the value to fill in output when `indices[j] != i`.,tf.one_hot.yaml,2
5827,846,0.00153576129881527,14,"frozenset({'value', 'output'})",A scalar defining the value to fill in output when `indices[j] = i`.,tf.one_hot.yaml,2
5828,846,0.00153576129881527,14,"frozenset({'value', 'output'})","The currently supported options are: ""NO_TENSOR"": (Default) Only traces the execution of ops' output tensors, while not dumping the value of the ops' output tensors or any form of concise summary of them.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
5829,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.compat.v1.sparse_segment_sum.yaml,3
5830,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})", Values should be sorted and can be repeated.,tf.math.segment_mean.yaml,3
5831,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.sparse.segment_sqrt_n.yaml,3
5832,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})", Values should be sorted and can be repeated.,tf.math.segment_prod.yaml,3
5833,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})", Values should be sorted and can be repeated.,tf.math.segment_sum.yaml,3
5834,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
5835,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.sparse.segment_mean.yaml,3
5836,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})", Values should be sorted and can be repeated.,tf.math.segment_max.yaml,3
5837,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})", Values should be sorted and can be repeated.,tf.math.segment_min.yaml,3
5838,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.compat.v1.sparse_segment_mean.yaml,3
5839,169,0.00153576129881527,11,"frozenset({'repeated', 'values', 'sorted'})",Values should be sorted and can be repeated.,tf.sparse.segment_sum.yaml,3
5840,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
5841,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,3
5842,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
5843,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,3
5844,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
5845,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,3
5846,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,3
5847,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
5848,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,3
5849,660,0.00153576129881527,10,"frozenset({'tensor', 'dimension', 'along'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,3
5850,861,0.00153576129881527,14,"frozenset({'used', 'tf'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
5851,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
5852,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.estimator.regressor_parse_example_spec.yaml,2
5853,861,0.00153576129881527,14,"frozenset({'used', 'tf'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
5854,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",Used in combination with `tf.random.set_seed` to create a reproducible sequence of tensors across multiple calls.,tf.random.uniform.yaml,2
5855,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
5856,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
5857,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
5858,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.estimator.classifier_parse_example_spec.yaml,2
5859,861,0.00153576129881527,14,"frozenset({'used', 'tf'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
5860,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",an instance of `tf.compat.v1.ConfigProto` proto used to configure the session.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
5861,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",Note that`tf.compat.v1.ConfigProto` is also used to configure graph execution (via`tf.compat.v1.Session`) and many options within `tf.compat.v1.ConfigProto`are not implemented (or are irrelevant) when eager execution is enabled.,tf.compat.v1.enable_eager_execution.yaml,2
5862,861,0.00153576129881527,14,"frozenset({'used', 'tf'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
5863,861,0.00153576129881527,14,"frozenset({'used', 'tf'})",used as label if label_key does not exist in given tf.Example.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
5864,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})","If eager execution is enabled, this is ignored (and always treated as True).",tf.compat.v1.while_loop.yaml,2
5865,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.advise.yaml,2
5866,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.write_op_log.yaml,2
5867,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})",Whether to use autograph to compile python and eager style code for efficient graph-mode execution.,tf.nondifferentiable_batch_function.yaml,2
5868,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})",When eager execution is enabled this argument is always forced to be True.,tf.compat.v1.get_local_variable.yaml,2
5869,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.profile.yaml,2
5870,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})",When eager execution is enabled this argument is always forced to be True.,tf.compat.v1.get_variable.yaml,2
5871,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})",Note that`tf.compat.v1.ConfigProto` is also used to configure graph execution (via`tf.compat.v1.Session`) and many options within `tf.compat.v1.ConfigProto`are not implemented (or are irrelevant) when eager execution is enabled.,tf.compat.v1.enable_eager_execution.yaml,2
5872,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})","If eager execution is enabled, any callable object in the `control_inputs` list will be called.",tf.control_dependencies.yaml,2
5873,173,0.00153576129881527,10,"frozenset({'eager', 'execution'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
5874,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_sum.yaml,3
5875,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_all.yaml,3
5876,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_mean.yaml,3
5877,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_any.yaml,3
5878,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,3
5879,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_prod.yaml,3
5880,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.sparse_reduce_sum.yaml,3
5881,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.count_nonzero.yaml,3
5882,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.sparse_reduce_max.yaml,3
5883,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.sparse_reduce_max_sparse.yaml,3
5884,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.norm.yaml,3
5885,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_max.yaml,3
5886,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_min.yaml,3
5887,397,0.00153576129881527,14,"frozenset({'keepdims', 'deprecated', 'alias'})",Deprecated alias for `keepdims`.,tf.compat.v1.reduce_logsumexp.yaml,3
5888,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,3
5889,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,3
5890,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","If time_major == False, this will be a `Tensor` shaped: `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
5891,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
5892,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
5893,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
5894,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,3
5895,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,3
5896,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
5897,533,0.00153576129881527,10,"frozenset({'batch_size', 'num_classes', 'tensor'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,3
5898,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.apply_affine_transform.yaml,6
5899,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.apply_affine_transform.yaml,6
5900,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_rotation.yaml,6
5901,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_rotation.yaml,6
5902,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_zoom.yaml,6
5903,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_zoom.yaml,6
5904,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shear.yaml,6
5905,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shear.yaml,6
5906,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shift.yaml,6
5907,165,0.00153576129881527,10,"frozenset({'input', 'constant', 'boundaries', 'outside', 'points', 'mode'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shift.yaml,6
5908,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
5909,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
5910,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.input_layer.yaml,2
5911,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
5912,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})",Note that cols_to_vars will also contain a string key 'bias' that maps to a list of Variables.,tf.compat.v1.feature_column.linear_model.yaml,2
5913,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.linear_model.yaml,2
5914,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
5915,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
5916,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
5917,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
5918,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
5919,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
5920,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","A `dict` mapping `int`s to callables, or a `list` of (`int`, callable) pairs, or simply a list of callables (in which case the index serves as the key).",tf.switch_case.yaml,2
5921,542,0.00153576129881527,14,"frozenset({'key', 'SOME_STRUCTURE'})","input - dict, with keys() being flag_names, and value for each key     being the value of the corresponding flag (string, boolean, etc).",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
5922,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, dtype of returned Keras variable.",tf.keras.backend.ones_like.yaml,4
5923,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, dtype of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,4
5924,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, name of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,4
5925,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,4
5926,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, data type of returned Keras variable.",tf.keras.backend.ones.yaml,4
5927,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, name of returned Keras variable.",tf.keras.backend.ones.yaml,4
5928,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,4
5929,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, dtype of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,4
5930,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, name of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,4
5931,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,4
5932,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, data type of returned Keras variable.",tf.keras.backend.eye.yaml,4
5933,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","String, name of returned Keras variable.",tf.keras.backend.eye.yaml,4
5934,562,0.00153576129881527,13,"frozenset({'variable', 'keras', 'SOME_DTYPE', 'returned'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,4
5935,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})","An `int64`-castable default step value, or None to unset.",tf.summary.experimental.set_step.yaml,3
5936,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,3
5937,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,3
5938,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.write.yaml,3
5939,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_lower_hook.yaml,3
5940,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.scalar.yaml,3
5941,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.image.yaml,3
5942,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.experimental.write_raw_pb.yaml,3
5943,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.text.yaml,3
5944,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.audio.yaml,3
5945,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.histogram.yaml,3
5946,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.trace_export.yaml,3
5947,530,0.00153576129881527,13,"frozenset({'value', 'SOME_DTYPE', 'step'})","`int`, stop is never requested if global step is less than this value.",tf.estimator.experimental.stop_if_higher_hook.yaml,3
5948,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
5949,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
5950,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
5951,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",See the description of `axis`on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.linalg.normalize.yaml,2
5952,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
5953,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",A `Tensor` containing the variance sufficient statistics: the (possibly shifted) squared sum of the data to compute the variance over.,tf.nn.normalize_moments.yaml,2
5954,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
5955,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
5956,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
5957,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.norm.yaml,2
5958,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
5959,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
5960,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
5961,482,0.00153576129881527,14,"frozenset({'tensor', 'compute'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.compat.v1.norm.yaml,2
5962,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
5963,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from `_FeatureColumn` to list of `Variable`s.",tf.compat.v1.feature_column.input_layer.yaml,2
5964,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from `_FeatureColumn` to associated list of `Variable`s.",tf.compat.v1.feature_column.linear_model.yaml,2
5965,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
5966,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})",A shape must be an iterable.,tf.debugging.assert_shapes.yaml,2
5967,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
5968,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})",A shape must be an iterable.,tf.compat.v1.debugging.assert_shapes.yaml,2
5969,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})"," If this is a non-empty list, the last element must be equal to model_checkpoint_path.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
5970,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
5971,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
5972,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
5973,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
5974,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
5975,938,0.00153576129881527,14,"frozenset({'must', 'SOME_STRUCTURE'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
5976,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_rank_in.yaml,6
5977,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_near.yaml,6
5978,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_greater_equal.yaml,6
5979,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_greater.yaml,6
5980,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_less.yaml,6
5981,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_positive.yaml,6
5982,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_non_positive.yaml,6
5983,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_none_equal.yaml,6
5984,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_non_negative.yaml,6
5985,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_negative.yaml,6
5986,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_equal.yaml,6
5987,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})", Defaults to error message and first few entries of `x`.,tf.compat.v1.assert_rank_at_least.yaml,6
5988,505,0.00153576129881527,13,"frozenset({'message', 'first', 'defaults', 'x', 'entries', 'error'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_less_equal.yaml,6
5989,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
5990,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,2
5991,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})",The nested sequence of the resulting slices will be mapped over by `fn`.,tf.vectorized_map.yaml,2
5992,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,2
5993,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})", The nested sequence of the resulting slices will be the first argument to `fn`.,tf.foldr.yaml,2
5994,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldr.yaml,2
5995,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,2
5996,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})", The nested sequence of the resulting slices will be the first argument to `fn`.,tf.scan.yaml,2
5997,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
5998,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,2
5999,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})", The nested sequence of the resulting slices will be the first argument to `fn`.,tf.foldl.yaml,2
6000,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldl.yaml,2
6001,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,2
6002,545,0.00153576129881527,14,"frozenset({'sequence', 'nested'})", The nested sequence of the resulting slices will be applied to `fn`.,tf.map_fn.yaml,2
6003,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
6004,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})",Note that cols_to_vars will also contain a string key 'bias' that maps to a list of Variables.,tf.compat.v1.feature_column.linear_model.yaml,2
6005,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6006,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
6007,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.regressor_parse_example_spec.yaml,2
6008,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
6009,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})",String key for weight values.,tf.feature_column.weighted_categorical_column.yaml,2
6010,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6011,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6012,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
6013,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.classifier_parse_example_spec.yaml,2
6014,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","A `dict` mapping `int`s to callables, or a `list` of (`int`, callable) pairs, or simply a list of callables (in which case the index serves as the key).",tf.switch_case.yaml,2
6015,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","input - dict, with keys() being flag_names, and value for each key     being the value of the corresponding flag (string, boolean, etc).",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
6016,543,0.00153576129881527,14,"frozenset({'key', 'SOME_DTYPE'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
6017,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,5
6018,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,5
6019,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,5
6020,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,5
6021,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,5
6022,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,5
6023,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,5
6024,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,5
6025,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,5
6026,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,5
6027,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,5
6028,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,5
6029,168,0.00153576129881527,13,"frozenset({'data_format', 'start', 'default', 'starts', 'nc'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,5
6030,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,5
6031,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,5
6032,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,5
6033,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,5
6034,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,5
6035,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,5
6036,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,5
6037,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,5
6038,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,5
6039,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,5
6040,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,5
6041,167,0.00153576129881527,12,"frozenset({'num_boxes', 'SOME_DTYPE', 'shape', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,5
6042,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
6043,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
6044,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
6045,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,2
6046,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
6047,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","A python integer, indicating the dimension along which to stack.",tf.ragged.stack.yaml,2
6048,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","Integer, axis along which the softmax normalization is applied.",tf.keras.activations.softmax.yaml,2
6049,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,2
6050,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,2
6051,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
6052,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
6053,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
6054,659,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'along'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,2
6055,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_max.yaml,3
6056,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_min.yaml,3
6057,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,3
6058,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,3
6059,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,3
6060,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,3
6061,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,3
6062,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,3
6063,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_prod.yaml,3
6064,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A tensor whose shape is a prefix of data.shape.,tf.strings.unsorted_segment_join.yaml,3
6065,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,3
6066,733,0.0014260640631856077,12,"frozenset({'data', 'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sum.yaml,3
6067,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,5
6068,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,5
6069,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,5
6070,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,5
6071,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6072,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6073,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6074,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6075,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6076,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6077,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,5
6078,665,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE', 'type', 'tensor', 'objects'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,5
6079,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_nd_sub.yaml,2
6080,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable Tensor.,tf.compat.v1.scatter_nd_sub.yaml,2
6081,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.assign_add.yaml,2
6082,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_mul.yaml,2
6083,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.assign.yaml,2
6084,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_div.yaml,2
6085,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
6086,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_min.yaml,2
6087,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_sub.yaml,2
6088,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_max.yaml,2
6089,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.scatter_nd_add.yaml,2
6090,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable Tensor.,tf.compat.v1.scatter_nd_add.yaml,2
6091,133,0.0014260640631856077,13,"frozenset({'tensor', 'mutable'})",A mutable `Tensor`.,tf.compat.v1.assign_sub.yaml,2
6092,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",List of additional ops to finish before returning.,tf.tuple.yaml,2
6093,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",list of ops to run.,tf.keras.backend.batch_get_value.yaml,2
6094,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
6095,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.text.yaml,2
6096,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.image2.yaml,2
6097,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
6098,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
6099,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
6100,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",List of additional ops to finish before returning.,tf.compat.v1.tuple.yaml,2
6101,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",List of update ops.,tf.keras.backend.function.yaml,2
6102,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
6103,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.audio2.yaml,2
6104,496,0.0014260640631856077,13,"frozenset({'ops', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
6105,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.cosine_similarity.yaml,2
6106,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of true targets.,tf.keras.losses.cosine_similarity.yaml,2
6107,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`.,tf.linalg.lu_solve.yaml,2
6108,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",tensor of predicted targets.,tf.keras.losses.categorical_crossentropy.yaml,2
6109,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",tensor of true targets.,tf.keras.losses.categorical_crossentropy.yaml,2
6110,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.KLD.yaml,2
6111,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of true targets.,tf.keras.losses.KLD.yaml,2
6112,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.poisson2.yaml,2
6113,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",Tensor of true targets.,tf.keras.losses.poisson2.yaml,2
6114,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",tensor of predicted targets.,tf.keras.losses.logcosh2.yaml,2
6115,138,0.0014260640631856077,11,"frozenset({'targets', 'tensor'})",tensor of true targets.,tf.keras.losses.logcosh2.yaml,2
6116,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_nd_update.yaml,10
6117,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_nd_sub.yaml,10
6118,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the addition will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.assign_add.yaml,10
6119,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the operation will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_mul.yaml,10
6120,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.assign.yaml,10
6121,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the operation will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_div.yaml,10
6122,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_add.yaml,10
6123,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the update will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_min.yaml,10
6124,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the subtraction will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_sub.yaml,10
6125,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the update will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_max.yaml,10
6126,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_nd_add.yaml,10
6127,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the subtraction will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.assign_sub.yaml,10
6128,139,0.0014260640631856077,13,"frozenset({'exhibit', 'behavior', 'may', 'less', 'otherwise', 'protected', 'lock', 'undefined', 'contention', 'true'})","If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.",tf.compat.v1.scatter_update.yaml,10
6129,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
6130,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
6131,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","Must be greater than (Note that 1-grams are never padded, regardless of this value.) ",tf.strings.ngrams.yaml,2
6132,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
6133,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
6134,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})",Must be greater than or equal to `batch_dims`.,tf.gather.yaml,2
6135,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
6136,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.separable_conv2d.yaml,2
6137,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.separable_conv2d.yaml,2
6138,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.depthwise_conv2d.yaml,2
6139,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})"," Values must be greater than or equal to zero, and less than `num_partitions`.`partitions` is not required to be sorted.",tf.ragged.stack_dynamic_partitions.yaml,2
6140,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})",Must be greater than or equal to `batch_dims`.,tf.compat.v1.gather.yaml,2
6141,318,0.0014260640631856077,13,"frozenset({'must', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.depthwise_conv2d.yaml,2
6142,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The mean of the truncated normal distribution.,tf.random.stateless_truncated_normal.yaml,2
6143,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","The standard deviation of the normal distribution, before truncation.",tf.random.stateless_truncated_normal.yaml,2
6144,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The mean of the normal distribution.,tf.random.stateless_normal.yaml,2
6145,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The standard deviation of the normal distribution.,tf.random.stateless_normal.yaml,2
6146,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The mean of the truncated normal distribution.,tf.random.truncated_normal.yaml,2
6147,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","The standard deviation of the normal distribution, before truncation.",tf.random.truncated_normal.yaml,2
6148,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The mean of the normal distribution.,tf.random.normal.yaml,2
6149,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})",The standard deviation of the normal distribution.,tf.random.normal.yaml,2
6150,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","Float, mean of the normal distribution.",tf.keras.backend.random_normal_variable.yaml,2
6151,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","Float, standard deviation of the normal distribution.",tf.keras.backend.random_normal_variable.yaml,2
6152,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","A float, mean of the normal distribution to draw samples.",tf.keras.backend.random_normal.yaml,2
6153,144,0.0014260640631856077,12,"frozenset({'distribution', 'normal'})","A float, standard deviation of the normal distribution to draw samples.",tf.keras.backend.random_normal.yaml,2
6154,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
6155,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,3
6156,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all the feature columns used by the model.,tf.compat.v1.estimator.experimental.linear_logit_fn_builder.yaml,3
6157,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,3
6158,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.feature_column.make_parse_example_spec.yaml,3
6159,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.estimator.regressor_parse_example_spec.yaml,3
6160,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
6161,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,3
6162,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
6163,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,3
6164,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.estimator.classifier_parse_example_spec.yaml,3
6165,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.feature_column.make_parse_example_spec.yaml,3
6166,537,0.0014260640631856077,13,"frozenset({'feature', 'columns', 'SOME_STRUCTURE'})",An iterable containing all feature columns.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
6167,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,5
6168,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,5
6169,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,5
6170,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,5
6171,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,5
6172,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,5
6173,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,5
6174,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,5
6175,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,5
6176,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,5
6177,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,5
6178,854,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'shape', 'type', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,5
6179,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","Positive axis in the rage of `[0, rank(values))` refers to `axis`-th dimension.",tf.concat.yaml,2
6180,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})",And negative axis refers to `axis + rank(values)`-th dimension.,tf.concat.yaml,2
6181,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})",The axis that the output values are concatenated along.,tf.compat.v1.nn.crelu.yaml,2
6182,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6183,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
6184,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","If axis is specified, this should be a vector of maximum values for each slice along axis.",tf.quantization.quantize_and_dequantize.yaml,2
6185,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","If axis is specified, this should be a vector of minimum values for each slice along axis.",tf.quantization.quantize_and_dequantize.yaml,2
6186,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","An integer, the axis to find maximum values.",tf.keras.backend.max.yaml,2
6187,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})",The axis that the output values are concatenated along.,tf.nn.crelu.yaml,2
6188,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","An integer, the axis to find minimum values.",tf.keras.backend.min.yaml,2
6189,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})",The axis along which to repeat values.,tf.repeat.yaml,2
6190,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6191,796,0.0014260640631856077,13,"frozenset({'axis', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6192,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,3
6193,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,3
6194,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,3
6195,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,3
6196,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,3
6197,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d_transpose.yaml,3
6198,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,3
6199,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,3
6200,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d.yaml,3
6201,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,3
6202,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,3
6203,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,3
6204,650,0.0014260640631856077,13,"frozenset({'width', 'convolution', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,3
6205,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv3D.yaml,2
6206,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv1D.yaml,2
6207,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
6208,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",The total number of depthwise convolution output channels will be equal to `num_filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv1D.yaml,2
6209,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})","Integer, the dimensionality of the output space (i.e. the number of filters in the convolution).",tf.keras.layers.SeparableConv1D.yaml,2
6210,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
6211,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv2D.yaml,2
6212,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.SeparableConv2D.yaml,2
6213,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv2D.yaml,2
6214,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",Gradients w.r.t. the output of the convolution.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6215,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",Gradients w.r.t. the output of the convolution.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
6216,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",Gradients w.r.t. the output of the convolution.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
6217,649,0.0014260640631856077,13,"frozenset({'output', 'convolution'})",Gradients w.r.t. the output of the convolution.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6218,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`int`, maximum number of training steps with no increase in the given metric.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
6219,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`str`, metric to track.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
6220,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`int`, maximum number of training steps with no decrease in the given metric.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
6221,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`str`, metric to track.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
6222,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","Integer, k for @k metric.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
6223,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","Integer, k for @k metric.",tf.compat.v1.metrics.precision_at_k.yaml,2
6224,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","Integer, k for @k metric.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
6225,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`str`, metric to track.",tf.estimator.experimental.stop_if_lower_hook.yaml,2
6226,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})",Numeric threshold for the given metric.,tf.estimator.experimental.stop_if_lower_hook.yaml,2
6227,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","Integer, k for @k metric.",tf.compat.v1.metrics.recall_at_k.yaml,2
6228,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","`str`, metric to track.",tf.estimator.experimental.stop_if_higher_hook.yaml,2
6229,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})",Numeric threshold for the given metric.,tf.estimator.experimental.stop_if_higher_hook.yaml,2
6230,378,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'metric'})","Integer, k for @k metric.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
6231,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
6232,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
6233,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
6234,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
6235,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","Valid keys: layout_optimizer: Optimize tensor layouts e.g. This will try to use NCHW layout on GPU which is faster.constant_folding: Fold constants Statically infer the value of tensors when possible, and materialize the result using constants.shape_optimization: Simplify computations made on shapes.remapping: Remap subgraphs onto more efficient implementations.arithmetic_optimization: Simplify arithmetic ops with common sub-expression elimination and arithmetic simplification.dependency_optimization: Control dependency optimizations.",tf.config.optimizer.set_experimental_options.yaml,2
6236,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.string_split.yaml,2
6237,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
6238,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
6239,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
6240,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.strings.split.yaml,2
6241,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
6242,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
6243,446,0.0014260640631856077,13,"frozenset({'result', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
6244,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
6245,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
6246,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
6247,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If a callable is passed, it will only be called when a default SummaryWriter exists and the recording condition specified by`record_if()` is met.",tf.summary.write.yaml,2
6248,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.compat.v1.ragged.constant_value.yaml,2
6249,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
6250,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",Scalar value to set for indices not specified in`sp_input`.,tf.sparse.to_dense.yaml,2
6251,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
6252,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})"," If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.ragged.constant.yaml,2
6253,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
6254,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",Dump data from only the tensors of which the specified dtypes.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
6255,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
6256,728,0.0014260640631856077,13,"frozenset({'specified', 'SOME_DTYPE'})",The specified output type of the operation (`int32` or `int64`).,tf.shape_n.yaml,2
6257,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.fused_batch_norm.yaml,3
6258,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.with_space_to_batch.yaml,3
6259,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.conv_transpose.yaml,3
6260,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.avg_pool.yaml,3
6261,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.convolution.yaml,3
6262,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.separable_conv2d.yaml,3
6263,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.nn.separable_conv2d.yaml,3
6264,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.compat.v1.nn.pool.yaml,3
6265,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.compat.v1.nn.convolution.yaml,3
6266,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})"," For N=2, the valid values are ""NHWC"" (default) and ""NCHW"".",tf.nn.pool.yaml,3
6267,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.compat.v1.nn.depthwise_conv2d.yaml,3
6268,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",tf.nn.max_pool.yaml,3
6269,501,0.0014260640631856077,13,"frozenset({'nchw', 'nhwc', 'default'})","Either ""NHWC"" (default) or ""NCHW"".",tf.nn.depthwise_conv2d.yaml,3
6270,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})","Optional scope used to filter the summary ops, using `re.match`",tf.compat.v1.summary.merge_all.yaml,2
6271,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
6272,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.text.yaml,2
6273,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.image2.yaml,2
6274,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
6275,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional name to use for grouping all the gradient ops together.,tf.gradients.yaml,2
6276,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.gradients.yaml,2
6277,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.hessians.yaml,2
6278,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
6279,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
6280,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
6281,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.audio2.yaml,2
6282,497,0.0014260640631856077,13,"frozenset({'optional', 'ops'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
6283,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
6284,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","If `func` is None, `tf.function` returns a decorator that can be invoked with a single argument - `func`.",tf.function.yaml,2
6285,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","Optional if the SavedModel contains a single MetaGraph, as for those exported from`tf.saved_model.load`.",tf.saved_model.load.yaml,2
6286,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
6287,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
6288,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
6289,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
6290,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6291,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6292,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
6293,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
6294,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})",A `tf.data.Dataset` object containing a single element.,tf.data.experimental.get_single_element.yaml,2
6295,716,0.0014260640631856077,13,"frozenset({'single', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
6296,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
6297,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
6298,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
6299,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_absolute_error.yaml,3
6300,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.root_mean_squared_error.yaml,3
6301,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
6302,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
6303,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
6304,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_relative_error.yaml,3
6305,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_squared_error.yaml,3
6306,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
6307,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
6308,417,0.0014260640631856077,13,"frozenset({'tensor', 'arbitrary', 'shape'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_cosine_distance.yaml,3
6309,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.cosine_similarity.yaml,2
6310,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_negatives.yaml,2
6311,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,2
6312,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_positives.yaml,2
6313,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.recall.yaml,2
6314,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})",tensor of predicted targets.,tf.keras.losses.categorical_crossentropy.yaml,2
6315,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_negatives.yaml,2
6316,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.KLD.yaml,2
6317,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})",Tensor of predicted targets.,tf.keras.losses.poisson2.yaml,2
6318,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})",tensor of predicted targets.,tf.keras.losses.logcosh2.yaml,2
6319,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_positives.yaml,2
6320,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.precision.yaml,2
6321,350,0.0014260640631856077,13,"frozenset({'predicted', 'tensor'})","The predicted outputs, a tensor of size`[batch_size, d0, ..",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
6322,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
6323,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`, `2`, `np.inf` are supported.",tf.linalg.normalize.yaml,2
6324,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})",See the description of `axis`on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.linalg.normalize.yaml,2
6325,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","For vectors, use axis = 0.",tf.compat.v1.argmin.yaml,2
6326,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","For vectors, use axis = 0.",tf.math.argmin.yaml,2
6327,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","For vectors, use axis = 0.",tf.math.argmax.yaml,2
6328,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","For vectors, use axis = 0.",tf.compat.v1.argmax.yaml,2
6329,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
6330,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported.",tf.norm.yaml,2
6331,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.norm.yaml,2
6332,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
6333,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})","Some restrictions apply: a) The Frobenius norm `fro` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only 'euclidean', 'fro', `1`,    `2`, `np.inf` are supported.",tf.compat.v1.norm.yaml,2
6334,416,0.0014260640631856077,13,"frozenset({'axis', 'vectors'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.compat.v1.norm.yaml,2
6335,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,3
6336,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
6337,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,3
6338,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
6339,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,3
6340,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,3
6341,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
6342,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
6343,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
6344,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
6345,314,0.0014260640631856077,11,"frozenset({'tensor', 'matches', 'whose'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
6346,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
6347,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
6348,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",The function must take as input the unprojected variable and must return the projected variable (which must have the same shape).,tf.keras.layers.SeparableConv1D.yaml,2
6349,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
6350,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",A tensor with the same shape as `variable`.,tf.keras.backend.moving_average_update.yaml,2
6351,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
6352,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",Shape of the new or existing variable.,tf.compat.v1.get_local_variable.yaml,2
6353,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","If False, allows the variable to be initialized with a value of unknown shape.",tf.compat.v1.get_local_variable.yaml,2
6354,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
6355,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
6356,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})",Shape of the new or existing variable.,tf.compat.v1.get_variable.yaml,2
6357,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","If False, allows the variable to be initialized with a value of unknown shape.",tf.compat.v1.get_variable.yaml,2
6358,834,0.0014260640631856077,13,"frozenset({'variable', 'shape'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
6359,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","String, name for the variable to create.",tf.keras.backend.ones_like.yaml,2
6360,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","String, name of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
6361,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",Name of the variable to return.,tf.train.load_variable.yaml,2
6362,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","String, name of returned Keras variable.",tf.keras.backend.ones.yaml,2
6363,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
6364,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","If not explicitly provided, the name of the variable is assumed to be same between previous checkpoint and current model.",tf.compat.v1.train.warm_start.yaml,2
6365,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","Variable length list of dictionaries of name, class pairs to add to custom objects.",tf.keras.utils.custom_object_scope.yaml,2
6366,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",The name of the new or existing variable.,tf.compat.v1.get_local_variable.yaml,2
6367,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","String, name of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
6368,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",The name of the new or existing variable.,tf.compat.v1.get_variable.yaml,2
6369,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})","String, name of returned Keras variable.",tf.keras.backend.eye.yaml,2
6370,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",name for the variable to create.,tf.keras.backend.zeros_like.yaml,2
6371,835,0.0014260640631856077,13,"frozenset({'variable', 'name'})",name of returned Keras variable,tf.keras.backend.zeros.yaml,2
6372,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,5
6373,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
6374,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,5
6375,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,5
6376,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,5
6377,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,5
6378,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,5
6379,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,5
6380,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
6381,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,5
6382,686,0.0014260640631856077,11,"frozenset({'SOME_DTYPE', 'shape', 'representing', 'd', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,5
6383,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
6384,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
6385,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
6386,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
6387,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
6388,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6389,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6390,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
6391,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
6392,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
6393,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
6394,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
6395,685,0.0014260640631856077,13,"frozenset({'single', 'tensor', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
6396,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,3
6397,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
6398,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
6399,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
6400,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
6401,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,3
6402,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6403,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6404,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,3
6405,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
6406,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
6407,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
6408,684,0.0014260640631856077,13,"frozenset({'single', 'SOME_DTYPE', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
6409,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,3
6410,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
6411,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
6412,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
6413,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,3
6414,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
6415,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","A `complex64`/`complex128` `[..., frames, fft_unique_bins]``Tensor` of STFT bins representing a batch of `fft_length`-point STFTs where `fft_unique_bins` is `fft_length // 2 + 1`",tf.signal.inverse_stft.yaml,3
6416,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,3
6417,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6418,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
6419,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,3
6420,681,0.0014260640631856077,12,"frozenset({'SOME_DTYPE', 'batch', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,3
6421,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",The vocabulary file name.,tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
6422,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",Optional name of the checkpoint file.,tf.train.get_checkpoint_state.yaml,2
6423,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",Name of the file.,tf.keras.utils.get_file.yaml,2
6424,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",The vocabulary file name.,tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
6425,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",The name of the file to which we write the contents.,tf.io.write_file.yaml,2
6426,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",File name of the plot image.,tf.keras.utils.plot_model.yaml,2
6427,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",The vocabulary file name.,tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
6428,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",optional suffix for the event file name.,tf.summary.create_file_writer.yaml,2
6429,678,0.0014260640631856077,13,"frozenset({'file', 'name'})","string, name of the file to which to copy to",tf.io.gfile.copy.yaml,2
6430,678,0.0014260640631856077,13,"frozenset({'file', 'name'})","string, name of the file whose contents need to be copied",tf.io.gfile.copy.yaml,2
6431,678,0.0014260640631856077,13,"frozenset({'file', 'name'})",Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames.,tf.train.latest_checkpoint.yaml,2
6432,678,0.0014260640631856077,13,"frozenset({'file', 'name'})","string, name of the file to which to copy to",tf.compat.v1.gfile.Copy.yaml,2
6433,678,0.0014260640631856077,13,"frozenset({'file', 'name'})","string, name of the file who's contents need to be copied",tf.compat.v1.gfile.Copy.yaml,2
6434,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6435,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `None` (i.e., 'lu_solve').",tf.linalg.lu_solve.yaml,2
6436,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_solve.yaml,2
6437,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.pinv.yaml,2
6438,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `None` (i.e., 'lu_reconstruct').",tf.linalg.lu_reconstruct.yaml,2
6439,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_reconstruct.yaml,2
6440,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
6441,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `None` (i.e., `eps * max(rows, cols) * max(singular_val)`).",tf.linalg.matrix_rank.yaml,2
6442,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `False` (i.e., no graph assertions are added).",tf.linalg.matrix_rank.yaml,2
6443,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6444,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6445,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `None` (i.e., 'lu_matrix_inverse').",tf.linalg.lu_matrix_inverse.yaml,2
6446,743,0.0014260640631856077,13,"frozenset({'e', 'default'})","Default value: `False` (i.e., don't validate arguments).",tf.linalg.lu_matrix_inverse.yaml,2
6447,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})",Values can be a `SparseTensor` or a `Tensor` depends on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.input_layer.yaml,2
6448,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})",Values are `Tensor` or `SparseTensor` depending on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.linear_model.yaml,2
6449,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Supported values are `'fro'`, `'euclidean'`, `1`,`2`, `np.inf` and any positive real number yielding the corresponding p-norm.",tf.linalg.normalize.yaml,2
6450,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
6451,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
6452,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
6453,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
6454,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
6455,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm.",tf.norm.yaml,2
6456,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
6457,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
6458,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})","Supported values are 'fro', 'euclidean',`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm.",tf.compat.v1.norm.yaml,2
6459,676,0.0014260640631856077,13,"frozenset({'values', 'corresponding'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
6460,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
6461,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
6462,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
6463,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Monotonically increasing sequence of `num_spatial_dims`integers (which are >= 1) specifying the spatial dimensions of `input`and output.,tf.nn.with_space_to_batch.yaml,3
6464,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",A single integer specifying the spatial dimensions of the filters.,tf.keras.layers.SeparableConv1D.yaml,3
6465,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
6466,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
6467,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
6468,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
6469,437,0.0014260640631856077,10,"frozenset({'spatial', 'dimensions', 'SOME_DTYPE'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
6470,742,0.0014260640631856077,13,"frozenset({'e', 'none'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
6471,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6472,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Default value: `None` (i.e., 'lu_solve').",tf.linalg.lu_solve.yaml,2
6473,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
6474,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Default value: `None` (i.e., 'lu_reconstruct').",tf.linalg.lu_reconstruct.yaml,2
6475,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Any of the dimensions may be statically unknown (i.e., `None`).",tf.summary.image.yaml,2
6476,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
6477,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Default value: `None` (i.e., `eps * max(rows, cols) * max(singular_val)`).",tf.linalg.matrix_rank.yaml,2
6478,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6479,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Any of the dimensions may be statically unknown (i.e., `None`).",tf.summary.audio.yaml,2
6480,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6481,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
6482,742,0.0014260640631856077,13,"frozenset({'e', 'none'})","Default value: `None` (i.e., 'lu_matrix_inverse').",tf.linalg.lu_matrix_inverse.yaml,2
6483,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,3
6484,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.union.yaml,3
6485,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.union.yaml,3
6486,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.intersection.yaml,3
6487,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.intersection.yaml,3
6488,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,3
6489,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.string_split.yaml,3
6490,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.difference.yaml,3
6491,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.difference.yaml,3
6492,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.strings.split.yaml,3
6493,706,0.0014260640631856077,11,"frozenset({'ssparsetensor', 'tensor', 'type'})","A `SparseTensor`, `SparseTensorValue`, or an object whose type has a registered `Tensor` conversion function.",tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,3
6494,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,4
6495,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,4
6496,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,4
6497,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,4
6498,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,4
6499,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,4
6500,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,4
6501,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,4
6502,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,4
6503,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,4
6504,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,4
6505,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,4
6506,488,0.0014260640631856077,13,"frozenset({'array', 'tensor', 'python', 'd'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,4
6507,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, path to a potential directory",tf.io.gfile.isdir.yaml,2
6508,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, name of the directory to be created",tf.io.gfile.mkdir.yaml,2
6509,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, name of the directory to be created",tf.io.gfile.makedirs.yaml,2
6510,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, path to a potential directory",tf.compat.v1.gfile.IsDirectory.yaml,2
6511,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})",[Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.,tf.compat.v1.train.warm_start.yaml,2
6512,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, path to a directory",tf.compat.v1.gfile.ListDirectory.yaml,2
6513,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, path to a directory",tf.io.gfile.listdir.yaml,2
6514,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, name of the directory to be created",tf.compat.v1.gfile.MkDir.yaml,2
6515,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})",a string specifying the directory in which to write an event file.,tf.summary.create_file_writer.yaml,2
6516,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, a Directory name",tf.io.gfile.walk.yaml,2
6517,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, a path to a directory",tf.compat.v1.gfile.DeleteRecursively.yaml,2
6518,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, name of the directory to be created",tf.compat.v1.gfile.MakeDirs.yaml,2
6519,460,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'directory'})","string, a Directory name",tf.compat.v1.gfile.Walk.yaml,2
6520,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool2d.yaml,3
6521,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.avg_pool1d.yaml,3
6522,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",A 5-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool3d.yaml,3
6523,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool1d.yaml,3
6524,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
6525,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,3
6526,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,3
6527,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
6528,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.compat.v1.nn.max_pool.yaml,3
6529,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,3
6530,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
6531,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
6532,584,0.0014260640631856077,13,"frozenset({'data_format', 'tensor', 'd'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,3
6533,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,2
6534,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
6535,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
6536,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",A string specifying how to combine embedding results for each entry.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
6537,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
6538,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6539,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6540,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,2
6541,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})",A string specifying how to combine embedding results for each entry.,tf.nn.safe_embedding_lookup_sparse.yaml,2
6542,152,0.0014260640631856077,10,"frozenset({'combine', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
6543,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})","(Optional.) If `True`, ignores errors with CSV file parsing, such as malformed data or empty lines, and moves on to the next valid CSV record.",tf.data.experimental.make_csv_dataset.yaml,2
6544,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})","(optional) If True (default), logits is shaped [time, batch, logits].",tf.nn.ctc_loss.yaml,2
6545,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})","(Optional.) If `True`, ignores errors with CSV file parsing, such as malformed data or empty lines, and moves on to the next valid CSV record.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
6546,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables support for back propagation.,tf.foldr.yaml,2
6547,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.foldr.yaml,2
6548,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables support for back propagation.,tf.scan.yaml,2
6549,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True scans the tensor last to first (instead of first to last).,tf.scan.yaml,2
6550,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.scan.yaml,2
6551,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
6552,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables support for back propagation.,tf.foldl.yaml,2
6553,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.foldl.yaml,2
6554,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables support for back propagation.,tf.map_fn.yaml,2
6555,881,0.0014260640631856077,13,"frozenset({'optional', 'true'})",(optional) True enables GPU-CPU memory swapping.,tf.map_fn.yaml,2
6556,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
6557,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
6558,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Each string is a JSON object serialized according to the JSON mapping of the Example proto.,tf.io.decode_json_example.yaml,2
6559,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
6560,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
6561,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
6562,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
6563,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6564,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
6565,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})","A `dict` mapping `int`s to callables, or a `list` of (`int`, callable) pairs, or simply a list of callables (in which case the index serves as the key).",tf.switch_case.yaml,2
6566,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
6567,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
6568,456,0.0014260640631856077,13,"frozenset({'mapping', 'SOME_DTYPE'})","dict, a mapping where the keys are flag names (strings).",tf.compat.v1.flags.flag_dict_to_args.yaml,2
6569,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the op.,tf.sparse.cross.yaml,3
6570,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",A name to give this `Op` (optional).,tf.linalg.adjoint.yaml,3
6571,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_solve.yaml,3
6572,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the op.,tf.sparse.cross_hashed.yaml,3
6573,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",A name to give this `Op` (optional).,tf.linalg.expm.yaml,3
6574,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional string name for this op.,tf.summary.write.yaml,3
6575,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the op.,tf.sparse.from_dense.yaml,3
6576,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the initialization op.,tf.compat.v1.tables_initializer.yaml,3
6577,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_matmul.yaml,3
6578,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional string name for this op.,tf.summary.experimental.write_raw_pb.yaml,3
6579,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the op.,tf.nn.embedding_lookup_sparse.yaml,3
6580,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional op name.,tf.compat.v1.tpu.cross_replica_sum.yaml,3
6581,623,0.0014260640631856077,13,"frozenset({'optional', 'op', 'name'})",Optional name for the op.,tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
6582,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","one of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.Conv3D.yaml,4
6583,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.MaxPool2D.yaml,4
6584,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""`, `""causal""` or `""same""` (case-insensitive).`""causal""` results in causal (dilated) convolutions, e.g. output[t] does not depend on input[t+1:].",tf.keras.layers.Conv1D.yaml,4
6585,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""`, `""same""`, or `""causal""` (case-insensitive).",tf.keras.layers.SeparableConv1D.yaml,4
6586,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.MaxPool3D.yaml,4
6587,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","one of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.SeparableConv2D.yaml,4
6588,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","one of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.Conv2D.yaml,4
6589,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.MaxPool1D.yaml,4
6590,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.AveragePooling2D.yaml,4
6591,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.AveragePooling3D.yaml,4
6592,151,0.0014260640631856077,11,"frozenset({'one', 'case', 'insensitive', 'valid'})","One of `""valid""` or `""same""` (case-insensitive).",tf.keras.layers.AveragePooling1D.yaml,4
6593,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.nn.conv2d_transpose.yaml,7
6594,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.nn.conv2d_transpose.yaml,7
6595,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.compat.v1.nn.conv2d_transpose.yaml,7
6596,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.compat.v1.nn.conv2d_transpose.yaml,7
6597,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.compat.v1.nn.conv2d.yaml,7
6598,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.compat.v1.nn.conv2d.yaml,7
6599,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.nn.conv2d.yaml,7
6600,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})",If a single value is given it is replicated in the `H` and `W` dimension.,tf.nn.conv2d.yaml,7
6601,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.nn.conv3d_transpose.yaml,7
6602,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.nn.conv3d_transpose.yaml,7
6603,155,0.0014260640631856077,11,"frozenset({'value', 'w', 'replicated', 'dimension', 'single', 'given', 'h'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.compat.v1.nn.conv3d_transpose.yaml,7
6604,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sum.yaml,3
6605,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sum.yaml,3
6606,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sqrt_n.yaml,3
6607,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sqrt_n.yaml,3
6608,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,3
6609,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
6610,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
6611,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_mean.yaml,3
6612,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_mean.yaml,3
6613,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_mean.yaml,3
6614,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_mean.yaml,3
6615,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sum.yaml,3
6616,627,0.0014260640631856077,13,"frozenset({'d', 'indices', 'tensor'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sum.yaml,3
6617,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
6618,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
6619,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
6620,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.shared_embeddings.yaml,2
6621,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.shared_embeddings.yaml,2
6622,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
6623,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","str, name to give the target column `y`.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
6624,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
6625,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.embedding_column.yaml,2
6626,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.embedding_column.yaml,2
6627,588,0.0014260640631856077,13,"frozenset({'column', 'name'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
6628,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",String representing checkpoint name/pattern from which to restore column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
6629,588,0.0014260640631856077,13,"frozenset({'column', 'name'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
6630,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
6631,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})","`int`, maximum number of training steps with no increase in the given metric.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
6632,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",The maximum number of seconds to wait between checkpoints.,tf.train.checkpoints_iterator.yaml,2
6633,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})","`int`, maximum number of training steps with no decrease in the given metric.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
6634,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",Optional maximum number of iterations of the while loop to run.,tf.compat.v1.while_loop.yaml,2
6635,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
6636,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",Maximum number of microseconds to wait before outputting an incomplete batch.,tf.nondifferentiable_batch_function.yaml,2
6637,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",The maximum number of shards in int created taking precedence over `max_shard_bytes`.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
6638,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",Optional maximum number of iterations of the while loop to run.,tf.while_loop.yaml,2
6639,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
6640,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar representing maximum number of boxes retained over all classes.,tf.image.combined_non_max_suppression.yaml,2
6641,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
6642,485,0.0014260640631856077,13,"frozenset({'number', 'maximum'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
6643,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split_with_offsets.yaml,2
6644,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode_with_offsets.yaml,2
6645,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",A value of 'replace' (the default) will cause the operation to replace any invalid formatting in the input with the`replacement_char` codepoint.,tf.strings.unicode_transcode.yaml,2
6646,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`.,tf.strings.unicode_transcode.yaml,2
6647,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",Specifies the response when an invalid codepoint is encountered (optional).,tf.strings.unicode_encode.yaml,2
6648,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",One of:     * `'replace'`: Replace invalid codepoint with the       `replacement_char`.,tf.strings.unicode_encode.yaml,2
6649,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",    * `'strict'`: Raise an exception for any invalid codepoint.,tf.strings.unicode_encode.yaml,2
6650,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement character codepoint to be used in place of any invalid input when `errors='replace'`.,tf.strings.unicode_encode.yaml,2
6651,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`.,tf.strings.unicode_split.yaml,2
6652,153,0.0014260640631856077,10,"frozenset({'codepoint', 'invalid'})",The replacement codepoint to be used in place of invalid substrings in `input` when `errors='replace'`; and in place of C0 control characters in `input` when `replace_control_characters=True`.,tf.strings.unicode_decode.yaml,2
6653,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6654,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","In this case, values of 'None' in the 'shape' argument represent ragged dimensions.",tf.keras.backend.placeholder.yaml,2
6655,871,0.0014260640631856077,13,"frozenset({'values', 'none'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
6656,871,0.0014260640631856077,13,"frozenset({'values', 'none'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
6657,871,0.0014260640631856077,13,"frozenset({'values', 'none'})",Valid values: None: Switch to a system default.'warn': Copies the tensors which are not on the right device and logs a warning.'explicit': Raises an error if the placement is not as required.'silent': Silently copies the tensors.,tf.config.experimental.set_device_policy.yaml,2
6658,871,0.0014260640631856077,13,"frozenset({'values', 'none'})",Values that can't be evaluated will be None.,tf.get_static_value.yaml,2
6659,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","If not `None`, embedding values are l2-normalized to this value.",tf.feature_column.embedding_column.yaml,2
6660,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
6661,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6662,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6663,871,0.0014260640631856077,13,"frozenset({'values', 'none'})",Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,tf.config.experimental.set_synchronous_execution.yaml,2
6664,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","In this case, values of 'None' in the 'shape' argument represent ragged dimensions.",tf.keras.Input.yaml,2
6665,871,0.0014260640631856077,13,"frozenset({'values', 'none'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
6666,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional scope used to filter the summary ops, using `re.match`",tf.compat.v1.summary.merge_all.yaml,2
6667,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.scalar.yaml,2
6668,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.histogram.yaml,2
6669,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.image2.yaml,2
6670,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,2
6671,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})",Optional SummaryMetadata proto (which describes which plugins may use the summary value).,tf.compat.v1.summary.tensor_summary.yaml,2
6672,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.scalar.yaml,2
6673,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.image.yaml,2
6674,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.text.yaml,2
6675,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.audio.yaml,2
6676,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
6677,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.histogram.yaml,2
6678,578,0.0014260640631856077,13,"frozenset({'optional', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.audio2.yaml,2
6679,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,2
6680,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6681,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
6682,870,0.0014260640631856077,13,"frozenset({'input', 'none'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
6683,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","A value of `None` means ""infer the input shape from the shapes in `inputs`"".",tf.math.accumulate_n.yaml,2
6684,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","A value of `None`means ""infer the input dtype from `inputs[0]`"".",tf.math.accumulate_n.yaml,2
6685,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","If `None`, a separate function is instantiated for each inferred input signature.",tf.function.yaml,2
6686,870,0.0014260640631856077,13,"frozenset({'input', 'none'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
6687,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
6688,870,0.0014260640631856077,13,"frozenset({'input', 'none'})",`len(repeats)`must equal `input.shape[axis]` if axis is not None.,tf.repeat.yaml,2
6689,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6690,870,0.0014260640631856077,13,"frozenset({'input', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6691,870,0.0014260640631856077,13,"frozenset({'input', 'none'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
6692,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
6693,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",tf.ragged.stack.yaml,2
6694,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,2
6695,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
6696,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})",Must broadcast against `tf.shape(a)[:-2]`.,tf.linalg.pinv.yaml,2
6697,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,2
6698,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,2
6699,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,2
6700,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,2
6701,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,2
6702,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,2
6703,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
6704,894,0.0014260640631856077,13,"frozenset({'must', 'tf'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,2
6705,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","The standard deviation of the normal distribution, before truncation.",tf.random.stateless_truncated_normal.yaml,2
6706,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})",The standard deviation of the normal distribution.,tf.random.stateless_normal.yaml,2
6707,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","If not specified, defaults to`tf.truncated_normal_initializer` with mean `0.0` and standard deviation`1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
6708,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","An integer, the axis to compute the standard deviation.",tf.keras.backend.std.yaml,2
6709,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.shared_embeddings.yaml,2
6710,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","If not specified, defaults to`tf.compat.v1.truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
6711,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","The standard deviation of the normal distribution, before truncation.",tf.random.truncated_normal.yaml,2
6712,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})",The standard deviation of the normal distribution.,tf.random.normal.yaml,2
6713,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})",Standard deviation of the values.,tf.keras.backend.truncated_normal.yaml,2
6714,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.embedding_column.yaml,2
6715,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","Float, standard deviation of the normal distribution.",tf.keras.backend.random_normal_variable.yaml,2
6716,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
6717,145,0.0014260640631856077,13,"frozenset({'standard', 'deviation'})","A float, standard deviation of the normal distribution to draw samples.",tf.keras.backend.random_normal.yaml,2
6718,569,0.0014260640631856077,13,"frozenset({'values', 'class'})","class, the Enum class with all the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,2
6719,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.precision_at_k.yaml,2
6720,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class `AggregationMethod`.,tf.gradients.yaml,2
6721,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
6722,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class `AggregationMethod`.,tf.compat.v1.gradients.yaml,2
6723,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
6724,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_local_variable.yaml,2
6725,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_local_variable.yaml,2
6726,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_variable.yaml,2
6727,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_variable.yaml,2
6728,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.recall_at_k.yaml,2
6729,569,0.0014260640631856077,13,"frozenset({'values', 'class'})","class, the Enum class with all the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,2
6730,569,0.0014260640631856077,13,"frozenset({'values', 'class'})",The final dimension contains the logit values for each class.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
6731,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
6732,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
6733,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","1-D with shape `[M]`, all values must be >= 1.",tf.compat.v1.batch_to_space_nd.yaml,3
6734,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,3
6735,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch_nd.yaml,3
6736,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,3
6737,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","1-D with shape `[M]`, all values must be >= 1.",tf.batch_to_space.yaml,3
6738,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","2-D with shape `[M, 2]`, all values must be >= 0.",tf.batch_to_space.yaml,3
6739,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch.yaml,3
6740,900,0.0014260640631856077,10,"frozenset({'d', 'values', 'shape'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,3
6741,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
6742,410,0.0014260640631856077,13,"frozenset({'input', 'across'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
6743,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
6744,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d_transpose.yaml,2
6745,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmin.yaml,2
6746,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
6747,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
6748,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmin.yaml,2
6749,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmax.yaml,2
6750,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmax.yaml,2
6751,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d.yaml,2
6752,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
6753,410,0.0014260640631856077,13,"frozenset({'input', 'across'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
6754,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,3
6755,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
6756,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,3
6757,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.MaxPool2D.yaml,3
6758,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,3
6759,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,3
6760,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,3
6761,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
6762,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
6763,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.AveragePooling2D.yaml,3
6764,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,3
6765,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
6766,914,0.0014260640631856077,13,"frozenset({'SOME_DTYPE', 'dimension', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
6767,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})","string, path to a potential directory",tf.io.gfile.isdir.yaml,2
6768,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",Directory with checkpoints file or path to checkpoint.,tf.train.list_variables.yaml,2
6769,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})","string, path to a potential directory",tf.compat.v1.gfile.IsDirectory.yaml,2
6770,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",Directory with checkpoints file or path to checkpoint file.,tf.train.load_checkpoint.yaml,2
6771,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",Directory with checkpoints file or path to checkpoint.,tf.train.load_variable.yaml,2
6772,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",[Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.,tf.compat.v1.train.warm_start.yaml,2
6773,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",Directory with checkpoints file or path to checkpoint.,tf.compat.v1.train.init_from_checkpoint.yaml,2
6774,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})","string, path to a directory",tf.compat.v1.gfile.ListDirectory.yaml,2
6775,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})","string, path to a directory",tf.io.gfile.listdir.yaml,2
6776,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})", Optional path to a directory where to restore variables.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
6777,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})", Optional path to a directory where to save summaries.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
6778,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})","string, a path to a directory",tf.compat.v1.gfile.DeleteRecursively.yaml,2
6779,461,0.0014260640631856077,13,"frozenset({'path', 'directory'})",The directory path where the dumping information will be written.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
6780,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",A `tf.dtype` identifies the type of labels.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6781,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
6782,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
6783,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.debugging.assert_type.yaml,2
6784,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",A `tf.dtype` identifies the type of labels.,tf.estimator.regressor_parse_example_spec.yaml,2
6785,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
6786,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
6787,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.compat.v1.assert_type.yaml,2
6788,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","Type of weights, such as `tf.float32`.",tf.feature_column.weighted_categorical_column.yaml,2
6789,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
6790,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",`tf.Tensor` with same type and rank as `a`.,tf.linalg.matmul.yaml,2
6791,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",A `tf.dtype` identifies the type of labels.,tf.estimator.classifier_parse_example_spec.yaml,2
6792,893,0.0014260640631856077,13,"frozenset({'tf', 'type'})",A `tf.dtype` identifies the type of labels.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
6793,388,0.0014260640631856077,13,"frozenset({'x', 'y'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
6794,388,0.0014260640631856077,13,"frozenset({'x', 'y'})",The sizes of `x.shape[axes[0]]` and `y.shape[axes[1]]` should be equal.,tf.keras.backend.batch_dot.yaml,2
6795,388,0.0014260640631856077,13,"frozenset({'x', 'y'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
6796,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_near.yaml,2
6797,388,0.0014260640631856077,13,"frozenset({'x', 'y'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.image.crop_and_resize.yaml,2
6798,388,0.0014260640631856077,13,"frozenset({'x', 'y'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.compat.v1.image.crop_and_resize.yaml,2
6799,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_greater_equal.yaml,2
6800,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_greater.yaml,2
6801,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_less.yaml,2
6802,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_none_equal.yaml,2
6803,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_equal.yaml,2
6804,388,0.0014260640631856077,13,"frozenset({'x', 'y'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
6805,388,0.0014260640631856077,13,"frozenset({'x', 'y'})"," Defaults to error message and first few entries of `x`, `y`.",tf.compat.v1.assert_less_equal.yaml,2
6806,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
6807,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects or a single `Tensor`.,tf.concat.yaml,3
6808,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
6809,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
6810,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
6811,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,3
6812,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,3
6813,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
6814,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
6815,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
6816,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A list of `Tensor` objects, or a single Tensor.",tf.strings.format.yaml,3
6817,717,0.0013163668275559457,12,"frozenset({'single', 'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
6818,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
6819,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding is used and data_format is `""NHWC""`, this should be in the form `[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d.yaml,2
6820,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding used and data_format is `""NCHW""`, this should be in the form `[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d.yaml,2
6821,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
6822,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding is used and data_format is `""NHWC""`, this should be in the form `[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.nn.conv2d.yaml,2
6823,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding used and data_format is `""NCHW""`, this should be in the form `[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.nn.conv2d.yaml,2
6824,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6825,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding is used and data_format is`""NHWC""`, this should be in the form`[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6826,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding used and data_format is`""NCHW""`, this should be in the form`[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6827,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6828,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding is used and data_format is`""NHWC""`, this should be in the form`[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6829,334,0.0013163668275559457,12,"frozenset({'padding', 'explicit'})","When explicit padding used and data_format is`""NCHW""`, this should be in the form`[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6830,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
6831,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6832,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6833,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.regressor_parse_example_spec.yaml,2
6834,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
6835,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6836,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
6837,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
6838,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
6839,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.classifier_parse_example_spec.yaml,2
6840,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
6841,540,0.0013163668275559457,12,"frozenset({'key', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
6842,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
6843,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.fixed_unigram_candidate_sampler.yaml,2
6844,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Whether to include batch dimension in flattened index of `argmax`.,tf.nn.max_pool_with_argmax.yaml,2
6845,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Whether to use batch normalization after each hidden layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
6846,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Whether to include batch dimension in flattened index of `argmax`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
6847,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
6848,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
6849,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Whether to use Batch Renormalization (https://arxiv.org/abs/1702.03275).,tf.keras.layers.BatchNormalization.yaml,2
6850,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Whether to use Batch Renormalization (https://arxiv.org/abs/1702.03275).,tf.compat.v1.keras.layers.BatchNormalization.yaml,2
6851,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.uniform_candidate_sampler.yaml,2
6852,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.log_uniform_candidate_sampler.yaml,2
6853,771,0.0013163668275559457,12,"frozenset({'whether', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.learned_unigram_candidate_sampler.yaml,2
6854,541,0.0013163668275559457,12,"frozenset({'example', 'key'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
6855,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.input_layer.yaml,2
6856,541,0.0013163668275559457,12,"frozenset({'example', 'key'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
6857,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.linear_model.yaml,2
6858,541,0.0013163668275559457,12,"frozenset({'example', 'key'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6859,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",This means that if there is no data with key 'clicked' it should count as negative example by setting`label_deafault=0`.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6860,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
6861,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",It means tf.Example stores labels with this key.,tf.estimator.regressor_parse_example_spec.yaml,2
6862,541,0.0013163668275559457,12,"frozenset({'example', 'key'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
6863,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",This means that if there is no data with key 'clicked' it should count as negative example by setting`label_deafault=0`.,tf.estimator.classifier_parse_example_spec.yaml,2
6864,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",It means tf.Example stores labels with this key.,tf.estimator.classifier_parse_example_spec.yaml,2
6865,541,0.0013163668275559457,12,"frozenset({'example', 'key'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
6866,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
6867,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","A tuple of (left_pad_value, right_pad_value), a single string, or None.",tf.strings.ngrams.yaml,2
6868,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","If None, no padding will be added; if a single string, then that string will be used for both left and right padding.",tf.strings.ngrams.yaml,2
6869,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","If `func` is None, `tf.function` returns a decorator that can be invoked with a single argument - `func`.",tf.function.yaml,2
6870,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
6871,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
6872,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
6873,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
6874,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
6875,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
6876,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
6877,715,0.0013163668275559457,12,"frozenset({'single', 'none'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
6878,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
6879,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.write.yaml,2
6880,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
6881,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6882,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.scalar.yaml,2
6883,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.image.yaml,2
6884,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.experimental.write_raw_pb.yaml,2
6885,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.text.yaml,2
6886,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.audio.yaml,2
6887,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.histogram.yaml,2
6888,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6889,333,0.0013163668275559457,12,"frozenset({'explicit', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.trace_export.yaml,2
6890,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,2
6891,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv3D.yaml,2
6892,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv1D.yaml,2
6893,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Function that maps (input, num_spatial_dims, padding) -> output",tf.nn.with_space_to_batch.yaml,2
6894,808,0.0013163668275559457,12,"frozenset({'output', 'function'})",Optional regularizer function for the output.,tf.keras.layers.SeparableConv1D.yaml,2
6895,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.SeparableConv2D.yaml,2
6896,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Regularizer function applied to the output of the layer (its ""activation"")..",tf.keras.layers.Conv2D.yaml,2
6897,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","If a function is stateless, when given the same input it will return the same output and have no observable side effects.",tf.compat.v1.py_func.yaml,2
6898,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,2
6899,808,0.0013163668275559457,12,"frozenset({'output', 'function'})"," However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
6900,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.keras.backend.rnn.yaml,2
6901,808,0.0013163668275559457,12,"frozenset({'output', 'function'})","If a function is stateless, when given the same input it will return the same output and have no observable side effects.",tf.numpy_function.yaml,2
6902,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,6
6903,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,6
6904,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,6
6905,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,6
6906,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,6
6907,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,6
6908,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,6
6909,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,6
6910,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,6
6911,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,6
6912,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,6
6913,776,0.0013163668275559457,12,"frozenset({'value', 'tensor', 'dtype', 'type', 'd', 'python'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,6
6914,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","2D numpy array, single image.",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
6915,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
6916,714,0.0013163668275559457,12,"frozenset({'single', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
6917,714,0.0013163668275559457,12,"frozenset({'single', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
6918,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.nn.conv3d_transpose.yaml,2
6919,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.nn.conv3d_transpose.yaml,2
6920,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","If a single value is given it is replicated in the `D`, `H` and `W` dimension.",tf.compat.v1.nn.conv3d_transpose.yaml,2
6921,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
6922,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
6923,714,0.0013163668275559457,12,"frozenset({'single', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
6924,714,0.0013163668275559457,12,"frozenset({'single', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
6925,714,0.0013163668275559457,12,"frozenset({'single', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
6926,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
6927,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
6928,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
6929,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",`int` or shape `tuple` Axes over which to calculate.,tf.signal.ifftshift.yaml,2
6930,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","If axes is a scalar, sum over the last N axes of a and the first N axes of b in order.",tf.tensordot.yaml,2
6931,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
6932,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
6933,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
6934,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","iterable of integers, axes over which to normalize.",tf.keras.backend.normalize_batch_in_training.yaml,2
6935,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
6936,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
6937,390,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
6938,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Constraint function applied to the kernel matrix.,tf.keras.layers.Conv3D.yaml,4
6939,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv3D.yaml,4
6940,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Constraint function applied to the kernel matrix.,tf.keras.layers.Conv1D.yaml,4
6941,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv1D.yaml,4
6942,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Constraint function applied to the depthwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,4
6943,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Regularizer function applied to the depthwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,4
6944,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Constraint function applied to the pointwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,4
6945,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Regularizer function applied to the pointwise kernel matrix.,tf.keras.layers.SeparableConv2D.yaml,4
6946,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Constraint function applied to the kernel matrix.,tf.keras.layers.Conv2D.yaml,4
6947,405,0.0013163668275559457,10,"frozenset({'applied', 'function', 'matrix', 'kernel'})",Regularizer function applied to the `kernel` weights matrix.,tf.keras.layers.Conv2D.yaml,4
6948,762,0.0013163668275559457,12,"frozenset({'set', 'true'})"," If set to `True`, this is a ""Sampled Logistic"" loss instead of NCE, and we are learning to generate log-odds instead of log probabilities.",tf.nn.nce_loss.yaml,2
6949,762,0.0013163668275559457,12,"frozenset({'set', 'true'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_avg_pool.yaml,2
6950,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","When set to `True`, generates the pooling sequence in a pseudorandom fashion, otherwise, in a random fashion.",tf.nn.fractional_avg_pool.yaml,2
6951,762,0.0013163668275559457,12,"frozenset({'set', 'true'})"," If set to`True`, this is a ""Sampled Logistic"" loss instead of NCE, and we are learning to generate log-odds instead of log probabilities.",tf.compat.v1.nn.nce_loss.yaml,2
6952,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","If set to True, then the output of the dot product is the cosine proximity between the two samples.",tf.keras.layers.Dot.yaml,2
6953,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception).",tf.nest.map_structure.yaml,2
6954,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
6955,762,0.0013163668275559457,12,"frozenset({'set', 'true'})",Set to `True` for decoder self-attention.,tf.keras.layers.Attention.yaml,2
6956,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","If set to True, then the output of the dot product is the cosine proximity between the two samples.",tf.keras.layers.dot2.yaml,2
6957,762,0.0013163668275559457,12,"frozenset({'set', 'true'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_max_pool.yaml,2
6958,762,0.0013163668275559457,12,"frozenset({'set', 'true'})","When set to `True`, generates the pooling sequence in a pseudorandom fashion, otherwise, in a random fashion.",tf.nn.fractional_max_pool.yaml,2
6959,762,0.0013163668275559457,12,"frozenset({'set', 'true'})",Set to `True` for decoder self-attention.,tf.keras.layers.AdditiveAttention.yaml,2
6960,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
6961,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
6962,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
6963,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
6964,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
6965,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})",A constant value (or list) of output type `dtype`.,tf.compat.v1.constant.yaml,2
6966,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
6967,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
6968,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
6969,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
6970,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})",A constant value (or list) of output type `dtype`.,tf.constant.yaml,2
6971,775,0.0013163668275559457,12,"frozenset({'dtype', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
6972,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.Conv3D.yaml,9
6973,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.MaxPool2D.yaml,9
6974,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.GlobalMaxPool3D.yaml,9
6975,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.MaxPool3D.yaml,9
6976,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.GlobalMaxPool2D.yaml,9
6977,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.SeparableConv2D.yaml,9
6978,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.Conv2D.yaml,9
6979,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.AveragePooling2D.yaml,9
6980,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.GlobalAveragePooling2D.yaml,9
6981,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.AveragePooling3D.yaml,9
6982,82,0.0013163668275559457,11,"frozenset({'value', 'image_data_format', 'config', 'defaults', 'json', 'file', 'keras', 'found', '~'})",It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`.,tf.keras.layers.GlobalAveragePooling3D.yaml,9
6983,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.scalar.yaml,2
6984,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.text.yaml,2
6985,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.histogram.yaml,2
6986,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.image2.yaml,2
6987,352,0.0013163668275559457,12,"frozenset({'node', 'name'})","If this is not set, then the node name will be used instead.",tf.compat.v1.summary.tensor_summary.yaml,2
6988,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.tensor_summary.yaml,2
6989,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",The scope name will be striped from the node definitions for easy import later into new name scopes.,tf.compat.v1.train.export_meta_graph.yaml,2
6990,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",(e.g. MatMul) 'scope' view organizes profile using graph node name scope.,tf.compat.v1.profiler.profile.yaml,2
6991,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A string name for the foldl node in the graph,tf.keras.backend.foldl.yaml,2
6992,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A string name for the map node in the graph,tf.keras.backend.map_fn.yaml,2
6993,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A string name for the foldr node in the graph,tf.keras.backend.foldr.yaml,2
6994,352,0.0013163668275559457,12,"frozenset({'node', 'name'})",A name for the generated node.,tf.compat.v1.summary.audio2.yaml,2
6995,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
6996,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","int, order of interpolation`",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
6997,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
6998,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})",This optimizer is also essential for pruning Identity and NoOp nodes.loop_optimization: Loop optimizations.function_optimization: Function optimizations and inlining.debug_stripper: Strips debug-related nodes from the graph.disable_model_pruning: Disable removal of unnecessary ops from the graphscoped_allocator_optimization: Try to allocate some independent Op outputs contiguously in order to merge or eliminate downstream Ops.pin_to_host_optimization: Force small ops onto the CPU.implementation_selector: Enable the swap of kernel implementations based on the device placement.auto_mixed_precision: Change certain float32 ops to float16 on Volta GPUs and above.,tf.config.optimizer.set_experimental_options.yaml,2
6999,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","If axes is a scalar, sum over the last N axes of a and the first N axes of b in order.",tf.tensordot.yaml,2
7000,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","bool, whether to read the records in random order.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
7001,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","int, order of spline interpolation.",tf.keras.preprocessing.image.random_rotation.yaml,2
7002,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","int, order of spline interpolation.",tf.keras.preprocessing.image.random_zoom.yaml,2
7003,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","bool, Traverse pre order if True, post order if False.",tf.io.gfile.walk.yaml,2
7004,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","int, order of spline interpolation.",tf.keras.preprocessing.image.random_shear.yaml,2
7005,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","bool, Traverse in order if True, post order if False.",tf.compat.v1.gfile.Walk.yaml,2
7006,723,0.0013163668275559457,12,"frozenset({'SOME_DTYPE', 'order'})","int, order of spline interpolation.",tf.keras.preprocessing.image.random_shift.yaml,2
7007,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,3
7008,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
7009,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.linalg.normalize.yaml,3
7010,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",See the description of `axis`on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.linalg.normalize.yaml,3
7011,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,3
7012,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
7013,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.norm.yaml,3
7014,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.norm.yaml,3
7015,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,3
7016,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
7017,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.compat.v1.norm.yaml,3
7018,795,0.0013163668275559457,12,"frozenset({'axis', 'tensor', 'batch'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.compat.v1.norm.yaml,3
7019,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7020,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7021,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
7022,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
7023,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,2
7024,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7025,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7026,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
7027,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
7028,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,2
7029,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7030,532,0.0013163668275559457,12,"frozenset({'num_classes', 'predictions'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7031,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})",The device on which to run the embedding lookup.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7032,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","If not specified, the default behavior is embedding lookup on ""tpu_embedding_core"" for training and ""cpu"" for inference.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7033,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","For serving, doing embedding lookup on tpu_tensor_core during serving is a way to reduce host cpu usage in cases where that is a bottleneck.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7034,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7035,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})",These columns produce the sparse IDs that are inputs to the embedding lookup.,tf.feature_column.shared_embeddings.yaml,2
7036,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})",The device on which to run the embedding lookup.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
7037,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","If not specified, the default behavior is embedding lookup on ""tpu_embedding_core"" for training and ""cpu"" for inference.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
7038,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","For serving, doing embedding lookup on tpu_tensor_core during serving is a way to reduce host cpu usage in cases where that is a bottleneck.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
7039,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
7040,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})","If not None, a `TPUEmbeddingConfiguration` proto describing the desired configuration of the hardware embedding lookup tables.",tf.compat.v1.tpu.initialize_system.yaml,2
7041,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})",This column produces the sparse IDs that are inputs to the embedding lookup.,tf.feature_column.embedding_column.yaml,2
7042,97,0.0013163668275559457,12,"frozenset({'lookup', 'embedding'})",These columns produce the sparse IDs that are inputs to the embedding lookup.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
7043,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,5
7044,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,5
7045,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,5
7046,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,5
7047,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,5
7048,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,5
7049,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,5
7050,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,5
7051,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,5
7052,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,5
7053,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,5
7054,377,0.0013163668275559457,12,"frozenset({'collections', 'added', 'metric', 'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,5
7055,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",Name to give to the DenseFeatures.,tf.compat.v1.keras.layers.DenseFeatures.yaml,2
7056,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op` (optional).,tf.linalg.adjoint.yaml,2
7057,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op`.,tf.linalg.cholesky_solve.yaml,2
7058,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_solve.yaml,2
7059,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op` (optional).,tf.linalg.expm.yaml,2
7060,93,0.0013163668275559457,10,"frozenset({'give', 'name'})","str, name to give the target column `y`.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
7061,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op`.,tf.compat.v1.assert_type.yaml,2
7062,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",Name to give to the SequenceFeatures.,tf.keras.experimental.SequenceFeatures.yaml,2
7063,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_matmul.yaml,2
7064,93,0.0013163668275559457,10,"frozenset({'give', 'name'})",A name to give this `Op`.,tf.linalg.logdet.yaml,2
7065,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",A `tf.dtype` identifies the type of labels.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7066,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7067,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7068,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",A `tf.dtype` identifies the type of labels.,tf.estimator.regressor_parse_example_spec.yaml,2
7069,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.regressor_parse_example_spec.yaml,2
7070,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7071,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
7072,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",A `tf.dtype` identifies the type of labels.,tf.estimator.classifier_parse_example_spec.yaml,2
7073,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
7074,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",It means tf.Example stores labels with this key.,tf.estimator.classifier_parse_example_spec.yaml,2
7075,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",A `tf.dtype` identifies the type of labels.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
7076,735,0.0013163668275559457,12,"frozenset({'labels', 'tf'})",It means tf.Example stores labels with this key.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
7077,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",It must be a positive integer.,tf.compat.v1.while_loop.yaml,2
7078,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Positive integer.,tf.keras.backend.resize_images.yaml,2
7079,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Positive integer.,tf.keras.backend.resize_images.yaml,2
7080,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Positive integer.,tf.keras.backend.resize_volumes.yaml,2
7081,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Positive integer.,tf.keras.backend.resize_volumes.yaml,2
7082,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Positive integer.,tf.keras.backend.resize_volumes.yaml,2
7083,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",A positive int32.,tf.nn.atrous_conv2d_transpose.yaml,2
7084,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Should be a positive float.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
7085,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",It must be a positive integer.,tf.while_loop.yaml,2
7086,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,2
7087,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",A positive int32.,tf.nn.atrous_conv2d.yaml,2
7088,511,0.0013163668275559457,12,"frozenset({'positive', 'SOME_DTYPE'})",Optional positive `int`.,tf.summary.histogram.yaml,2
7089,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
7090,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","Must be in the range `[-rank(values), rank(values))`.",tf.concat.yaml,2
7091,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","Positive axis in the rage of `[0, rank(values))` refers to `axis`-th dimension.",tf.concat.yaml,2
7092,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})",And negative axis refers to `axis + rank(values)`-th dimension.,tf.concat.yaml,2
7093,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
7094,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
7095,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",tf.ragged.stack.yaml,2
7096,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})"," Must be in the range [0, rank(values)).",tf.quantization.quantized_concat.yaml,2
7097,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
7098,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
7099,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
7100,798,0.0013163668275559457,12,"frozenset({'rank', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
7101,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
7102,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,3
7103,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,3
7104,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,3
7105,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})",Non negative real number.,tf.image.adjust_gamma.yaml,3
7106,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
7107,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
7108,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
7109,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
7110,527,0.0013163668275559457,10,"frozenset({'non', 'negative', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,3
7111,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.compat.v1.batch_to_space_nd.yaml,3
7112,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,3
7113,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
7114,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch_nd.yaml,3
7115,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
7116,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,3
7117,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.batch_to_space.yaml,3
7118,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.",tf.batch_to_space.yaml,3
7119,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
7120,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch.yaml,3
7121,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
7122,518,0.0013163668275559457,12,"frozenset({'d', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,3
7123,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})","dict, the extra keyword args that are passed to Flag <strong>init</strong>.",tf.compat.v1.flags.DEFINE_bool.yaml,8
7124,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi_float.yaml,8
7125,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})","dict, the extra keyword args that are passed to Flag <strong>init</strong>.",tf.compat.v1.flags.DEFINE_enum.yaml,8
7126,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_spaceseplist.yaml,8
7127,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi.yaml,8
7128,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag<strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,8
7129,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi_enum.yaml,8
7130,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi_integer.yaml,8
7131,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_multi_string.yaml,8
7132,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})",Dictionary with extra keyword args that are passed to the Flag <strong>init</strong>.,tf.compat.v1.flags.DEFINE_list.yaml,8
7133,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})","dict, the extra keyword args that are passed to Flag <strong>init</strong>.",tf.compat.v1.flags.DEFINE.yaml,8
7134,99,0.0013163668275559457,12,"frozenset({'extra', 'args', 'init', 'SOME_STRUCTURE', 'flag', 'strong', 'passed', 'keyword'})","dict, the extra keyword args that are passed to Flag <strong>init</strong>.",tf.compat.v1.flags.DEFINE_enum_class.yaml,8
7135,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
7136,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
7137,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
7138,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
7139,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
7140,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
7141,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
7142,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
7143,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
7144,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
7145,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
7146,536,0.0013163668275559457,12,"frozenset({'tensor', 'columns'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
7147,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_sum.yaml,4
7148,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.sparse_concat.yaml,4
7149,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_all.yaml,4
7150,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",Deprecated old name for axis.,tf.compat.v1.sparse_split.yaml,4
7151,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_mean.yaml,4
7152,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_any.yaml,4
7153,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_prod.yaml,4
7154,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for `axis`.,tf.compat.v1.losses.cosine_distance.yaml,4
7155,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.count_nonzero.yaml,4
7156,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_max.yaml,4
7157,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_min.yaml,4
7158,89,0.0013163668275559457,12,"frozenset({'axis', 'deprecated', 'old', 'name'})",The old (deprecated) name for axis.,tf.compat.v1.reduce_logsumexp.yaml,4
7159,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","If not specified, defaults to`tf.truncated_normal_initializer` with mean `0.0` and standard deviation`1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7160,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})", Defaults to `()` if`ragged_rank` is not specified.,tf.compat.v1.ragged.constant_value.yaml,2
7161,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","Defaults to`max(0, K - 1)` if `inner_shape` is not specified.",tf.compat.v1.ragged.constant_value.yaml,2
7162,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})"," Defaults to `max(0, K 1 - len(inner_shape))`if`inner_shape` is specified.",tf.compat.v1.ragged.constant_value.yaml,2
7163,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.shared_embeddings.yaml,2
7164,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","If not specified, defaults to`tf.compat.v1.truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
7165,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.embedding_column.yaml,2
7166,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})", Defaults to `()` if `ragged_rank`is not specified.,tf.ragged.constant.yaml,2
7167,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","Defaults to`max(0, K - 1)` if `inner_shape` is not specified.",tf.ragged.constant.yaml,2
7168,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})"," Defaults to `max(0, K 1 - len(inner_shape))`if`inner_shape` is specified.",tf.ragged.constant.yaml,2
7169,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
7170,727,0.0013163668275559457,12,"frozenset({'defaults', 'specified'})"," If not specified, defaults to 0.",tf.required_space_to_batch_paddings.yaml,2
7171,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,3
7172,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
7173,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,3
7174,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,3
7175,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,3
7176,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,3
7177,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,3
7178,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,3
7179,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,3
7180,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,3
7181,524,0.0013163668275559457,11,"frozenset({'optional', 'SOME_DTYPE', 'names'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,3
7182,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,3
7183,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,3
7184,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,3
7185,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.regressor_parse_example_spec.yaml,3
7186,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,3
7187,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,3
7188,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,3
7189,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,3
7190,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.classifier_parse_example_spec.yaml,3
7191,539,0.0013163668275559457,10,"frozenset({'key', 'tensor', 'used'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
7192,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","If `class_id` is outside this range, the method returns NAN.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7193,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
7194,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",tf.image.crop_and_resize.yaml,2
7195,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use`extrapolation_value` to extrapolate the input image values.",tf.compat.v1.image.crop_and_resize.yaml,2
7196,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","If `class_id` is outside this range, the method returns NAN.",tf.compat.v1.metrics.precision_at_k.yaml,2
7197,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.precision_at_k.yaml,2
7198,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","If set, values outside of range `[0, num_buckets)` will be replaced with this value.",tf.feature_column.categorical_column_with_identity.yaml,2
7199,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","If class_id is outside this range, the method returns NAN.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7200,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})",Values outside this range always count towards `false_negative_at_<k>`.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
7201,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})","If class_id is outside this range, the method returns NAN.",tf.compat.v1.metrics.recall_at_k.yaml,2
7202,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})",Values outside this range always count towards `false_negative_at_<k>`.,tf.compat.v1.metrics.recall_at_k.yaml,2
7203,354,0.0013163668275559457,12,"frozenset({'outside', 'range'})",Values outside this range are ignored.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
7204,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
7205,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
7206,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
7207,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
7208,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7209,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
7210,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
7211,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
7212,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
7213,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
7214,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7215,473,0.0013163668275559457,12,"frozenset({'start', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
7216,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,4
7217,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,4
7218,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,4
7219,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,4
7220,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,4
7221,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,4
7222,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,4
7223,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,4
7224,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,4
7225,683,0.0013163668275559457,10,"frozenset({'tensor', 'SOME_DTYPE', 'number', 'representing'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,4
7226,817,0.0013163668275559457,12,"frozenset({'use', 'none'})",If this is None then use get_help_width(),tf.compat.v1.flags.text_wrap.yaml,2
7227,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If not `None`, the `InfeedQueue` to use to augment the inputs of `computation`.",tf.compat.v1.tpu.shard.yaml,2
7228,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.advise.yaml,2
7229,817,0.0013163668275559457,12,"frozenset({'use', 'none'})"," If you do not have access to the`Variable` objects at the call site, please use the above option.`None`, in which case only TRAINABLE variables specified in`var_name_to_vocab_info` will be warm-started.",tf.compat.v1.train.warm_start.yaml,2
7230,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.write_op_log.yaml,2
7231,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If `None`, use the faster implementation if possible.",tf.keras.layers.BatchNormalization.yaml,2
7232,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If `None`, use the default graph.",tf.compat.v1.train.export_meta_graph.yaml,2
7233,817,0.0013163668275559457,12,"frozenset({'use', 'none'})"," If it is not `None`, then the `loop_state` will be propagated through the RNN loop, for use purely by `loop_fn` to keep track of its own state.",tf.compat.v1.nn.raw_rnn.yaml,2
7234,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
7235,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","if `None` or `True`, use a faster, fused implementation if possible.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
7236,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.profile.yaml,2
7237,817,0.0013163668275559457,12,"frozenset({'use', 'none'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7238,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
7239,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
7240,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
7241,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
7242,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","If this first`emit_output` return value is `None`, then the `emit_ta` result of`raw_rnn` will have the same structure and dtypes as `cell.output_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
7243,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","If `True`, skip the empty strings from the result.",tf.compat.v1.string_split.yaml,2
7244,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
7245,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})",A scalar determining whether to return the result of `true_fn` or`false_fn`.,tf.cond.yaml,2
7246,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
7247,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
7248,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})",A scalar determining whether to return the result of `true_fn` or`false_fn`.,tf.compat.v1.cond.yaml,2
7249,445,0.0013163668275559457,12,"frozenset({'result', 'SOME_DTYPE'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
7250,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads used to read CSV records from files.,tf.data.experimental.make_csv_dataset.yaml,2
7251,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of parallel threads,tf.config.threading.set_intra_op_parallelism_threads.yaml,2
7252,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of parallel threads,tf.config.threading.set_inter_op_parallelism_threads.yaml,2
7253,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads used to read CSV records from files.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7254,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of scheduling threads for processing batches of work.,tf.nondifferentiable_batch_function.yaml,2
7255,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
7256,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7257,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads used to read `Example` records.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7258,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
7259,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of threads used to read `Example` records.,tf.data.experimental.make_batched_features_dataset.yaml,2
7260,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
7261,118,0.0013163668275559457,12,"frozenset({'threads', 'number'})",Number of seconds given to threads to stop after`close()` has been called.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
7262,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
7263,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
7264,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
7265,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
7266,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
7267,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`.,tf.config.set_logical_device_configuration.yaml,2
7268,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
7269,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
7270,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
7271,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
7272,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",A list of `tf.Tensor` objects.,tf.numpy_function.yaml,2
7273,664,0.0013163668275559457,12,"frozenset({'objects', 'tf'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
7274,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.strings.substr.yaml,2
7275,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.strings.substr.yaml,2
7276,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.length.yaml,2
7277,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
7278,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})", Results are undefined if `unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.strings.length.yaml,2
7279,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","A `string` from: `""UTF-8"", ""UTF-16-BE"", ""UTF-32-BE""`.",tf.strings.unicode_transcode.yaml,2
7280,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement.",tf.strings.unicode_transcode.yaml,2
7281,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.substr.yaml,2
7282,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.strings.substr.yaml,2
7283,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})",A UTF-8 string tensor value.,tf.summary.text.yaml,2
7284,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.substr.yaml,2
7285,275,0.0013163668275559457,12,"frozenset({'utf', 'SOME_DTYPE'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.substr.yaml,2
7286,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,4
7287,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,4
7288,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
7289,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","4-D with shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
7290,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,4
7291,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,4
7292,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,4
7293,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,4
7294,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,4
7295,260,0.0013163668275559457,10,"frozenset({'d', 'out_channels', 'in_channels', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
7296,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",Number of threads used to read CSV records from files.,tf.data.experimental.make_csv_dataset.yaml,2
7297,860,0.0013163668275559457,12,"frozenset({'used', 'number'})","Optional, used to specify the number of outputs when it cannot be inferred from the shape of `size_splits`.",tf.split.yaml,2
7298,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",This parameter (together with `shard`) indicates the number of partitions that are being used in the overall computation.,tf.random.fixed_unigram_candidate_sampler.yaml,2
7299,860,0.0013163668275559457,12,"frozenset({'used', 'number'})","This parameter (together with `num_shards`) indicates the particular partition number of the operation, when partitioning is being used.",tf.random.fixed_unigram_candidate_sampler.yaml,2
7300,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",Number of threads used to read CSV records from files.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7301,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",The number of scales used is the length of the list.,tf.image.ssim_multiscale.yaml,2
7302,860,0.0013163668275559457,12,"frozenset({'used', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
7303,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",Used to derive the number of iterations in the i-th period,tf.compat.v1.train.cosine_decay_restarts.yaml,2
7304,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",Number of threads used to read `Example` records.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7305,860,0.0013163668275559457,12,"frozenset({'used', 'number'})",Number of threads used to read `Example` records.,tf.data.experimental.make_batched_features_dataset.yaml,2
7306,860,0.0013163668275559457,12,"frozenset({'used', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
7307,860,0.0013163668275559457,12,"frozenset({'used', 'number'})","If `q`is 1 then same boxes are used for all classes otherwise, if `q` is equal to number of classes, class-specific boxes are used.",tf.image.combined_non_max_suppression.yaml,2
7308,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
7309,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
7310,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7311,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
7312,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})", The strides for the depthwise convolution for each dimension of `input`.,tf.compat.v1.nn.separable_conv2d.yaml,2
7313,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
7314,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})", The strides for the depthwise convolution for each dimension of `input`.,tf.nn.separable_conv2d.yaml,2
7315,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
7316,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
7317,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7318,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
7319,648,0.0013163668275559457,12,"frozenset({'input', 'convolution'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
7320,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.Conv3D.yaml,2
7321,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv3D.yaml,2
7322,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,2
7323,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv1D.yaml,2
7324,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.SeparableConv1D.yaml,2
7325,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})",Specifying any `stride` value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.SeparableConv1D.yaml,2
7326,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.SeparableConv2D.yaml,2
7327,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.Conv2D.yaml,2
7328,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv2D.yaml,2
7329,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","This is the input stride, specifying how far two consecutive patch samples are in the input.",tf.compat.v1.extract_image_patches.yaml,2
7330,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,2
7331,565,0.0013163668275559457,12,"frozenset({'stride', 'specifying'})","This is the input stride, specifying how far two consecutive patch samples are in the input.",tf.image.extract_patches.yaml,2
7332,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
7333,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Each input tensor has a corresponding shard axes, given by `input_shard_axes`, which must have size divisible by `num_shards`.",tf.compat.v1.tpu.shard.yaml,2
7334,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","If a function is stateless, when given the same input it will return the same output and have no observable side effects.",tf.compat.v1.py_func.yaml,2
7335,570,0.0013163668275559457,12,"frozenset({'input', 'given'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.gradients.yaml,2
7336,570,0.0013163668275559457,12,"frozenset({'input', 'given'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.compat.v1.gradients.yaml,2
7337,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_rotation.yaml,2
7338,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_zoom.yaml,2
7339,570,0.0013163668275559457,12,"frozenset({'input', 'given'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
7340,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Given an input of D dimensions, `axis` must be in range`[-(D+1), D]` (inclusive).",tf.expand_dims.yaml,2
7341,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shear.yaml,2
7342,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","If a function is stateless, when given the same input it will return the same output and have no observable side effects.",tf.numpy_function.yaml,2
7343,570,0.0013163668275559457,12,"frozenset({'input', 'given'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shift.yaml,2
7344,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.diag_part.yaml,2
7345,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Integer, k for @k metric.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7346,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
7347,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Integer, k for @k metric.",tf.compat.v1.metrics.precision_at_k.yaml,2
7348,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.diag.yaml,2
7349,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Integer, k for @k metric.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7350,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
7351,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Integer, k for @k metric.",tf.compat.v1.metrics.recall_at_k.yaml,2
7352,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})",Example: `python from keras import backend as K K.floatx() >>> 'float32' K.set_floatx('float16') K.floatx() >>> 'float16'`,tf.keras.backend.set_floatx.yaml,2
7353,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
7354,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})",`k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band.,tf.linalg.set_diag.yaml,2
7355,640,0.0013163668275559457,12,"frozenset({'k', 'SOME_DTYPE'})","Integer, k for @k metric.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7356,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","If you need different behavior, convert part of inputs to tensors with `tf.convert_to_tensor`.",tf.compat.v1.tpu.replicate.yaml,2
7357,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})",Inputs of the SignatureDef defined as a proto map of string to tensor info.,tf.compat.v1.saved_model.build_signature_def.yaml,2
7358,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
7359,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","If you need different behavior, convert part of inputs to tensors with `tf.convert_to_tensor`.",tf.xla.experimental.compile.yaml,2
7360,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","Inputs may be python primitives, tensors, data structures such as dicts and lists that may contain tensors (with the data structures possibly nested in arbitrary ways), and printable python objects.",tf.print.yaml,2
7361,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})",The shape format of the `inputs` Tensors.,tf.compat.v1.nn.ctc_loss.yaml,2
7362,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","the inputs to contract (each one a `Tensor`), whose shapes should be consistent with `equation`.",tf.einsum.yaml,2
7363,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})",The shape format of the `inputs` and `outputs` Tensors.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7364,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
7365,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","If you need different behavior, convert part of inputs to tensors with `tf.convert_to_tensor`.",tf.compat.v1.tpu.rewrite.yaml,2
7366,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
7367,637,0.0013163668275559457,12,"frozenset({'inputs', 'tensor'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7368,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.depth_to_space.yaml,2
7369,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.nn.space_to_depth.yaml,2
7370,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to`""NHWC""`.",tf.nn.max_pool_with_argmax.yaml,2
7371,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.nn.conv2d.yaml,2
7372,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.nn.conv2d.yaml,2
7373,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.space_to_depth.yaml,2
7374,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7375,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.nn.depth_to_space.yaml,2
7376,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
7377,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
7378,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
7379,573,0.0013163668275559457,12,"frozenset({'defaults', 'nhwc'})","Defaults to `""NHWC""`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7380,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
7381,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7382,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
7383,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","It accepts one argument, which will have the same (possibly nested) structure as `elems`, and returns a possibly nested structure of Tensors and Operations, which may be different than the structure of `elems`.",tf.vectorized_map.yaml,2
7384,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.string_split.yaml,2
7385,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
7386,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})",A `Tensor` containing the total count of the data (one value).,tf.nn.normalize_moments.yaml,2
7387,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","the inputs to contract (each one a `Tensor`), whose shapes should be consistent with `equation`.",tf.einsum.yaml,2
7388,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})",the string Tensor holding one or more serialized `Summary` protobufs,tf.summary.experimental.write_raw_pb.yaml,2
7389,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.strings.split.yaml,2
7390,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
7391,910,0.0013163668275559457,12,"frozenset({'one', 'tensor'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7392,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,2
7393,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,2
7394,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})",Must have the same type as `indices`.,tf.unravel_index.yaml,2
7395,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,2
7396,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,2
7397,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})", Must be less than `rank(indices)`.,tf.gather.yaml,2
7398,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,2
7399,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,2
7400,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})",Must have the same type as `indices`.,tf.scatter_nd.yaml,2
7401,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",tf.nn.embedding_lookup_sparse.yaml,2
7402,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})","If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
7403,626,0.0013163668275559457,12,"frozenset({'indices', 'must'})", Must be less than `rank(indices)`.,tf.compat.v1.gather.yaml,2
7404,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
7405,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
7406,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,2
7407,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})", `filter`'s `in_channels` dimension must match that of `value`.,tf.nn.conv3d_transpose.yaml,2
7408,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
7409,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv3d_transpose.yaml,2
7410,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
7411,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})",`filters`'`in_channels` dimension must match that of `value`.,tf.nn.atrous_conv2d_transpose.yaml,2
7412,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,2
7413,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.nn.conv1d_transpose.yaml,2
7414,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,2
7415,580,0.0013163668275559457,12,"frozenset({'value', 'in_channels'})",`filters`'`in_channels` dimension must match that of `value`.,tf.nn.atrous_conv2d.yaml,2
7416,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",Number of parallel threads,tf.config.threading.set_intra_op_parallelism_threads.yaml,2
7417,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",Number of parallel threads,tf.config.threading.set_inter_op_parallelism_threads.yaml,2
7418,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",The number of iterations allowed to run in parallel.,tf.compat.v1.while_loop.yaml,2
7419,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
7420,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})", The number of iterations to run in parallel.,tf.compat.v1.nn.raw_rnn.yaml,2
7421,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",Determines the number of batches processed in parallel.,tf.nondifferentiable_batch_function.yaml,2
7422,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.foldr.yaml,2
7423,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.scan.yaml,2
7424,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",The number of iterations allowed to run in parallel.,tf.while_loop.yaml,2
7425,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})", The number of iterations to run in parallel.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7426,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.foldl.yaml,2
7427,181,0.0013163668275559457,12,"frozenset({'parallel', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.map_fn.yaml,2
7428,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
7429,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
7430,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})",None or an empty list will return no matches found.,tf.keras.utils.get_file.yaml,2
7431,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
7432,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7433,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})",A list of inputs or `None` (equivalent to an empty list).,tf.xla.experimental.compile.yaml,2
7434,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
7435,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
7436,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})"," If this is a non-empty list, the last element must be equal to model_checkpoint_path.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
7437,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
7438,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
7439,466,0.0013163668275559457,12,"frozenset({'empty', 'SOME_STRUCTURE'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
7440,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The length must be the same as the number of dimensions in `x`.,tf.keras.backend.tile.yaml,2
7441,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})","Must be in range [-rank, rank), where rank is the number of dimensions in each input `SparseTensor`.",tf.compat.v1.sparse_concat.yaml,2
7442,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7443,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})", The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7444,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})", The number of batch dimensions.,tf.gather.yaml,2
7445,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7446,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7447,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",Length must be the same as the number of dimensions in `input`,tf.tile.yaml,2
7448,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The number of batch dimensions.,tf.compat.v1.gather_nd.yaml,2
7449,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",The number of batch dimensions.,tf.gather_nd.yaml,2
7450,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})",dN]` where N+1 is the total number of dimensions in`predictions`.,tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
7451,889,0.0013163668275559457,12,"frozenset({'dimensions', 'number'})", The number of batch dimensions.,tf.compat.v1.gather.yaml,2
7452,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
7453,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})","A list of dimensions along which to shard `inputs`, or`None`.",tf.compat.v1.tpu.shard.yaml,2
7454,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})","A list of dimensions along which to concatenate the outputs of `computation`, or `None`.",tf.compat.v1.tpu.shard.yaml,2
7455,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})","Tuple or list of integers with target dimensions, or single integer.",tf.keras.backend.batch_dot.yaml,2
7456,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_sum.yaml,2
7457,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
7458,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum.yaml,2
7459,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max.yaml,2
7460,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_max.yaml,2
7461,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7462,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
7463,890,0.0013163668275559457,12,"frozenset({'dimensions', 'SOME_STRUCTURE'})",Elements of this tuple can be None; 'None' elements represent dimensions where the shape is not known.,tf.keras.Input.yaml,2
7464,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A nested structure of tf.TensorShape representing the shape to which the respective component of each input element in each replica should be padded.,tf.compat.v1.tpu.replicate.yaml,2
7465,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
7466,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
7467,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A `tf.data.experimental.Structure` object representing the structure of each element in the dataset.,tf.data.experimental.from_variant.yaml,2
7468,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",Nested structure of `tf.TensorShape` to pass to`tf.data.Dataset.padded_batch`.,tf.data.experimental.bucket_by_sequence_length.yaml,2
7469,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
7470,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
7471,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
7472,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
7473,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
7474,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
7475,480,0.0013163668275559457,12,"frozenset({'structure', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
7476,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
7477,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.image.draw_bounding_boxes.yaml,2
7478,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
7479,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","`SparseTensor` of shape `[d_0, d_1, ..., d_n]` containing the ids.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
7480,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
7481,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
7482,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
7483,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
7484,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
7485,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","`SparseTensor` of shape `[d_0, d_1, ..., d_n]` containing the ids.",tf.nn.safe_embedding_lookup_sparse.yaml,2
7486,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.nn.safe_embedding_lookup_sparse.yaml,2
7487,667,0.0013163668275559457,12,"frozenset({'containing', 'shape'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
7488,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.adjoint.yaml,3
7489,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})"," Must be `float32` or `float64`, shape is `[..., M, M]`.",tf.linalg.cholesky_solve.yaml,3
7490,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","Must be `float16`, `float32`, `float64`, `complex64`, or`complex128` with shape `[..., M, M]`.",tf.linalg.expm.yaml,3
7491,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.compat.v1.batch_to_space_nd.yaml,3
7492,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,3
7493,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch_nd.yaml,3
7494,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,3
7495,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.logdet.yaml,3
7496,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.batch_to_space.yaml,3
7497,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.",tf.batch_to_space.yaml,3
7498,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch.yaml,3
7499,517,0.0013163668275559457,12,"frozenset({'must', 'shape', 'm'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,3
7500,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.compat.v1.while_loop.yaml,4
7501,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,4
7502,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})", Note that`emit_output` should be a `Tensor` or (possibly nested) tuple of tensors which is aggregated in the `emit_ta` inside the `while_loop`.,tf.compat.v1.nn.raw_rnn.yaml,4
7503,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,4
7504,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,4
7505,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})", It should be a (possibly nested) tuple structure of tensors.,tf.compat.v1.nn.raw_rnn.yaml,4
7506,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,4
7507,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.while_loop.yaml,4
7508,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})",This may also be a (possibly nested) tuple of Tensors satisfying this property.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,4
7509,443,0.0013163668275559457,10,"frozenset({'possibly', 'tensor', 'nested', 'SOME_STRUCTURE'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,4
7510,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Boolean indicating whether to solve with `matrix` or its (block-wise) adjoint.,tf.linalg.solve.yaml,3
7511,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Boolean indicating whether to solve with `matrix` or its (block-wise)        adjoint.,tf.linalg.triangular_solve.yaml,3
7512,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Boolean indicating whether the innermost matrices in `matrix` are lower or upper triangular.,tf.linalg.triangular_solve.yaml,3
7513,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hann_window.yaml,3
7514,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_solve.yaml,3
7515,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hamming_window.yaml,3
7516,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
7517,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_reconstruct.yaml,3
7518,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",A boolean indicating whether or not to use the regularization losses in the sum.,tf.compat.v1.losses.get_total_loss.yaml,3
7519,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.nn.batch_norm_with_global_normalization.yaml,3
7520,427,0.0013163668275559457,11,"frozenset({'whether', 'indicating', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_matrix_inverse.yaml,3
7521,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
7522,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
7523,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","`rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot.",tf.keras.utils.model_to_dot.yaml,2
7524,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
7525,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","`rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot.",tf.keras.utils.plot_model.yaml,2
7526,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})",Each string is a record/row in the csv and all records should have the same format.,tf.compat.v1.decode_csv.yaml,2
7527,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","a `str` describing the contraction, in the same format as`numpy.einsum`.",tf.einsum.yaml,2
7528,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
7529,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})",Each string is a record/row in the csv and all records should have the same format.,tf.io.decode_csv.yaml,2
7530,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
7531,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})",A string template to format tensor values into.,tf.strings.format.yaml,2
7532,696,0.0013163668275559457,12,"frozenset({'format', 'SOME_DTYPE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
7533,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `SparseFeature`, and `RaggedFeature` values.",tf.compat.v1.parse_example.yaml,6
7534,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `RaggedFeature`, and `SparseFeature` values.",tf.data.experimental.parse_example_dataset.yaml,6
7535,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.compat.v1.parse_single_example.yaml,6
7536,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values.,tf.io.parse_single_sequence_example.yaml,6
7537,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values.,tf.io.parse_single_sequence_example.yaml,6
7538,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values.,tf.io.parse_sequence_example.yaml,6
7539,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values.,tf.io.parse_sequence_example.yaml,6
7540,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,6
7541,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `SparseFeature`, and `RaggedFeature` values.",tf.io.parse_example.yaml,6
7542,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.data.experimental.make_batched_features_dataset.yaml,6
7543,115,0.0013163668275559457,11,"frozenset({'varlenfeature', 'values', 'SOME_STRUCTURE', 'feature', 'keys', 'mapping'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.io.parse_single_example.yaml,6
7544,693,0.0013163668275559457,12,"frozenset({'example', 'value'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
7545,693,0.0013163668275559457,12,"frozenset({'example', 'value'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
7546,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7547,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.",tf.nn.fractional_avg_pool.yaml,2
7548,693,0.0013163668275559457,12,"frozenset({'example', 'value'})"," Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0].",tf.nn.fractional_avg_pool.yaml,2
7549,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.keras.layers.BatchNormalization.yaml,2
7550,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
7551,693,0.0013163668275559457,12,"frozenset({'example', 'value'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
7552,693,0.0013163668275559457,12,"frozenset({'example', 'value'})",A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column.,tf.feature_column.numeric_column.yaml,2
7553,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
7554,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.",tf.nn.fractional_max_pool.yaml,2
7555,693,0.0013163668275559457,12,"frozenset({'example', 'value'})","Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0].",tf.nn.fractional_max_pool.yaml,2
7556,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
7557,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
7558,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
7559,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
7560,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",A value of 'ignore' will cause the operation to skip any invalid formatting in the input and produce no corresponding output character.,tf.strings.unicode_transcode.yaml,2
7561,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
7562,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
7563,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
7564,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
7565,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
7566,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
7567,844,0.0013163668275559457,12,"frozenset({'operation', 'output'})",The specified output type of the operation (`int32` or `int64`).,tf.shape_n.yaml,2
7568,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
7569,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.input_layer.yaml,2
7570,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = { _NumericColumn(   key='numeric_feature1', shape=(1,): [], 'bias': [], _NumericColumn(   key='numeric_feature2', shape=(2,)): []} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.linear_model.yaml,2
7571,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",For example `numeric_column('price')` will look at 'price' key in this dict.,tf.compat.v1.feature_column.linear_model.yaml,2
7572,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing`Example` records.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7573,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7574,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",a list of vectors containing the example state data.,tf.compat.v1.train.sdca_optimizer.yaml,2
7575,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",a list of vectors which contain example indices.,tf.compat.v1.train.sdca_optimizer.yaml,2
7576,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing`Example` records.,tf.data.experimental.make_batched_features_dataset.yaml,2
7577,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
7578,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
7579,692,0.0013163668275559457,12,"frozenset({'example', 'SOME_STRUCTURE'})","If set to `False`, for example a list and a tuple of objects will look the same if they have the same size.",tf.nest.assert_same_structure.yaml,2
7580,830,0.0013163668275559457,12,"frozenset({'must', 'length'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
7581,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",The length must be the same as the number of dimensions in `x`.,tf.keras.backend.tile.yaml,2
7582,830,0.0013163668275559457,12,"frozenset({'must', 'length'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
7583,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",Entries corresponding to non-sequence columns must be 0 and entries corresponding to sequence columns specify the max sequence length for the column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
7584,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7585,830,0.0013163668275559457,12,"frozenset({'must', 'length'})", The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7586,830,0.0013163668275559457,12,"frozenset({'must', 'length'})","If `True`, will pad dimensions with unknown size to bucket boundary minus 1 (i.e., the maximum length in each bucket), and caller must ensure that the source `Dataset` does not contain any elements with length longer than `max(bucket_boundaries)`.",tf.data.experimental.bucket_by_sequence_length.yaml,2
7587,830,0.0013163668275559457,12,"frozenset({'must', 'length'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
7588,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7589,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7590,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",Data will be zero-padded or truncated to the specified length.`fixed_length` must be a multiple of the size of `out_type`.`fixed_length` must be specified if the elements of `input_bytes` are of variable length.,tf.io.decode_raw.yaml,2
7591,830,0.0013163668275559457,12,"frozenset({'must', 'length'})",Length must be the same as the number of dimensions in `input`,tf.tile.yaml,2
7592,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,3
7593,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,3
7594,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
7595,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_k.yaml,3
7596,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
7597,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
7598,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,3
7599,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_k.yaml,3
7600,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
7601,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,3
7602,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,3
7603,690,0.0013163668275559457,12,"frozenset({'batch_size', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
7604,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",The data format of the input and output data.,tf.compat.v1.nn.conv3d.yaml,4
7605,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.nn.max_pool_with_argmax.yaml,4
7606,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",The data format of the input and output data.,tf.nn.conv3d.yaml,4
7607,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.compat.v1.nn.conv2d.yaml,4
7608,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.nn.conv2d.yaml,4
7609,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",The data format of the input and output data.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
7610,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.compat.v1.nn.conv2d_backprop_input.yaml,4
7611,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",The data format of the input and output data.,tf.nn.max_pool3d.yaml,4
7612,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.nn.depthwise_conv2d_backprop_filter.yaml,4
7613,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.nn.depthwise_conv2d_backprop_input.yaml,4
7614,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
7615,697,0.0013163668275559457,12,"frozenset({'format', 'data', 'output', 'input'})",Specify the data format of the input and output data.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
7616,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.random.fixed_unigram_candidate_sampler.yaml,2
7617,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.nn.compute_accidental_hits.yaml,2
7618,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.image.random_hue.yaml,2
7619,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation.,tf.image.random_hue.yaml,2
7620,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.random.all_candidate_sampler.yaml,2
7621,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.random.uniform_candidate_sampler.yaml,2
7622,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.random.log_uniform_candidate_sampler.yaml,2
7623,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.image.random_saturation.yaml,2
7624,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation.,tf.image.random_saturation.yaml,2
7625,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.random.learned_unigram_candidate_sampler.yaml,2
7626,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",An operation-specific seed.,tf.image.random_jpeg_quality.yaml,2
7627,600,0.0013163668275559457,12,"frozenset({'operation', 'seed'})",It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation.,tf.image.random_jpeg_quality.yaml,2
7628,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.strings.substr.yaml,2
7629,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.strings.substr.yaml,2
7630,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.strings.substr.yaml,2
7631,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.length.yaml,2
7632,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
7633,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})", Results are undefined if `unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.strings.length.yaml,2
7634,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.substr.yaml,2
7635,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.strings.substr.yaml,2
7636,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.strings.substr.yaml,2
7637,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.substr.yaml,2
7638,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.substr.yaml,2
7639,116,0.0013163668275559457,12,"frozenset({'_char', 'utf'})",Results are undefined if`unit=UTF8_CHAR` and the `input` strings do not contain structurally valid UTF-8.,tf.compat.v1.substr.yaml,2
7640,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
7641,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","A floating point type tensor, shaped `[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
7642,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})",Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`.,tf.linalg.lu_solve.yaml,2
7643,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If time_major == False, this will be a `Tensor` shaped: `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7644,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7645,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7646,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7647,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.pinv.yaml,2
7648,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.matrix_rank.yaml,2
7649,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7650,102,0.0013163668275559457,11,"frozenset({'tensor', 'shaped'})","If false, these `Tensors` must be shaped `[batch_size, max_time, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7651,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","The ground truth output tensor, same dimensions as 'predictions'.",tf.compat.v1.losses.mean_squared_error.yaml,2
7652,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})",Monotonically increasing sequence of `num_spatial_dims`integers (which are >= 1) specifying the spatial dimensions of `input`and output.,tf.nn.with_space_to_batch.yaml,2
7653,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","The ground truth output tensor, same dimensions as 'predictions'.",tf.compat.v1.losses.huber_loss.yaml,2
7654,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
7655,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
7656,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","Otherwise, the dimensions in `axis` are removed from the output shape.",tf.norm.yaml,2
7657,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
7658,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","The ground truth output tensor, same dimensions as 'predictions'.",tf.compat.v1.losses.absolute_difference.yaml,2
7659,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","Otherwise, the dimensions in `axis` are removed from the output shape.",tf.compat.v1.norm.yaml,2
7660,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
7661,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
7662,841,0.0013163668275559457,12,"frozenset({'output', 'dimensions'})","The ground truth output tensor, same dimensions as 'predictions'.",tf.compat.v1.losses.log_loss.yaml,2
7663,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})","An `int64`-castable default step value, or None to unset.",tf.summary.experimental.set_step.yaml,2
7664,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.write.yaml,2
7665,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.scalar.yaml,2
7666,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.image.yaml,2
7667,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.experimental.write_raw_pb.yaml,2
7668,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.text.yaml,2
7669,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.audio.yaml,2
7670,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Must be castable to `float64`.,tf.summary.histogram.yaml,2
7671,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.histogram.yaml,2
7672,117,0.0013163668275559457,10,"frozenset({'castable', 'SOME_DTYPE'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.trace_export.yaml,2
7673,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
7674,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
7675,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
7676,842,0.0013163668275559457,12,"frozenset({'output', 'default'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
7677,842,0.0013163668275559457,12,"frozenset({'output', 'default'})","By default, we consider that `output`encodes a probability distribution.",tf.keras.backend.binary_crossentropy.yaml,2
7678,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
7679,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7680,842,0.0013163668275559457,12,"frozenset({'output', 'default'})","However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",tf.keras.backend.rnn.yaml,2
7681,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
7682,842,0.0013163668275559457,12,"frozenset({'output', 'default'})",The default value to produce when output is not fed.,tf.compat.v1.placeholder_with_default.yaml,2
7683,842,0.0013163668275559457,12,"frozenset({'output', 'default'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
7684,842,0.0013163668275559457,12,"frozenset({'output', 'default'})","The currently supported options are: ""NO_TENSOR"": (Default) Only traces the execution of ops' output tensors, while not dumping the value of the ops' output tensors or any form of concise summary of them.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
7685,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
7686,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,3
7687,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,3
7688,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,3
7689,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,3
7690,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,3
7691,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,3
7692,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,3
7693,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,3
7694,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,3
7695,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,3
7696,924,0.0013163668275559457,12,"frozenset({'d', 'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,3
7697,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",Optional regularizer function for the output.,tf.keras.layers.SeparableConv1D.yaml,2
7698,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
7699,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
7700,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(optional) False disables tests for consistent output shapes.,tf.scan.yaml,2
7701,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
7702,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(optional) The data type for the initial state and expected output.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7703,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
7704,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",The name of the output `Tensor` (optional).,tf.compat.v1.expand_dims.yaml,2
7705,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
7706,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(optional) The output type(s) of `fn`.,tf.map_fn.yaml,2
7707,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
7708,843,0.0013163668275559457,12,"frozenset({'optional', 'output'})",(optional) False disables tests for consistent output shapes.,tf.map_fn.yaml,2
7709,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d.yaml,7
7710,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.nn.conv3d.yaml,7
7711,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.conv2d.yaml,7
7712,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.conv2d.yaml,7
7713,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,7
7714,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_input.yaml,7
7715,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCDHW"", the data storage order is: [batch, in_channels, in_depth, in_height, in_width].",tf.nn.max_pool3d.yaml,7
7716,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_filter.yaml,7
7717,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_input.yaml,7
7718,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,7
7719,104,0.0013163668275559457,11,"frozenset({'alternatively', 'could', 'order', 'batch', 'data', 'storage', 'format'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,7
7720,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})",A bool that indicates whether the input should be shuffled.,tf.data.experimental.make_csv_dataset.yaml,2
7721,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
7722,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
7723,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})",A bool that indicates whether the input should be shuffled.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7724,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})",Whether to convert the input to lowercase.,tf.keras.preprocessing.text.text_to_word_sequence.yaml,2
7725,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
7726,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})","A boolean, indicates whether the input should be shuffled.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7727,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})","A boolean, indicates whether the input should be shuffled.",tf.data.experimental.make_batched_features_dataset.yaml,2
7728,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
7729,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
7730,770,0.0012066695919262834,11,"frozenset({'input', 'whether'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
7731,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,9
7732,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,9
7733,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,9
7734,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,9
7735,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,9
7736,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,9
7737,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,9
7738,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,9
7739,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,9
7740,331,0.0012066695919262834,10,"frozenset({'values', 'ground', 'dimensions', 'whose', 'must', 'truth', 'match', 'predictions', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,9
7741,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
7742,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})","Optional, used to specify the number of outputs when it cannot be inferred from the shape of `size_splits`.",tf.split.yaml,2
7743,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",Optional maximum number of iterations of the while loop to run.,tf.compat.v1.while_loop.yaml,2
7744,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
7745,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
7746,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.foldr.yaml,2
7747,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.scan.yaml,2
7748,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",Optional maximum number of iterations of the while loop to run.,tf.while_loop.yaml,2
7749,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",(Optional.) The number of elements to buffer on `device`.,tf.data.experimental.prefetch_to_device.yaml,2
7750,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.foldl.yaml,2
7751,888,0.0012066695919262834,11,"frozenset({'optional', 'number'})",(optional) The number of iterations allowed to run in parallel.,tf.map_fn.yaml,2
7752,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
7753,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})",`Tensor` or the `name` of the operation that contains the global step.,tf.compat.v1.train.global_step.yaml,2
7754,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})","If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to.",tf.compat.v1.assign.yaml,2
7755,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
7756,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})",Whether or not to clear the device field for an `Operation`or `Tensor` during export.,tf.compat.v1.train.export_meta_graph.yaml,2
7757,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})",Whether or not to clear the device field for an `Operation`or `Tensor` during import.,tf.compat.v1.train.import_meta_graph.yaml,2
7758,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
7759,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
7760,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
7761,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
7762,941,0.0012066695919262834,11,"frozenset({'operation', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
7763,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",All replicas must have the same number of inputs.,tf.compat.v1.tpu.replicate.yaml,2
7764,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The length must be the same as the number of dimensions in `x`.,tf.keras.backend.tile.yaml,2
7765,887,0.0012066695919262834,11,"frozenset({'number', 'must'})","Must be in range [-rank, rank), where rank is the number of dimensions in each input `SparseTensor`.",tf.compat.v1.sparse_concat.yaml,2
7766,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7767,887,0.0012066695919262834,11,"frozenset({'number', 'must'})", The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
7768,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
7769,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The number of axes for `a` and`b` must be equal.,tf.tensordot.yaml,2
7770,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7771,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The length must be 4 to match the number of dimensions of the input.,tf.compat.v1.nn.quantized_max_pool.yaml,2
7772,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",Length must be the same as the number of dimensions in `input`,tf.tile.yaml,2
7773,887,0.0012066695919262834,11,"frozenset({'number', 'must'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
7774,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,3
7775,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If time_major == False, this will be a `Tensor` shaped: `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
7776,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
7777,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
7778,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
7779,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,3
7780,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
7781,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
7782,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
7783,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","If false, these `Tensors` must be shaped `[batch_size, max_time, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
7784,75,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'max_time'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,3
7785,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
7786,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
7787,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
7788,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
7789,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,3
7790,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,3
7791,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
7792,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,3
7793,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
7794,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
7795,913,0.0012066695919262834,11,"frozenset({'tensor', 'dimension', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,3
7796,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",If `True` also add the variable to the graph collection`GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).,tf.compat.v1.feature_column.input_layer.yaml,2
7797,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",If `True` also add the variable to the graph collection`GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).,tf.compat.v1.feature_column.linear_model.yaml,2
7798,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})","When True, `tf.function` may generate fewer, graphs that are less specialized on input shapes.",tf.function.yaml,2
7799,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})","If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.",tf.nest.flatten.yaml,2
7800,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
7801,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",If `True` also add the variable to the graph collection`GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).,tf.compat.v1.get_variable.yaml,2
7802,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.transpose.yaml,2
7803,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.compat.v1.transpose.yaml,2
7804,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.assert_same_structure.yaml,2
7805,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.linalg.matrix_transpose(input)).,tf.linalg.matrix_transpose.yaml,2
7806,880,0.0012066695919262834,11,"frozenset({'true', 'tf'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.pack_sequence_as.yaml,2
7807,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
7808,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
7809,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
7810,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
7811,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.separable_conv2d.yaml,2
7812,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.separable_conv2d.yaml,2
7813,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If given, skips values in `arr` that are equal or greater than`maxlength`, ensuring that the output has length at most `maxlength`.",tf.compat.v1.bincount.yaml,2
7814,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If given, skips values in `arr` that are equal or greater than`maxlength`, ensuring that the output has length at most `maxlength`.",tf.math.bincount.yaml,2
7815,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.compat.v1.nn.depthwise_conv2d.yaml,2
7816,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})"," Values must be greater than or equal to zero, and less than `num_partitions`.`partitions` is not required to be sorted.",tf.ragged.stack_dynamic_partitions.yaml,2
7817,317,0.0012066695919262834,11,"frozenset({'values', 'greater'})","If it is greater than 1, then all values of strides must be 1.",tf.nn.depthwise_conv2d.yaml,2
7818,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Optimizer identifier, one of String: name of an optimizerDictionary: configuration dictionary.",tf.keras.optimizers.get.yaml,2
7819,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
7820,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","A list of unigram counts or probabilities, one per ID in sequential order.",tf.random.fixed_unigram_candidate_sampler.yaml,2
7821,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7822,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
7823,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Otherwise, supplies a list of batch sizes, causing the op to pad batches up to one of those sizes.",tf.nondifferentiable_batch_function.yaml,2
7824,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
7825,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
7826,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
7827,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
7828,909,0.0012066695919262834,11,"frozenset({'one', 'SOME_STRUCTURE'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7829,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
7830,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
7831,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.image.crop_and_resize.yaml,2
7832,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`.",tf.compat.v1.image.crop_and_resize.yaml,2
7833,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","A Tensor which is of the same type as `y`, and may be broadcastable with`condition` and `y`.",tf.where.yaml,2
7834,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.gradients.yaml,2
7835,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,2
7836,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.compat.v1.gradients.yaml,2
7837,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
7838,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})", `grad_ys` is a `Tensor` or sequence of`Tensor`s the same size as `y` holding the initial value gradients for each `Tensor` in `y`.,tf.custom_gradient.yaml,2
7839,387,0.0012066695919262834,11,"frozenset({'y', 'tensor'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7840,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.scalar.yaml,5
7841,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.histogram.yaml,5
7842,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.image2.yaml,5
7843,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,5
7844,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})",The summary tag used for TensorBoard will be this name prefixed by any active name scopes.,tf.summary.scalar.yaml,5
7845,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})",The summary tag used for TensorBoard will be this name prefixed by any active name scopes.,tf.summary.image.yaml,5
7846,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})",The summary tag used for TensorBoard will be this name prefixed by any active name scopes.,tf.summary.text.yaml,5
7847,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})",The summary tag used for TensorBoard will be this name prefixed by any active name scopes.,tf.summary.audio.yaml,5
7848,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})",The summary tag used for TensorBoard will be this name prefixed by any active name scopes.,tf.summary.histogram.yaml,5
7849,230,0.0012066695919262834,10,"frozenset({'name', 'tag', 'used', 'tensorboard', 'summary'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.audio2.yaml,5
7850,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,2
7851,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
7852,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
7853,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","(optional) If True (default), logits is shaped [time, batch, logits].",tf.nn.ctc_loss.yaml,2
7854,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7855,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7856,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
7857,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","(optional, default: 'greedy').",tf.einsum.yaml,2
7858,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
7859,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
7860,917,0.0012066695919262834,11,"frozenset({'optional', 'default'})","- indexing: Either 'xy' or 'ij' (optional, default: 'xy').",tf.meshgrid.yaml,2
7861,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
7862,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
7863,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`, `2`, `np.inf` are supported.",tf.linalg.normalize.yaml,2
7864,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
7865,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
7866,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
7867,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
7868,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported.",tf.norm.yaml,2
7869,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
7870,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
7871,794,0.0012066695919262834,11,"frozenset({'axis', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `fro` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only 'euclidean', 'fro', `1`,    `2`, `np.inf` are supported.",tf.compat.v1.norm.yaml,2
7872,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,2
7873,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7874,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,2
7875,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
7876,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[T], Text, None], the default value of the flag.",tf.compat.v1.flags.DEFINE_multi.yaml,2
7877,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Dict, where keys are names of the variables in the checkpoint and values are current variables or names of current variables (in default graph).",tf.compat.v1.train.init_from_checkpoint.yaml,2
7878,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[Enum], Iterable[Text], Enum, Text, None], the default value of the flag; see`DEFINE_multi`; only differences are documented here.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,2
7879,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
7880,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
7881,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","Union[Iterable[Text], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_string.yaml,2
7882,918,0.0012066695919262834,11,"frozenset({'SOME_STRUCTURE', 'default'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7883,816,0.0012066695919262834,11,"frozenset({'use', 'default'})",The default 'auto' detects the hash algorithm in use.,tf.keras.utils.get_file.yaml,2
7884,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If not given, will use a default key.",tf.sparse.cross_hashed.yaml,2
7885,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.advise.yaml,2
7886,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If missing, use default graph.",tf.compat.v1.train.get_global_step.yaml,2
7887,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.write_op_log.yaml,2
7888,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If `None`, use the default graph.",tf.compat.v1.train.export_meta_graph.yaml,2
7889,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
7890,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If None and eager execution is not enabled, use default graph.",tf.compat.v1.profiler.profile.yaml,2
7891,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If unspecified, will use the default from `python/platform/remote_utils.py`.",tf.config.experimental_connect_to_cluster.yaml,2
7892,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If missing, use default graph.",tf.compat.v1.train.get_or_create_global_step.yaml,2
7893,816,0.0012066695919262834,11,"frozenset({'use', 'default'})","If missing, use default graph.",tf.compat.v1.train.create_global_step.yaml,2
7894,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,3
7895,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,3
7896,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,3
7897,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,3
7898,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,3
7899,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,3
7900,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,3
7901,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,3
7902,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
7903,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
7904,859,0.0012066695919262834,11,"frozenset({'tensor', 'dimensions', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
7905,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,3
7906,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
7907,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,3
7908,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
7909,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,3
7910,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,3
7911,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,3
7912,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,3
7913,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
7914,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,3
7915,732,0.0012066695919262834,11,"frozenset({'size', 'tensor', 'whose'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,3
7916,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input image.,tf.keras.preprocessing.image.apply_affine_transform.yaml,2
7917,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
7918,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.apply_channel_shift.yaml,2
7919,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
7920,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7921,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
7922,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
7923,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.random_channel_shift.yaml,2
7924,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
7925,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
7926,654,0.0012066695919262834,11,"frozenset({'input', 'channels'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
7927,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
7928,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
7929,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",An object whose type has a registered `Tensor` conversion function.,tf.convert_to_tensor.yaml,2
7930,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",Can either be an initializer object or a Tensor.,tf.compat.v1.get_local_variable.yaml,2
7931,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_local_variable.yaml,2
7932,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",An object whose type has a registered `Tensor` conversion function.,tf.compat.v1.convert_to_tensor.yaml,2
7933,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",Can either be an initializer object or a Tensor.,tf.compat.v1.get_variable.yaml,2
7934,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_variable.yaml,2
7935,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})","A `SparseTensor`, `SparseTensorValue`, or an object whose type has a registered `Tensor` conversion function.",tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
7936,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
7937,559,0.0012066695919262834,11,"frozenset({'tensor', 'object'})",A list of at least 1 `Tensor` object with the same type.,tf.shape_n.yaml,2
7938,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7939,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
7940,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,2
7941,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.keras.layers.BatchNormalization.yaml,2
7942,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_graph.yaml,2
7943,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_code.yaml,2
7944,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.autograph.to_graph.yaml,2
7945,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","For example, if axis==-1,`adjustment = lambda shape: (   tf.random.uniform(shape[-1:], 0.93, 1.07),   tf.random.uniform(shape[-1:], -0.1, 0.1))`will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
7946,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})","`None`, a tuple of, or a single`tf.autograph.experimental.Feature` value.",tf.compat.v1.autograph.to_code.yaml,2
7947,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
7948,596,0.0012066695919262834,11,"frozenset({'feature', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
7949,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,2
7950,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,2
7951,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","A single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv1D.yaml,2
7952,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,2
7953,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,2
7954,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
7955,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
7956,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.depthwise_conv2d.yaml,2
7957,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
7958,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.separable_conv2d.yaml,2
7959,475,0.0012066695919262834,11,"frozenset({'convolution', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
7960,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7961,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
7962,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
7963,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
7964,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
7965,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.nn.softmax_cross_entropy_with_logits.yaml,2
7966,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7967,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7968,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7969,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7970,689,0.0012066695919262834,11,"frozenset({'batch_size', 'must'})","If false, these `Tensors` must be shaped `[batch_size, max_time, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7971,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,2
7972,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,2
7973,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})","A single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv1D.yaml,2
7974,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,2
7975,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,2
7976,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,2
7977,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,2
7978,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})", Dilation rate.,tf.compat.v1.nn.pool.yaml,2
7979,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})", Dilation rate.,tf.nn.pool.yaml,2
7980,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
7981,476,0.0012066695919262834,11,"frozenset({'rate', 'dilation'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,2
7982,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","DN, k] where N >= 1.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7983,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","DN, num_classes] where N >= 1.",tf.compat.v1.metrics.precision_at_k.yaml,2
7984,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","DN, k] where N >= 1.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7985,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
7986,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
7987,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
7988,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","DN, num_classes] where N >= 1.",tf.compat.v1.metrics.recall_at_k.yaml,2
7989,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})",dN]` where N+1 is the total number of dimensions in`predictions`.,tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
7990,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
7991,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
7992,432,0.0012066695919262834,11,"frozenset({'dn', 'n'})","DN, num_classes] where N >= 1.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7993,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
7994,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
7995,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
7996,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
7997,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
7998,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
7999,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
8000,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
8001,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
8002,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
8003,587,0.0012066695919262834,11,"frozenset({'column', 'feature'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
8004,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,3
8005,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,3
8006,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
8007,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,3
8008,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,3
8009,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,3
8010,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,3
8011,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
8012,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,3
8013,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,3
8014,583,0.0012066695919262834,11,"frozenset({'data_format', 'tensor', 'shape'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,3
8015,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",The maximum scalar value possibly produced for the input.,tf.quantization.dequantize.yaml,2
8016,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",The maximum value to clip by.,tf.clip_by_value.yaml,2
8017,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})","If range_given=True, the maximum input value that needs to be represented in the quantized representation.",tf.quantization.quantize_and_dequantize.yaml,2
8018,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})","If true, then the absolute value of the quantized minimum value is the same as the quantized maximum value, instead of 1 greater.",tf.quantization.quantize_and_dequantize.yaml,2
8019,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})", Maximum value for the random delta.,tf.image.random_hue.yaml,2
8020,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",A maximum clipping value.,tf.clip_by_norm.yaml,2
8021,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
8022,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",The maximum value of the quantization range.,tf.quantization.quantize.yaml,2
8023,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
8024,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",Default is the maximum value in `lengths`.,tf.sequence_mask.yaml,2
8025,484,0.0012066695919262834,11,"frozenset({'value', 'maximum'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
8026,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,6
8027,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,6
8028,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,6
8029,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,6
8030,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,6
8031,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,6
8032,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,6
8033,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,6
8034,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,6
8035,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,6
8036,702,0.0012066695919262834,11,"frozenset({'height', 'shape', 'type', 'd', 'width', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,6
8037,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})",Optional projection function to be applied to the depthwise kernel after being updated by an `Optimizer` (e.g. used for norm constraints or value constraints for layer weights).,tf.keras.layers.SeparableConv1D.yaml,2
8038,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})",A lower bound value for the norm.,tf.compat.v1.linalg.l2_normalize.yaml,2
8039,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})",A lower bound value for the norm.,tf.math.l2_normalize.yaml,2
8040,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",tf.feature_column.shared_embeddings.yaml,2
8041,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value.",tf.nn.embedding_lookup.yaml,2
8042,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value.",tf.compat.v1.nn.embedding_lookup.yaml,2
8043,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
8044,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",tf.nn.embedding_lookup_sparse.yaml,2
8045,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
8046,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
8047,458,0.0012066695919262834,11,"frozenset({'norm', 'value'})","If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
8048,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor` with `N` non-empty elements.,tf.sparse.retain.yaml,2
8049,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.sparse.reorder.yaml,2
8050,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input rank `R` `SparseTensor`.,tf.io.serialize_many_sparse.yaml,2
8051,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})","Must be in range [-rank, rank), where rank is the number of dimensions in each input `SparseTensor`.",tf.compat.v1.sparse_concat.yaml,2
8052,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.sparse.reset_shape.yaml,2
8053,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input rank `R` `SparseTensor`.,tf.compat.v1.serialize_many_sparse.yaml,2
8054,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.sparse.to_dense.yaml,2
8055,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.compat.v1.serialize_sparse.yaml,2
8056,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.sparse.transpose.yaml,2
8057,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.io.serialize_sparse.yaml,2
8058,705,0.0012066695919262834,11,"frozenset({'input', 'ssparsetensor'})",The input `SparseTensor`.,tf.sparse.reshape.yaml,2
8059,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",tf.data.experimental.make_csv_dataset.yaml,3
8060,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",tf.data.experimental.make_csv_dataset.yaml,3
8061,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,3
8062,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,3
8063,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
8064,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,3
8065,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,3
8066,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,3
8067,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,3
8068,426,0.0012066695919262834,10,"frozenset({'order', 'must', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,3
8069,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
8070,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",Inputs of the SignatureDef defined as a proto map of string to tensor info.,tf.compat.v1.saved_model.build_signature_def.yaml,2
8071,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",Outputs of the SignatureDef defined as a proto map of string to tensor info.,tf.compat.v1.saved_model.build_signature_def.yaml,2
8072,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
8073,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
8074,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
8075,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
8076,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
8077,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
8078,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
8079,421,0.0012066695919262834,11,"frozenset({'defined', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
8080,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})"," Note that the ClassificationResponse message requires that class labels are strings, not integers or anything else.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
8081,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
8082,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.precision_at_k.yaml,2
8083,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
8084,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Python callable or class to convert.,tf.compat.v1.autograph.to_graph.yaml,2
8085,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Python callable or class to convert.,tf.autograph.to_code.yaml,2
8086,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Python callable or class to convert.,tf.autograph.to_graph.yaml,2
8087,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Python callable or class.,tf.compat.v1.autograph.to_code.yaml,2
8088,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",Integer class ID for which we want binary metrics.,tf.compat.v1.metrics.recall_at_k.yaml,2
8089,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
8090,568,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'class'})",class vector to be converted into a matrix (integers from 0 to num_classes).,tf.keras.utils.to_categorical.yaml,2
8091,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",A list of collection names to which the Variable will be added.,tf.compat.v1.feature_column.input_layer.yaml,2
8092,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",A list of collection names to which the Variable will be added.,tf.compat.v1.feature_column.linear_model.yaml,2
8093,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
8094,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",The value to be added to the variable.,tf.compat.v1.assign_add.yaml,2
8095,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
8096,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
8097,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
8098,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
8099,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
8100,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
8101,721,0.0012066695919262834,11,"frozenset({'variable', 'added'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
8102,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,3
8103,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,3
8104,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
8105,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_k.yaml,3
8106,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
8107,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,3
8108,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.nn.softmax_cross_entropy_with_logits.yaml,3
8109,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_k.yaml,3
8110,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
8111,688,0.0012066695919262834,10,"frozenset({'labels', 'batch_size', 'shape'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
8112,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,3
8113,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,3
8114,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,3
8115,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,3
8116,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","If time_major == True (default), this will be a `Tensor` shaped:`[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,3
8117,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
8118,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,3
8119,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
8120,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
8121,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,3
8122,687,0.0012066695919262834,11,"frozenset({'batch_size', 'tensor', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,3
8123,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,3
8124,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,3
8125,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
8126,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,3
8127,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
8128,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
8129,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,3
8130,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
8131,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
8132,472,0.0012066695919262834,10,"frozenset({'start', 'tensor', 'shape'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,3
8133,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
8134,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
8135,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
8136,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})","If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not.",tf.io.decode_image.yaml,2
8137,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
8138,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
8139,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
8140,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8141,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
8142,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
8143,621,0.0012066695919262834,11,"frozenset({'tensor', 'op'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
8144,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to computation.",tf.compat.v1.tpu.replicate.yaml,2
8145,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","If not `None`, the `InfeedQueue` to use to augment the inputs of `computation`.",tf.compat.v1.tpu.shard.yaml,2
8146,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","A list of dimensions along which to shard `inputs`, or`None`.",tf.compat.v1.tpu.shard.yaml,2
8147,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","`None` means ""shard all inputs along dimension 0"".",tf.compat.v1.tpu.shard.yaml,2
8148,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","A value of `None` means ""infer the input shape from the shapes in `inputs`"".",tf.math.accumulate_n.yaml,2
8149,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","A value of `None`means ""infer the input dtype from `inputs[0]`"".",tf.math.accumulate_n.yaml,2
8150,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})",A list of inputs or `None` (equivalent to an empty list).,tf.xla.experimental.compile.yaml,2
8151,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","If `None`, this column's graph operations will fail for out-of-range inputs.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
8152,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to `computation`.",tf.compat.v1.tpu.batch_parallel.yaml,2
8153,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","If not `None`, the `InfeedQueue` from which to append a tuple of arguments as inputs to `computation`.",tf.compat.v1.tpu.rewrite.yaml,2
8154,636,0.0012066695919262834,11,"frozenset({'inputs', 'none'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
8155,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.scalar.yaml,2
8156,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.histogram.yaml,2
8157,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.image2.yaml,2
8158,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","If not provided, `global_norm()` is used to compute the norm.",tf.clip_by_global_norm.yaml,2
8159,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,2
8160,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","When more than`max_outputs` many images are provided, the first `max_outputs` many images will be used and the rest silently discarded.",tf.summary.image.yaml,2
8161,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","When more than`max_outputs` many clips are provided, the first `max_outputs`many clips will be used and the rest silently discarded.",tf.summary.audio.yaml,2
8162,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","If both are provided, then only `save_checkpoint_secs`is used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8163,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","If both are provided, then only`save_checkpoint_secs` is used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8164,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
8165,630,0.0012066695919262834,11,"frozenset({'provided', 'used'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.audio2.yaml,2
8166,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.data.experimental.make_csv_dataset.yaml,2
8167,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
8168,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8169,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8170,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})", The provided type must match the type of the serialized tensor and no implicit conversion will take place.,tf.io.parse_tensor.yaml,2
8171,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,2
8172,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})",Will be determined via tensor._keras_history if not provided.,tf.keras.utils.get_source_inputs.yaml,2
8173,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.'silent_for_int32': silently copies `int32` tensors, raising errors on the other ones.",tf.config.experimental.set_device_policy.yaml,2
8174,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
8175,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
8176,629,0.0012066695919262834,11,"frozenset({'tensor', 'provided'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
8177,453,0.0012066695919262834,11,"frozenset({'less', 'must'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
8178,453,0.0012066695919262834,11,"frozenset({'less', 'must'})",Must be less than or equal to `frame_length`.,tf.signal.overlap_and_add.yaml,2
8179,453,0.0012066695919262834,11,"frozenset({'less', 'must'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
8180,453,0.0012066695919262834,11,"frozenset({'less', 'must'})", Must be nonnegative and less than `K`.,tf.compat.v1.ragged.constant_value.yaml,2
8181,453,0.0012066695919262834,11,"frozenset({'less', 'must'})", Must be less than `rank(indices)`.,tf.gather.yaml,2
8182,453,0.0012066695919262834,11,"frozenset({'less', 'must'})","This must be no greater than length of `vocabulary_file`, if less than length, later values are ignored.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
8183,453,0.0012066695919262834,11,"frozenset({'less', 'must'})","If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",tf.random.uniform_candidate_sampler.yaml,2
8184,453,0.0012066695919262834,11,"frozenset({'less', 'must'})", Must be nonnegative and less than `K`.,tf.ragged.constant.yaml,2
8185,453,0.0012066695919262834,11,"frozenset({'less', 'must'})"," Values must be greater than or equal to zero, and less than `num_partitions`.`partitions` is not required to be sorted.",tf.ragged.stack_dynamic_partitions.yaml,2
8186,453,0.0012066695919262834,11,"frozenset({'less', 'must'})", Must be less than `rank(indices)`.,tf.compat.v1.gather.yaml,2
8187,453,0.0012066695919262834,11,"frozenset({'less', 'must'})","Each element of this dataset must have the same rank as`row_shape`, and must have size less than or equal to `row_shape` in each dimension.",tf.data.experimental.dense_to_sparse_batch.yaml,2
8188,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_mul.yaml,2
8189,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",The final dimension contains the top `k` predicted class indices.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
8190,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})","A tuple of dimension indices, e.g. `(0, 2, 1)`.",tf.keras.backend.permute_dimensions.yaml,2
8191,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_div.yaml,2
8192,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_add.yaml,2
8193,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",The final dimension contains the top `k` predicted class indices.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
8194,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_min.yaml,2
8195,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_sub.yaml,2
8196,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_max.yaml,2
8197,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_update.yaml,2
8198,625,0.0012066695919262834,11,"frozenset({'indices', 'dimension'})",`shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`.,tf.roll.yaml,2
8199,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
8200,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
8201,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
8202,622,0.0012066695919262834,11,"frozenset({'output', 'op'})","Also controls the output shape of this op, which may affect type inference in other ops.",tf.math.accumulate_n.yaml,2
8203,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",Controls the shape of the returned op's output.,tf.io.decode_image.yaml,2
8204,622,0.0012066695919262834,11,"frozenset({'output', 'op'})","If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",tf.linalg.diag.yaml,2
8205,622,0.0012066695919262834,11,"frozenset({'output', 'op'})","If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",tf.linalg.diag.yaml,2
8206,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
8207,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8208,622,0.0012066695919262834,11,"frozenset({'output', 'op'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
8209,622,0.0012066695919262834,11,"frozenset({'output', 'op'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
8210,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv1D.yaml,2
8211,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",The total number of depthwise convolution output channels will be equal to `num_filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv1D.yaml,2
8212,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",Number of sample channels wanted.,tf.audio.decode_wav.yaml,2
8213,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",Number of color channels for the decoded image.,tf.io.decode_image.yaml,2
8214,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",The number of depthwise convolution output channels for each input channel.,tf.keras.layers.SeparableConv2D.yaml,2
8215,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,tf.keras.layers.SeparableConv2D.yaml,2
8216,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",Number of color channels for the decoded image.,tf.io.decode_jpeg.yaml,2
8217,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})","A `Tensor` representing pixel data with shape `[k, h, w, c]`, where `k` is the number of images, `h` and `w` are the height and width of the images, and `c` is the number of channels, which should be 1, 2, 3, or 4 (grayscale, grayscale with alpha, RGB, RGBA).",tf.summary.image.yaml,2
8218,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",Number of color channels for the decoded image.,tf.io.decode_png.yaml,2
8219,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})","A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels.",tf.summary.audio.yaml,2
8220,655,0.0012066695919262834,11,"frozenset({'number', 'channels'})",Number of color channels for the decoded image.,tf.io.decode_and_crop_jpeg.yaml,2
8221,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","Note that if the shape of `rhs` and/or `diags` isn't known statically, `rhs` will be treated as a matrix rather than a vector.",tf.linalg.tridiagonal_solve.yaml,2
8222,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
8223,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})",None or a vector representing the new shape for the returned`SparseTensor`.,tf.sparse.reset_shape.yaml,2
8224,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8225,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
8226,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",tf.nn.softmax_cross_entropy_with_logits.yaml,2
8227,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
8228,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","An integer vector representing the shape of `input`, based on `data_format`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
8229,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
8230,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
8231,603,0.0012066695919262834,11,"frozenset({'vector', 'shape'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
8232,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
8233,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
8234,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8235,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8236,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
8237,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","If `True`, skip the empty strings from the result.",tf.compat.v1.string_split.yaml,2
8238,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8239,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
8240,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
8241,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","A scalar containing either (i) the empty string (no compression), (ii) ""ZLIB"", or (iii) ""GZIP"".",tf.io.decode_compressed.yaml,2
8242,464,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'empty'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8243,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_nd_update.yaml,3
8244,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as ref.,tf.compat.v1.scatter_nd_update.yaml,3
8245,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_nd_sub.yaml,3
8246,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_mul.yaml,3
8247,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_div.yaml,3
8248,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_add.yaml,3
8249,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_min.yaml,3
8250,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_sub.yaml,3
8251,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_max.yaml,3
8252,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_nd_add.yaml,3
8253,449,0.0012066695919262834,11,"frozenset({'ref', 'must', 'type'})",Must have the same type as `ref`.,tf.compat.v1.scatter_update.yaml,3
8254,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,2
8255,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
8256,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
8257,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
8258,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,2
8259,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
8260,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
8261,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})",This may also be a (possibly nested) tuple of Tensors satisfying this property.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8262,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
8263,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","`signatures` may also be a dictionary, in which case it maps from signature keys to either `tf.function` instances with input signatures or concrete functions.",tf.saved_model.save.yaml,2
8264,657,0.0012066695919262834,11,"frozenset({'may', 'SOME_STRUCTURE'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
8265,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
8266,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
8267,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
8268,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8269,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A non-empty `Tensor`.,tf.nn.softmax.yaml,2
8270,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
8271,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8272,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
8273,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A non-empty `Tensor`.,tf.nn.log_softmax.yaml,2
8274,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8275,465,0.0012066695919262834,11,"frozenset({'tensor', 'empty'})",A non-empty `Tensor`.,tf.compat.v1.math.log_softmax.yaml,2
8276,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,2
8277,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
8278,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
8279,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_batch_cost.yaml,2
8280,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","tensor `(samples, 1)` containing the sequence length for each batch item in `y_true`.",tf.keras.backend.ctc_batch_cost.yaml,2
8281,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})",Entries corresponding to non-sequence columns must be 0 and entries corresponding to sequence columns specify the max sequence length for the column.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8282,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
8283,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","If length is less than sequence length, only the first n elements of the sequence are considered for the DCT.",tf.signal.dct.yaml,2
8284,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","If n is greater than the sequence length, zeros are padded and then the DCT is computed as usual.",tf.signal.dct.yaml,2
8285,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})",Used to copy-through state and zero-out outputs when past a batch element's sequence length.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8286,613,0.0012066695919262834,11,"frozenset({'sequence', 'length'})","tensor `(samples, )` containing the sequence length for each batch item in `y_pred`.",tf.keras.backend.ctc_decode.yaml,2
8287,467,0.0012066695919262834,11,"frozenset({'value', 'means'})","Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals.",tf.linalg.diag_part.yaml,2
8288,467,0.0012066695919262834,11,"frozenset({'value', 'means'})","A value of `None` means ""infer the input shape from the shapes in `inputs`"".",tf.math.accumulate_n.yaml,2
8289,467,0.0012066695919262834,11,"frozenset({'value', 'means'})","A value of `None`means ""infer the input dtype from `inputs[0]`"".",tf.math.accumulate_n.yaml,2
8290,467,0.0012066695919262834,11,"frozenset({'value', 'means'})","Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals.",tf.linalg.diag.yaml,2
8291,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
8292,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdamParameters.yaml,2
8293,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
8294,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters.yaml,2
8295,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the maximum value to clip by; None means +infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
8296,467,0.0012066695919262834,11,"frozenset({'value', 'means'})",the minimum value to clip by; None means -infinity.,tf.compat.v1.tpu.experimental.AdagradParameters.yaml,2
8297,467,0.0012066695919262834,11,"frozenset({'value', 'means'})","Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals.",tf.linalg.set_diag.yaml,2
8298,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_csv_dataset.yaml,2
8299,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8300,722,0.0012066695919262834,11,"frozenset({'true', 'order'})"," If `True`, indices are checked to make sure they are sorted in lexicographic order and that there are no repeats.",tf.sparse.to_dense.yaml,2
8301,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
8302,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_batched_features_dataset.yaml,2
8303,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","bool, Traverse pre order if True, post order if False.",tf.io.gfile.walk.yaml,2
8304,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If True, do the iteration over the time dimension in reverse order and return the reversed sequence.",tf.keras.backend.rnn.yaml,2
8305,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","bool, Traverse in order if True, post order if False.",tf.compat.v1.gfile.Walk.yaml,2
8306,722,0.0012066695919262834,11,"frozenset({'true', 'order'})",If true the resulting `k` elements will be sorted by the values in descending order.,tf.math.top_k.yaml,2
8307,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If True, equal elements in the original tensor will not be re-ordered in the returned order.",tf.argsort.yaml,2
8308,722,0.0012066695919262834,11,"frozenset({'true', 'order'})","If you require a stable order, pass `stable=True` for forwards compatibility.",tf.argsort.yaml,2
8309,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,2
8310,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
8311,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
8312,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,2
8313,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,2
8314,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8315,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
8316,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
8317,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
8318,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
8319,632,0.0012066695919262834,11,"frozenset({'window', 'convolution'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,2
8320,529,0.0012066695919262834,11,"frozenset({'step', 'number'})", The number of entries by which the filter is moved right at each step.,tf.nn.conv1d.yaml,2
8321,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",Recommended value is the number of batches consumed per training step.,tf.data.experimental.make_csv_dataset.yaml,2
8322,529,0.0012066695919262834,11,"frozenset({'step', 'number'})", The number of entries by which the filter is moved right at each step.,tf.compat.v1.nn.conv1d.yaml,2
8323,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",Recommended value is the number of batches consumed per training step.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8324,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",The number of samples to step.,tf.signal.inverse_stft_window_fn.yaml,2
8325,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",The number of samples to step.,tf.signal.inverse_stft.yaml,2
8326,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",Recommended value is the number of batches consumed per training step.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
8327,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",Recommended value is the number of batches consumed per training step.,tf.data.experimental.make_batched_features_dataset.yaml,2
8328,529,0.0012066695919262834,11,"frozenset({'step', 'number'})", The number of entries by which the filter is moved right at each step.,tf.nn.conv1d_transpose.yaml,2
8329,529,0.0012066695919262834,11,"frozenset({'step', 'number'})",The number of samples to step.,tf.signal.stft.yaml,2
8330,529,0.0012066695919262834,11,"frozenset({'step', 'number'})","The frequency, in number of global steps, that the global step/sec is logged.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8331,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
8332,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If not specified, defaults to`tf.truncated_normal_initializer` with mean `0.0` and standard deviation`1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8333,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})",Must be in the same order as the dimension specified with format.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8334,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.shared_embeddings.yaml,2
8335,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If not specified, defaults to`tf.compat.v1.truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
8336,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.embedding_column.yaml,2
8337,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8338,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8339,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})",Must be in the same order as the dimension specified with format.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
8340,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
8341,726,0.0012066695919262834,11,"frozenset({'specified', 'dimension'})",`shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`.,tf.roll.yaml,2
8342,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.depth_to_space.yaml,4
8343,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.space_to_depth.yaml,4
8344,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d.yaml,4
8345,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.conv2d.yaml,4
8346,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.space_to_depth.yaml,4
8347,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
8348,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.depth_to_space.yaml,4
8349,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
8350,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
8351,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
8352,500,0.0012066695919262834,11,"frozenset({'nchw', 'optional', 'nhwc', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
8353,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
8354,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`.",tf.linalg.cholesky_solve.yaml,2
8355,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
8356,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`lu` as returned by `tf.linalg.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `lower_upper = L + U - eye`.",tf.linalg.lu_solve.yaml,2
8357,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`p` as returned by `tf.linag.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `perm = argmax(P)`.",tf.linalg.lu_solve.yaml,2
8358,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
8359,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`lu` as returned by `tf.linalg.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `lower_upper = L + U - eye`.",tf.linalg.lu_reconstruct.yaml,2
8360,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`p` as returned by `tf.linag.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `perm = argmax(P)`.",tf.linalg.lu_reconstruct.yaml,2
8361,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
8362,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`lu` as returned by `tf.linalg.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `lower_upper = L + U - eye`.",tf.linalg.lu_matrix_inverse.yaml,2
8363,741,0.0012066695919262834,11,"frozenset({'e', 'tf'})","`p` as returned by `tf.linag.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `perm = argmax(P)`.",tf.linalg.lu_matrix_inverse.yaml,2
8364,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,4
8365,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d_transpose.yaml,4
8366,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d_transpose.yaml,4
8367,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})","Equivalently, the rate by which we upsample the filter values by inserting zeros across the `height` and`width` dimensions.",tf.nn.atrous_conv2d_transpose.yaml,4
8368,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,4
8369,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,4
8370,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})","Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",tf.nn.atrous_conv2d.yaml,4
8371,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d.yaml,4
8372,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})","Equivalently, the rate by which we upsample the filter values by inserting zeros across the `height` and`width` dimensions.",tf.nn.atrous_conv2d.yaml,4
8373,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,4
8374,409,0.0012066695919262834,11,"frozenset({'across', 'width', 'dimensions', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,4
8375,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
8376,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,3
8377,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,3
8378,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,3
8379,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
8380,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,3
8381,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
8382,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,3
8383,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","Elements should be floating-point values in `[-1.0, 1.0]`.",tf.summary.audio.yaml,3
8384,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,3
8385,412,0.0012066695919262834,11,"frozenset({'values', 'point', 'floating'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
8386,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","A `Tensor`, same type as `chol`, shape is `[..., M, K]`.",tf.linalg.cholesky_solve.yaml,3
8387,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","A `Tensor` of shape [..., M] or [..., M, K] and with the same dtype as`diagonals`.",tf.linalg.tridiagonal_solve.yaml,3
8388,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.svd.yaml,3
8389,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.lstsq.yaml,3
8390,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","`Tensor` of shape `[..., M, K]`.",tf.linalg.lstsq.yaml,3
8391,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",tf.linalg.tridiagonal_matmul.yaml,3
8392,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,3
8393,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
8394,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
8395,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
8396,516,0.0012066695919262834,11,"frozenset({'tensor', 'shape', 'm'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,3
8397,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
8398,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
8399,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8400,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8401,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
8402,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split_with_offsets.yaml,2
8403,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode_with_offsets.yaml,2
8404,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
8405,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
8406,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_split.yaml,2
8407,520,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'specifies'})",Specifies the response when an input string can't be converted using the indicated encoding.,tf.strings.unicode_decode.yaml,2
8408,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
8409,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})",The sizes of `x.shape[axes[0]]` and `y.shape[axes[1]]` should be equal.,tf.keras.backend.batch_dot.yaml,2
8410,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
8411,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
8412,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})",A tensor of same shape as `x`.,tf.keras.backend.update_sub.yaml,2
8413,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,2
8414,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","shape for randomly generated keep/drop flags, must be broadcastable to the shape of `x`",tf.keras.backend.dropout.yaml,2
8415,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})",A tensor of same shape as `x`.,tf.keras.backend.update_add.yaml,2
8416,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})", Defaults to error message and the shape of `x`.,tf.compat.v1.assert_rank.yaml,2
8417,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})",A `tensor` with the same shape and type as `x`.,tf.compat.v1.where.yaml,2
8418,738,0.0012066695919262834,11,"frozenset({'x', 'shape'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
8419,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.mean_squared_error.yaml,3
8420,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.hinge_loss.yaml,3
8421,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.softmax_cross_entropy.yaml,3
8422,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.sigmoid_cross_entropy.yaml,3
8423,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.huber_loss.yaml,3
8424,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which this loss will be added.,tf.compat.v1.losses.cosine_distance.yaml,3
8425,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,3
8426,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which this loss will be added.,tf.compat.v1.losses.absolute_difference.yaml,3
8427,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
8428,402,0.0012066695919262834,10,"frozenset({'collection', 'added', 'loss'})",collection to which the loss will be added.,tf.compat.v1.losses.log_loss.yaml,3
8429,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
8430,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
8431,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8432,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8433,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
8434,546,0.0012066695919262834,11,"frozenset({'values', 'return'})",In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.,tf.compat.v1.py_func.yaml,2
8435,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
8436,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","Other values will raise an exception when this op is run on CPU, and return `NaN` for corresponding loss and gradient rows on GPU.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
8437,546,0.0012066695919262834,11,"frozenset({'values', 'return'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
8438,546,0.0012066695919262834,11,"frozenset({'values', 'return'})",In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.,tf.numpy_function.yaml,2
8439,546,0.0012066695919262834,11,"frozenset({'values', 'return'})",They are written to the file system only when the proper flushing method is called (see description of return values below).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
8440,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
8441,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If set to -1, it will print all elements of every tensor.",tf.print.yaml,2
8442,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","Value to set the tensor to, as a Numpy array (of the same shape).",tf.keras.backend.set_value.yaml,2
8443,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})",Tensor to set to a new value.,tf.keras.backend.set_value.yaml,2
8444,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
8445,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})",fraction of the entries in the tensor that will be set to 0.,tf.keras.backend.dropout.yaml,2
8446,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
8447,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
8448,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
8449,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If set, the layer will not create a placeholder tensor.",tf.keras.Input.yaml,2
8450,761,0.0012066695919262834,11,"frozenset({'tensor', 'set'})","If set to -1, all elements of the tensor will be shown.",tf.strings.format.yaml,2
8451,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
8452,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
8453,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
8454,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
8455,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Optional projection function to be applied to the bias after being updated by an `Optimizer`.,tf.keras.layers.SeparableConv1D.yaml,2
8456,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
8457,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
8458,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
8459,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
8460,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
8461,399,0.0012066695919262834,11,"frozenset({'function', 'bias'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
8462,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",An int specifying the number of times this dataset is repeated.,tf.data.experimental.make_csv_dataset.yaml,2
8463,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
8464,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
8465,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,2
8466,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",An int specifying the number of times this dataset is repeated.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8467,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,2
8468,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
8469,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",Integer specifying the number of times to read through the dataset.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
8470,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",Integer specifying the number of times to read through the dataset.,tf.data.experimental.make_batched_features_dataset.yaml,2
8471,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,2
8472,555,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'dataset'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
8473,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","A scalar value in range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
8474,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_min.yaml,2
8475,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_max.yaml,2
8476,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmin.yaml,2
8477,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})",Tuple of floats; zoom range for width and height.,tf.keras.preprocessing.image.random_zoom.yaml,2
8478,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmin.yaml,2
8479,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmax.yaml,2
8480,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","A scalar value in range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
8481,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmax.yaml,2
8482,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","Height shift range, as a float fraction of the height.",tf.keras.preprocessing.image.random_shift.yaml,2
8483,750,0.0012066695919262834,11,"frozenset({'SOME_DTYPE', 'range'})","Width shift range, as a float fraction of the width.",tf.keras.preprocessing.image.random_shift.yaml,2
8484,512,0.0012066695919262834,11,"frozenset({'created', 'name'})","string, name of the directory to be created",tf.io.gfile.mkdir.yaml,2
8485,512,0.0012066695919262834,11,"frozenset({'created', 'name'})","string, name of the directory to be created",tf.io.gfile.makedirs.yaml,2
8486,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",A name for the scope created by this template.,tf.compat.v1.make_template.yaml,2
8487,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
8488,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
8489,512,0.0012066695919262834,11,"frozenset({'created', 'name'})","string, name of the directory to be created",tf.compat.v1.gfile.MkDir.yaml,2
8490,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
8491,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
8492,512,0.0012066695919262834,11,"frozenset({'created', 'name'})","string, name of the directory to be created",tf.compat.v1.gfile.MakeDirs.yaml,2
8493,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",The prefix to use on all names created within the name scope.,tf.keras.backend.name_scope.yaml,2
8494,512,0.0012066695919262834,11,"frozenset({'created', 'name'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
8495,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`, `2`, `np.inf` are supported.",tf.linalg.normalize.yaml,2
8496,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors where each value is the weight associated with a feature group.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
8497,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors where the values are the weights associated with a dense feature group.,tf.compat.v1.train.sdca_optimizer.yaml,2
8498,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors containing the example state data.,tf.compat.v1.train.sdca_optimizer.yaml,2
8499,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors which contain example indices.,tf.compat.v1.train.sdca_optimizer.yaml,2
8500,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors which contain feature indices.,tf.compat.v1.train.sdca_optimizer.yaml,2
8501,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors which contains feature value associated with each feature group.,tf.compat.v1.train.sdca_optimizer.yaml,2
8502,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors where each value is the indices which has corresponding weights in sparse_weights.,tf.compat.v1.train.sdca_optimizer.yaml,2
8503,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})",a list of vectors where each value is the weight associated with a sparse feature group.,tf.compat.v1.train.sdca_optimizer.yaml,2
8504,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported.",tf.norm.yaml,2
8505,415,0.0012066695919262834,11,"frozenset({'vectors', 'SOME_STRUCTURE'})","Some restrictions apply: a) The Frobenius norm `fro` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only 'euclidean', 'fro', `1`,    `2`, `np.inf` are supported.",tf.compat.v1.norm.yaml,2
8506,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8507,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_solve.yaml,2
8508,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_k.yaml,2
8509,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8510,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.gradients.yaml,2
8511,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.gradients.yaml,2
8512,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_reconstruct.yaml,2
8513,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.hessians.yaml,2
8514,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_k.yaml,2
8515,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_matrix_inverse.yaml,2
8516,495,0.0012066695919262834,11,"frozenset({'ops', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8517,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,3
8518,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
8519,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,3
8520,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
8521,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
8522,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
8523,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
8524,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
8525,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
8526,514,0.0010969723562966214,10,"frozenset({'dimensions', 'shape', 'm'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,3
8527,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",The number of iterations allowed to run in parallel.,tf.compat.v1.while_loop.yaml,2
8528,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})", The number of iterations to run in parallel.,tf.compat.v1.nn.raw_rnn.yaml,2
8529,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})"," Those operations which do not have any temporal dependency and can be run in parallel, will be.",tf.compat.v1.nn.raw_rnn.yaml,2
8530,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",(optional) The number of iterations allowed to run in parallel.,tf.foldr.yaml,2
8531,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",(optional) The number of iterations allowed to run in parallel.,tf.scan.yaml,2
8532,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",The number of iterations allowed to run in parallel.,tf.while_loop.yaml,2
8533,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})", The number of iterations to run in parallel.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8534,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})"," Those operations which do not have any temporal dependency and can be run in parallel, will be.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8535,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",(optional) The number of iterations allowed to run in parallel.,tf.foldl.yaml,2
8536,180,0.0010969723562966214,10,"frozenset({'run', 'parallel'})",(optional) The number of iterations allowed to run in parallel.,tf.map_fn.yaml,2
8537,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
8538,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,2
8539,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})",N x M `SparseTensor` of int64 ids where N is typically batch size and M is arbitrary.,tf.nn.embedding_lookup_sparse.yaml,2
8540,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,2
8541,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
8542,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
8543,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,2
8544,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,2
8545,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
8546,515,0.0010969723562966214,10,"frozenset({'batch', 'm'})",N x M `SparseTensor` of int64 ids where N is typically batch size and M is arbitrary.,tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
8547,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})",N-D `Tensor` containing a sorted sequence.,tf.searchsorted.yaml,2
8548,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})", Sequence of N ints >= 1.,tf.nn.convolution.yaml,2
8549,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})","If length is less than sequence length, only the first n elements of the sequence are considered for the DCT.",tf.signal.dct.yaml,2
8550,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})","If n is greater than the sequence length, zeros are padded and then the DCT is computed as usual.",tf.signal.dct.yaml,2
8551,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})", Sequence of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
8552,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})",Sequence of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
8553,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})", Sequence of N ints >= 1.,tf.compat.v1.nn.convolution.yaml,2
8554,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})", Sequence of N ints >= 1.,tf.compat.v1.nn.convolution.yaml,2
8555,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})",Sequence of N ints >= 1.,tf.nn.pool.yaml,2
8556,612,0.0010969723562966214,10,"frozenset({'sequence', 'n'})",Sequence of N ints >= 1.,tf.nn.pool.yaml,2
8557,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `SparseFeature`, and `RaggedFeature` values.",tf.compat.v1.parse_example.yaml,3
8558,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `RaggedFeature`, and `SparseFeature` values.",tf.data.experimental.parse_example_dataset.yaml,3
8559,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.compat.v1.parse_single_example.yaml,3
8560,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values.,tf.io.parse_single_sequence_example.yaml,3
8561,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",a dict of string to `VarLenFeature`/`FixedLenFeature`.,tf.estimator.export.build_parsing_serving_input_receiver_fn.yaml,3
8562,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values.,tf.io.parse_sequence_example.yaml,3
8563,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,3
8564,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})","A `dict` mapping feature keys to `FixedLenFeature`,`VarLenFeature`, `SparseFeature`, and `RaggedFeature` values.",tf.io.parse_example.yaml,3
8565,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.data.experimental.make_batched_features_dataset.yaml,3
8566,47,0.0010969723562966214,10,"frozenset({'varlenfeature', 'fixedlenfeature', 'SOME_STRUCTURE'})",A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values.,tf.io.parse_single_example.yaml,3
8567,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",A name scope for the associated operations (optional).,tf.math.reduce_std.yaml,2
8568,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",A name for the operations (optional).,tf.io.match_filenames_once.yaml,2
8569,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",Name used to scope the operations that compute the moments.,tf.compat.v1.nn.moments.yaml,2
8570,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",A name for prefixing the operations (optional).,tf.compat.v1.sparse_placeholder.yaml,2
8571,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",Name used to scope the operations that compute the moments.,tf.nn.moments.yaml,2
8572,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",Name used to scope the operations that compute the moments.,tf.nn.normalize_moments.yaml,2
8573,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",Name used to scope the operations that compute the sufficient stats.,tf.compat.v1.nn.sufficient_statistics.yaml,2
8574,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",A name scope for the associated operations (optional).,tf.math.bincount.yaml,2
8575,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",A name scope for the associated operations (optional).,tf.math.reduce_variance.yaml,2
8576,493,0.0010969723562966214,10,"frozenset({'operations', 'name'})",Name used to scope the operations that compute the sufficient stats.,tf.nn.sufficient_statistics.yaml,2
8577,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
8578,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
8579,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
8580,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})","Also controls the output shape of this op, which may affect type inference in other ops.",tf.math.accumulate_n.yaml,2
8581,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",Controls the shape of the returned op's output.,tf.io.decode_image.yaml,2
8582,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
8583,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
8584,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8585,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
8586,620,0.0010969723562966214,10,"frozenset({'op', 'shape'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
8587,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,6
8588,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,6
8589,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,6
8590,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,6
8591,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,6
8592,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,6
8593,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,6
8594,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,6
8595,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,6
8596,35,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'shape', 'num_true', 'batch_size', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,6
8597,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})",The input `SparseTensor` with `N` non-empty elements.,tf.sparse.retain.yaml,2
8598,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})","(Optional.) If non-empty, the returned iterator will be shared under the given name across multiple sessions that share the same devices (e.g. when using a remote server).",tf.compat.v1.data.make_initializable_iterator.yaml,2
8599,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
8600,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8601,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
8602,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})",A non-empty `Tensor`.,tf.nn.softmax.yaml,2
8603,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})"," If this is a non-empty list, the last element must be equal to model_checkpoint_path.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
8604,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
8605,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})",A non-empty `Tensor`.,tf.nn.log_softmax.yaml,2
8606,463,0.0010969723562966214,10,"frozenset({'non', 'empty'})",A non-empty `Tensor`.,tf.compat.v1.math.log_softmax.yaml,2
8607,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
8608,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
8609,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
8610,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
8611,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,3
8612,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,3
8613,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,3
8614,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,3
8615,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,3
8616,606,0.0010969723562966214,10,"frozenset({'last', 'tensor', 'd'})","An n-D Tensor with at least 3 dimensions, the last 3 of which are the dimensions of each image.",tf.image.per_image_standardization.yaml,3
8617,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,3
8618,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` every`run_every_steps` steps.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,3
8619,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,3
8620,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` every`run_every_steps` steps.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,3
8621,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds.",tf.estimator.experimental.stop_if_lower_hook.yaml,3
8622,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` every`run_every_steps` steps.",tf.estimator.experimental.stop_if_lower_hook.yaml,3
8623,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds.",tf.estimator.experimental.make_early_stopping_hook.yaml,3
8624,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` every`run_every_steps` steps.",tf.estimator.experimental.make_early_stopping_hook.yaml,3
8625,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds.",tf.estimator.experimental.stop_if_higher_hook.yaml,3
8626,32,0.0010969723562966214,10,"frozenset({'specified', 'calls', 'should_stop_fn'})","If specified, calls `should_stop_fn` every`run_every_steps` steps.",tf.estimator.experimental.stop_if_higher_hook.yaml,3
8627,879,0.0010969723562966214,10,"frozenset({'values', 'true'})",A bool vector of length `N` with `M` true values.,tf.sparse.retain.yaml,2
8628,879,0.0010969723562966214,10,"frozenset({'values', 'true'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_avg_pool.yaml,2
8629,879,0.0010969723562966214,10,"frozenset({'values', 'true'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
8630,879,0.0010969723562966214,10,"frozenset({'values', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
8631,879,0.0010969723562966214,10,"frozenset({'values', 'true'})","If True, the returned numpy array is allowed to have partially evaluated values.",tf.get_static_value.yaml,2
8632,879,0.0010969723562966214,10,"frozenset({'values', 'true'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_max_pool.yaml,2
8633,879,0.0010969723562966214,10,"frozenset({'values', 'true'})",Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,tf.config.experimental.set_synchronous_execution.yaml,2
8634,879,0.0010969723562966214,10,"frozenset({'values', 'true'})",If true the resulting `k` elements will be sorted by the values in descending order.,tf.math.top_k.yaml,2
8635,879,0.0010969723562966214,10,"frozenset({'values', 'true'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
8636,879,0.0010969723562966214,10,"frozenset({'values', 'true'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
8637,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
8638,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8639,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})","A tuple of dimension indices, e.g. `(0, 2, 1)`.",tf.keras.backend.permute_dimensions.yaml,2
8640,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",A list with the same length as `indices` of `Tensor` objects with the same type.,tf.dynamic_stitch.yaml,2
8641,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})","A word sequence (sentence), encoded as a list     of word indices (integers).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
8642,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.compat.v1.decode_csv.yaml,2
8643,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",a list of vectors which contain example indices.,tf.compat.v1.train.sdca_optimizer.yaml,2
8644,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",a list of vectors which contain feature indices.,tf.compat.v1.train.sdca_optimizer.yaml,2
8645,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",a list of vectors where each value is the indices which has corresponding weights in sparse_weights.,tf.compat.v1.train.sdca_optimizer.yaml,2
8646,624,0.0010969723562966214,10,"frozenset({'indices', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.io.decode_csv.yaml,2
8647,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values.,tf.image.non_max_suppression_overlaps.yaml,5
8648,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_overlaps.yaml,5
8649,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,tf.image.non_max_suppression_with_scores.yaml,5
8650,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_with_scores.yaml,5
8651,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,tf.image.combined_non_max_suppression.yaml,5
8652,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.combined_non_max_suppression.yaml,5
8653,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,tf.image.non_max_suppression.yaml,5
8654,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression.yaml,5
8655,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,tf.image.non_max_suppression_padded.yaml,5
8656,29,0.0010969723562966214,10,"frozenset({'deciding', 'SOME_DTYPE', 'threshold', 'representing', 'boxes'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_padded.yaml,5
8657,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d.yaml,5
8658,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d.yaml,5
8659,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv3d.yaml,5
8660,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.nn.conv3d.yaml,5
8661,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.nn.conv3d.yaml,5
8662,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.nn.conv3d.yaml,5
8663,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of:   [batch, in_depth, in_height, in_width, in_channels].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
8664,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is:   [batch, in_channels, in_depth, in_height, in_width].",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
8665,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","With the default format ""NDHWC"", the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels].",tf.nn.max_pool3d.yaml,5
8666,28,0.0010969723562966214,10,"frozenset({'in_width', 'in_channels', 'batch', 'in_depth', 'in_height'})","Alternatively, the format could be ""NCDHW"", the data storage order is: [batch, in_channels, in_depth, in_height, in_width].",tf.nn.max_pool3d.yaml,5
8667,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
8668,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.data.experimental.make_csv_dataset.yaml,2
8669,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})",A float representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values.,tf.image.non_max_suppression_overlaps.yaml,2
8670,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8671,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8672,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
8673,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.'silent_for_int32': silently copies `int32` tensors, raising errors on the other ones.",tf.config.experimental.set_device_policy.yaml,2
8674,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
8675,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
8676,628,0.0010969723562966214,10,"frozenset({'provided', 'SOME_DTYPE'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
8677,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.apply_affine_transform.yaml,2
8678,219,0.0010969723562966214,10,"frozenset({'one', 'points'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.strings.substr.yaml,2
8679,219,0.0010969723562966214,10,"frozenset({'one', 'points'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
8680,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_rotation.yaml,2
8681,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_zoom.yaml,2
8682,219,0.0010969723562966214,10,"frozenset({'one', 'points'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.strings.substr.yaml,2
8683,219,0.0010969723562966214,10,"frozenset({'one', 'points'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.substr.yaml,2
8684,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shear.yaml,2
8685,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","If there is data but all points have the same value, then there is one bucket whose left and right endpoints are the same.",tf.summary.histogram.yaml,2
8686,219,0.0010969723562966214,10,"frozenset({'one', 'points'})","Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",tf.keras.preprocessing.image.random_shift.yaml,2
8687,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
8688,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,3
8689,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_k.yaml,3
8690,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,3
8691,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
8692,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,3
8693,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_k.yaml,3
8694,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,3
8695,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
8696,24,0.0010969723562966214,10,"frozenset({'commonly', 'shape', 'n'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,3
8697,631,0.0010969723562966214,10,"frozenset({'window', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
8698,631,0.0010969723562966214,10,"frozenset({'window', 'length'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
8699,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,2
8700,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,2
8701,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",The window length in samples.,tf.signal.inverse_stft.yaml,2
8702,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
8703,631,0.0010969723562966214,10,"frozenset({'window', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
8704,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",The window length in samples.,tf.signal.stft.yaml,2
8705,631,0.0010969723562966214,10,"frozenset({'window', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
8706,631,0.0010969723562966214,10,"frozenset({'window', 'length'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
8707,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,3
8708,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,3
8709,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,3
8710,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,3
8711,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,3
8712,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,3
8713,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,3
8714,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,3
8715,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,3
8716,471,0.0010969723562966214,10,"frozenset({'input', 'start', 'output'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,3
8717,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.random_uniform_variable.yaml,2
8718,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
8719,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})",(Optional.) Python integer seed for the resampler.,tf.data.experimental.rejection_resample.yaml,2
8720,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
8721,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.random_binomial.yaml,2
8722,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.truncated_normal.yaml,2
8723,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.random_normal_variable.yaml,2
8724,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
8725,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.random_normal.yaml,2
8726,599,0.0010969723562966214,10,"frozenset({'seed', 'SOME_DTYPE'})","Integer, random seed.",tf.keras.backend.random_uniform.yaml,2
8727,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})",A nested structure of tf.TensorShape representing the shape to which the respective component of each input element in each replica should be padded.,tf.compat.v1.tpu.replicate.yaml,2
8728,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
8729,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
8730,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8731,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})","When True, `tf.function` may generate fewer, graphs that are less specialized on input shapes.",tf.function.yaml,2
8732,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.transpose.yaml,2
8733,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.transpose(input)).,tf.compat.v1.transpose.yaml,2
8734,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
8735,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})","`signatures` may also be a dictionary, in which case it maps from signature keys to either `tf.function` instances with input signatures or concrete functions.",tf.saved_model.save.yaml,2
8736,892,0.0010969723562966214,10,"frozenset({'input', 'tf'})",Setting it to `True` is mathematically equivalent to tf.math.conj(tf.linalg.matrix_transpose(input)).,tf.linalg.matrix_transpose.yaml,2
8737,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8738,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8739,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","This should be in range [0, num_classes], where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
8740,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.precision_at_k.yaml,2
8741,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8742,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8743,605,0.0010969723562966214,10,"frozenset({'last', 'range'})",Last entry in the range.,tf.linspace.yaml,2
8744,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","This should be in range [0, num_classes), where num_classes is the last dimension of`predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
8745,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.recall_at_k.yaml,2
8746,605,0.0010969723562966214,10,"frozenset({'last', 'range'})","Values should be in range [0, num_classes), where num_classes is the last dimension of `predictions`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8747,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
8748,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
8749,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.shared_embeddings.yaml,2
8750,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.shared_embeddings.yaml,2
8751,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",String representing checkpoint name/pattern from which to restore column weights.,tf.feature_column.embedding_column.yaml,2
8752,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.feature_column.embedding_column.yaml,2
8753,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
8754,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",String representing checkpoint name/pattern from which to restore column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
8755,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
8756,491,0.0010969723562966214,10,"frozenset({'column', 'weights'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
8757,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
8758,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",Default value 1.5 (width of gaussian filter).,tf.image.ssim_multiscale.yaml,2
8759,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",Default value 11 (size of gaussian filter).,tf.image.ssim_multiscale.yaml,2
8760,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})", `filter`'s `in_channels` dimension must match that of `value`.,tf.nn.conv3d_transpose.yaml,2
8761,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8762,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",The float value that the highest quantized filter value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,2
8763,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",The float value that the lowest quantized filter value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,2
8764,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",Default value 1.5 (width of gaussian filter).,tf.image.ssim.yaml,2
8765,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})",Default value 11 (size of gaussian filter).,tf.image.ssim.yaml,2
8766,564,0.0010969723562966214,10,"frozenset({'value', 'filter'})", `filter`'s`in_channels` dimension must match that of `value`.,tf.nn.conv1d_transpose.yaml,2
8767,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,2
8768,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,2
8769,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,2
8770,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_local_variable.yaml,2
8771,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","If True, the default, the shape of initial_value must be known.",tf.compat.v1.get_variable.yaml,2
8772,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,2
8773,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8774,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,2
8775,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,2
8776,916,0.0010969723562966214,10,"frozenset({'shape', 'default'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,2
8777,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",A `tf.estimator.Estimator` instance.,tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
8778,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",A `tf.estimator.Estimator` instance.,tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
8779,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})","Either an int/float, the string `""dynamic""`, or an instance of a`tf.mixed_precision.experimental.LossScale`.",tf.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
8780,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",An instance of a `tf.keras.optimizers.Optimizer`.,tf.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
8781,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",A `tf.estimator.Estimator` instance.,tf.estimator.experimental.stop_if_lower_hook.yaml,2
8782,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",A `tf.estimator.Estimator` instance.,tf.estimator.experimental.make_early_stopping_hook.yaml,2
8783,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",an instance of `tf.compat.v1.ConfigProto` proto used to configure the session.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8784,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})","Either an int/float, the string `""dynamic""`, or an instance of a `tf.mixed_precision.experimental.LossScale`.",tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
8785,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",An instance of a `tf.keras.optimizers.Optimizer` or a`tf.train.Optimizer`.,tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
8786,571,0.0010969723562966214,10,"frozenset({'instance', 'tf'})",A `tf.estimator.Estimator` instance.,tf.estimator.experimental.stop_if_higher_hook.yaml,2
8787,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,4
8788,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,4
8789,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.conv2d.yaml,4
8790,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.conv2d.yaml,4
8791,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
8792,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,4
8793,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
8794,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_input.yaml,4
8795,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
8796,572,0.0010969723562966214,10,"frozenset({'format', 'data', 'nhwc', 'batch'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, in_height, in_width, in_channels].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
8797,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
8798,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
8799,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
8800,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,2
8801,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8802,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
8803,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
8804,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
8805,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,2
8806,554,0.0010969723562966214,10,"frozenset({'tensor', 'dataset'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
8807,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})",Defaults to the first dimension.,tf.unstack.yaml,2
8808,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})","If not specified, defaults to`tf.truncated_normal_initializer` with mean `0.0` and standard deviation`1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8809,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})", Defaults to the first non-batch dimension.,tf.gather.yaml,2
8810,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.shared_embeddings.yaml,2
8811,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})","If not specified, defaults to`tf.compat.v1.truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
8812,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})",Defaults to (size of first dimension of `losses`) * (number of replicas).,tf.nn.compute_average_loss.yaml,2
8813,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.feature_column.embedding_column.yaml,2
8814,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})",Defaults to the first dimension.,tf.stack.yaml,2
8815,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})","If not specified, defaults to`truncated_normal_initializer` with mean `0.0` and standard deviation `1/sqrt(dimension)`.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
8816,912,0.0010969723562966214,10,"frozenset({'defaults', 'dimension'})", Defaults to the first non-batch dimension.,tf.compat.v1.gather.yaml,2
8817,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",These names will be the keys of the features dict of each dataset element.,tf.data.experimental.make_csv_dataset.yaml,2
8818,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
8819,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.sample_from_datasets.yaml,2
8820,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
8821,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",These names will be the keys of the features dict of each dataset element.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8822,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8823,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
8824,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.data.experimental.choose_from_datasets.yaml,2
8825,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})",A list of `tf.data.Dataset` objects with compatible structure.,tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
8826,553,0.0010969723562966214,10,"frozenset({'dataset', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
8827,551,0.0010969723562966214,10,"frozenset({'one', 'per'})",One item per selected column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
8828,551,0.0010969723562966214,10,"frozenset({'one', 'per'})",One per column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
8829,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","A list of unigram counts or probabilities, one per ID in sequential order.",tf.random.fixed_unigram_candidate_sampler.yaml,2
8830,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
8831,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","If not `None`, there must be one dimension per output.",tf.compat.v1.tpu.shard.yaml,2
8832,551,0.0010969723562966214,10,"frozenset({'one', 'per'})",One item per selected column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8833,551,0.0010969723562966214,10,"frozenset({'one', 'per'})",One per column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8834,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8835,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8836,551,0.0010969723562966214,10,"frozenset({'one', 'per'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
8837,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",One item per selected column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
8838,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",One per column of the input record.,tf.data.experimental.make_csv_dataset.yaml,2
8839,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",The shape of the input data per sequence id.,tf.feature_column.sequence_numeric_column.yaml,2
8840,550,0.0010969723562966214,10,"frozenset({'input', 'per'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
8841,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",Samples per second of the input signal used to create the spectrogram.,tf.signal.linear_to_mel_weight_matrix.yaml,2
8842,550,0.0010969723562966214,10,"frozenset({'input', 'per'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
8843,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",One item per selected column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8844,550,0.0010969723562966214,10,"frozenset({'input', 'per'})",One per column of the input record.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8845,550,0.0010969723562966214,10,"frozenset({'input', 'per'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8846,550,0.0010969723562966214,10,"frozenset({'input', 'per'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8847,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,2
8848,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
8849,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,2
8850,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,2
8851,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,2
8852,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,2
8853,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,2
8854,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,2
8855,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,2
8856,576,0.0010969723562966214,10,"frozenset({'tf', 'summary'})",The `tf.summary.SummaryWriter` resource to flush.,tf.summary.flush.yaml,2
8857,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.write.yaml,2
8858,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.scalar.yaml,2
8859,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.image.yaml,2
8860,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.experimental.write_raw_pb.yaml,2
8861,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.text.yaml,2
8862,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.audio.yaml,2
8863,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})"," If both `save_summaries_steps` and`save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8864,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If both`save_summaries_steps` and `save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
8865,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.histogram.yaml,2
8866,577,0.0010969723562966214,10,"frozenset({'none', 'summary'})","If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",tf.summary.trace_export.yaml,2
8867,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,4
8868,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,4
8869,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.conv2d.yaml,4
8870,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.conv2d.yaml,4
8871,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
8872,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,4
8873,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
8874,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_input.yaml,4
8875,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
8876,499,0.0010969723562966214,10,"frozenset({'format', 'data', 'nchw', 'batch'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, in_channels, in_height, in_width].",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
8877,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,3
8878,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
8879,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
8880,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,3
8881,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
8882,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
8883,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,3
8884,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,3
8885,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,3
8886,906,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'SOME_STRUCTURE'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,3
8887,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.data.experimental.make_csv_dataset.yaml,2
8888,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If this is not provided, infers the column names from the first row of the records.",tf.data.experimental.make_csv_dataset.yaml,2
8889,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.data.experimental.make_csv_dataset.yaml,2
8890,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
8891,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines.",tf.data.experimental.make_csv_dataset.yaml,2
8892,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If a dtype is provided instead of a tensor, the column is also treated as required.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8893,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If this is not provided, infers the column names from the first row of the records.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8894,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8895,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8896,586,0.0010969723562966214,10,"frozenset({'column', 'provided'})","If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8897,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,3
8898,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.linalg.normalize.yaml,3
8899,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,3
8900,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,3
8901,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.pinv.yaml,3
8902,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.matrix_rank.yaml,3
8903,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,3
8904,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.norm.yaml,3
8905,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,3
8906,592,0.0010969723562966214,10,"frozenset({'tensor', 'matrix', 'batch'})","Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",tf.compat.v1.norm.yaml,3
8907,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.random.fixed_unigram_candidate_sampler.yaml,6
8908,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.nn.nce_loss.yaml,6
8909,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.compat.v1.nn.nce_loss.yaml,6
8910,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.nn.compute_accidental_hits.yaml,6
8911,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.compat.v1.nn.sampled_softmax_loss.yaml,6
8912,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.random.all_candidate_sampler.yaml,6
8913,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.random.uniform_candidate_sampler.yaml,6
8914,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.nn.sampled_softmax_loss.yaml,6
8915,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.random.log_uniform_candidate_sampler.yaml,6
8916,502,0.0010969723562966214,10,"frozenset({'target', 'classes', 'per', 'training', 'example', 'number'})", The number of target classes per training example.,tf.random.learned_unigram_candidate_sampler.yaml,6
8917,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer's variables will be updated via gradient descent during training.",tf.compat.v1.keras.layers.DenseFeatures.yaml,2
8918,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv3D.yaml,2
8919,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv1D.yaml,2
8920,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})",Whether to use batch normalization after each hidden layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
8921,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer uses a bias.",tf.keras.layers.SeparableConv1D.yaml,2
8922,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})",whether to display layer names.,tf.keras.utils.model_to_dot.yaml,2
8923,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.SeparableConv2D.yaml,2
8924,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer uses a bias vector.",tf.keras.layers.Conv2D.yaml,2
8925,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})",whether to display layer names.,tf.keras.utils.plot_model.yaml,2
8926,508,0.0010969723562966214,10,"frozenset({'layer', 'whether'})","Boolean, whether the layer's variables will be updated via gradient descent during training.",tf.keras.experimental.SequenceFeatures.yaml,2
8927,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
8928,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})","Optional, used to specify the number of outputs when it cannot be inferred from the shape of `size_splits`.",tf.split.yaml,2
8929,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",The shape of the tensor to be fed (optional).,tf.compat.v1.sparse_placeholder.yaml,2
8930,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",Expected shape of elements of `inputs` (optional).,tf.math.accumulate_n.yaml,2
8931,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",(Optional) RunMetadata proto that helps flops computation using run time shape information.,tf.compat.v1.profiler.write_op_log.yaml,2
8932,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
8933,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
8934,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
8935,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})",The shape of the tensor to be fed (optional).,tf.compat.v1.placeholder.yaml,2
8936,932,0.0010969723562966214,10,"frozenset({'optional', 'shape'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
8937,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,2
8938,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","Float `[batch_size, num_classes]` logits outputs of the network.",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
8939,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","`[batch_size, num_classes]` target integer labels in`{0, 1}`.",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
8940,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","Unscaled log probabilities of shape `[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or `float64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8941,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","Per-label activations (typically a linear output) of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or`float64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8942,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,2
8943,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","Unscaled log probabilities of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32` or`float64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
8944,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
8945,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})",class vector to be converted into a matrix (integers from 0 to num_classes).,tf.keras.utils.to_categorical.yaml,2
8946,531,0.0010969723562966214,10,"frozenset({'num_classes', 'SOME_DTYPE'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
8947,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
8948,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv3D.yaml,2
8949,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
8950,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv1D.yaml,2
8951,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Constraint function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
8952,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Regularizer function applied to the bias vector.,tf.keras.layers.SeparableConv2D.yaml,2
8953,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Constraint function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
8954,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Regularizer function applied to the bias vector.,tf.keras.layers.Conv2D.yaml,2
8955,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})","In a pure mathematical sense, a vector-argument vector-valued function `f`'s derivatives should be its Jacobian matrix`J`.",tf.custom_gradient.yaml,2
8956,601,0.0010969723562966214,10,"frozenset({'vector', 'function'})",Here we are expressing the Jacobian `J` as a function `grad_fn`which defines how `J` will transform a vector `grad_ys` when left-multiplied with it (`grad_ys * J`).,tf.custom_gradient.yaml,2
8957,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
8958,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
8959,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8960,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8961,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","An integer vector representing the shape of `input`, based on `data_format`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
8962,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
8963,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
8964,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
8965,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
8966,602,0.0010969723562966214,10,"frozenset({'input', 'vector'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8967,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_overlaps.yaml,4
8968,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,4
8969,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_with_scores.yaml,4
8970,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,4
8971,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.combined_non_max_suppression.yaml,4
8972,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,4
8973,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression.yaml,4
8974,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,4
8975,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A float representing the threshold for deciding when to remove boxes based on score.,tf.image.non_max_suppression_padded.yaml,4
8976,22,0.0010969723562966214,10,"frozenset({'score', 'boxes', 'SOME_DTYPE', 'representing'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,4
8977,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.write.yaml,2
8978,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Optional SummaryMetadata proto (which describes which plugins may use the summary value).,tf.compat.v1.summary.tensor_summary.yaml,2
8979,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.scalar.yaml,2
8980,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.image.yaml,2
8981,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.experimental.write_raw_pb.yaml,2
8982,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.text.yaml,2
8983,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.audio.yaml,2
8984,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.histogram.yaml,2
8985,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})",Explicit `int64`-castable monotonic step value for this summary.,tf.summary.trace_export.yaml,2
8986,575,0.0010969723562966214,10,"frozenset({'value', 'summary'})","The currently supported options are: ""NO_TENSOR"": (Default) Only traces the execution of ops' output tensors, while not dumping the value of the ops' output tensors or any form of concise summary of them.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
8987,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
8988,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
8989,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
8990,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})","A scalar float representing the Soft NMS sigma parameter; See Bodla et al, https://arxiv.org/abs/1704.04503).",tf.image.non_max_suppression_with_scores.yaml,2
8991,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})","string or scalar string `Tensor`, regular expression to use, see more details at https://github.com/google/re2/wiki/Syntax",tf.strings.regex_replace.yaml,2
8992,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
8993,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})",A boolean that enables/disables 'strict' mode; see above.,tf.case.yaml,2
8994,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
8995,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})",A boolean that enables/disables 'strict' mode; see above.,tf.compat.v1.cond.yaml,2
8996,768,0.0010969723562966214,10,"frozenset({'see', 'SOME_DTYPE'})",A boolean that enables/disables 'strict' mode; see above.,tf.compat.v1.case.yaml,2
8997,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
8998,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","`None` means ""shard all inputs along dimension 0"".",tf.compat.v1.tpu.shard.yaml,2
8999,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
9000,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","`None` means ""concatenate all outputs along dimension 0"".",tf.compat.v1.tpu.shard.yaml,2
9001,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","If not `None`, there must be one dimension per output.",tf.compat.v1.tpu.shard.yaml,2
9002,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
9003,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","If None, then the first 3 and last 3 elements of each dimension are printed for each tensor.",tf.print.yaml,2
9004,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
9005,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","Either a `Dimension` instance, an integer, or None.",tf.compat.dimension_value.yaml,2
9006,869,0.0010969723562966214,10,"frozenset({'dimension', 'none'})","Size of the last dimension must be None, 1 or 3.",tf.image.adjust_jpeg_quality.yaml,2
9007,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})"," If not specified ""xw_plus_b"" is used.",tf.compat.v1.nn.xw_plus_b.yaml,2
9008,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
9009,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If not specified ""conv_transpose"" is used.",tf.nn.conv_transpose.yaml,2
9010,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If both are specified, `shape` is used.",tf.keras.backend.placeholder.yaml,2
9011,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If not specified ""erosion2d"" is used.",tf.nn.erosion2d.yaml,2
9012,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
9013,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","In case of variable length input, it is used for masking in case there's no mask specified.",tf.keras.backend.rnn.yaml,2
9014,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
9015,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})"," If not specified ""nn_relu_layer"" is used.",tf.compat.v1.nn.relu_layer.yaml,2
9016,724,0.0010969723562966214,10,"frozenset({'specified', 'used'})","If not specified ""erosion2d"" is used.",tf.compat.v1.nn.erosion2d.yaml,2
9017,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
9018,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.linalg.normalize.yaml,2
9019,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",See the description of `axis`on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.linalg.normalize.yaml,2
9020,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
9021,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.norm.yaml,2
9022,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.norm.yaml,2
9023,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
9024,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",Default is 'euclidean' which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.compat.v1.norm.yaml,2
9025,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.,tf.compat.v1.norm.yaml,2
9026,414,0.0010969723562966214,10,"frozenset({'tensor', 'vectors'})",A tensor containing 3-element vectors.,tf.linalg.cross.yaml,2
9027,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9028,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9029,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_k.yaml,2
9030,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_k.yaml,2
9031,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9032,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9033,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_k.yaml,2
9034,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_k.yaml,2
9035,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9036,734,0.0010969723562966214,10,"frozenset({'labels', 'n'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9037,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
9038,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
9039,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
9040,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
9041,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9042,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9043,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
9044,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
9045,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9046,366,0.0010969723562966214,10,"frozenset({'value', 'vocabulary'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9047,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.global_variables.yaml,2
9048,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.trainable_variables.yaml,2
9049,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
9050,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.moving_average_variables.yaml,2
9051,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.local_variables.yaml,2
9052,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
9053,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
9054,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
9055,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","If supplied, the resulting list is filtered to include only items whose `name` attribute matches `scope` using`re.match`.",tf.compat.v1.model_variables.yaml,2
9056,731,0.0010969723562966214,10,"frozenset({'whose', 'SOME_STRUCTURE'})","(Optional.) If supplied, the resulting list is filtered to include only items whose `name` attribute matches using `re.match`.",tf.compat.v1.get_collection.yaml,2
9057,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
9058,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
9059,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
9060,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
9061,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9062,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9063,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
9064,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
9065,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","The integer ID value to return for out-of-vocabulary feature values, defaults to `-1`.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9066,365,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'vocabulary'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9067,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
9068,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
9069,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
9070,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
9071,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
9072,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
9073,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
9074,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
9075,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
9076,361,0.0010969723562966214,10,"frozenset({'considered', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
9077,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","If a callable is passed, it will only be called when a default SummaryWriter exists and the recording condition specified by`record_if()` is met.",tf.summary.write.yaml,2
9078,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","If not specified, the default behavior is embedding lookup on ""tpu_embedding_core"" for training and ""cpu"" for inference.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
9079,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.compat.v1.ragged.constant_value.yaml,2
9080,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})"," If `ragged_rank` is specified, then a default is chosen based on the contents of `pylist`.",tf.compat.v1.ragged.constant_value.yaml,2
9081,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","If not specified, the default behavior is embedding lookup on ""tpu_embedding_core"" for training and ""cpu"" for inference.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
9082,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})",If `None` (the default) is specified then 'N..C' is assumed.,tf.nn.bias_add.yaml,2
9083,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})"," If not specified, then a default is chosen based on the scalar values in`pylist`.",tf.ragged.constant.yaml,2
9084,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})"," If `ragged_rank` is specified, then a default is chosen based on the contents of `pylist`.",tf.ragged.constant.yaml,2
9085,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","If not specified, a default one is created.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9086,725,0.0010969723562966214,10,"frozenset({'specified', 'default'})","Optional, either a `tf.function` with an input signature specified or the result of `f.get_concrete_function` on a`@tf.function`-decorated function `f`, in which case `f` will be used to generate a signature for the SavedModel under the default serving signature key.",tf.saved_model.save.yaml,2
9087,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a Variable node.,tf.compat.v1.scatter_nd_sub.yaml,2
9088,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.assign_add.yaml,2
9089,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.scatter_mul.yaml,2
9090,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.assign.yaml,2
9091,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.scatter_div.yaml,2
9092,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a`Variable` node.,tf.compat.v1.scatter_min.yaml,2
9093,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.scatter_sub.yaml,2
9094,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a`Variable` node.,tf.compat.v1.scatter_max.yaml,2
9095,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a Variable node.,tf.compat.v1.scatter_nd_add.yaml,2
9096,351,0.0010969723562966214,10,"frozenset({'node', 'variable'})",Should be from a `Variable` node.,tf.compat.v1.assign_sub.yaml,2
9097,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
9098,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
9099,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","If `None`, this column's graph operations will fail for out-of-range inputs.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
9100,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
9101,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})",Range of inputs.,tf.feature_column.sequence_categorical_column_with_identity.yaml,2
9102,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","Namely, inputs are expected to be in the range `[0, num_buckets)`.",tf.feature_column.sequence_categorical_column_with_identity.yaml,2
9103,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9104,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","Range of inputs and outputs is `[0, num_buckets)`.",tf.feature_column.categorical_column_with_identity.yaml,2
9105,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
9106,635,0.0010969723562966214,10,"frozenset({'inputs', 'range'})","All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9107,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
9108,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
9109,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,3
9110,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",A single integer specifying the spatial dimensions of the filters.,tf.keras.layers.SeparableConv1D.yaml,3
9111,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})","Tuple or list of integers with target dimensions, or single integer.",tf.keras.backend.batch_dot.yaml,3
9112,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
9113,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,3
9114,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
9115,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
9116,713,0.0010969723562966214,10,"frozenset({'single', 'SOME_DTYPE', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,3
9117,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_negatives.yaml,2
9118,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})",The predicted values.,tf.keras.losses.squared_hinge.yaml,2
9119,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,2
9120,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_positives.yaml,2
9121,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.recall.yaml,2
9122,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_negatives.yaml,2
9123,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})",The predicted values.,tf.keras.losses.hinge2.yaml,2
9124,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})",The predicted values.,tf.keras.losses.categorical_hinge.yaml,2
9125,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_positives.yaml,2
9126,349,0.0010969723562966214,10,"frozenset({'predicted', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.precision.yaml,2
9127,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,2
9128,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
9129,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",This single sample of negative classes is evaluated for each element in the batch.,tf.nn.nce_loss.yaml,2
9130,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9131,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",This single sample of negative classes is evaluated for each element in the batch.,tf.compat.v1.nn.nce_loss.yaml,2
9132,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
9133,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9134,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9135,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,2
9136,712,0.0010969723562966214,10,"frozenset({'single', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
9137,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,3
9138,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,3
9139,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,3
9140,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,3
9141,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,3
9142,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,3
9143,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,3
9144,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,3
9145,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,3
9146,813,0.0010969723562966214,10,"frozenset({'function', 'SOME_DTYPE', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,3
9147,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
9148,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.gradients.yaml,2
9149,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,tf.compat.v1.gradients.yaml,2
9150,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
9151,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_local_variable.yaml,2
9152,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_local_variable.yaml,2
9153,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
9154,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class`tf.VariableAggregation`.,tf.compat.v1.get_variable.yaml,2
9155,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",Accepted values are constants defined in the class`tf.VariableSynchronization`.,tf.compat.v1.get_variable.yaml,2
9156,420,0.0010969723562966214,10,"frozenset({'defined', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
9157,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","`SparseTensor`, with indices sorted in row-major order.",tf.sets.size.yaml,2
9158,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,2
9159,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.union.yaml,2
9160,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,2
9161,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.intersection.yaml,2
9162,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})"," If `True`, indices are checked to make sure they are sorted in lexicographic order and that there are no repeats.",tf.sparse.to_dense.yaml,2
9163,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,2
9164,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})","If sparse, indices must be sorted in row-major order.",tf.sets.difference.yaml,2
9165,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})",Optional sorted list of column indices to select.,tf.compat.v1.decode_csv.yaml,2
9166,425,0.0010969723562966214,10,"frozenset({'indices', 'sorted'})",Optional sorted list of column indices to select.,tf.io.decode_csv.yaml,2
9167,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.not_equal.yaml,2
9168,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.not_equal.yaml,2
9169,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
9170,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})","If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.",tf.nest.flatten.yaml,2
9171,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})","Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.map_structure.yaml,2
9172,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.equal.yaml,2
9173,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})",A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,tf.math.equal.yaml,2
9174,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.assert_same_structure.yaml,2
9175,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})","If true, then composite tensors such as `tf.SparseTensor`and `tf.RaggedTensor` are expanded into their component tensors.",tf.nest.pack_sequence_as.yaml,2
9176,704,0.0010969723562966214,10,"frozenset({'ssparsetensor', 'tf'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
9177,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","E.g. if `shape=(2,)`, each example must contain `2 * sequence_length` values.",tf.feature_column.sequence_numeric_column.yaml,2
9178,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
9179,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
9180,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.ssim_multiscale.yaml,2
9181,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
9182,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.ssim.yaml,2
9183,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
9184,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
9185,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
9186,740,0.0010969723562966214,10,"frozenset({'e', 'values'})","The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",tf.image.psnr.yaml,2
9187,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
9188,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","By default, axis is 0 which will mask from the first dimension.",tf.compat.v1.boolean_mask.yaml,2
9189,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","By default (axis=None), use the flattened input array, and return a flat output array.",tf.repeat.yaml,2
9190,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","The default is -1, which sorts the last axis.",tf.sort.yaml,2
9191,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})", Default: outermost axis.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
9192,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
9193,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
9194,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","By default, axis is 0 which will mask from the first dimension.",tf.boolean_mask.yaml,2
9195,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","The axis to fill (default: -1, a new inner-most axis).",tf.one_hot.yaml,2
9196,793,0.0010969723562966214,10,"frozenset({'axis', 'default'})","The default is -1, which sorts the last axis.",tf.argsort.yaml,2
9197,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
9198,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
9199,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","Must be in range `[0, params.shape[axis])`.",tf.gather.yaml,2
9200,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})",Must be at least rank`axis + 1`.,tf.gather.yaml,2
9201,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})",`len(repeats)`must equal `input.shape[axis]` if axis is not None.,tf.repeat.yaml,2
9202,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","Given an input of D dimensions, `axis` must be in range`[-(D+1), D]` (inclusive).",tf.expand_dims.yaml,2
9203,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
9204,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
9205,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})","Must be in range `[0, params.shape[axis])`.",tf.compat.v1.gather.yaml,2
9206,792,0.0010969723562966214,10,"frozenset({'axis', 'must'})",Must be at least rank`axis + 1`.,tf.compat.v1.gather.yaml,2
9207,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv3d.yaml,3
9208,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.nn.conv3d.yaml,3
9209,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.erosion2d.yaml,3
9210,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,3
9211,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.dilation2d.yaml,3
9212,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
9213,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d.yaml,3
9214,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
9215,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,3
9216,385,0.0010969723562966214,10,"frozenset({'in_width', 'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,3
9217,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
9218,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9219,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","Learning phase value, either 0 or 1 (integers).",tf.keras.backend.learning_phase_scope.yaml,2
9220,764,0.0010969723562966214,10,"frozenset({'either', 'value'})",The inference is the same for either value of this parameter.,tf.keras.layers.BatchNormalization.yaml,2
9221,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
9222,764,0.0010969723562966214,10,"frozenset({'either', 'value'})",The inference is the same for either value of this parameter.,tf.compat.v1.keras.layers.BatchNormalization.yaml,2
9223,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
9224,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","Learning phase value, either 0 or 1 (integers).",tf.keras.backend.set_learning_phase.yaml,2
9225,764,0.0010969723562966214,10,"frozenset({'either', 'value'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
9226,764,0.0010969723562966214,10,"frozenset({'either', 'value'})",Either the special value `local://` or a path to a file containing a serialized `FileDescriptorSet`.,tf.io.decode_proto.yaml,2
9227,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})","All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",tf.ragged.stack.yaml,2
9228,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign_add.yaml,2
9229,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign.yaml,2
9230,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
9231,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})",Must be castable to `dtype`.,tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
9232,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
9233,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})",Must be castable to `dtype`.,tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
9234,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})",Must have the same shape and dtype as `ref`.,tf.compat.v1.assign_sub.yaml,2
9235,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
9236,773,0.0010969723562966214,10,"frozenset({'dtype', 'must'})"," Its output must have the same structure as `dtype` if one is provided, otherwise it must have the same structure as `elems`.",tf.map_fn.yaml,2
9237,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})","Per-label activations (typically a linear output) of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or`float64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
9238,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",The output dtype; defaults to `tf.int64`.,tf.compat.v1.count_nonzero.yaml,2
9239,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",A constant value (or list) of output type `dtype`.,tf.compat.v1.constant.yaml,2
9240,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",`DType` of the output.,tf.io.decode_raw.yaml,2
9241,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",The desired output `DType`.,tf.dtypes.saturate_cast.yaml,2
9242,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",The output dtype; defaults to `tf.int64`.,tf.math.count_nonzero.yaml,2
9243,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",A constant value (or list) of output type `dtype`.,tf.constant.yaml,2
9244,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})",`DType` of the output.,tf.compat.v1.decode_raw.yaml,2
9245,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
9246,774,0.0010969723562966214,10,"frozenset({'dtype', 'output'})"," Its output must have the same structure as `dtype` if one is provided, otherwise it must have the same structure as `elems`.",tf.map_fn.yaml,2
9247,760,0.0010969723562966214,10,"frozenset({'set', 'used'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_avg_pool.yaml,2
9248,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If this is not set, then the node name will be used instead.",tf.compat.v1.summary.tensor_summary.yaml,2
9249,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,2
9250,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If set to `None`, no windowing is used.",tf.signal.inverse_stft.yaml,2
9251,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If set to `None`, no windowing is used.",tf.signal.stft.yaml,2
9252,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If both `save_checkpoint_steps` and`save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9253,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If both`save_checkpoint_steps` and `save_checkpoint_secs` are set to `None`, then the default checkpoint saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9254,760,0.0010969723562966214,10,"frozenset({'set', 'used'})"," If both `save_summaries_steps` and`save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9255,760,0.0010969723562966214,10,"frozenset({'set', 'used'})","If both`save_summaries_steps` and `save_summaries_secs` are set to `None`, then the default summary saver isn't used.",tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9256,760,0.0010969723562966214,10,"frozenset({'set', 'used'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_max_pool.yaml,2
9257,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
9258,759,0.0010969723562966214,10,"frozenset({'set', 'values'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_avg_pool.yaml,2
9259,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If set, `padding_width` pad values will be added to both sides of each sequence.",tf.strings.ngrams.yaml,2
9260,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If set, values outside of range `[0, num_buckets)` will be replaced with this value.",tf.feature_column.categorical_column_with_identity.yaml,2
9261,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If not set, values >= num_buckets will cause a failure while values < 0 will be dropped.",tf.feature_column.categorical_column_with_identity.yaml,2
9262,759,0.0010969723562966214,10,"frozenset({'set', 'values'})"," Singular values smaller (in modulus) than `rcond` * largest_singular_value (again, in modulus) are set to zero.",tf.linalg.pinv.yaml,2
9263,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
9264,759,0.0010969723562966214,10,"frozenset({'set', 'values'})"," When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells.",tf.nn.fractional_max_pool.yaml,2
9265,759,0.0010969723562966214,10,"frozenset({'set', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
9266,759,0.0010969723562966214,10,"frozenset({'set', 'values'})",A `float` giving the threshold value of the activation function below which values will be damped or set to zero.,tf.keras.activations.relu.yaml,2
9267,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or`run_every_steps` must be set.,tf.estimator.experimental.stop_if_no_increase_hook.yaml,3
9268,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or `run_every_secs` must be set.,tf.estimator.experimental.stop_if_no_increase_hook.yaml,3
9269,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or`run_every_steps` must be set.,tf.estimator.experimental.stop_if_no_decrease_hook.yaml,3
9270,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or `run_every_secs` must be set.,tf.estimator.experimental.stop_if_no_decrease_hook.yaml,3
9271,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or`run_every_steps` must be set.,tf.estimator.experimental.stop_if_lower_hook.yaml,3
9272,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or `run_every_secs` must be set.,tf.estimator.experimental.stop_if_lower_hook.yaml,3
9273,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or`run_every_steps` must be set.,tf.estimator.experimental.make_early_stopping_hook.yaml,3
9274,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or `run_every_secs` must be set.,tf.estimator.experimental.make_early_stopping_hook.yaml,3
9275,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or`run_every_steps` must be set.,tf.estimator.experimental.stop_if_higher_hook.yaml,3
9276,758,0.0010969723562966214,10,"frozenset({'either', 'set', 'must'})",Either this or `run_every_secs` must be set.,tf.estimator.experimental.stop_if_higher_hook.yaml,3
9277,779,0.0010969723562966214,10,"frozenset({'input', 'python'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
9278,779,0.0010969723562966214,10,"frozenset({'input', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
9279,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",A Python function that builds a computation to apply to each shard of the input.,tf.compat.v1.tpu.shard.yaml,2
9280,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",A Python function that builds a computation to apply to the input.,tf.xla.experimental.compile.yaml,2
9281,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",A Python function that builds a computation to apply to each shard of the input.,tf.compat.v1.tpu.batch_parallel.yaml,2
9282,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.,tf.compat.v1.py_func.yaml,2
9283,779,0.0010969723562966214,10,"frozenset({'input', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
9284,779,0.0010969723562966214,10,"frozenset({'input', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
9285,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",A Python function that builds a computation to apply to the input.,tf.compat.v1.tpu.rewrite.yaml,2
9286,779,0.0010969723562966214,10,"frozenset({'input', 'python'})",In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.,tf.numpy_function.yaml,2
9287,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_bool.yaml,3
9288,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum.yaml,3
9289,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi.yaml,3
9290,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_solve.yaml,3
9291,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,3
9292,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_reconstruct.yaml,3
9293,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE.yaml,3
9294,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_flag.yaml,3
9295,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,3
9296,780,0.0010969723562966214,10,"frozenset({'python', 'SOME_DTYPE', 'name'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_matrix_inverse.yaml,3
9297,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
9298,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
9299,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})",Controls the shape of the returned op's output.,tf.io.decode_image.yaml,2
9300,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})",None or a vector representing the new shape for the returned`SparseTensor`.,tf.sparse.reset_shape.yaml,2
9301,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,2
9302,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
9303,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
9304,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
9305,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
9306,754,0.0010969723562966214,10,"frozenset({'shape', 'returned'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
9307,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample.,tf.random.fixed_unigram_candidate_sampler.yaml,2
9308,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of negative classes to randomly sample per batch.,tf.nn.nce_loss.yaml,2
9309,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})",Number of sample channels wanted.,tf.audio.decode_wav.yaml,2
9310,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of negative classes to randomly sample per batch.,tf.compat.v1.nn.nce_loss.yaml,2
9311,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample per batch.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
9312,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})","Int, number of possible words to sample.",tf.keras.preprocessing.sequence.make_sampling_table.yaml,2
9313,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample.,tf.random.uniform_candidate_sampler.yaml,2
9314,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample per batch.,tf.nn.sampled_softmax_loss.yaml,2
9315,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample.,tf.random.log_uniform_candidate_sampler.yaml,2
9316,407,0.0010969723562966214,10,"frozenset({'sample', 'number'})", The number of classes to randomly sample.,tf.random.learned_unigram_candidate_sampler.yaml,2
9317,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
9318,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})", Axes along which to compute mean and variance.,tf.compat.v1.nn.moments.yaml,2
9319,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
9320,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
9321,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",Axes to compute the mean.,tf.keras.backend.mean.yaml,2
9322,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})", Axes along which to compute mean and variance.,tf.nn.moments.yaml,2
9323,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
9324,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
9325,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",Axes along which to compute mean and variance.,tf.compat.v1.nn.sufficient_statistics.yaml,2
9326,389,0.0010969723562966214,10,"frozenset({'compute', 'axes'})",Axes along which to compute mean and variance.,tf.nn.sufficient_statistics.yaml,2
9327,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,3
9328,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,3
9329,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
9330,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,3
9331,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,3
9332,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,3
9333,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,3
9334,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
9335,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
9336,785,0.0010969723562966214,10,"frozenset({'type', 'tensor', 'n'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
9337,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
9338,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
9339,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
9340,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
9341,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","Must be in range `[0, params.shape[axis])`.",tf.gather.yaml,2
9342,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
9343,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
9344,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
9345,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
9346,749,0.0010969723562966214,10,"frozenset({'shape', 'range'})","Must be in range `[0, params.shape[axis])`.",tf.compat.v1.gather.yaml,2
9347,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
9348,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
9349,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
9350,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
9351,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
9352,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
9353,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
9354,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
9355,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
9356,748,0.0010969723562966214,10,"frozenset({'tensor', 'range'})","Must be in the range`[-rank(tensor), rank(tensor))`.",tf.reverse.yaml,2
9357,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample.,tf.random.fixed_unigram_candidate_sampler.yaml,2
9358,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of negative classes to randomly sample per batch.,tf.nn.nce_loss.yaml,2
9359,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})",This single sample of negative classes is evaluated for each element in the batch.,tf.nn.nce_loss.yaml,2
9360,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of negative classes to randomly sample per batch.,tf.compat.v1.nn.nce_loss.yaml,2
9361,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})",This single sample of negative classes is evaluated for each element in the batch.,tf.compat.v1.nn.nce_loss.yaml,2
9362,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample per batch.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
9363,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample.,tf.random.uniform_candidate_sampler.yaml,2
9364,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample per batch.,tf.nn.sampled_softmax_loss.yaml,2
9365,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample.,tf.random.log_uniform_candidate_sampler.yaml,2
9366,408,0.0010969723562966214,10,"frozenset({'sample', 'classes'})", The number of classes to randomly sample.,tf.random.learned_unigram_candidate_sampler.yaml,2
9367,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,3
9368,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,3
9369,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
9370,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d_transpose.yaml,3
9371,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.separable_conv2d.yaml,3
9372,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.separable_conv2d.yaml,3
9373,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
9374,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The stride with which we sample input values across the `height` and `width` dimensions.,tf.nn.atrous_conv2d.yaml,3
9375,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.compat.v1.nn.depthwise_conv2d.yaml,3
9376,701,0.0010969723562966214,10,"frozenset({'input', 'width', 'height'})",The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution.,tf.nn.depthwise_conv2d.yaml,3
9377,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","(Optional.) If `True`, ignores errors with CSV file parsing, such as malformed data or empty lines, and moves on to the next valid CSV record.",tf.data.experimental.make_csv_dataset.yaml,2
9378,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
9379,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
9380,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})",Expected data type of `inputs` (optional).,tf.math.accumulate_n.yaml,2
9381,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","(Optional.) If `True`, ignores errors with CSV file parsing, such as malformed data or empty lines, and moves on to the next valid CSV record.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9382,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9383,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})",(Optional.) The data type for counter elements.,tf.compat.v1.data.experimental.Counter.yaml,2
9384,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})",(optional) The data type for the initial state and expected output.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
9385,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
9386,822,0.0010969723562966214,10,"frozenset({'optional', 'data'})",(Optional.) The data type for counter elements.,tf.data.experimental.Counter.yaml,2
9387,823,0.0010969723562966214,10,"frozenset({'data', 'value'})",A single value compatible with `dtype` that is used for padding the sparse data into a dense `Tensor`.,tf.feature_column.sequence_numeric_column.yaml,2
9388,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
9389,823,0.0010969723562966214,10,"frozenset({'data', 'value'})",A `Tensor` containing the total count of the data (one value).,tf.nn.normalize_moments.yaml,2
9390,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","A `Tensor` containing the value by which the data is shifted for numerical stability, or `None` if no shift was performed.",tf.nn.normalize_moments.yaml,2
9391,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
9392,823,0.0010969723562966214,10,"frozenset({'data', 'value'})",A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing.,tf.feature_column.numeric_column.yaml,2
9393,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","An example usage: let's say `label_key` is 'clicked' and tf.Example contains clicked data only for positive examples in following format `key:clicked, value:1`.",tf.estimator.classifier_parse_example_spec.yaml,2
9394,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","A `Tensor` containing the value by which to shift the data for numerical stability, or `None` if no shift is to be performed.",tf.compat.v1.nn.sufficient_statistics.yaml,2
9395,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","If there is data but all points have the same value, then there is one bucket whose left and right endpoints are the same.",tf.summary.histogram.yaml,2
9396,823,0.0010969723562966214,10,"frozenset({'data', 'value'})","A `Tensor` containing the value by which to shift the data for numerical stability, or `None` if no shift is to be performed.",tf.nn.sufficient_statistics.yaml,2
9397,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,3
9398,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,3
9399,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,3
9400,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,3
9401,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,3
9402,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
9403,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,3
9404,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,3
9405,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,3
9406,663,0.0010969723562966214,10,"frozenset({'tensor', 'objects', 'shape'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,3
9407,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,5
9408,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,5
9409,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
9410,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,5
9411,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,5
9412,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,5
9413,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,5
9414,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,5
9415,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,5
9416,298,0.0010969723562966214,10,"frozenset({'in_channels', 'shape', 'filter_width', 'd', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
9417,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_update.yaml,3
9418,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_sub.yaml,3
9419,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to multiply to `ref`.,tf.compat.v1.scatter_mul.yaml,3
9420,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of values that `ref` is divided by.,tf.compat.v1.scatter_div.yaml,3
9421,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_add.yaml,3
9422,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_min.yaml,3
9423,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to subtract from `ref`.,tf.compat.v1.scatter_sub.yaml,3
9424,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_max.yaml,3
9425,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_add.yaml,3
9426,448,0.0010969723562966214,10,"frozenset({'tensor', 'values', 'ref'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_update.yaml,3
9427,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.strings.substr.yaml,2
9428,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.strings.substr.yaml,2
9429,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.length.yaml,2
9430,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
9431,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement.",tf.strings.unicode_transcode.yaml,2
9432,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",tf.strings.unicode_transcode.yaml,2
9433,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.substr.yaml,2
9434,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.strings.substr.yaml,2
9435,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.substr.yaml,2
9436,274,0.0010969723562966214,10,"frozenset({'byte', 'utf'})"," One of: `""BYTE""` (for defining position and length by bytes) or `""UTF8_CHAR""` (for the UTF-8 encoded Unicode code points).",tf.compat.v1.substr.yaml,2
9437,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})",Whether to include batch dimension in flattened index of `argmax`.,tf.nn.max_pool_with_argmax.yaml,2
9438,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})",Whether to include batch dimension in flattened index of `argmax`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9439,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
9440,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
9441,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})", Defaults to the first non-batch dimension.,tf.gather.yaml,2
9442,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
9443,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
9444,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
9445,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
9446,853,0.0010969723562966214,10,"frozenset({'dimension', 'batch'})", Defaults to the first non-batch dimension.,tf.compat.v1.gather.yaml,2
9447,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,4
9448,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,4
9449,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,4
9450,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
9451,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,4
9452,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,4
9453,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,4
9454,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,4
9455,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,4
9456,259,0.0010969723562966214,10,"frozenset({'out_channels', 'tensor', 'in_channels', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
9457,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_avg_pool.yaml,4
9458,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_avg_pool.yaml,4
9459,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_max_pool.yaml,4
9460,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_max_pool.yaml,4
9461,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the highest quantized filter value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,4
9462,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the highest quantized input value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,4
9463,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the lowest quantized filter value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,4
9464,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the lowest quantized input value represents.,tf.compat.v1.nn.quantized_conv2d.yaml,4
9465,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the highest quantized value represents.,tf.compat.v1.nn.quantized_relu_x.yaml,4
9466,258,0.0010969723562966214,10,"frozenset({'quantized', 'value', 'SOME_DTYPE', 'represents'})",The float value that the lowest quantized value represents.,tf.compat.v1.nn.quantized_relu_x.yaml,4
9467,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
9468,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
9469,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
9470,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
9471,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})",Whether `output` is expected to be a logits tensor.,tf.keras.backend.binary_crossentropy.yaml,2
9472,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
9473,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})","bool, whether to also output log messages to `sys.stdout`.",tf.autograph.set_verbosity.yaml,2
9474,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
9475,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
9476,769,0.0010969723562966214,10,"frozenset({'whether', 'output'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
9477,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,3
9478,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,3
9479,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,3
9480,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,3
9481,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,3
9482,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,3
9483,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,3
9484,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,3
9485,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,3
9486,858,0.0010969723562966214,10,"frozenset({'d', 'dimensions', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,3
9487,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.conv2d.yaml,7
9488,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.conv2d.yaml,7
9489,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.conv2d.yaml,7
9490,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.conv2d.yaml,7
9491,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_filter.yaml,7
9492,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_filter.yaml,7
9493,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.nn.depthwise_conv2d_backprop_input.yaml,7
9494,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.nn.depthwise_conv2d_backprop_input.yaml,7
9495,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,7
9496,653,0.0010969723562966214,10,"frozenset({'height', 'channels', 'order', 'batch', 'data', 'format', 'width'})","Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",tf.compat.v1.nn.depthwise_conv2d_native.yaml,7
9497,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
9498,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
9499,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
9500,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
9501,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
9502,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9503,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
9504,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})",Int specifying the channels axis.,tf.keras.backend.sparse_categorical_crossentropy.yaml,2
9505,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})",Int specifying the channels axis.,tf.keras.backend.categorical_crossentropy.yaml,2
9506,652,0.0010969723562966214,10,"frozenset({'SOME_DTYPE', 'channels'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
9507,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
9508,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})",Used in combination with `tf.random.set_seed` to create a reproducible sequence of tensors across multiple calls.,tf.random.uniform.yaml,2
9509,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
9510,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
9511,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
9512,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})",The graph in which to create the global step tensor.,tf.compat.v1.train.get_or_create_global_step.yaml,2
9513,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","If set, the layer will not create a placeholder tensor.",tf.keras.Input.yaml,2
9514,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})",The graph in which to create the global step tensor.,tf.compat.v1.train.create_global_step.yaml,2
9515,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
9516,450,0.0010969723562966214,10,"frozenset({'tensor', 'create'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
9517,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.fixed_unigram_candidate_sampler.yaml,2
9518,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})", The number of negative classes to randomly sample per batch.,tf.nn.nce_loss.yaml,2
9519,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",This single sample of negative classes is evaluated for each element in the batch.,tf.nn.nce_loss.yaml,2
9520,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})", The number of negative classes to randomly sample per batch.,tf.compat.v1.nn.nce_loss.yaml,2
9521,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",This single sample of negative classes is evaluated for each element in the batch.,tf.compat.v1.nn.nce_loss.yaml,2
9522,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})", The number of classes to randomly sample per batch.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
9523,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.uniform_candidate_sampler.yaml,2
9524,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})", The number of classes to randomly sample per batch.,tf.nn.sampled_softmax_loss.yaml,2
9525,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.log_uniform_candidate_sampler.yaml,2
9526,643,0.0010969723562966214,10,"frozenset({'classes', 'batch'})",Determines whether all sampled classes in a batch are unique.,tf.random.learned_unigram_candidate_sampler.yaml,2
9527,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})",A single value compatible with `dtype` that is used for padding the sparse data into a dense `Tensor`.,tf.feature_column.sequence_numeric_column.yaml,2
9528,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","If None, no padding will be added; if a single string, then that string will be used for both left and right padding.",tf.strings.ngrams.yaml,2
9529,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding is used and data_format is `""NHWC""`, this should be in the form `[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d.yaml,2
9530,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding used and data_format is `""NCHW""`, this should be in the form `[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d.yaml,2
9531,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding is used and data_format is `""NHWC""`, this should be in the form `[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.nn.conv2d.yaml,2
9532,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding used and data_format is `""NCHW""`, this should be in the form `[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.nn.conv2d.yaml,2
9533,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding is used and data_format is`""NHWC""`, this should be in the form`[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9534,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding used and data_format is`""NCHW""`, this should be in the form`[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9535,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding is used and data_format is`""NHWC""`, this should be in the form`[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
9536,642,0.0010969723562966214,10,"frozenset({'padding', 'used'})","When explicit padding used and data_format is`""NCHW""`, this should be in the form`[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
9537,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
9538,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
9539,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.linalg.normalize.yaml,2
9540,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
9541,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
9542,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
9543,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.norm.yaml,2
9544,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
9545,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
9546,457,0.0010969723562966214,10,"frozenset({'norm', 'tensor'})",Default is 'euclidean' which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors.,tf.compat.v1.norm.yaml,2
9547,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","Shape is `[..., M, K]`.",tf.linalg.solve.yaml,2
9548,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","A `Tensor`, same type as `chol`, shape is `[..., M, K]`.",tf.linalg.cholesky_solve.yaml,2
9549,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","A `Tensor` of shape [..., M] or [..., M, K] and with the same dtype as`diagonals`.",tf.linalg.tridiagonal_solve.yaml,2
9550,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9551,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","Shape is `[..., M, K]`.",tf.linalg.triangular_solve.yaml,2
9552,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","`Tensor` of shape `[..., M, K]`.",tf.linalg.lstsq.yaml,2
9553,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9554,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
9555,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","A `Tensor` representing pixel data with shape `[k, h, w, c]`, where `k` is the number of images, `h` and `w` are the height and width of the images, and `c` is the number of channels, which should be 1, 2, 3, or 4 (grayscale, grayscale with alpha, RGB, RGBA).",tf.summary.image.yaml,2
9556,639,0.0010969723562966214,10,"frozenset({'k', 'shape'})","A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels.",tf.summary.audio.yaml,2
9557,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into ref.,tf.compat.v1.scatter_nd_update.yaml,3
9558,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into ref.,tf.compat.v1.scatter_nd_sub.yaml,3
9559,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_mul.yaml,3
9560,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_div.yaml,3
9561,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_add.yaml,3
9562,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_min.yaml,3
9563,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_sub.yaml,3
9564,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_max.yaml,3
9565,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into ref.,tf.compat.v1.scatter_nd_add.yaml,3
9566,447,0.0010969723562966214,10,"frozenset({'indices', 'tensor', 'ref'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_update.yaml,3
9567,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,3
9568,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,3
9569,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,3
9570,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,3
9571,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,3
9572,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,3
9573,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,3
9574,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,3
9575,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,3
9576,666,0.0010969723562966214,10,"frozenset({'containing', 'tensor', 'values'})",A `Tensor` or `RaggedTensor` containing the values to stack.,tf.ragged.stack_dynamic_partitions.yaml,3
9577,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9578,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
9579,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9580,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
9581,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
9582,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
9583,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
9584,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
9585,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
9586,430,0.0010969723562966214,10,"frozenset({'d', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9587,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_csv_dataset.yaml,2
9588,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.data.experimental.make_csv_dataset.yaml,2
9589,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9590,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9591,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
9592,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
9593,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`.",tf.data.experimental.make_batched_features_dataset.yaml,2
9594,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","Note that if the seed is set, then order of elements after shuffling is deterministic).",tf.data.experimental.make_batched_features_dataset.yaml,2
9595,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})",If true the resulting `k` elements will be sorted by the values in descending order.,tf.math.top_k.yaml,2
9596,671,0.0010969723562966214,10,"frozenset({'elements', 'order'})","If True, equal elements in the original tensor will not be re-ordered in the returned order.",tf.argsort.yaml,2
9597,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})",N >= 1 and num_labels is the number of target classes for the associated prediction.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
9598,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9599,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})",N >= 1 and num_labels is the number of target classes for the associated prediction.,tf.compat.v1.metrics.precision_at_k.yaml,2
9600,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.precision_at_k.yaml,2
9601,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})",N >= 1 and num_labels is the number of target classes for the associated prediction.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
9602,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9603,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})",N >= 1 and num_labels is the number of target classes for the associated prediction.,tf.compat.v1.metrics.recall_at_k.yaml,2
9604,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.recall_at_k.yaml,2
9605,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})",N >= 1 and num_labels is the number of target classes for the associated prediction.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
9606,322,0.0010969723562966214,10,"frozenset({'num_labels', 'n'})","Commonly, N=1 and `labels` has shape [batch_size, num_labels].",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9607,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9608,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN], where the latter implies num_labels=1.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
9609,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
9610,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN], where the latter implies num_labels=1.",tf.compat.v1.metrics.precision_at_k.yaml,2
9611,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9612,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN], where the latter implies num_labels=1.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
9613,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
9614,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN], where the latter implies num_labels=1.",tf.compat.v1.metrics.recall_at_k.yaml,2
9615,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN, num_labels] or [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9616,321,0.0010969723562966214,10,"frozenset({'num_labels', 'dn'})","DN], where the latter implies num_labels=1.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
9617,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `predictions`.,tf.compat.v1.metrics.precision_at_top_k.yaml,3
9618,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `labels`.,tf.compat.v1.metrics.precision_at_top_k.yaml,3
9619,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `predictions`.,tf.compat.v1.metrics.precision_at_k.yaml,3
9620,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `labels`.,tf.compat.v1.metrics.precision_at_k.yaml,3
9621,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `predictions`.,tf.compat.v1.metrics.recall_at_top_k.yaml,3
9622,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `labels`.,tf.compat.v1.metrics.recall_at_top_k.yaml,3
9623,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `predictions`.,tf.compat.v1.metrics.recall_at_k.yaml,3
9624,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `labels`.,tf.compat.v1.metrics.recall_at_k.yaml,3
9625,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `predictions`.,tf.compat.v1.metrics.average_precision_at_k.yaml,3
9626,431,0.0010969723562966214,10,"frozenset({'match', 'must', 'dn'})",DN] must match `labels`.,tf.compat.v1.metrics.average_precision_at_k.yaml,3
9627,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d.yaml,4
9628,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d_transpose.yaml,4
9629,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.compat.v1.nn.conv1d.yaml,4
9630,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d_transpose.yaml,4
9631,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,4
9632,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d.yaml,4
9633,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d.yaml,4
9634,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.nn.conv3d_transpose.yaml,4
9635,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.compat.v1.nn.conv3d_transpose.yaml,4
9636,829,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'defaults', 'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d_transpose.yaml,4
9637,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.apply_affine_transform.yaml,2
9638,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",A constant value (or list),tf.keras.backend.constant.yaml,2
9639,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})","In ""CONSTANT"" mode, the scalar pad value to use.",tf.compat.v1.pad.yaml,2
9640,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_rotation.yaml,2
9641,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",A constant value (or list) of output type `dtype`.,tf.compat.v1.constant.yaml,2
9642,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_zoom.yaml,2
9643,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})","In ""CONSTANT"" mode, the scalar pad value to use.",tf.pad.yaml,2
9644,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shear.yaml,2
9645,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",A constant value (or list) of output type `dtype`.,tf.constant.yaml,2
9646,433,0.0010969723562966214,10,"frozenset({'constant', 'value'})",Value used for points outside the boundaries     of the input if `mode='constant'`.,tf.keras.preprocessing.image.random_shift.yaml,2
9647,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,3
9648,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,3
9649,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})","If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to.",tf.compat.v1.assign.yaml,3
9650,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,3
9651,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,3
9652,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,3
9653,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,3
9654,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,3
9655,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,3
9656,313,0.0010969723562966214,10,"frozenset({'tensor', 'matches', 'shape'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
9657,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
9658,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.shared_embeddings.yaml,2
9659,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
9660,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_local_variable.yaml,2
9661,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
9662,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.feature_column.embedding_column.yaml,2
9663,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",An optional projection function to be applied to the variable after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights).,tf.compat.v1.get_variable.yaml,2
9664,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
9665,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})","In case of variable length input, it is used for masking in case there's no mask specified.",tf.keras.backend.rnn.yaml,2
9666,833,0.0010969723562966214,10,"frozenset({'variable', 'used'})",A variable initializer function to be used in embedding variable initialization.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
9667,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","str constant equal to ""VALID"" or ""SAME""",tf.nn.with_space_to_batch.yaml,2
9668,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,2
9669,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","In ""CONSTANT"" mode, the scalar pad value to use.",tf.compat.v1.pad.yaml,2
9670,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.scalar.yaml,2
9671,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.image.yaml,2
9672,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.text.yaml,2
9673,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","In ""CONSTANT"" mode, the scalar pad value to use.",tf.pad.yaml,2
9674,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.audio.yaml,2
9675,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})",Optional constant `str` for the desired encoding.,tf.summary.audio.yaml,2
9676,434,0.0010969723562966214,10,"frozenset({'constant', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.histogram.yaml,2
9677,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
9678,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
9679,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.data.experimental.make_csv_dataset.yaml,2
9680,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
9681,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9682,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9683,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","A bool that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9684,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9685,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})",Each string is a record/row in the csv and all records should have the same format.,tf.compat.v1.decode_csv.yaml,2
9686,307,0.0010969723562966214,10,"frozenset({'csv', 'SOME_DTYPE'})",Each string is a record/row in the csv and all records should have the same format.,tf.io.decode_csv.yaml,2
9687,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,2
9688,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
9689,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
9690,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing CSV records.,tf.data.experimental.make_csv_dataset.yaml,2
9691,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
9692,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9693,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9694,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9695,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})",List of files or patterns of file paths containing CSV records.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9696,306,0.0010969723562966214,10,"frozenset({'csv', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9697,839,0.0010969723562966214,10,"frozenset({'output', 'must'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
9698,839,0.0010969723562966214,10,"frozenset({'output', 'must'})","If not `None`, there must be one dimension per output.",tf.compat.v1.tpu.shard.yaml,2
9699,839,0.0010969723562966214,10,"frozenset({'output', 'must'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
9700,839,0.0010969723562966214,10,"frozenset({'output', 'must'})"," Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",tf.scan.yaml,2
9701,839,0.0010969723562966214,10,"frozenset({'output', 'must'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
9702,839,0.0010969723562966214,10,"frozenset({'output', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
9703,839,0.0010969723562966214,10,"frozenset({'output', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
9704,839,0.0010969723562966214,10,"frozenset({'output', 'must'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
9705,839,0.0010969723562966214,10,"frozenset({'output', 'must'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
9706,839,0.0010969723562966214,10,"frozenset({'output', 'must'})"," Its output must have the same structure as `dtype` if one is provided, otherwise it must have the same structure as `elems`.",tf.map_fn.yaml,2
9707,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
9708,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
9709,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
9710,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
9711,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,2
9712,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",A constant value (or list) of output type `dtype`.,tf.compat.v1.constant.yaml,2
9713,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",List of output tensors.,tf.keras.backend.function.yaml,2
9714,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
9715,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
9716,840,0.0010969723562966214,10,"frozenset({'output', 'SOME_STRUCTURE'})",A constant value (or list) of output type `dtype`.,tf.constant.yaml,2
9717,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})",A list of `Tensor` representing the coefficients of the polynomial.,tf.math.polyval.yaml,2
9718,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
9719,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
9720,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
9721,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
9722,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,2
9723,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
9724,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
9725,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})",List of strings representing `Operation` types that need to be placed on `ps` devices.,tf.compat.v1.train.replica_device_setter.yaml,2
9726,680,0.0010969723562966214,10,"frozenset({'SOME_STRUCTURE', 'representing'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
9727,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,4
9728,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,4
9729,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv3D.yaml,4
9730,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",If a single value is given it is replicated in the spatial dimensions.,tf.nn.conv_transpose.yaml,4
9731,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",If a single value is given it is replicated in the spatial dimensions.,tf.nn.conv_transpose.yaml,4
9732,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,4
9733,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.SeparableConv2D.yaml,4
9734,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,4
9735,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,4
9736,436,0.0010969723562966214,10,"frozenset({'single', 'value', 'spatial', 'dimensions'})",Can be a single integer to specify the same value for all spatial dimensions.,tf.keras.layers.Conv2D.yaml,4
9737,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
9738,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
9739,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})",The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.,tf.nn.fractional_avg_pool.yaml,2
9740,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})",Max number of batch elements to generate images for.,tf.compat.v1.summary.image2.yaml,2
9741,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
9742,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9743,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9744,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})",The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.,tf.nn.fractional_max_pool.yaml,2
9745,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})",Max number of batch elements to generate audio for.,tf.compat.v1.summary.audio2.yaml,2
9746,672,0.0010969723562966214,10,"frozenset({'elements', 'batch'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
9747,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.Conv3D.yaml,5
9748,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv3D.yaml,5
9749,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any `strides` value != 1.",tf.keras.layers.Conv1D.yaml,5
9750,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv1D.yaml,5
9751,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.SeparableConv1D.yaml,5
9752,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})",Specifying any `stride` value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.SeparableConv1D.yaml,5
9753,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any `strides` value != 1.",tf.keras.layers.SeparableConv2D.yaml,5
9754,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.SeparableConv2D.yaml,5
9755,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})","Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",tf.keras.layers.Conv2D.yaml,5
9756,0,0.0010969723562966214,10,"frozenset({'value', 'specifying', 'dilation_rate', 'incompatible', '!'})",Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.,tf.keras.layers.Conv2D.yaml,5
