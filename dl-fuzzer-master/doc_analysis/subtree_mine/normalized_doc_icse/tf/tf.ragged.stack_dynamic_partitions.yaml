aliases:
- tf.compat.v1.ragged.stack_dynamic_partitions
constraints:
  data:
    descp: A `Tensor` or `RaggedTensor` containing the values to stack.
    normalized_descp:
    - A D_STRUCTURE or QSTR containing the values to stack
  name:
    default: None
    descp: A name prefix for the returned tensor (optional).
    normalized_default: DEFAULT None
    normalized_descp:
    - A name prefix for the returned D_STRUCTURE BSTR
  num_partitions:
    descp: An `int32` or `int64` scalar specifying the number of partitions to output.  This
      determines the number of rows in `output`.
    normalized_descp:
    - An D_TYPE scalar specifying the number of PARAM to output
    - This determines the number of rows in QSTR
  partitions:
    descp: An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition
      that each slice of `data` should be added to.`partitions.shape` must be a prefix
      of `data.shape`.  Values must be greater than or equal to zero, and less than
      `num_partitions`.`partitions` is not required to be sorted.
    normalized_descp:
    - An D_TYPE D_STRUCTURE or QSTR specifying the partition that each slice of PARAM
      should be added to partitions shape must be a prefix of PARAM shape
    - Values must be greater than or equal to zero and less than PARAM QSTR is not
      required to be sorted
inputs:
  optional:
  - name
  required:
  - data
  - partitions
  - num_partitions
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/ragged/stack_dynamic_partitions
outputs: A `RaggedTensor` containing the stacked partitions.  The returned tensor
  has the same dtype as `data`, and its shape is`[num_partitions, (D)] + data.shape[partitions.rank:]`,
  where `(D)` is a ragged dimension whose length is the number of data slices stacked
  for each `partition`.
package: tensorflow
target: stack_dynamic_partitions
title: tf.ragged.stack_dynamic_partitions
version: 2.1.0
