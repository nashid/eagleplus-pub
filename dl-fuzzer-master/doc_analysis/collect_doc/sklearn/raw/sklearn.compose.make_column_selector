sklearn.compose.make_column_selector = class make_column_selector(builtins.object)
 |  Create a callable to select columns to be used with
 |  :class:`ColumnTransformer`.
 |  
 |  :func:`make_column_selector` can select columns based on datatype or the
 |  columns name with a regex. When using multiple selection criteria, **all**
 |  criteria must match for a column to be selected.
 |  
 |  Parameters
 |  ----------
 |  pattern : str, default=None
 |      Name of columns containing this regex pattern will be included. If
 |      None, column selection will not be selected based on pattern.
 |  
 |  dtype_include : column dtype or list of column dtypes, default=None
 |      A selection of dtypes to include. For more details, see
 |      :meth:`pandas.DataFrame.select_dtypes`.
 |  
 |  dtype_exclude : column dtype or list of column dtypes, default=None
 |      A selection of dtypes to exclude. For more details, see
 |      :meth:`pandas.DataFrame.select_dtypes`.
 |  
 |  Returns
 |  -------
 |  selector : callable
 |      Callable for column selection to be used by a
 |      :class:`ColumnTransformer`.
 |  
 |  See also
 |  --------
 |  sklearn.compose.ColumnTransformer : Class that allows combining the
 |      outputs of multiple transformer objects used on column subsets
 |      of the data into a single feature space.
 |  
 |  Examples
 |  --------
 |  >>> from sklearn.preprocessing import StandardScaler, OneHotEncoder
 |  >>> from sklearn.compose import make_column_transformer
 |  >>> from sklearn.compose import make_column_selector
 |  >>> import pandas as pd  # doctest: +SKIP
 |  >>> X = pd.DataFrame({'city': ['London', 'London', 'Paris', 'Sallisaw'],
 |  ...                   'rating': [5, 3, 4, 5]})  # doctest: +SKIP
 |  >>> ct = make_column_transformer(
 |  ...       (StandardScaler(),
 |  ...        make_column_selector(dtype_include=np.number)),  # rating
 |  ...       (OneHotEncoder(),
 |  ...        make_column_selector(dtype_include=object)))  # city
 |  >>> ct.fit_transform(X)  # doctest: +SKIP
 |  array([[ 0.90453403,  1.        ,  0.        ,  0.        ],
 |         [-1.50755672,  1.        ,  0.        ,  0.        ],
 |         [-0.30151134,  0.        ,  1.        ,  0.        ],
 |         [ 0.90453403,  0.        ,  0.        ,  1.        ]])
 |  
 |  Methods defined here:
 |  
 |  __call__(self, df)
 |      Call self as a function.
 |  
 |  __init__(self, pattern=None, dtype_include=None, dtype_exclude=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)