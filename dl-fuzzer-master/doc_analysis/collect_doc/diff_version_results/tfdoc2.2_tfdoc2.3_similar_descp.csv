API,Param,ratio,tfdoc2.2,tfdoc2.3
tf.math.equal.yaml,x,0.9357798165137615,A tf.Tensor or tf.SparseTensor or tf.IndexedSlices.,A tf.Tensor or tf.sparse.SparseTensor or tf.IndexedSlices.
tf.math.equal.yaml,y,0.9357798165137615,A tf.Tensor or tf.SparseTensor or tf.IndexedSlices.,A tf.Tensor or tf.sparse.SparseTensor or tf.IndexedSlices.
tf.raw_ops.round.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.resizearea.yaml,images,0.9696969696969697,"A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64. 4-D with shape [batch, height, width, channels].","A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64, bfloat16. 4-D with shape [batch, height, width, channels]."
tf.nest.flatten.yaml,expand_composites,0.9711934156378601,"If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.","If true, then composite tensors such as tf.sparse.SparseTensor and tf.RaggedTensor are expanded into their component tensors."
tf.raw_ops.resizebilinear.yaml,images,0.9714285714285714,"A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, bfloat16, half, float32, float64. 4-D with shape [batch, height, width, channels].","A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, bfloat16, half, float32, float64, bfloat16. 4-D with shape [batch, height, width, channels]."
tf.raw_ops.tan.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.image.non_max_suppression_padded.yaml,max_output_size,0.9902912621359223,A scalar integer Tensor representing the maximum number of boxes to be selected by non-max suppression.,a scalar integer Tensor representing the maximum number of boxes to be selected by non max suppression.
tf.raw_ops.resizebicubic.yaml,images,0.9696969696969697,"A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64. 4-D with shape [batch, height, width, channels].","A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64, bfloat16. 4-D with shape [batch, height, width, channels]."
tf.math.tan.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.custom_gradient.yaml,f,0.9427410417436276,"function f(*x) that returns a tuple (y, grad_fn) where: x is a sequence of Tensor inputs to the function. y is a Tensor or sequence of Tensor outputs of applying TensorFlow operations in f to x. grad_fn is a function with the signature g(*grad_ys) which returns a list of Tensors - the derivatives of Tensors in y with respect to the Tensors in x. grad_ys is a Tensor or sequence of Tensors the same size as y holding the initial value gradients for each Tensor in y. In a pure mathematical sense, a vector-argument vector-valued function f's derivatives should be its Jacobian matrix J. Here we are expressing the Jacobian J as a function grad_fn which defines how J will transform a vector grad_ys when left-multiplied with it (grad_ys * J). This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm). If f uses Variables (that are not part of the inputs), i.e. through get_variable, then grad_fn should have signature g(*grad_ys, variables=None), where variables is a list of the Variables, and return a 2-tuple (grad_xs, grad_vars), where grad_xs is the same as above, and grad_vars is a list<Tensor> with the derivatives of Tensors in y with respect to the variables (that is, grad_vars has one Tensor per variable in variables).","function f(*x) that returns a tuple (y, grad_fn) where: x is a sequence of (nested structures of) Tensor inputs to the function. y is a (nested structure of) Tensor outputs of applying TensorFlow operations in f to x. grad_fn is a function with the signature g(*grad_ys) which returns a list of Tensors the same size as (flattened) x - the derivatives of Tensors in y with respect to the Tensors in x. grad_ys is a sequence of Tensors the same size as (flattened) y holding the initial value gradients for each Tensor in y. In a pure mathematical sense, a vector-argument vector-valued function f's derivatives should be its Jacobian matrix J. Here we are expressing the Jacobian J as a function grad_fn which defines how J will transform a vector grad_ys when left-multiplied with it (grad_ys * J, the vector-Jacobian product, or VJP). This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm). If f uses Variables (that are not part of the inputs), i.e. through get_variable, then grad_fn should have signature g(*grad_ys, variables=None), where variables is a list of the Variables, and return a 2-tuple (grad_xs, grad_vars), where grad_xs is the same as above, and grad_vars is a list<Tensor> with the derivatives of Tensors in y with respect to the variables (that is, grad_vars has one Tensor per variable in variables)."
tf.raw_ops.argmin.yaml,input,0.9838709677419355,"A Tensor. Must be one of the following types: float32, float64, int32, uint8, int16, int8, complex64, int64, qint8, quint8, qint32, bfloat16, uint16, complex128, half, uint32, uint64.","A Tensor. Must be one of the following types: float32, float64, int32, uint8, int16, int8, complex64, int64, qint8, quint8, qint32, bfloat16, uint16, complex128, half, uint32, uint64, bool."
tf.raw_ops.maximum.yaml,x,0.93,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int16, int32, int64."
tf.raw_ops.depthwiseconv2dnative.yaml,padding,0.92,"A string from: ""SAME"", ""VALID"". The type of padding algorithm to use.","A string from: ""SAME"", ""VALID"", ""EXPLICIT"". The type of padding algorithm to use."
tf.nn.conv1d_transpose.yaml,filters,0.9477124183006536,"A 3-D Tensor with the same type as value and shape [filter_width, output_channels, in_channels]. filter's in_channels dimension must match that of value.","A 3-D Tensor with the same type as input and shape [filter_width, output_channels, in_channels]. filter's in_channels dimension must match that of input."
tf.raw_ops.reciprocal.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.boostedtreescalculatebestfeaturesplitv2.yaml,min_node_weight,0.9916666666666667,A Tensor of type float32. mininum avg of hessians in a node before required for the node to be considered for splitting.,A Tensor of type float32. minimum avg of hessians in a node before required for the node to be considered for splitting.
tf.raw_ops.sparsesegmentsqrtn.yaml,data,0.9264705882352942,"A Tensor. Must be one of the following types: float32, float64.","A Tensor. Must be one of the following types: bfloat16, float32, float64."
tf.linalg.matmul.yaml,a_is_sparse,0.9861386138613861,"If True, a is treated as a sparse matrix. Notice, this does not support tf.sparse.SparseTensor, it just makes optimizations that assume most values in a are zero. See tf.sparse.sparse_dense_matmul for some support for tf.SparseTensor multiplication.","If True, a is treated as a sparse matrix. Notice, this does not support tf.sparse.SparseTensor, it just makes optimizations that assume most values in a are zero. See tf.sparse.sparse_dense_matmul for some support for tf.sparse.SparseTensor multiplication."
tf.linalg.matmul.yaml,b_is_sparse,0.9861386138613861,"If True, b is treated as a sparse matrix. Notice, this does not support tf.sparse.SparseTensor, it just makes optimizations that assume most values in a are zero. See tf.sparse.sparse_dense_matmul for some support for tf.SparseTensor multiplication.","If True, b is treated as a sparse matrix. Notice, this does not support tf.sparse.SparseTensor, it just makes optimizations that assume most values in a are zero. See tf.sparse.sparse_dense_matmul for some support for tf.sparse.SparseTensor multiplication."
tf.nn.embedding_lookup_sparse.yaml,combiner,0.9719626168224299,"A string specifying the reduction op. Currently ""mean"", ""sqrtn"" and ""sum"" are supported. ""sum"" computes the weighted sum of the embedding results for each row. ""mean"" is the weighted sum divided by the total weight. ""sqrtn"" is the weighted sum divided by the square root of the sum of the squares of the weights.","A string specifying the reduction op. Currently ""mean"", ""sqrtn"" and ""sum"" are supported. ""sum"" computes the weighted sum of the embedding results for each row. ""mean"" is the weighted sum divided by the total weight. ""sqrtn"" is the weighted sum divided by the square root of the sum of the squares of the weights. Defaults to mean."
tf.math.reduce_sum.yaml,axis,0.9926470588235294,"The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)).","The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)]."
tf.math.maximum.yaml,x,0.93,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int16, int32, int64."
tf.keras.layers.conv2d.yaml,activation,0.9953917050691244,"Activation function to use. If you don't specify anything, no activation is applied ( see keras.activations).","Activation function to use. If you don't specify anything, no activation is applied (see keras.activations)."
tf.keras.layers.conv2d.yaml,bias_regularizer,0.9931972789115646,Regularizer function applied to the bias vector ( see keras.regularizers).,Regularizer function applied to the bias vector (see keras.regularizers).
tf.keras.layers.conv2d.yaml,activity_regularizer,0.9950248756218906,"Regularizer function applied to the output of the layer (its ""activation"") ( see keras.regularizers).","Regularizer function applied to the output of the layer (its ""activation"") (see keras.regularizers)."
tf.keras.layers.conv2d.yaml,bias_constraint,0.993006993006993,Constraint function applied to the bias vector ( see keras.constraints).,Constraint function applied to the bias vector (see keras.constraints).
tf.keras.layers.conv2d.yaml,data_format,0.9655172413793104,"A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be ""channels_last"".","A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be channels_last."
tf.keras.layers.conv2d.yaml,bias_initializer,0.991304347826087,Initializer for the bias vector ( see keras.initializers).,Initializer for the bias vector (see keras.initializers).
tf.keras.layers.conv2d.yaml,kernel_initializer,0.9925925925925926,Initializer for the kernel weights matrix ( see keras.initializers).,Initializer for the kernel weights matrix (see keras.initializers).
tf.keras.layers.conv2d.yaml,kernel_constraint,0.9931972789115646,Constraint function applied to the kernel matrix ( see keras.constraints).,Constraint function applied to the kernel matrix (see keras.constraints).
tf.raw_ops.resizenearestneighbor.yaml,images,0.9696969696969697,"A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64. 4-D with shape [batch, height, width, channels].","A Tensor. Must be one of the following types: int8, uint8, int16, uint16, int32, int64, half, float32, float64, bfloat16. 4-D with shape [batch, height, width, channels]."
tf.math.asin.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.math.atan.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.keras.utils.register_keras_serializable.yaml,name,0.9947089947089947,"The name to serialize this class under in this package. If None, the class's name will be used.","The name to serialize this class under in this package. If None, the class' name will be used."
tf.raw_ops.mulnonan.yaml,x,0.9484536082474226,"A Tensor. Must be one of the following types: half, float32, float64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, complex64, complex128."
tf.raw_ops.acos.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.linspace.yaml,stop,0.9294117647058824,A Tensor. Must have the same type as start. 0-D tensor. Last entry in the range.,A Tensor. Must have the same type and shape as start. N-D tensor. Last entry in the range.
tf.linspace.yaml,start,0.9649122807017544,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64. 0-D tensor. First entry in the range.","A Tensor. Must be one of the following types: bfloat16, float32, float64. N-D tensor. First entry in the range."
tf.data.experimental.bucket_by_sequence_length.yaml,no_padding,0.97165991902834,"bool, indicates whether to pad the batch features (features need to be either of type tf.SparseTensor or of same shape).","bool, indicates whether to pad the batch features (features need to be either of type tf.sparse.SparseTensor or of same shape)."
tf.math.reciprocal.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.keras.utils.normalize.yaml,order,0.9318181818181818,Normalization order (e.g. 2 for L2 norm).,Normalization order (e.g. order=2 for L2 norm).
tf.nest.pack_sequence_as.yaml,expand_composites,0.9711934156378601,"If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.","If true, then composite tensors such as tf.sparse.SparseTensor and tf.RaggedTensor are expanded into their component tensors."
tf.keras.utils.get_file.yaml,untar,0.935672514619883,"Deprecated in favor of 'extract'. boolean, whether the file should be decompressed","Deprecated in favor of extract argument. boolean, whether the file should be decompressed"
tf.keras.utils.get_file.yaml,md5_hash,0.9281045751633987,Deprecated in favor of 'file_hash'. md5 hash of the file for verification,Deprecated in favor of file_hash argument. md5 hash of the file for verification
tf.keras.utils.get_file.yaml,archive_format,0.9655172413793104,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.","Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' corresponds to ['tar', 'zip']. None or an empty list will return no matches found."
tf.nest.map_structure.yaml,**kwargs,0.9937106918238994,"Valid keyword args are: check_types: If set to True (default) the types of iterables within the structures have to be same (e.g. map_structure(func, [1], (1,)) raises a TypeError exception). To allow this set this argument to False. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. expand_composites: If set to True, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors. If False (the default), then composite tensors are not expanded.","Valid keyword args are: check_types: If set to True (default) the types of iterables within the structures have to be same (e.g. map_structure(func, [1], (1,)) raises a TypeError exception). To allow this set this argument to False. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. expand_composites: If set to True, then composite tensors such as tf.sparse.SparseTensor and tf.RaggedTensor are expanded into their component tensors. If False (the default), then composite tensors are not expanded."
tf.raw_ops.argmax.yaml,input,0.9838709677419355,"A Tensor. Must be one of the following types: float32, float64, int32, uint8, int16, int8, complex64, int64, qint8, quint8, qint32, bfloat16, uint16, complex128, half, uint32, uint64.","A Tensor. Must be one of the following types: float32, float64, int32, uint8, int16, int8, complex64, int64, qint8, quint8, qint32, bfloat16, uint16, complex128, half, uint32, uint64, bool."
tf.raw_ops.sparsesegmentsqrtnwithnumsegments.yaml,data,0.9264705882352942,"A Tensor. Must be one of the following types: float32, float64.","A Tensor. Must be one of the following types: bfloat16, float32, float64."
tf.keras.applications.imagenet_utils.preprocess_input.yaml,mode,0.9704641350210971,"One of ""caffe"", ""tf"" or ""torch"". caffe: will convert the images from RGB to BGR, then will zero-center each color channel with respect to the ImageNet dataset, without scaling. tf: will scale pixels between -1 and 1, sample-wise. torch: will scale pixels between 0 and 1 and then will normalize each channel with respect to the ImageNet dataset.","One of ""caffe"", ""tf"" or ""torch"". Defaults to ""caffe"". caffe: will convert the images from RGB to BGR, then will zero-center each color channel with respect to the ImageNet dataset, without scaling. tf: will scale pixels between -1 and 1, sample-wise. torch: will scale pixels between 0 and 1 and then will normalize each channel with respect to the ImageNet dataset."
tf.math.not_equal.yaml,x,0.9357798165137615,A tf.Tensor or tf.SparseTensor or tf.IndexedSlices.,A tf.Tensor or tf.sparse.SparseTensor or tf.IndexedSlices.
tf.math.not_equal.yaml,y,0.9357798165137615,A tf.Tensor or tf.SparseTensor or tf.IndexedSlices.,A tf.Tensor or tf.sparse.SparseTensor or tf.IndexedSlices.
tf.keras.layers.conv3d.yaml,activation,0.9953917050691244,"Activation function to use. If you don't specify anything, no activation is applied ( see keras.activations).","Activation function to use. If you don't specify anything, no activation is applied (see keras.activations)."
tf.keras.layers.conv3d.yaml,bias_regularizer,0.9931972789115646,Regularizer function applied to the bias vector ( see keras.regularizers).,Regularizer function applied to the bias vector (see keras.regularizers).
tf.keras.layers.conv3d.yaml,activity_regularizer,0.9950248756218906,"Regularizer function applied to the output of the layer (its ""activation"") ( see keras.regularizers).","Regularizer function applied to the output of the layer (its ""activation"") (see keras.regularizers)."
tf.keras.layers.conv3d.yaml,bias_constraint,0.993006993006993,Constraint function applied to the bias vector ( see keras.constraints).,Constraint function applied to the bias vector (see keras.constraints).
tf.keras.layers.conv3d.yaml,bias_initializer,0.991304347826087,Initializer for the bias vector ( see keras.initializers).,Initializer for the bias vector (see keras.initializers).
tf.keras.layers.conv3d.yaml,kernel_initializer,0.9925925925925926,Initializer for the kernel weights matrix ( see keras.initializers).,Initializer for the kernel weights matrix (see keras.initializers).
tf.keras.layers.conv3d.yaml,kernel_regularizer,0.9940119760479041,Regularizer function applied to the kernel weights matrix ( see keras.regularizers).,Regularizer function applied to the kernel weights matrix (see keras.regularizers).
tf.keras.layers.conv3d.yaml,kernel_constraint,0.9931972789115646,Constraint function applied to the kernel matrix ( see keras.constraints).,Constraint function applied to the kernel matrix (see keras.constraints).
tf.data.experimental.get_structure.yaml,dataset_or_iterator,0.9620253164556962,A tf.data.Dataset or tf.data.Iterator.,A tf.data.Dataset or an tf.data.Iterator.
tf.raw_ops.depthwiseconv2dnativebackpropfilter.yaml,padding,0.92,"A string from: ""SAME"", ""VALID"". The type of padding algorithm to use.","A string from: ""SAME"", ""VALID"", ""EXPLICIT"". The type of padding algorithm to use."
tf.math.floormod.yaml,x,0.9587628865979382,"A Tensor. Must be one of the following types: int32, int64, bfloat16, half, float32, float64.","A Tensor. Must be one of the following types: int32, int64, uint64, bfloat16, half, float32, float64."
tf.math.negative.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.floormod.yaml,x,0.9587628865979382,"A Tensor. Must be one of the following types: int32, int64, bfloat16, half, float32, float64.","A Tensor. Must be one of the following types: int32, int64, uint64, bfloat16, half, float32, float64."
tf.raw_ops.notequal.yaml,x,0.9351351351351351,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, int16, int32, int64, complex64, quint8, qint8, qint32, string, bool, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, int16, int32, int64, uint16, uint32, uint64, complex64, quint8, qint8, qint32, string, bool, complex128."
tf.data.experimental.dense_to_sparse_batch.yaml,row_shape,0.9873873873873874,"A tf.TensorShape or tf.int64 vector tensor-like object representing the equivalent dense shape of a row in the resulting tf.SparseTensor. Each element of this dataset must have the same rank as row_shape, and must have size less than or equal to row_shape in each dimension.","A tf.TensorShape or tf.int64 vector tensor-like object representing the equivalent dense shape of a row in the resulting tf.sparse.SparseTensor. Each element of this dataset must have the same rank as row_shape, and must have size less than or equal to row_shape in each dimension."
tf.math.square.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.sub.yaml,x,0.972972972972973,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128, uint32."
tf.raw_ops.neg.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.nn.conv3d_transpose.yaml,input,0.9506172839506173,"A 5-D Tensor of type float and shape [batch, height, width, in_channels] for NHWC data format or [batch, in_channels, height, width] for NCHW data format.","A 5-D Tensor of type float and shape [batch, depth, height, width, in_channels] for NDHWC data format or [batch, in_channels, depth, height, width] for NCDHW data format."
tf.nn.conv3d_transpose.yaml,filters,0.926984126984127,"A 5-D Tensor with the same type as value and shape [height, width, output_channels, in_channels]. filter's in_channels dimension must match that of value.","A 5-D Tensor with the same type as input and shape [depth, height, width, output_channels, in_channels]. filter's in_channels dimension must match that of input."
tf.sparse.expand_dims.yaml,axis,0.9466666666666667,"0-D (scalar). Specifies the dimension index at which to expand the shape of input. Must be in the range [-rank(sp_input) - 1, rank(sp_input)].","0-D (scalar). Specifies the dimension index at which to expand the shape of input. Must be in the range [-rank(sp_input) - 1, rank(sp_input)]. Defaults to -1."
tf.math.subtract.yaml,x,0.972972972972973,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128, uint32."
tf.raw_ops.sparsesegmentmeanwithnumsegments.yaml,data,0.9264705882352942,"A Tensor. Must be one of the following types: float32, float64.","A Tensor. Must be one of the following types: bfloat16, float32, float64."
tf.raw_ops.inv.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.depthwiseconv2dnativebackpropinput.yaml,padding,0.92,"A string from: ""SAME"", ""VALID"". The type of padding algorithm to use.","A string from: ""SAME"", ""VALID"", ""EXPLICIT"". The type of padding algorithm to use."
tf.raw_ops.square.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.atan.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.minimum.yaml,x,0.93,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int16, int32, int64."
tf.raw_ops.equal.yaml,x,0.9351351351351351,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, int16, int32, int64, complex64, quint8, qint8, qint32, string, bool, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, int16, int32, int64, uint16, uint32, uint64, complex64, quint8, qint8, qint32, string, bool, complex128."
tf.raw_ops.asin.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.raw_ops.sparsesegmentmean.yaml,data,0.9264705882352942,"A Tensor. Must be one of the following types: float32, float64.","A Tensor. Must be one of the following types: bfloat16, float32, float64."
tf.math.acos.yaml,x,0.9469387755102041,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64, complex64, complex128.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128."
tf.nest.assert_same_structure.yaml,expand_composites,0.9711934156378601,"If true, then composite tensors such as tf.SparseTensor and tf.RaggedTensor are expanded into their component tensors.","If true, then composite tensors such as tf.sparse.SparseTensor and tf.RaggedTensor are expanded into their component tensors."
tf.math.minimum.yaml,x,0.93,"A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int32, int64.","A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int16, int32, int64."
