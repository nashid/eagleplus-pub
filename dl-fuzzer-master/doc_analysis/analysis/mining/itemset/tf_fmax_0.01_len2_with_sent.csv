,idx,support,cnt,itemsets,sentence,api,len
0,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.group.yaml,3
1,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.conv1d.yaml,3
2,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,3
3,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.band_part.yaml,3
4,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,3
5,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.mask.yaml,3
6,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,3
7,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,3
8,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,3
9,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,3
10,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reciprocal.yaml,3
11,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.xlogy.yaml,3
12,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,3
13,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,3
14,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.encode_png.yaml,3
15,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_max.yaml,3
16,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,3
17,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,3
18,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.split.yaml,3
19,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,3
20,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,3
21,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,3
22,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,3
23,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitcast.yaml,3
24,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,3
25,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,3
26,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,3
27,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,3
28,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.concat.yaml,3
29,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,3
30,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.zeta.yaml,3
31,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,3
32,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.solve.yaml,3
33,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,3
34,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.tanh.yaml,3
35,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,3
36,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,3
37,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,3
38,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,3
39,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,3
40,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,3
41,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.shuffle.yaml,3
42,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,3
43,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.lbeta.yaml,3
44,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,3
45,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.idct.yaml,3
46,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.polyval.yaml,3
47,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.relu6.yaml,3
48,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,3
49,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,3
50,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,3
51,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.resize.yaml,3
52,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,3
53,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.eig.yaml,3
54,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,3
55,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,3
56,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.conv3d.yaml,3
57,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.substr.yaml,3
58,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.split.yaml,3
59,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.cast.yaml,3
60,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,3
61,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.broadcast_to.yaml,3
62,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.total_variation.yaml,3
63,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.sigmoid.yaml,3
64,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.is_nan.yaml,3
65,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,3
66,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.clip_by_value.yaml,3
67,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.timestamp.yaml,3
68,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,3
69,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,3
70,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.sign.yaml,3
71,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,3
72,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,3
73,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,3
74,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,3
75,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,3
76,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.sqrt.yaml,3
77,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.nn.avg_pool.yaml,3
78,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.add_n.yaml,3
79,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,3
80,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.dtypes.complex.yaml,3
81,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.unstack.yaml,3
82,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,3
83,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,3
84,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.random.categorical.yaml,3
85,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.fft3d.yaml,3
86,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.trace.yaml,3
87,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,3
88,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,3
89,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,3
90,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",optional name of the operation.,tf.sparse.maximum.yaml,3
91,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.log1p.yaml,3
92,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.erfinv.yaml,3
93,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,3
94,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.floordiv.yaml,3
95,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,3
96,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_min.yaml,3
97,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.igamma.yaml,3
98,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.encode_base64.yaml,3
99,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,3
100,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.greater_equal.yaml,3
101,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,3
102,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,3
103,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,3
104,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,3
105,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,3
106,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,3
107,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,3
108,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,3
109,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,3
110,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.sin.yaml,3
111,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,3
112,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,3
113,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,3
114,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.softplus.yaml,3
115,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,3
116,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.unique.yaml,3
117,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,3
118,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.subtract.yaml,3
119,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.elu.yaml,3
120,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,3
121,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.dynamic_partition.yaml,3
122,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,3
123,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.tan.yaml,3
124,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.not_equal.yaml,3
125,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
126,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.write_file.yaml,3
127,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.zeros_like.yaml,3
128,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.asinh.yaml,3
129,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,3
130,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional),tf.io.decode_image.yaml,3
131,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,3
132,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,3
133,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",optional name of the operation.,tf.sparse.softmax.yaml,3
134,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,3
135,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.read_file.yaml,3
136,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.ifft.yaml,3
137,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,3
138,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,3
139,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.truediv.yaml,3
140,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,3
141,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,3
142,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,3
143,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,3
144,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
145,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,3
146,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,3
147,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,3
148,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.as_string.yaml,3
149,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,3
150,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.crelu.yaml,3
151,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,3
152,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,3
153,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.segment_mean.yaml,3
154,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,3
155,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.squared_difference.yaml,3
156,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.conv2d.yaml,3
157,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,3
158,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.ones_like.yaml,3
159,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,3
160,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,3
161,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,3
162,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,3
163,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.unravel_index.yaml,3
164,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
165,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,3
166,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,3
167,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,3
168,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,3
169,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.upper.yaml,3
170,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,3
171,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.ndtri.yaml,3
172,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.Assert.yaml,3
173,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.less.yaml,3
174,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
175,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.realdiv.yaml,3
176,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.hann_window.yaml,3
177,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,3
178,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,3
179,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,3
180,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,3
181,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,3
182,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,3
183,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,3
184,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.print.yaml,3
185,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",optional name of the operation.,tf.sparse.minimum.yaml,3
186,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,3
187,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,3
188,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,3
189,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,3
190,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,3
191,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,3
192,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,3
193,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,3
194,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,3
195,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,3
196,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.is_finite.yaml,3
197,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,3
198,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,3
199,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,3
200,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.truncatediv.yaml,3
201,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.softmax.yaml,3
202,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.imag.yaml,3
203,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
204,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.atan.yaml,3
205,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.angle.yaml,3
206,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.nextafter.yaml,3
207,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,3
208,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,3
209,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
210,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name of the operation (optional).,tf.where.yaml,3
211,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.log.yaml,3
212,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,3
213,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,3
214,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.gather.yaml,3
215,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,3
216,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.linalg.svd.yaml,3
217,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.asin.yaml,3
218,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
219,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.cosh.yaml,3
220,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.abs.yaml,3
221,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,3
222,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,3
223,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,3
224,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,3
225,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,3
226,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,3
227,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,3
228,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,3
229,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,3
230,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.searchsorted.yaml,3
231,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,3
232,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,3
233,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,3
234,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Name for the operation (optional).,tf.linalg.matvec.yaml,3
235,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.diag.yaml,3
236,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,3
237,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.rint.yaml,3
238,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,3
239,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,3
240,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,3
241,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,3
242,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,3
243,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.round.yaml,3
244,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.eigvals.yaml,3
245,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.greater.yaml,3
246,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,3
247,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.clip_by_norm.yaml,3
248,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,3
249,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,3
250,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.segment_prod.yaml,3
251,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,3
252,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,3
253,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,3
254,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.logm.yaml,3
255,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,3
256,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.ifftshift.yaml,3
257,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,3
258,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,3
259,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.identity_n.yaml,3
260,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.fingerprint.yaml,3
261,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_gif.yaml,3
262,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.transpose.yaml,3
263,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,3
264,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.inv.yaml,3
265,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,3
266,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,3
267,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,3
268,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.negative.yaml,3
269,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,3
270,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,3
271,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.fft2d.yaml,3
272,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,3
273,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.hamming_window.yaml,3
274,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,3
275,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,3
276,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.uniform.yaml,3
277,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.segment_sum.yaml,3
278,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.tensordot.yaml,3
279,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
280,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,3
281,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,3
282,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.add.yaml,3
283,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,3
284,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,3
285,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,3
286,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,3
287,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,3
288,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,3
289,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,3
290,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,3
291,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.sort.yaml,3
292,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.floor.yaml,3
293,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,3
294,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.squeeze.yaml,3
295,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,3
296,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.cumprod.yaml,3
297,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,3
298,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_any.yaml,3
299,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.floormod.yaml,3
300,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.selu.yaml,3
301,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.atan2.yaml,3
302,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,3
303,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.erf.yaml,3
304,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,3
305,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,3
306,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,3
307,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.normal.yaml,3
308,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,3
309,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,3
310,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,3
311,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.lower.yaml,3
312,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.conj.yaml,3
313,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,3
314,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.case.yaml,3
315,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,3
316,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
317,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.io.parse_example.yaml,3
318,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,3
319,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,3
320,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.logical_not.yaml,3
321,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,3
322,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.unique_with_counts.yaml,3
323,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.segment_max.yaml,3
324,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,3
325,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,3
326,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,3
327,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,3
328,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,3
329,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,3
330,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,3
331,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.fill.yaml,3
332,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,3
333,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",name: A name for the operation (optional).,tf.einsum.yaml,3
334,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,3
335,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,3
336,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.bias_add.yaml,3
337,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,3
338,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,3
339,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,3
340,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,3
341,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,3
342,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,3
343,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.scatter_nd.yaml,3
344,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.igammac.yaml,3
345,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_png.yaml,3
346,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,3
347,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.linalg.eigh.yaml,3
348,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.argmin.yaml,3
349,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,3
350,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.ensure_shape.yaml,3
351,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.xdivy.yaml,3
352,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,3
353,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strided_slice.yaml,3
354,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
355,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,3
356,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,3
357,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,3
358,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,3
359,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,3
360,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Name for the operation (optional).,tf.linalg.matmul.yaml,3
361,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.slice.yaml,3
362,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.dct.yaml,3
363,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.acos.yaml,3
364,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.argmax.yaml,3
365,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.fftshift.yaml,3
366,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,3
367,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,3
368,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,3
369,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,3
370,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.py_function.yaml,3
371,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,3
372,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,3
373,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,3
374,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.invert.yaml,3
375,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.square.yaml,3
376,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.segment_min.yaml,3
377,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,3
378,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linspace.yaml,3
379,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.det.yaml,3
380,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,3
381,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.stft.yaml,3
382,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.to_number.yaml,3
383,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,3
384,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,3
385,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,3
386,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
387,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,3
388,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,3
389,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.pow.yaml,3
390,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.exp.yaml,3
391,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,3
392,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.erfc.yaml,3
393,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_raw.yaml,3
394,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,3
395,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,3
396,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,3
397,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,3
398,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,3
399,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.slice.yaml,3
400,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,3
401,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.polygamma.yaml,3
402,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,3
403,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.minimum.yaml,3
404,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,3
405,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.transpose.yaml,3
406,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.atanh.yaml,3
407,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.qr.yaml,3
408,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.edit_distance.yaml,3
409,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.rank.yaml,3
410,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,3
411,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,3
412,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,3
413,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,3
414,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.relu.yaml,3
415,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.pad.yaml,3
416,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,3
417,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.multiply.yaml,3
418,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,3
419,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.matching_files.yaml,3
420,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.random.poisson.yaml,3
421,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,3
422,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,3
423,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,3
424,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.tile.yaml,3
425,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,3
426,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,3
427,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.equal.yaml,3
428,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional),tf.io.is_jpeg.yaml,3
429,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.shape.yaml,3
430,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,3
431,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.logical_and.yaml,3
432,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
433,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,3
434,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.betainc.yaml,3
435,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,3
436,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.acosh.yaml,3
437,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,3
438,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,3
439,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,3
440,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,3
441,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,3
442,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,3
443,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.random.gamma.yaml,3
444,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,3
445,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.join.yaml,3
446,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.stack.yaml,3
447,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.logical_or.yaml,3
448,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,3
449,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.no_op.yaml,3
450,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.quantize.yaml,3
451,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,3
452,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,3
453,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.switch_case.yaml,3
454,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.gather_nd.yaml,3
455,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name of the operation (optional),tf.compat.v1.where.yaml,3
456,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.encode_proto.yaml,3
457,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.rsqrt.yaml,3
458,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,3
459,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,3
460,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,3
461,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,3
462,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.less_equal.yaml,3
463,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,3
464,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,3
465,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.guarantee_const.yaml,3
466,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.softsign.yaml,3
467,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.lgamma.yaml,3
468,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,3
469,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.reduce_all.yaml,3
470,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",(Optional) A name for the operation.,tf.numpy_function.yaml,3
471,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.truncatemod.yaml,3
472,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,3
473,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,3
474,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,3
475,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.batch_to_space.yaml,3
476,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.is_inf.yaml,3
477,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,3
478,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
479,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.boolean_mask.yaml,3
480,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.identity.yaml,3
481,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,3
482,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,3
483,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,3
484,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.maximum.yaml,3
485,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.math.top_k.yaml,3
486,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,3
487,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,3
488,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,3
489,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,3
490,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,3
491,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_csv.yaml,3
492,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.one_hot.yaml,3
493,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,3
494,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.space_to_batch.yaml,3
495,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.argsort.yaml,3
496,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.cumsum.yaml,3
497,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,3
498,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.parallel_stack.yaml,3
499,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,3
500,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.in_top_k.yaml,3
501,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,3
502,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,3
503,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.sinh.yaml,3
504,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",An optional name for the operation.,tf.signal.frame.yaml,3
505,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,3
506,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,3
507,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.format.yaml,3
508,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,3
509,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,3
510,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,3
511,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,3
512,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.dropout.yaml,3
513,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_proto.yaml,3
514,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,3
515,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,3
516,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.reverse.yaml,3
517,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,3
518,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
519,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,3
520,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.digamma.yaml,3
521,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,3
522,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,3
523,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,3
524,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,3
525,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,3
526,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,3
527,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.cross.yaml,3
528,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.stop_gradient.yaml,3
529,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,3
530,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.expm1.yaml,3
531,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.summary.flush.yaml,3
532,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,3
533,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.ceil.yaml,3
534,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",Optional name for the operation.,tf.nn.max_pool.yaml,3
535,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,3
536,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,3
537,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.io.decode_base64.yaml,3
538,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,3
539,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,3
540,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,3
541,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,3
542,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.real.yaml,3
543,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.size.yaml,3
544,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,3
545,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.roll.yaml,3
546,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",name: A name for the operation (optional).,tf.meshgrid.yaml,3
547,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.math.cos.yaml,3
548,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.image.extract_patches.yaml,3
549,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,3
550,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,3
551,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.linalg.lu.yaml,3
552,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.strip.yaml,3
553,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.compat.v1.case.yaml,3
554,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,3
555,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.shape_n.yaml,3
556,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.signal.fft.yaml,3
557,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,3
558,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,3
559,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,3
560,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for this operation (optional).,tf.image.random_crop.yaml,3
561,53,0.06208863536638877,562,"frozenset({'optional', 'name', 'operation'})",A name for the operation (optional).,tf.strings.split.yaml,3
562,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,2
563,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,2
564,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input `Tensor` of 4 dimensions.,tf.compat.v1.nn.fused_batch_norm.yaml,2
565,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
566,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
567,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The values of the named input tensors in the imported graph will be re-mapped to the respective `Tensor` values.,tf.graph_util.import_graph_def.yaml,2
568,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
569,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,2
570,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
571,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
572,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.elu.yaml,2
573,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
574,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
575,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
576,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
577,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Tensor with which to center the input.,tf.keras.backend.batch_normalization.yaml,2
578,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Tensor by which to scale the input.,tf.keras.backend.batch_normalization.yaml,2
579,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor or variable.,tf.keras.backend.batch_normalization.yaml,2
580,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
581,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
582,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
583,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,2
584,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
585,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
586,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
587,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
588,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","Each input tensor has a corresponding shard axes, given by `input_shard_axes`, which must have size divisible by `num_shards`.",tf.compat.v1.tpu.shard.yaml,2
589,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softmax.yaml,2
590,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,2
591,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
592,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
593,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
594,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
595,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
596,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
597,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
598,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
599,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
600,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.apply_channel_shift.yaml,2
601,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.apply_channel_shift.yaml,2
602,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,2
603,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
604,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
605,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (exactly 2).,tf.keras.layers.subtract2.yaml,2
606,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
607,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
608,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,2
609,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
610,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
611,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,2
612,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
613,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Note that the batch size of the input tensor must be divisible by`block_size * block_size`.,tf.compat.v1.batch_to_space.yaml,2
614,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
615,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softplus.yaml,2
616,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
617,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
618,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
619,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
620,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
621,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
622,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
623,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
624,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input `Tensor` of arbitrary dimensionality.,tf.nn.batch_normalization.yaml,2
625,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,2
626,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","`Tensor`, input tensor.",tf.signal.ifftshift.yaml,2
627,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
628,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
629,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.gradients.yaml,2
630,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,2
631,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
632,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,2
633,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.compat.v1.gradients.yaml,2
634,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
635,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A 4D input Tensor.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
636,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
637,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
638,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
639,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
640,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmin.yaml,2
641,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
642,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
643,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
644,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
645,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
646,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
647,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
648,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
649,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.random_channel_shift.yaml,2
650,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_channel_shift.yaml,2
651,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
652,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
653,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
654,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",input tensor,tf.keras.backend.depthwise_conv2d.yaml,2
655,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
656,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,2
657,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.linear.yaml,2
658,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmin.yaml,2
659,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.sigmoid.yaml,2
660,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
661,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmax.yaml,2
662,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","`Tensor`, input tensor.",tf.signal.fftshift.yaml,2
663,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
664,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
665,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.tanh.yaml,2
666,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Each element of the input Tensor is converted to an array of bytes.,tf.io.decode_raw.yaml,2
667,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
668,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
669,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,2
670,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,2
671,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Tensor with which to center the input.,tf.keras.backend.normalize_batch_in_training.yaml,2
672,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Tensor by which to scale the input.,tf.keras.backend.normalize_batch_in_training.yaml,2
673,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor or variable.,tf.keras.backend.normalize_batch_in_training.yaml,2
674,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmax.yaml,2
675,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,2
676,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
677,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
678,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
679,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
680,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
681,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.hard_sigmoid.yaml,2
682,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
683,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,2
684,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.exponential.yaml,2
685,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
686,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
687,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
688,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
689,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
690,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
691,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
692,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
693,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
694,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,2
695,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
696,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
697,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softsign.yaml,2
698,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
699,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Optional existing tensor to wrap into the `Input` layer.,tf.keras.Input.yaml,2
700,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
701,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Each element of the input Tensor is converted to an array of bytes.,tf.compat.v1.decode_raw.yaml,2
702,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",A 4D input Tensor.,tf.nn.batch_norm_with_global_normalization.yaml,2
703,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
704,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
705,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
706,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
707,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})","If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",tf.strings.format.yaml,2
708,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Tensors of input values.,tf.debugging.assert_same_float_dtype.yaml,2
709,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
710,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
711,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
712,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
713,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
714,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input `tensor` or `variable`.,tf.keras.activations.relu.yaml,2
715,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
716,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
717,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",input tensor,tf.keras.backend.separable_conv2d.yaml,2
718,49,0.04892496709082931,157,"frozenset({'input', 'tensor'})",Input tensor to crop.,tf.image.random_crop.yaml,2
719,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
720,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Values can be a `SparseTensor` or a `Tensor` depends on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.input_layer.yaml,2
721,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,2
722,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
723,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The values of the named input tensors in the imported graph will be re-mapped to the respective `Tensor` values.,tf.graph_util.import_graph_def.yaml,2
724,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
725,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The values of the tensor are expected to be 0.0 or 1.0. Internally the {0,1} labels are converted to {-1,1} when calculating the hinge loss.",tf.compat.v1.losses.hinge_loss.yaml,2
726,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Values are `Tensor` or `SparseTensor` depending on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.linear_model.yaml,2
727,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_update.yaml,2
728,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
729,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
730,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_sub.yaml,2
731,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
732,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_negatives.yaml,2
733,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
734,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The type of `values` elements in the tensor to be fed.,tf.compat.v1.sparse_placeholder.yaml,2
735,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
736,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
737,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
738,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
739,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
740,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to multiply to `ref`.,tf.compat.v1.scatter_mul.yaml,2
741,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
742,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
743,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
744,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
745,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,2
746,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,2
747,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,2
748,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
749,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
750,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
751,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of values that `ref` is divided by.,tf.compat.v1.scatter_div.yaml,2
752,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
753,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
754,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_positives.yaml,2
755,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
756,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The `Tensor` from which to gather values.,tf.gather.yaml,2
757,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
758,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
759,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_add.yaml,2
760,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
761,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,2
762,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width.yaml,2
763,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A `Tensor` representing preactivation values.,tf.nn.leaky_relu.yaml,2
764,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
765,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
766,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
767,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.recall.yaml,2
768,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Valid values: None: Switch to a system default.'warn': Copies the tensors which are not on the right device and logs a warning.'explicit': Raises an error if the placement is not as required.'silent': Silently copies the tensors.,tf.config.experimental.set_device_policy.yaml,2
769,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_min.yaml,2
770,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
771,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
772,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
773,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
774,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_negatives.yaml,2
775,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,2
776,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
777,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
778,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
779,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to subtract from `ref`.,tf.compat.v1.scatter_sub.yaml,2
780,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
781,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
782,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
783,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
784,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
785,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_max.yaml,2
786,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
787,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The tensor from which to gather values.,tf.compat.v1.gather_nd.yaml,2
788,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_add.yaml,2
789,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
790,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,2
791,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
792,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The tensor from which to gather values.,tf.gather_nd.yaml,2
793,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
794,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Valid values: tf.contrib.eager.DEVICE_PLACEMENT_EXPLICIT: raises an error if the placement is not correct.tf.contrib.eager.DEVICE_PLACEMENT_WARN: copies the tensors which are not on the right device but logs a warning.tf.contrib.eager.DEVICE_PLACEMENT_SILENT: silently copies the tensors.,tf.compat.v1.enable_eager_execution.yaml,2
795,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width_bins.yaml,2
796,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
797,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,2
798,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","integer tensor, all its values <= maxlen.",tf.sequence_mask.yaml,2
799,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
800,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_positives.yaml,2
801,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
802,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.precision.yaml,2
803,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
804,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A string template to format tensor values into.,tf.strings.format.yaml,2
805,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",Tensors of input values.,tf.debugging.assert_same_float_dtype.yaml,2
806,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A `Tensor` or `RaggedTensor` containing the values to stack.,tf.ragged.stack_dynamic_partitions.yaml,2
807,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
808,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})","Debug mode for tensor values, as a string.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
809,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",The `Tensor` from which to gather values.,tf.compat.v1.gather.yaml,2
810,42,0.0379552435278631,92,"frozenset({'values', 'tensor'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_update.yaml,2
811,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
812,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.data.experimental.make_csv_dataset.yaml,2
813,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
814,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
815,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A `tf.DType` from: `tf.bfloat16, tf.half, tf.float32, tf.float64, tf.int64, tf.int32, tf.uint8, tf.uint16, tf.uint32, tf.uint64, tf.int8, tf.int16, tf.complex64, tf.complex128, tf.qint8, tf.quint8, tf.qint16, tf.quint16, tf.qint32`.",tf.bitcast.yaml,2
816,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.nn.max_pool_with_argmax.yaml,2
817,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.nn.max_pool_with_argmax.yaml,2
818,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
819,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",By default it is`tf.int64`.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
820,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","If user defines a `label_vocabulary`, this should be set as`tf.string`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
821,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
822,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
823,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
824,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
825,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
826,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
827,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})"," Defaults to `splits.dtype`, or `tf.int64` if `splits` does not have a dtype.",tf.ragged.row_splits_to_segment_ids.yaml,2
828,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
829,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
830,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","Either an int/float, the string `""dynamic""`, or an instance of a`tf.mixed_precision.experimental.LossScale`.",tf.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
831,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,2
832,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.debugging.assert_type.yaml,2
833,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",By default it is`tf.float32`.,tf.estimator.regressor_parse_example_spec.yaml,2
834,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
835,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique.yaml,2
836,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.unique.yaml,2
837,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
838,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
839,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
840,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
841,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
842,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.string` tensor.,tf.compat.v1.reduce_join.yaml,2
843,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
844,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
845,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_min.yaml,2
846,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.compat.v1.arg_min.yaml,2
847,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.io.extract_jpeg_shape.yaml,2
848,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.io.extract_jpeg_shape.yaml,2
849,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
850,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
851,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,2
852,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
853,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})", One of `tf.int32` or `tf.int64`.,tf.ragged.range.yaml,2
854,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.compat.v1.string_to_number.yaml,2
855,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.float32`.,tf.compat.v1.string_to_number.yaml,2
856,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})", Default is `tf.int32`.,tf.searchsorted.yaml,2
857,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_max.yaml,2
858,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.compat.v1.arg_max.yaml,2
859,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
860,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.compat.v1.shape.yaml,2
861,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
862,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
863,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmin.yaml,2
864,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.compat.v1.argmin.yaml,2
865,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",The output dtype; defaults to `tf.int64`.,tf.compat.v1.count_nonzero.yaml,2
866,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to`tf.int64`.,tf.compat.v1.data.experimental.Counter.yaml,2
867,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
868,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.compat.v1.assert_type.yaml,2
869,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
870,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
871,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})"," Defaults to `segment_ids.dtype`, or `tf.int64` if `segment_ids` does not have a dtype.",tf.ragged.segment_ids_to_row_splits.yaml,2
872,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique_with_counts.yaml,2
873,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.unique_with_counts.yaml,2
874,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","Type of weights, such as `tf.float32`.",tf.feature_column.weighted_categorical_column.yaml,2
875,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.regression_signature_def.yaml,2
876,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
877,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
878,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
879,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.uint8, tf.uint16`.",tf.io.decode_png.yaml,2
880,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.uint8`.,tf.io.decode_png.yaml,2
881,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Default is`tf.float32`.,tf.ones.yaml,2
882,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmin.yaml,2
883,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to`tf.int64`.,tf.math.argmin.yaml,2
884,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
885,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,2
886,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
887,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmax.yaml,2
888,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to`tf.int64`.,tf.math.argmax.yaml,2
889,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
890,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.strings.to_number.yaml,2
891,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.float32`.,tf.strings.to_number.yaml,2
892,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Default value is `tf.float32`.,tf.feature_column.numeric_column.yaml,2
893,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmax.yaml,2
894,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int64`.,tf.compat.v1.argmax.yaml,2
895,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",By default it is`tf.int64`.,tf.estimator.classifier_parse_example_spec.yaml,2
896,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","If user defines a `label_vocabulary`, this should be set as`tf.string`.",tf.estimator.classifier_parse_example_spec.yaml,2
897,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
898,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
899,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",One of `tf.int32` or `tf.int64`.,tf.ragged.constant.yaml,2
900,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
901,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.shape.yaml,2
902,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",The output dtype; defaults to `tf.int64`.,tf.math.count_nonzero.yaml,2
903,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
904,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.TensorShape` or list of `int`s.,tf.compat.v1.placeholder_with_default.yaml,2
905,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
906,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
907,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",tf.batch_to_space.yaml,2
908,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to`tf.int64`.,tf.data.experimental.Counter.yaml,2
909,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
910,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A list of `tf.DTypes`.,tf.io.decode_proto.yaml,2
911,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,2
912,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",By default it is`tf.float32`.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
913,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
914,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","Either an int/float, the string `""dynamic""`, or an instance of a `tf.mixed_precision.experimental.LossScale`.",tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
915,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
916,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.compat.v1.size.yaml,2
917,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
918,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
919,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.linalg.lu.yaml,2
920,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`.,tf.linalg.lu.yaml,2
921,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",A `tf.string` tensor.,tf.strings.reduce_join.yaml,2
922,41,0.03718736287845546,112,"frozenset({'tf', 'SOME_DTYPE'})",Defaults to `tf.int32`(optional).,tf.shape_n.yaml,2
923,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from `""NWC"", ""NCW""`.",tf.nn.conv1d.yaml,2
924,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
925,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
926,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
927,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.depth_to_space.yaml,2
928,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
929,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
930,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
931,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.data.experimental.make_csv_dataset.yaml,2
932,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.data.experimental.make_csv_dataset.yaml,2
933,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",A optional string corresponding to the label column.,tf.data.experimental.make_csv_dataset.yaml,2
934,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
935,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional bool.,tf.data.experimental.make_csv_dataset.yaml,2
936,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.space_to_depth.yaml,2
937,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.image.encode_png.yaml,2
938,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
939,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
940,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.dequantize.yaml,2
941,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""MIN_COMBINED"", ""MIN_FIRST"", ""SCALED""`.",tf.quantization.dequantize.yaml,2
942,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.dequantize.yaml,2
943,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
944,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
945,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
946,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.nn.local_response_normalization.yaml,2
947,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) A string.,tf.compat.v1.global_variables.yaml,2
948,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) A string.,tf.compat.v1.trainable_variables.yaml,2
949,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_nd_update.yaml,2
950,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional bool.,tf.compat.v1.scatter_nd_update.yaml,2
951,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from `""NWC"", ""NCW""`.",tf.compat.v1.nn.conv1d.yaml,2
952,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.nn.conv1d.yaml,2
953,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d.yaml,2
954,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
955,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.linalg.solve.yaml,2
956,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string`, must be set to `""NHWC""`.",tf.nn.max_pool_with_argmax.yaml,2
957,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `boolean`.,tf.nn.max_pool_with_argmax.yaml,2
958,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.nn.max_pool_with_argmax.yaml,2
959,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
960,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_sum.yaml,2
961,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.eig.yaml,2
962,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_nd_sub.yaml,2
963,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional bool.,tf.compat.v1.scatter_nd_sub.yaml,2
964,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) Python integer seed for the resampler.,tf.data.experimental.rejection_resample.yaml,2
965,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.nn.conv3d.yaml,2
966,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
967,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.strings.substr.yaml,2
968,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.nn.fractional_avg_pool.yaml,2
969,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.nn.fractional_avg_pool.yaml,2
970,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.nn.fractional_avg_pool.yaml,2
971,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
972,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
973,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.length.yaml,2
974,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) A string.,tf.compat.v1.moving_average_variables.yaml,2
975,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) A string.,tf.compat.v1.local_variables.yaml,2
976,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.assign_add.yaml,2
977,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.encode_base64.yaml,2
978,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.image.extract_glimpse.yaml,2
979,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.image.extract_glimpse.yaml,2
980,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.image.extract_glimpse.yaml,2
981,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_mul.yaml,2
982,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.assign.yaml,2
983,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.assign.yaml,2
984,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
985,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""in"", ""cm""`.",tf.io.encode_jpeg.yaml,2
986,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `"""", ""grayscale"", ""rgb""`.",tf.io.encode_jpeg.yaml,2
987,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
988,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
989,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
990,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
991,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.encode_jpeg.yaml,2
992,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
993,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique.yaml,2
994,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
995,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
996,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
997,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
998,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
999,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",A optional string corresponding to the label column.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1000,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1001,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional bool.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1002,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
1003,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
1004,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
1005,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional name string for the placeholder.,tf.keras.backend.placeholder.yaml,2
1006,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.audio.decode_wav.yaml,2
1007,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.audio.decode_wav.yaml,2
1008,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_image.yaml,2
1009,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
1010,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
1011,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
1012,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
1013,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d.yaml,2
1014,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.nn.conv2d.yaml,2
1015,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_bmp.yaml,2
1016,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string name for this op.,tf.summary.write.yaml,2
1017,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.as_string.yaml,2
1018,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.strings.as_string.yaml,2
1019,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.strings.as_string.yaml,2
1020,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.strings.as_string.yaml,2
1021,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.strings.as_string.yaml,2
1022,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
1023,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.conv2d.yaml,2
1024,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.linalg.triangular_solve.yaml,2
1025,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.linalg.triangular_solve.yaml,2
1026,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.sparse.segment_sqrt_n.yaml,2
1027,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1028,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1029,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
1030,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.upper.yaml,2
1031,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_div.yaml,2
1032,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_min.yaml,2
1033,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.image.crop_and_resize.yaml,2
1034,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional string specifying the sampling method for resizing.,tf.image.crop_and_resize.yaml,2
1035,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.io.extract_jpeg_shape.yaml,2
1036,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
1037,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.avg_pool1d.yaml,2
1038,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
1039,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
1040,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
1041,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.compat.v1.image.crop_and_resize.yaml,2
1042,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""bilinear"", ""nearest""`.",tf.compat.v1.image.crop_and_resize.yaml,2
1043,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
1044,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
1045,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.space_to_depth.yaml,2
1046,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1047,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1048,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1049,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
1050,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.svd.yaml,2
1051,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string.,tf.reshape.yaml,2
1052,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
1053,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
1054,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.image.resize_area.yaml,2
1055,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
1056,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.compat.v1.string_to_number.yaml,2
1057,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_add.yaml,2
1058,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
1059,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
1060,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.image.sample_distorted_bounding_box.yaml,2
1061,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.image.sample_distorted_bounding_box.yaml,2
1062,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.image.sample_distorted_bounding_box.yaml,2
1063,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,2
1064,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_max.yaml,2
1065,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.eigvals.yaml,2
1066,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
1067,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
1068,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.depth_to_space.yaml,2
1069,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional string from: ""NDHWC"", ""NCDHW"".",tf.nn.max_pool3d.yaml,2
1070,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.max_pool1d.yaml,2
1071,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.linalg.inv.yaml,2
1072,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional `string`.,tf.compat.v1.train.export_meta_graph.yaml,2
1073,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
1074,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
1075,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
1076,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmin.yaml,2
1077,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_min.yaml,2
1078,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.squeeze.yaml,2
1079,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
1080,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
1081,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.lower.yaml,2
1082,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.compat.v1.decode_csv.yaml,2
1083,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.decode_csv.yaml,2
1084,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
1085,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
1086,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
1087,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.sparse.segment_mean.yaml,2
1088,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique_with_counts.yaml,2
1089,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_local_variable.yaml,2
1090,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
1091,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1092,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.io.decode_jpeg.yaml,2
1093,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_jpeg.yaml,2
1094,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_jpeg.yaml,2
1095,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_jpeg.yaml,2
1096,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_jpeg.yaml,2
1097,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_jpeg.yaml,2
1098,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.scalar.yaml,2
1099,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.image.yaml,2
1100,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,2
1101,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""strict"", ""replace"", ""ignore""`.",tf.strings.unicode_transcode.yaml,2
1102,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.strings.unicode_transcode.yaml,2
1103,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.strings.unicode_transcode.yaml,2
1104,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
1105,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string name for this op.,tf.summary.experimental.write_raw_pb.yaml,2
1106,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_png.yaml,2
1107,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.uint8, tf.uint16`.",tf.io.decode_png.yaml,2
1108,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string.,tf.ones.yaml,2
1109,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.eigh.yaml,2
1110,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(optional) perturbation used to compute numeric Jacobian.,tf.test.compute_gradient.yaml,2
1111,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmin.yaml,2
1112,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1113,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
1114,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1115,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1116,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1117,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1118,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmax.yaml,2
1119,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
1120,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.substr.yaml,2
1121,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1122,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1123,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.text.yaml,2
1124,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string.,tf.expand_dims.yaml,2
1125,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_variable.yaml,2
1126,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
1127,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.strings.to_number.yaml,2
1128,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1129,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1130,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_mean.yaml,2
1131,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_sub.yaml,2
1132,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
1133,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional `string`.,tf.compat.v1.train.import_meta_graph.yaml,2
1134,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.substr.yaml,2
1135,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
1136,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional bool.,tf.transpose.yaml,2
1137,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional.) A string.,tf.compat.v1.model_variables.yaml,2
1138,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.linalg.qr.yaml,2
1139,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional string.,tf.zeros.yaml,2
1140,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional bool.,tf.compat.v1.transpose.yaml,2
1141,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmax.yaml,2
1142,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
1143,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
1144,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.audio.yaml,2
1145,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional constant `str` for the desired encoding.,tf.summary.audio.yaml,2
1146,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,2
1147,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(optional) An int32/int64 vector sized `[batch_size]`.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
1148,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_max.yaml,2
1149,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
1150,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
1151,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_compressed.yaml,2
1152,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
1153,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
1154,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.nn.fractional_max_pool.yaml,2
1155,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.nn.fractional_max_pool.yaml,2
1156,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.nn.fractional_max_pool.yaml,2
1157,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.io.decode_and_crop_jpeg.yaml,2
1158,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_and_crop_jpeg.yaml,2
1159,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_and_crop_jpeg.yaml,2
1160,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_and_crop_jpeg.yaml,2
1161,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.io.decode_and_crop_jpeg.yaml,2
1162,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_and_crop_jpeg.yaml,2
1163,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
1164,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_nd_add.yaml,2
1165,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.join.yaml,2
1166,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, an optional join separator.",tf.strings.join.yaml,2
1167,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.quantize.yaml,2
1168,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.quantization.quantize.yaml,2
1169,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""MIN_COMBINED"", ""MIN_FIRST"", ""SCALED""`.",tf.quantization.quantize.yaml,2
1170,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.quantize.yaml,2
1171,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""HALF_AWAY_FROM_ZERO"", ""HALF_TO_EVEN""`.",tf.quantization.quantize.yaml,2
1172,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.unsorted_segment_join.yaml,2
1173,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,2
1174,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.encode_proto.yaml,2
1175,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional integer that indicates the priority for applying this conversion function.,tf.register_tensor_conversion_function.yaml,2
1176,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional positive `int`.,tf.summary.histogram.yaml,2
1177,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.histogram.yaml,2
1178,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",optional static batch size (integer).,tf.keras.Input.yaml,2
1179,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional name string for the layer.,tf.keras.Input.yaml,2
1180,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1181,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1182,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1183,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(optional string) Only include devices matching this device type.,tf.config.list_logical_devices.yaml,2
1184,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_csv.yaml,2
1185,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_csv.yaml,2
1186,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
1187,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
1188,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional bool.,tf.linalg.matrix_transpose.yaml,2
1189,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.strings.format.yaml,2
1190,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.strings.format.yaml,2
1191,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.assign_sub.yaml,2
1192,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_proto.yaml,2
1193,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `string`.,tf.io.decode_proto.yaml,2
1194,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.io.decode_proto.yaml,2
1195,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(optional string) Only include devices matching this device type.,tf.config.get_visible_devices.yaml,2
1196,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1197,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1198,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
1199,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
1200,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
1201,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
1202,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,2
1203,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional int32 scalar.,tf.sparse.segment_sum.yaml,2
1204,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
1205,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
1206,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
1207,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
1208,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",(optional string) Only include devices matching this device type.,tf.config.list_physical_devices.yaml,2
1209,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional `bool`.,tf.compat.v1.scatter_update.yaml,2
1210,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.linalg.lu.yaml,2
1211,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
1212,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})","(optional) Python int, the rank of the `SparseTensor` objects.",tf.io.deserialize_many_sparse.yaml,2
1213,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",Defaults to `tf.int32`(optional).,tf.shape_n.yaml,2
1214,59,0.03203159280386134,292,"frozenset({'optional', 'SOME_DTYPE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
1215,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
1216,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A small float number added to the variance of x.,tf.compat.v1.nn.fused_batch_norm.yaml,2
1217,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,2
1218,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int specifying the number of times this dataset is repeated.,tf.data.experimental.make_csv_dataset.yaml,2
1219,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.data.experimental.make_csv_dataset.yaml,2
1220,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
1221,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
1222,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,2
1223,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
1224,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","An `int`, number of top elements to consider.",tf.keras.backend.in_top_k.yaml,2
1225,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
1226,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv3D.yaml,2
1227,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv1D.yaml,2
1228,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Python integer, number of times to repeat.",tf.keras.backend.repeat_elements.yaml,2
1229,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
1230,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,2
1231,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","`int`, maximum number of training steps with no increase in the given metric.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
1232,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
1233,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Iterable of integer number of hidden units per layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
1234,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
1235,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
1236,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
1237,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.strings.substr.yaml,2
1238,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of filters in the convolution).",tf.keras.layers.SeparableConv1D.yaml,2
1239,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","`int`, maximum number of training steps with no decrease in the given metric.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
1240,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
1241,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
1242,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
1243,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, number of classes to consider.",tf.keras.backend.one_hot.yaml,2
1244,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1245,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int specifying the number of times this dataset is repeated.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1246,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1247,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
1248,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
1249,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
1250,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
1251,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
1252,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,2
1253,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
1254,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.SeparableConv2D.yaml,2
1255,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
1256,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv2D.yaml,2
1257,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
1258,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,2
1259,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
1260,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
1261,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
1262,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
1263,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
1264,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
1265,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A small float number to avoid dividing by 0.,tf.nn.batch_normalization.yaml,2
1266,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A small float number to avoid dividing by 0.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
1267,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","int, number of epochs to iterate over data.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
1268,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
1269,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
1270,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Int, number of possible words to sample.",tf.keras.preprocessing.sequence.make_sampling_table.yaml,2
1271,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
1272,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1273,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1274,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1275,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1276,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1277,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1278,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
1279,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Integer specifying the number of times to read through the dataset.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
1280,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A list of floats, indicating the number of seconds since the Epoch when each checkpoint was generated.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1281,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1282,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer indicating the number of segments.,tf.ragged.segment_ids_to_row_splits.yaml,2
1283,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1284,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1285,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1286,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
1287,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
1288,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,2
1289,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Integer specifying the number of times to read through the dataset.,tf.data.experimental.make_batched_features_dataset.yaml,2
1290,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.strings.substr.yaml,2
1291,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",The maximum number of shards in int created taking precedence over `max_shard_bytes`.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
1292,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.substr.yaml,2
1293,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, number of epochs to iterate over data.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
1294,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
1295,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Python integer, number of times to repeat.",tf.keras.backend.repeat.yaml,2
1296,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","`int`, number of shards to partition variable.",tf.compat.v1.fixed_size_partitioner.yaml,2
1297,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
1298,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar representing maximum number of boxes retained over all classes.,tf.image.combined_non_max_suppression.yaml,2
1299,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
1300,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
1301,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
1302,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1303,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1304,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1305,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1306,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A small float number to avoid dividing by 0.,tf.nn.batch_norm_with_global_normalization.yaml,2
1307,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","Integer, number of rows/columns.",tf.keras.backend.eye.yaml,2
1308,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
1309,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})",An `int32` or `int64` scalar specifying the number of partitions to output.,tf.ragged.stack_dynamic_partitions.yaml,2
1310,39,0.03192189556823168,96,"frozenset({'number', 'SOME_DTYPE'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
1311,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d.yaml,2
1312,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d.yaml,2
1313,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
1314,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
1315,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optimizer identifier, one of String: name of an optimizerDictionary: configuration dictionary.",tf.keras.optimizers.get.yaml,2
1316,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
1317,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
1318,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
1319,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
1320,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
1321,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
1322,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
1323,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
1324,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d_transpose.yaml,2
1325,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d_transpose.yaml,2
1326,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
1327,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,2
1328,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,2
1329,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,2
1330,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that cols_to_vars will also contain a string key 'bias' that maps to a list of Variables.,tf.compat.v1.feature_column.linear_model.yaml,2
1331,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.compat.v1.nn.conv1d.yaml,2
1332,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.compat.v1.nn.conv1d.yaml,2
1333,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.MaxPool2D.yaml,2
1334,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.MaxPool2D.yaml,2
1335,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,2
1336,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
1337,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,2
1338,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of 2 integers, how many zeros to add at the start and end of dim 1.",tf.keras.backend.temporal_padding.yaml,2
1339,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
1340,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d.yaml,2
1341,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
1342,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
1343,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d_transpose.yaml,2
1344,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
1345,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.multi_flags_validator.yaml,2
1346,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
1347,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
1348,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
1349,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Iterable of integer number of hidden units per layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
1350,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of integer.,tf.keras.backend.tile.yaml,2
1351,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
1352,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.nn.conv3d.yaml,2
1353,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The list of supported dtypes is the same as`x`.,tf.cast.yaml,2
1354,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `floats` that has length >= 4.,tf.nn.fractional_avg_pool.yaml,2
1355,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of (left_pad_value, right_pad_value), a single string, or None.",tf.strings.ngrams.yaml,2
1356,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",string or iterable of strings.,tf.io.gfile.glob.yaml,2
1357,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
1358,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
1359,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of integer.,tf.keras.backend.mean.yaml,2
1360,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.strings.to_hash_bucket_strong.yaml,2
1361,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
1362,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,2
1363,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.conv_transpose.yaml,2
1364,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
1365,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
1366,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
1367,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Boolean or list of boolean.,tf.compat.v1.tpu.shard.yaml,2
1368,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple or list of integers with target dimensions, or single integer.",tf.keras.backend.batch_dot.yaml,2
1369,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Iterable of scalar `Tensor` objects.,tf.compat.v1.assert_rank_in.yaml,2
1370,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
1371,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
1372,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
1373,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
1374,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1375,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1376,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1377,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
1378,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
1379,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
1380,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
1381,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," For backwards compatibility reasons, this is separate from the single-string argument type.A list of Variables to warm-start.",tf.compat.v1.train.warm_start.yaml,2
1382,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,2
1383,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Integer or iterable of integers.,tf.keras.backend.reverse.yaml,2
1384,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
1385,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
1386,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
1387,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
1388,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d.yaml,2
1389,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
1390,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d.yaml,2
1391,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
1392,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.MaxPool3D.yaml,2
1393,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d.yaml,2
1394,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
1395,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d.yaml,2
1396,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,2
1397,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",string or iterable of strings.,tf.compat.v1.gfile.Glob.yaml,2
1398,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
1399,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
1400,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1401,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1402,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
1403,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
1404,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
1405,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
1406,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
1407,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
1408,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,2
1409,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,2
1410,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,2
1411,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If the value is a non-string iterable, it will be iterated over to create a shallow copy of the values.",tf.compat.v1.flags.DEFINE_multi.yaml,2
1412,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
1413,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_sum.yaml,2
1414,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
1415,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
1416,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,2
1417,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,2
1418,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,2
1419,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
1420,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
1421,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
1422,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
1423,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
1424,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`list<int>`, batch size per bucket.",tf.data.experimental.bucket_by_sequence_length.yaml,2
1425,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`list<int>`, upper length boundaries of the buckets.",tf.data.experimental.bucket_by_sequence_length.yaml,2
1426,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
1427,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
1428,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1429,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1430,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1431,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
1432,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
1433,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
1434,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
1435,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
1436,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
1437,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",`Iterable` of scalar `Tensor` objects.,tf.debugging.assert_rank_in.yaml,2
1438,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
1439,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
1440,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
1441,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Tuple of 2 integers.,tf.keras.backend.conv2d_transpose.yaml,2
1442,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.nn.conv3d_transpose.yaml,2
1443,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.conv3d_transpose.yaml,2
1444,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A word sequence (sentence), encoded as a list     of word indices (integers).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
1445,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
1446,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
1447,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum.yaml,2
1448,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",`int` or shape `tuple` Axes over which to calculate.,tf.signal.ifftshift.yaml,2
1449,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
1450,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
1451,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
1452,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
1453,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.compat.v1.nn.conv3d_transpose.yaml,2
1454,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of ints.,tf.compat.v1.nn.conv3d_transpose.yaml,2
1455,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of string keys to collect.,tf.compat.v1.train.export_meta_graph.yaml,2
1456,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A callable that takes inputs `(time, cell_output, cell_state, loop_state)` and returns the tuple `(finished, next_input, next_cell_state, emit_output, next_loop_state)`.",tf.compat.v1.nn.raw_rnn.yaml,2
1457,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
1458,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If `cell.state_size` is a (possibly nested) tuple of ints or `TensorShape`, this will be a tuple having the corresponding shapes.",tf.compat.v1.nn.raw_rnn.yaml,2
1459,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
1460,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
1461,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
1462,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
1463,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
1464,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `VarLenFeature`/`FixedLenFeature`.,tf.estimator.export.build_parsing_serving_input_receiver_fn.yaml,2
1465,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
1466,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
1467,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.squeeze.yaml,2
1468,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1469,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","scalar, or tuple or list of constructed scalars and/or other tuples/lists, or scalars.",tf.nest.map_structure.yaml,2
1470,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Tuple of floats; zoom range for width and height.,tf.keras.preprocessing.image.random_zoom.yaml,2
1471,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
1472,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
1473,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
1474,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings.,tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1475,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list of floats, indicating the number of seconds since the Epoch when each checkpoint was generated.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
1476,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.compat.v1.decode_csv.yaml,2
1477,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
1478,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,2
1479,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
1480,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.conv2d.yaml,2
1481,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
1482,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
1483,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A sorted list or tuple of floats specifying the boundaries.,tf.feature_column.bucketized_column.yaml,2
1484,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1485,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1486,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1487,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1488,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1489,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1490,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1491,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
1492,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
1493,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor`.,tf.estimator.export.build_raw_serving_input_receiver_fn.yaml,2
1494,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
1495,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
1496,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
1497,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","dict of the form {'class_name': str, 'config': dict}",tf.keras.layers.deserialize.yaml,2
1498,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.depthwise_conv2d.yaml,2
1499,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
1500,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
1501,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.AveragePooling2D.yaml,2
1502,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.AveragePooling2D.yaml,2
1503,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
1504,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max.yaml,2
1505,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1506,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1507,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d_transpose.yaml,2
1508,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d_transpose.yaml,2
1509,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
1510,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
1511,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
1512,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
1513,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
1514,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
1515,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
1516,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
1517,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
1518,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
1519,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1520,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1521,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", List of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
1522,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
1523,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
1524,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
1525,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,2
1526,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
1527,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
1528,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
1529,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","iterable of integers, axes over which to normalize.",tf.keras.backend.normalize_batch_in_training.yaml,2
1530,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
1531,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_max.yaml,2
1532,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.pool2d.yaml,2
1533,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.pool2d.yaml,2
1534,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
1535,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
1536,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
1537,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
1538,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
1539,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
1540,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
1541,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
1542,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",tf.nest.assert_same_structure.yaml,2
1543,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
1544,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.fractional_max_pool.yaml,2
1545,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.conv3d.yaml,2
1546,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
1547,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of string tensors.,tf.strings.join.yaml,2
1548,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
1549,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
1550,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.AveragePooling3D.yaml,2
1551,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
1552,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `dict` mapping `int`s to callables, or a `list` of (`int`, callable) pairs, or simply a list of callables (in which case the index serves as the key).",tf.switch_case.yaml,2
1553,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `strings`.,tf.io.encode_proto.yaml,2
1554,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.encode_proto.yaml,2
1555,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A `tf.TensorShape` or list of `int`s.,tf.compat.v1.placeholder_with_default.yaml,2
1556,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The base type or tuple of base types for all objects that`conversion_func` accepts.,tf.register_tensor_conversion_function.yaml,2
1557,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
1558,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", List of N ints >= 1.,tf.nn.pool.yaml,2
1559,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
1560,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
1561,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,2
1562,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1563,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1564,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1565,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",All keys and values in the dictionary should be convertible to str.,tf.lite.experimental.load_delegate.yaml,2
1566,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
1567,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
1568,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
1569,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","input - dict, with keys() being flag_names, and value for each key     being the value of the corresponding flag (string, boolean, etc).",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
1570,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If eager execution is enabled, any callable object in the `control_inputs` list will be called.",tf.control_dependencies.yaml,2
1571,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.io.decode_csv.yaml,2
1572,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings representing `Operation` types that need to be placed on `ps` devices.,tf.compat.v1.train.replica_device_setter.yaml,2
1573,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
1574,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
1575,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
1576,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
1577,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
1578,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `strings`.,tf.io.decode_proto.yaml,2
1579,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.decode_proto.yaml,2
1580,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `tf.DTypes`.,tf.io.decode_proto.yaml,2
1581,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,2
1582,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","dict, a mapping where the keys are flag names (strings).",tf.compat.v1.flags.flag_dict_to_args.yaml,2
1583,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.pool3d.yaml,2
1584,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.pool3d.yaml,2
1585,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
1586,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
1587,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
1588,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
1589,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.separable_conv2d.yaml,2
1590,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
1591,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
1592,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,2
1593,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,2
1594,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
1595,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,2
1596,56,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
1597,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A tensor of numeric type.,tf.math.zero_fraction.yaml,3
1598,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,3
1599,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,3
1600,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.image.extract_glimpse.yaml,3
1601,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
1602,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,3
1603,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,3
1604,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,3
1605,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
1606,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,3
1607,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
1608,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,3
1609,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.compat.v1.nn.crelu.yaml,3
1610,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
1611,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `float16`, `float32`, `float64` `complex64` or`complex128`.",tf.math.reciprocal_no_nan.yaml,3
1612,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,3
1613,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.relu6.yaml,3
1614,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.substr.yaml,3
1615,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,3
1616,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A Tensor with type `float16`, `float32`, `float64`, `complex64`, or`complex128`.",tf.math.sigmoid.yaml,3
1617,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_strong.yaml,3
1618,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.strings.length.yaml,3
1619,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket.yaml,3
1620,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32` or `float64`.,tf.nn.log_poisson_loss.yaml,3
1621,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.train.sdca_fprint.yaml,3
1622,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` with type `float` or `double`.,tf.math.erfinv.yaml,3
1623,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,3
1624,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,3
1625,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",a string-type Tensor to summarize.,tf.compat.v1.summary.text.yaml,3
1626,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.encode_base64.yaml,3
1627,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,3
1628,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,3
1629,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,3
1630,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,3
1631,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.image.extract_glimpse.yaml,3
1632,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `uint8`.,tf.io.encode_jpeg.yaml,3
1633,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.dynamic_partition.yaml,3
1634,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,3
1635,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,3
1636,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.audio.decode_wav.yaml,3
1637,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
1638,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.quantization.quantized_concat.yaml,3
1639,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
1640,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
1641,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.read_file.yaml,3
1642,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_json_example.yaml,3
1643,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` numerator of numeric type.,tf.math.truediv.yaml,3
1644,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` denominator of numeric type.,tf.math.truediv.yaml,3
1645,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_bmp.yaml,3
1646,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.crelu.yaml,3
1647,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_hash_bucket.yaml,3
1648,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A Tensor with type `float32` or `float64`.,tf.math.log_sigmoid.yaml,3
1649,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
1650,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.parse_tensor.yaml,3
1651,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.upper.yaml,3
1652,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
1653,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
1654,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` with type `float` or `double`.,tf.math.ndtri.yaml,3
1655,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,3
1656,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,3
1657,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,3
1658,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,3
1659,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,3
1660,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.extract_jpeg_shape.yaml,3
1661,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.pad.yaml,3
1662,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,3
1663,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.image.crop_and_resize.yaml,3
1664,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,3
1665,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
1666,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
1667,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
1668,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
1669,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`,tf.where.yaml,3
1670,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
1671,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
1672,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,3
1673,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
1674,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
1675,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
1676,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
1677,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,3
1678,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,3
1679,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_number.yaml,3
1680,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,3
1681,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A Tensor of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,3
1682,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.image.draw_bounding_boxes.yaml,3
1683,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
1684,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,3
1685,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.math.round.yaml,3
1686,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
1687,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
1688,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,3
1689,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,3
1690,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_gif.yaml,3
1691,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,3
1692,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
1693,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
1694,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
1695,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
1696,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
1697,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
1698,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A scalar `Tensor` with the same type as `x`.,tf.compat.v1.nn.dropout.yaml,3
1699,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",`Tensor` of type `float32` or `float64`.,tf.tensordot.yaml,3
1700,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,3
1701,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32` or `float64`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,3
1702,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
1703,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,3
1704,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumprod.yaml,3
1705,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
1706,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
1707,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,3
1708,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,3
1709,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.lower.yaml,3
1710,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.decode_csv.yaml,3
1711,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,3
1712,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`.,tf.math.logical_not.yaml,3
1713,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1714,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1715,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1716,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1717,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1718,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1719,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1720,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1721,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1722,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
1723,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_jpeg.yaml,3
1724,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` with type `float`, `double`, `int64`, `int32`, `uint8`,`int16`, `int8`, `complex64`, or `complex128`.",tf.nn.bias_add.yaml,3
1725,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
1726,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.unicode_transcode.yaml,3
1727,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,3
1728,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_png.yaml,3
1729,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,3
1730,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1731,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1732,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1733,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
1734,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
1735,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
1736,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,3
1737,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,3
1738,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
1739,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.strings.substr.yaml,3
1740,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
1741,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
1742,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
1743,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.math.in_top_k.yaml,3
1744,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.to_number.yaml,3
1745,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.strings.unicode_script.yaml,3
1746,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,3
1747,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
1748,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,3
1749,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,3
1750,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,3
1751,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.compat.v1.substr.yaml,3
1752,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,3
1753,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_input.yaml,3
1754,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.pad.yaml,3
1755,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.matching_files.yaml,3
1756,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
1757,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_compressed.yaml,3
1758,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,3
1759,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,3
1760,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,3
1761,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_and_crop_jpeg.yaml,3
1762,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.io.decode_and_crop_jpeg.yaml,3
1763,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,3
1764,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,3
1765,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,3
1766,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
1767,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
1768,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
1769,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.unsorted_segment_join.yaml,3
1770,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `bool`,tf.compat.v1.where.yaml,3
1771,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.io.encode_proto.yaml,3
1772,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,3
1773,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_fast.yaml,3
1774,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
1775,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,3
1776,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_csv.yaml,3
1777,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
1778,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
1779,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
1780,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumsum.yaml,3
1781,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.math.in_top_k.yaml,3
1782,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
1783,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A scalar `Tensor` with the same type as x.,tf.nn.dropout.yaml,3
1784,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_proto.yaml,3
1785,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,3
1786,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
1787,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
1788,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
1789,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
1790,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,3
1791,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args.yaml,3
1792,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32` or `int64` (default: 0).,tf.math.cumulative_logsumexp.yaml,3
1793,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.io.decode_base64.yaml,3
1794,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32` or `float64`.,tf.nn.weighted_cross_entropy_with_logits.yaml,3
1795,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `string`.,tf.strings.strip.yaml,3
1796,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` type bool.,tf.math.logical_xor.yaml,3
1797,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type bool.,tf.math.logical_xor.yaml,3
1798,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
1799,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `float32`.,tf.audio.encode_wav.yaml,3
1800,52,0.030166739798157087,204,"frozenset({'type', 'tensor', 'SOME_DTYPE'})",A `Tensor` of type `int32`.,tf.audio.encode_wav.yaml,3
1801,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.GlobalMaxPool1D.yaml,2
1802,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
1803,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.Conv3D.yaml,2
1804,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.MaxPool2D.yaml,2
1805,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv3d.yaml,2
1806,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.max_pool_with_argmax.yaml,2
1807,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
1808,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
1809,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,2
1810,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.nn.conv3d.yaml,2
1811,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_avg_pool.yaml,2
1812,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, length, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, length)`.",tf.keras.layers.SeparableConv1D.yaml,2
1813,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalMaxPool3D.yaml,2
1814,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,2
1815,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
1816,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,2
1817,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,2
1818,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","If False, shape is [batch, time, logits]",tf.nn.ctc_loss.yaml,2
1819,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Tensor of shape [batch, max value in seq_length]",tf.nn.collapse_repeated.yaml,2
1820,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
1821,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.image.draw_bounding_boxes.yaml,2
1822,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.image.draw_bounding_boxes.yaml,2
1823,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
1824,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.MaxPool3D.yaml,2
1825,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,2
1826,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalMaxPool2D.yaml,2
1827,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
1828,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Shape `[batch, depth, rows, cols, in_channels]`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1829,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Backprop signal of shape `[batch, out_depth, out_rows, out_cols, out_channels]`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1830,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
1831,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.SeparableConv2D.yaml,2
1832,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.space_to_batch.yaml,2
1833,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
1834,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,2
1835,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.Conv2D.yaml,2
1836,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.MaxPool1D.yaml,2
1837,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,2
1838,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
1839,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
1840,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,2
1841,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,2
1842,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,2
1843,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1844,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1845,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
1846,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
1847,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,2
1848,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.image.resize_area.yaml,2
1849,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, N, 4]`describing the N bounding boxes associated with the image.",tf.image.sample_distorted_bounding_box.yaml,2
1850,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
1851,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
1852,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
1853,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,2
1854,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
1855,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,2
1856,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,2
1857,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
1858,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
1859,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
1860,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
1861,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
1862,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,2
1863,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.erosion2d.yaml,2
1864,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
1865,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,2
1866,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,2
1867,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.dilation2d.yaml,2
1868,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,2
1869,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,2
1870,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.AveragePooling2D.yaml,2
1871,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
1872,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,2
1873,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalAveragePooling2D.yaml,2
1874,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","For example, if `data_format` is 'NHWC' then out_backprop shape is `[batch, out_height, out_width, out_channels]`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1875,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","For example, if `data_format` is 'NHWC' then out_backprop shape is `[batch, out_height, out_width, out_channels]`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
1876,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,2
1877,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
1878,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,2
1879,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
1880,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","If true, the inputs and outputs will be in shape`(timesteps, batch, ...)`, whereas in the False case, it will be`(batch, timesteps, ...)`.",tf.keras.backend.rnn.yaml,2
1881,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,2
1882,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d.yaml,2
1883,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_max_pool.yaml,2
1884,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,2
1885,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.AveragePooling3D.yaml,2
1886,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.AveragePooling1D.yaml,2
1887,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
1888,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,2
1889,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,2
1890,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1891,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1892,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,2
1893,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,2
1894,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
1895,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,2
1896,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.GlobalAveragePooling1D.yaml,2
1897,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,2
1898,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalAveragePooling3D.yaml,2
1899,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,2
1900,35,0.027863097849934182,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1901,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Keras variable or tensor.,tf.keras.backend.ones_like.yaml,2
1902,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less.yaml,2
1903,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less.yaml,2
1904,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dtype.yaml,2
1905,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.prod.yaml,2
1906,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.expand_dims.yaml,2
1907,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softmax.yaml,2
1908,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
1909,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
1910,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.temporal_padding.yaml,2
1911,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.repeat_elements.yaml,2
1912,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A `Tensor` representing the variable of the polynomial.,tf.math.polyval.yaml,2
1913,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable,tf.keras.backend.tile.yaml,2
1914,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Input tensor or variable.,tf.keras.backend.batch_normalization.yaml,2
1915,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.relu.yaml,2
1916,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.cumprod.yaml,2
1917,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.mean.yaml,2
1918,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.cumsum.yaml,2
1919,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.bias_add.yaml,2
1920,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sin.yaml,2
1921,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
1922,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
1923,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.flatten.yaml,2
1924,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
1925,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
1926,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Variable or tensor.,tf.keras.backend.count_params.yaml,2
1927,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.tanh.yaml,2
1928,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.l2_normalize.yaml,2
1929,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
1930,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
1931,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.max.yaml,2
1932,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.round.yaml,2
1933,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.permute_dimensions.yaml,2
1934,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.std.yaml,2
1935,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.squeeze.yaml,2
1936,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.spatial_3d_padding.yaml,2
1937,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.argmin.yaml,2
1938,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor with the same shape as `variable`.,tf.keras.backend.moving_average_update.yaml,2
1939,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
1940,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
1941,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softsign.yaml,2
1942,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.argmax.yaml,2
1943,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.int_shape.yaml,2
1944,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv2d_transpose.yaml,2
1945,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable to resize.,tf.keras.backend.resize_images.yaml,2
1946,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.square.yaml,2
1947,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.log.yaml,2
1948,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable to resize.,tf.keras.backend.resize_volumes.yaml,2
1949,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sqrt.yaml,2
1950,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.abs.yaml,2
1951,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sign.yaml,2
1952,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
1953,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
1954,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.min.yaml,2
1955,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.shape.yaml,2
1956,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.sigmoid.yaml,2
1957,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv2d.yaml,2
1958,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
1959,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
1960,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
1961,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
1962,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or list of tensors to consider constant with respect to any other variable.,tf.keras.backend.stop_gradient.yaml,2
1963,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.var.yaml,2
1964,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.sum.yaml,2
1965,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
1966,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.batch_flatten.yaml,2
1967,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
1968,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
1969,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.reshape.yaml,2
1970,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Input tensor or variable.,tf.keras.backend.normalize_batch_in_training.yaml,2
1971,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pool2d.yaml,2
1972,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Keras tensor (or variable).,tf.keras.backend.cast.yaml,2
1973,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.spatial_2d_padding.yaml,2
1974,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.exp.yaml,2
1975,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pow.yaml,2
1976,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
1977,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
1978,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
1979,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv3d.yaml,2
1980,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.repeat.yaml,2
1981,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
1982,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
1983,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.any.yaml,2
1984,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softplus.yaml,2
1985,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.ndim.yaml,2
1986,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.all.yaml,2
1987,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv1d.yaml,2
1988,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
1989,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Keras variable or Keras tensor.,tf.keras.backend.zeros_like.yaml,2
1990,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.cos.yaml,2
1991,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.clip.yaml,2
1992,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pool3d.yaml,2
1993,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Input `tensor` or `variable`.,tf.keras.activations.relu.yaml,2
1994,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.transpose.yaml,2
1995,33,0.023255813953488372,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.hard_sigmoid.yaml,2
1996,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d.yaml,2
1997,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d.yaml,2
1998,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d_transpose.yaml,2
1999,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d_transpose.yaml,2
2000,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
2001,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.compat.v1.nn.conv1d.yaml,2
2002,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.compat.v1.nn.conv1d.yaml,2
2003,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
2004,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
2005,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,2
2006,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d.yaml,2
2007,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A bool vector of length `N` with `M` true values.,tf.sparse.retain.yaml,2
2008,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","int, maximum length of a line, includes indentation.",tf.compat.v1.flags.text_wrap.yaml,2
2009,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
2010,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
2011,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d_transpose.yaml,2
2012,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
2013,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
2014,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
2015,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.nn.conv3d.yaml,2
2016,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `floats` that has length >= 4.,tf.nn.fractional_avg_pool.yaml,2
2017,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
2018,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
2019,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",The string for which to compute the length.,tf.compat.v1.strings.length.yaml,2
2020,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",The unit that is counted to compute string length.,tf.compat.v1.strings.length.yaml,2
2021,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,2
2022,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.conv_transpose.yaml,2
2023,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
2024,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
2025,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",Boolean that enables allowing scalars and 1 length vector broadcasting.,tf.make_tensor_proto.yaml,2
2026,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
2027,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
2028,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
2029,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
2030,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
2031,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
2032,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d.yaml,2
2033,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d.yaml,2
2034,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d.yaml,2
2035,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d.yaml,2
2036,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
2037,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
2038,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,2
2039,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
2040,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
2041,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","    To pad sequences with variable length strings, you can use `object`.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
2042,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","Int, maximum length of all sequences.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
2043,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","`list<int>`, upper length boundaries of the buckets.",tf.data.experimental.bucket_by_sequence_length.yaml,2
2044,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,2
2045,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","bool, if `False`, will pad dimensions with unknown size to maximum length in batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
2046,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
2047,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
2048,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.nn.conv3d_transpose.yaml,2
2049,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.conv3d_transpose.yaml,2
2050,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
2051,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
2052,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
2053,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
2054,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
2055,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.compat.v1.nn.conv3d_transpose.yaml,2
2056,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,2
2057,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
2058,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
2059,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,2
2060,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
2061,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2062,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2063,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2064,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2065,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
2066,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
2067,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
2068,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
2069,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
2070,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
2071,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d_transpose.yaml,2
2072,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d_transpose.yaml,2
2073,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
2074,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
2075,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
2076,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
2077,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
2078,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
2079,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,2
2080,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
2081,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.fractional_max_pool.yaml,2
2082,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
2083,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
2084,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
2085,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
2086,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
2087,32,0.02215884159719175,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
2088,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
2089,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
2090,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,2
2091,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
2092,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
2093,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
2094,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
2095,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
2096,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
2097,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.tuple.yaml,2
2098,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects or a single `Tensor`.,tf.concat.yaml,2
2099,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
2100,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of `Tensor` or `SparseTensor`.,tf.sparse.cross.yaml,2
2101,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
2102,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
2103,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` representing the coefficients of the polynomial.,tf.math.polyval.yaml,2
2104,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or tuple of `Tensor`s describing left-hand sides.,tf.linalg.tridiagonal_solve.yaml,2
2105,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of `Tensor` or `SparseTensor`.,tf.sparse.cross_hashed.yaml,2
2106,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `tf.Tensor` or `tf.RaggedTensor`.,tf.ragged.stack.yaml,2
2107,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
2108,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.compat.v1.while_loop.yaml,2
2109,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
2110,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
2111,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,2
2112,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Iterable of scalar `Tensor` objects.,tf.compat.v1.assert_rank_in.yaml,2
2113,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,2
2114,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2115,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2116,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
2117,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
2118,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 2 `Tensor` objects with the same type.,tf.quantization.quantized_concat.yaml,2
2119,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
2120,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
2121,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
2122,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
2123,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","a list of tuples `(tensor, value)`.`value` should be a Numpy array.",tf.keras.backend.batch_set_value.yaml,2
2124,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (exactly 2).,tf.keras.layers.subtract2.yaml,2
2125,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
2126,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
2127,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.debugging.assert_shapes.yaml,2
2128,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
2129,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
2130,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
2131,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
2132,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
2133,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,2
2134,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
2135,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `indices` of `Tensor` objects with the same type.,tf.dynamic_stitch.yaml,2
2136,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
2137,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
2138,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
2139,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.clip_by_global_norm.yaml,2
2140,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",`Iterable` of scalar `Tensor` objects.,tf.debugging.assert_rank_in.yaml,2
2141,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.compat.v1.debugging.assert_shapes.yaml,2
2142,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.compat.v1.py_func.yaml,2
2143,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
2144,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.linalg.global_norm.yaml,2
2145,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
2146,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,2
2147,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.identity_n.yaml,2
2148,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
2149,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.gradients.yaml,2
2150,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors not to differentiate through.,tf.gradients.yaml,2
2151,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.gradients.yaml,2
2152,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.gradients.yaml,2
2153,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
2154,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", Note that`emit_output` should be a `Tensor` or (possibly nested) tuple of tensors which is aggregated in the `emit_ta` inside the `while_loop`.,tf.compat.v1.nn.raw_rnn.yaml,2
2155,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
2156,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,2
2157,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", It should be a (possibly nested) tuple structure of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
2158,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
2159,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.compat.v1.gradients.yaml,2
2160,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors not to differentiate through.,tf.compat.v1.gradients.yaml,2
2161,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.gradients.yaml,2
2162,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.compat.v1.gradients.yaml,2
2163,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
2164,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
2165,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2166,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
2167,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
2168,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.hessians.yaml,2
2169,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.compat.v1.hessians.yaml,2
2170,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
2171,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of tensors.,tf.keras.backend.stack.yaml,2
2172,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
2173,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.compat.v1.decode_csv.yaml,2
2174,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
2175,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,2
2176,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or tuple of `Tensor`s describing left-hand sides.,tf.linalg.tridiagonal_matmul.yaml,2
2177,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
2178,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
2179,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2180,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2181,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2182,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2183,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2184,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2185,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
2186,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor`.,tf.estimator.export.build_raw_serving_input_receiver_fn.yaml,2
2187,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
2188,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,2
2189,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Tensor or list of tensors to consider constant with respect to any other variable.,tf.keras.backend.stop_gradient.yaml,2
2190,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
2191,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,2
2192,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
2193,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
2194,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.compat.v1.tuple.yaml,2
2195,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
2196,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.py_function.yaml,2
2197,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of placeholder tensors.,tf.keras.backend.function.yaml,2
2198,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of output tensors.,tf.keras.backend.function.yaml,2
2199,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
2200,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
2201,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,2
2202,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
2203,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
2204,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
2205,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
2206,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
2207,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.while_loop.yaml,2
2208,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,2
2209,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
2210,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `cell.state_size` is a tuple, this should be a tuple of tensors having shapes `[batch_size, s] for s in cell.state_size`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2211,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2212,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2213,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",This may also be a (possibly nested) tuple of Tensors satisfying this property.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2214,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
2215,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",    states; List of tensors.,tf.keras.backend.rnn.yaml,2
2216,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","    new_states; List of tensors, same length and shapes         as 'states'.",tf.keras.backend.rnn.yaml,2
2217,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
2218,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,2
2219,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",list of tensors to concatenate.,tf.keras.backend.concatenate.yaml,2
2220,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
2221,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of string tensors.,tf.strings.join.yaml,2
2222,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
2223,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
2224,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,2
2225,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
2226,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
2227,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
2228,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
2229,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
2230,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.io.encode_proto.yaml,2
2231,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
2232,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `tf.Tensor` objects.,tf.numpy_function.yaml,2
2233,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
2234,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.io.decode_csv.yaml,2
2235,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
2236,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
2237,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
2238,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,2
2239,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
2240,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor` objects, or a single Tensor.",tf.strings.format.yaml,2
2241,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
2242,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",tf.strings.format.yaml,2
2243,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
2244,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
2245,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
2246,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,2
2247,55,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` object with the same type.,tf.shape_n.yaml,2
2248,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
2249,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
2250,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,2
2251,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.image.random_brightness.yaml,2
2252,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Python integer, number of times to repeat.",tf.keras.backend.repeat_elements.yaml,2
2253,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,2
2254,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
2255,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.shuffle.yaml,2
2256,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
2257,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
2258,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,2
2259,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2260,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2261,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
2262,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",(Optional.) Python integer seed for the resampler.,tf.data.experimental.rejection_resample.yaml,2
2263,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.sparse.split.yaml,2
2264,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Values must be Python strings.,tf.strings.ngrams.yaml,2
2265,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.keras.initializers.he_normal.yaml,2
2266,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python integer, indicating the dimension along which to stack.",tf.ragged.stack.yaml,2
2267,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.categorical.yaml,2
2268,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,2
2269,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
2270,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python float.,tf.signal.linear_to_mel_weight_matrix.yaml,2
2271,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python int.,tf.signal.linear_to_mel_weight_matrix.yaml,2
2272,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python float.,tf.signal.linear_to_mel_weight_matrix.yaml,2
2273,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_bool.yaml,2
2274,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
2275,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
2276,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
2277,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
2278,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
2279,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,2
2280,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.keras.initializers.lecun_uniform.yaml,2
2281,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.sparse_split.yaml,2
2282,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
2283,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
2284,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi.yaml,2
2285,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.keras.initializers.he_normal.yaml,2
2286,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
2287,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.keras.initializers.he_uniform.yaml,2
2288,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
2289,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_solve.yaml,2
2290,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_solve.yaml,2
2291,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.image.random_flip_up_down.yaml,2
2292,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,2
2293,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
2294,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
2295,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
2296,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
2297,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
2298,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
2299,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python callable or class to convert.,tf.compat.v1.autograph.to_graph.yaml,2
2300,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python callable or class to convert.,tf.autograph.to_code.yaml,2
2301,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python callable or class to convert.,tf.autograph.to_graph.yaml,2
2302,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
2303,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `str` prefixed to ops created by this function.,tf.linalg.pinv.yaml,2
2304,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.nn.dropout.yaml,2
2305,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.uniform.yaml,2
2306,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,2
2307,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.keras.initializers.lecun_normal.yaml,2
2308,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Either a Python bool, or a callable that accepts the parameter`node_def` and returns a python bool.",tf.xla.experimental.jit_scope.yaml,2
2309,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
2310,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python boolean.,tf.keras.backend.manual_variable_initialization.yaml,2
2311,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.truncated_normal.yaml,2
2312,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,2
2313,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_reconstruct.yaml,2
2314,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_reconstruct.yaml,2
2315,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
2316,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.normal.yaml,2
2317,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,2
2318,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2319,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2320,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2321,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2322,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2323,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2324,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python callable or class.,tf.compat.v1.autograph.to_code.yaml,2
2325,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.image.random_flip_left_right.yaml,2
2326,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2327,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2328,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2329,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.keras.initializers.lecun_normal.yaml,2
2330,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
2331,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `str` prefixed to ops created by this function.,tf.linalg.matrix_rank.yaml,2
2332,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.keras.initializers.lecun_uniform.yaml,2
2333,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
2334,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
2335,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.poisson.yaml,2
2336,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,2
2337,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.random_poisson.yaml,2
2338,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,2
2339,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python integer.,tf.keras.backend.pow.yaml,2
2340,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE.yaml,2
2341,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_flag.yaml,2
2342,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Python integer, number of times to repeat.",tf.keras.backend.repeat.yaml,2
2343,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.compat.v1.keras.initializers.he_uniform.yaml,2
2344,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.random.gamma.yaml,2
2345,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,2
2346,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
2347,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
2348,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Example: `python from keras import backend as K K.floatx() >>> 'float32' K.set_floatx('float16') K.floatx() >>> 'float16'`,tf.keras.backend.set_floatx.yaml,2
2349,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
2350,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
2351,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
2352,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
2353,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
2354,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.image.random_contrast.yaml,2
2355,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,2
2356,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",A Python integer.,tf.nn.dropout.yaml,2
2357,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,2
2358,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
2359,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
2360,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_matrix_inverse.yaml,2
2361,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_matrix_inverse.yaml,2
2362,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
2363,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})","(optional) Python int, the rank of the `SparseTensor` objects.",tf.io.deserialize_many_sparse.yaml,2
2364,23,0.01744186046511628,117,"frozenset({'python', 'SOME_DTYPE'})",Python integer.,tf.image.random_crop.yaml,2
2365,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
2366,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
2367,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,3
2368,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
2369,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,3
2370,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2371,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,3
2372,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2373,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
2374,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
2375,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
2376,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,3
2377,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,3
2378,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2379,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2380,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,3
2381,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,3
2382,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,3
2383,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,3
2384,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
2385,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
2386,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
2387,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,3
2388,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2389,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2390,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,3
2391,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2392,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
2393,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
2394,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
2395,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
2396,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
2397,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
2398,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.image.crop_and_resize.yaml,3
2399,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,3
2400,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
2401,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.compat.v1.image.crop_and_resize.yaml,3
2402,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,3
2403,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,3
2404,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
2405,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,3
2406,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
2407,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2408,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2409,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
2410,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2411,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2412,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
2413,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,3
2414,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
2415,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,3
2416,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,3
2417,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Tensor with shape [batch_size, h, w, d].",tf.image.image_gradients.yaml,3
2418,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
2419,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,3
2420,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
2421,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,3
2422,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
2423,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
2424,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,3
2425,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,3
2426,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,3
2427,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
2428,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
2429,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
2430,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,3
2431,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,3
2432,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,3
2433,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,3
2434,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,3
2435,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,3
2436,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,3
2437,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,3
2438,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,3
2439,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,3
2440,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,3
2441,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
2442,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,3
2443,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`Tensor` of shape `[batch_size, d1, ...",tf.compat.v1.losses.compute_weighted_loss.yaml,3
2444,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,3
2445,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
2446,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
2447,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,3
2448,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2449,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2450,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,3
2451,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,3
2452,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,3
2453,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,3
2454,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
2455,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
2456,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
2457,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
2458,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
2459,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
2460,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
2461,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,3
2462,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
2463,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
2464,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
2465,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
2466,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
2467,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,3
2468,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,3
2469,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
2470,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
2471,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
2472,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2473,48,0.01744186046511628,109,"frozenset({'d', 'tensor', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2474,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,3
2475,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
2476,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
2477,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
2478,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
2479,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
2480,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,3
2481,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",0-D `int32` `Tensor`.,tf.concat.yaml,3
2482,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2483,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
2484,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
2485,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
2486,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,3
2487,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D scalar `Tensor`.,tf.math.scalar_mul.yaml,3
2488,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,3
2489,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,3
2490,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D `int32` `Tensor`.,tf.sparse.split.yaml,3
2491,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An 1-D `int` Tensor.,tf.broadcast_to.yaml,3
2492,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A sorted 1-D integer Tensor.,tf.ragged.row_splits_to_segment_ids.yaml,3
2493,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2494,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2495,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,3
2496,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,3
2497,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
2498,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
2499,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,3
2500,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
2501,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2502,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2503,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,3
2504,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,3
2505,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D `int32` `Tensor`.,tf.compat.v1.sparse_split.yaml,3
2506,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An 1-D `int` Tensor.,tf.unravel_index.yaml,3
2507,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,3
2508,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2509,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,3
2510,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,3
2511,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
2512,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",an integer or 1-D tensor.,tf.random.experimental.create_rng_state.yaml,3
2513,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
2514,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
2515,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
2516,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
2517,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
2518,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,3
2519,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
2520,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
2521,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
2522,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2523,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2524,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,3
2525,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",3-D `float` `Tensor`.,tf.compat.v1.nn.ctc_loss.yaml,3
2526,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_global_norm.yaml,3
2527,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,3
2528,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",0-D `double` `Tensor`.,tf.linalg.lstsq.yaml,3
2529,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
2530,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2531,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2532,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
2533,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
2534,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
2535,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_norm.yaml,3
2536,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
2537,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,3
2538,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
2539,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
2540,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,3
2541,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
2542,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
2543,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
2544,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,3
2545,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An 1-D `int` Tensor.,tf.repeat.yaml,3
2546,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,3
2547,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`1-D` string `Tensor`, the strings to split.",tf.compat.v1.string_split.yaml,3
2548,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,3
2549,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,3
2550,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
2551,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,3
2552,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
2553,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
2554,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
2555,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,3
2556,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor.,tf.ragged.segment_ids_to_row_splits.yaml,3
2557,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,3
2558,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,3
2559,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,3
2560,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,3
2561,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
2562,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D scalar `Tensor`.,tf.compat.v1.train.piecewise_constant.yaml,3
2563,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
2564,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
2565,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`0-D` string `Tensor`, the delimiter character.",tf.compat.v1.strings.split.yaml,3
2566,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,3
2567,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,3
2568,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2569,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2570,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,3
2571,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,3
2572,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,3
2573,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,3
2574,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
2575,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
2576,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,3
2577,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D scalar `Tensor`.,tf.compat.v1.scalar_mul.yaml,3
2578,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
2579,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
2580,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
2581,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,3
2582,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,3
2583,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",0-D `int32` `Tensor`.,tf.math.top_k.yaml,3
2584,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,3
2585,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
2586,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
2587,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
2588,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
2589,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
2590,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,3
2591,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
2592,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
2593,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
2594,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`0-D` string `Tensor`, the delimiter string.",tf.strings.split.yaml,3
2595,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2596,47,0.015796401930671347,123,"frozenset({'d', 'tensor', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2597,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
2598,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
2599,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
2600,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,3
2601,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,3
2602,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,3
2603,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",int32 Tensor of known shape [num_spatial_dims].,tf.nn.with_space_to_batch.yaml,3
2604,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,3
2605,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
2606,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
2607,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
2608,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,3
2609,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
2610,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,3
2611,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2612,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
2613,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,3
2614,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","nD integer tensor of shape`(batch_size, dim1, dim2, ...",tf.keras.backend.one_hot.yaml,3
2615,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
2616,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
2617,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2618,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
2619,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2620,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2621,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
2622,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2623,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
2624,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,3
2625,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
2626,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
2627,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
2628,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
2629,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
2630,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,3
2631,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,3
2632,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
2633,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
2634,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
2635,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
2636,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
2637,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2638,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
2639,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
2640,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2641,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
2642,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
2643,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
2644,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
2645,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
2646,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
2647,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
2648,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
2649,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,3
2650,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,3
2651,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
2652,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
2653,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
2654,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,3
2655,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
2656,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
2657,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
2658,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,3
2659,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,3
2660,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,3
2661,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,3
2662,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,3
2663,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
2664,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
2665,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
2666,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,3
2667,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,3
2668,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2669,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
2670,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
2671,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,3
2672,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
2673,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
2674,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
2675,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
2676,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Tensor of int32 with shape `[batch_shape, len(field_names)]`.",tf.io.encode_proto.yaml,3
2677,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,3
2678,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,3
2679,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
2680,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,3
2681,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,3
2682,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
2683,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,3
2684,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
2685,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
2686,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
2687,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
2688,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
2689,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
2690,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,3
2691,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,3
2692,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,3
2693,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
2694,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,3
2695,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",A string `Tensor` of any shape.,tf.strings.strip.yaml,3
2696,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
2697,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
2698,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2699,51,0.014809126810004387,103,"frozenset({'tensor', 'shape', 'SOME_DTYPE'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
2700,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
2701,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
2702,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
2703,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
2704,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv2d_transpose.yaml,2
2705,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
2706,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
2707,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
2708,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.delete_session_tensor.yaml,2
2709,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv2d_transpose.yaml,2
2710,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
2711,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reorder.yaml,2
2712,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
2713,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
2714,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.boolean_mask.yaml,2
2715,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.sparse_placeholder.yaml,2
2716,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.row_splits_to_segment_ids.yaml,2
2717,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
2718,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
2719,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(Optional.) The required `DType` of the returned `Tensor` or`IndexedSlices`.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
2720,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
2721,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack.yaml,2
2722,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.while_loop.yaml,2
2723,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional 0-D `Tensor` (defaults to `0`).,tf.compat.v1.sparse_add.yaml,2
2724,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_many_sparse.yaml,2
2725,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.keras.backend.constant.yaml,2
2726,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.keras.backend.constant.yaml,2
2727,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_tensor.yaml,2
2728,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
2729,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
2730,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `Tensor` that is broadcastable to loss.,tf.compat.v1.losses.softmax_cross_entropy.yaml,2
2731,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
2732,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2733,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
2734,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
2735,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.sparse_concat.yaml,2
2736,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
2737,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
2738,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
2739,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
2740,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_many_sparse.yaml,2
2741,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
2742,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
2743,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
2744,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
2745,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
2746,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
2747,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.to_indicator.yaml,2
2748,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
2749,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv3d_transpose.yaml,2
2750,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
2751,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.convolution.yaml,2
2752,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
2753,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
2754,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_handle.yaml,2
2755,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
2756,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
2757,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
2758,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
2759,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
2760,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
2761,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
2762,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d_transpose.yaml,2
2763,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
2764,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.sparse.to_dense.yaml,2
2765,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_sparse.yaml,2
2766,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.compat.v1.constant.yaml,2
2767,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.compat.v1.constant.yaml,2
2768,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
2769,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
2770,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.sparse_dense_matmul.yaml,2
2771,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
2772,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.segment_ids_to_row_splits.yaml,2
2773,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
2774,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
2775,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
2776,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,2
2777,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldr.yaml,2
2778,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldr.yaml,2
2779,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
2780,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
2781,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
2782,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
2783,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
2784,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional DType of an element in the resulting `Tensor`.,tf.ones.yaml,2
2785,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
2786,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
2787,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv1d_transpose.yaml,2
2788,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.cond.yaml,2
2789,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
2790,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
2791,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.scan.yaml,2
2792,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) True scans the tensor last to first (instead of first to last).,tf.scan.yaml,2
2793,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
2794,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.while_loop.yaml,2
2795,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
2796,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,2
2797,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.constant.yaml,2
2798,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
2799,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d.yaml,2
2800,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
2801,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
2802,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.transpose.yaml,2
2803,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.fill_empty_rows.yaml,2
2804,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.convolution.yaml,2
2805,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
2806,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_sparse.yaml,2
2807,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,2
2808,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.cond.yaml,2
2809,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.constant.yaml,2
2810,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.constant.yaml,2
2811,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
2812,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional existing tensor to wrap into the `Input` layer.,tf.keras.Input.yaml,2
2813,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.placeholder.yaml,2
2814,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
2815,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
2816,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
2817,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The name of the output `Tensor` (optional).,tf.compat.v1.expand_dims.yaml,2
2818,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldl.yaml,2
2819,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldl.yaml,2
2820,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
2821,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
2822,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack_dynamic_partitions.yaml,2
2823,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
2824,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
2825,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
2826,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
2827,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reshape.yaml,2
2828,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
2829,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.map_fn.yaml,2
2830,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
2831,58,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.io.deserialize_many_sparse.yaml,2
2832,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
2833,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
2834,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for population mean used for inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
2835,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for bias.,tf.compat.v1.nn.fused_batch_norm.yaml,2
2836,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for scaling.,tf.compat.v1.nn.fused_batch_norm.yaml,2
2837,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for population variance       used for inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
2838,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
2839,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
2840,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
2841,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
2842,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
2843,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
2844,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
2845,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
2846,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
2847,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
2848,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
2849,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
2850,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
2851,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
2852,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
2853,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
2854,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
2855,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_mul.yaml,2
2856,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,2
2857,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
2858,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
2859,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
2860,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
2861,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
2862,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
2863,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
2864,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
2865,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
2866,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,2
2867,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
2868,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
2869,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
2870,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
2871,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
2872,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_div.yaml,2
2873,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
2874,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The first and last `summarize` elements within each dimension are recursively printed per Tensor.,tf.print.yaml,2
2875,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If None, then the first 3 and last 3 elements of each dimension are printed for each tensor.",tf.print.yaml,2
2876,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
2877,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
2878,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
2879,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
2880,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
2881,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The 0-th dimension of each Tensor must have size divisible by `num_shards`.,tf.compat.v1.tpu.batch_parallel.yaml,2
2882,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_add.yaml,2
2883,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
2884,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
2885,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
2886,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
2887,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,2
2888,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
2889,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,2
2890,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
2891,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
2892,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
2893,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
2894,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
2895,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
2896,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
2897,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
2898,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
2899,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
2900,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
2901,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,2
2902,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
2903,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
2904,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
2905,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
2906,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2907,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_min.yaml,2
2908,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
2909,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
2910,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
2911,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,2
2912,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
2913,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
2914,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D `Tensor` with size matching the channel dimension of `value`.,tf.nn.bias_add.yaml,2
2915,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,2
2916,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
2917,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
2918,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
2919,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
2920,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
2921,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,2
2922,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
2923,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,2
2924,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
2925,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
2926,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
2927,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_sub.yaml,2
2928,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",An integer can be given which means a single dimension `Tensor` with given width.,tf.feature_column.numeric_column.yaml,2
2929,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
2930,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
2931,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
2932,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_max.yaml,2
2933,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
2934,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
2935,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
2936,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,2
2937,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
2938,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
2939,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
2940,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
2941,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
2942,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
2943,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,2
2944,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
2945,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
2946,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
2947,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
2948,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","scalar integer tensor, size of last dimension of returned tensor.",tf.sequence_mask.yaml,2
2949,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
2950,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
2951,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
2952,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively).",tf.strings.format.yaml,2
2953,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,2
2954,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
2955,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
2956,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
2957,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
2958,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
2959,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
2960,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
2961,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_update.yaml,2
2962,44,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,2
2963,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,2
2964,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
2965,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
2966,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
2967,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph.,tf.graph_util.import_graph_def.yaml,2
2968,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `false_positives`should be added to.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
2969,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
2970,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
2971,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
2972,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
2973,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
2974,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
2975,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `sensitivity`should be added to.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
2976,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
2977,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean`should be added to.,tf.compat.v1.metrics.mean.yaml,2
2978,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean.yaml,2
2979,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.scalar.yaml,2
2980,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.text.yaml,2
2981,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `recall` should be added to.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
2982,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
2983,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_absolute_error` should be added to.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
2984,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
2985,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.histogram.yaml,2
2986,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2987,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2988,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2989,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
2990,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
2991,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
2992,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`root_mean_squared_error` should be added to.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
2993,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
2994,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
2995,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
2996,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `accuracy` should be added to.,tf.compat.v1.metrics.accuracy.yaml,2
2997,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.accuracy.yaml,2
2998,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
2999,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.image2.yaml,2
3000,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `true_negatives`should be added to.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3001,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3002,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,2
3003,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
3004,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
3005,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3006,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
3007,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean_per_class_accuracy' should be added to.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3008,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3009,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_k.yaml,2
3010,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.precision_at_k.yaml,2
3011,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
3012,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
3013,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
3014,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
3015,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.tensor_summary.yaml,2
3016,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `auc` should be added to.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3017,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3018,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean_iou`should be added to.,tf.compat.v1.metrics.mean_iou.yaml,2
3019,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_iou.yaml,2
3020,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `recall` should be added to.,tf.compat.v1.metrics.recall.yaml,2
3021,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall.yaml,2
3022,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of allowed batch sizes.,tf.nondifferentiable_batch_function.yaml,2
3023,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
3024,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.squeeze.yaml,2
3025,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `true_positives`should be added to.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3026,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3027,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.compat.v1.decode_csv.yaml,2
3028,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
3029,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
3030,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_relative_error` should be added to.,tf.compat.v1.metrics.mean_relative_error.yaml,2
3031,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_relative_error.yaml,2
3032,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
3033,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_squared_error` should be added to.,tf.compat.v1.metrics.mean_squared_error.yaml,2
3034,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_squared_error.yaml,2
3035,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
3036,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
3037,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3038,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`.,tf.config.set_logical_device_configuration.yaml,2
3039,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
3040,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
3041,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
3042,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
3043,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3044,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
3045,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `specificity`should be added to.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3046,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3047,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
3048,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean`should be added to.,tf.compat.v1.metrics.mean_tensor.yaml,2
3049,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean_tensor.yaml,2
3050,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames.,tf.train.latest_checkpoint.yaml,2
3051,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_k.yaml,2
3052,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.recall_at_k.yaml,2
3053,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
3054,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
3055,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of `SessionRunHook` objects.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
3056,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
3057,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) If supplied, the resulting list is filtered to include only items whose `name` attribute matches using `re.match`.",tf.compat.v1.get_collection.yaml,2
3058,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `false_negatives`should be added to.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3059,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3060,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3061,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
3062,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
3063,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.io.decode_csv.yaml,2
3064,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `precision` should be added to.,tf.compat.v1.metrics.precision.yaml,2
3065,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision.yaml,2
3066,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.merge.yaml,2
3067,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
3068,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.audio2.yaml,2
3069,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3070,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3071,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
3072,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
3073,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
3074,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
3075,54,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
3076,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,5
3077,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,5
3078,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,5
3079,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,5
3080,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,5
3081,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,5
3082,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,5
3083,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,5
3084,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,5
3085,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,5
3086,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,5
3087,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,5
3088,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,5
3089,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,5
3090,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,5
3091,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,5
3092,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,5
3093,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,5
3094,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,5
3095,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,5
3096,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,5
3097,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,5
3098,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,5
3099,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,5
3100,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,5
3101,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,5
3102,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,5
3103,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,5
3104,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,5
3105,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,5
3106,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,5
3107,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,5
3108,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,5
3109,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,5
3110,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
3111,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,5
3112,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,5
3113,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,5
3114,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,5
3115,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,5
3116,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,5
3117,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,5
3118,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,5
3119,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,5
3120,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,5
3121,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,5
3122,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,5
3123,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,5
3124,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,5
3125,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,5
3126,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,5
3127,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,5
3128,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,5
3129,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,5
3130,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,5
3131,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,5
3132,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,5
3133,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,5
3134,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,5
3135,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,5
3136,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,5
3137,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,5
3138,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,5
3139,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,5
3140,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,5
3141,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,5
3142,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,5
3143,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,5
3144,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,5
3145,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,5
3146,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,5
3147,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,5
3148,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,5
3149,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,5
3150,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,5
3151,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,5
3152,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,5
3153,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,5
3154,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,5
3155,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,5
3156,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,5
3157,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,5
3158,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,5
3159,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,5
3160,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,5
3161,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,5
3162,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,5
3163,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,5
3164,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,5
3165,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,5
3166,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,5
3167,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,5
3168,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,5
3169,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,5
3170,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,5
3171,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,5
3172,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
3173,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,5
3174,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,5
3175,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,5
3176,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,5
3177,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,5
3178,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,5
3179,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,5
3180,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,5
3181,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,5
3182,11,0.011956998683633173,107,"frozenset({'must', 'bfloat', 'following', 'one', 'SOME_DTYPE'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,5
3183,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
3184,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3185,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3186,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3187,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_max.yaml,2
3188,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
3189,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
3190,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
3191,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose dtype is compatible with `x`.,tf.math.multiply_no_nan.yaml,2
3192,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
3193,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
3194,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3195,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3196,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3197,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
3198,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3199,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3200,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3201,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
3202,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
3203,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
3204,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_min.yaml,2
3205,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
3206,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
3207,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
3208,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,2
3209,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
3210,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,2
3211,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,2
3212,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
3213,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3214,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3215,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3216,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
3217,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
3218,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3219,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3220,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_k.yaml,2
3221,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose dtype is compatible with `x`.,tf.math.divide_no_nan.yaml,2
3222,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
3223,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,2
3224,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
3225,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3226,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3227,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3228,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,2
3229,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
3230,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
3231,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
3232,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
3233,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
3234,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,2
3235,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An object whose type has a registered `Tensor` conversion function.,tf.convert_to_tensor.yaml,2
3236,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3237,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3238,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3239,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3240,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,2
3241,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,2
3242,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
3243,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","the inputs to contract (each one a `Tensor`), whose shapes should be consistent with `equation`.",tf.einsum.yaml,2
3244,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An object whose type has a registered `Tensor` conversion function.,tf.compat.v1.convert_to_tensor.yaml,2
3245,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
3246,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
3247,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
3248,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
3249,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,2
3250,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
3251,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
3252,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_prod.yaml,2
3253,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,2
3254,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3255,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3256,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3257,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
3258,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_k.yaml,2
3259,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
3260,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",`Tensor` whose basetype is integer and is not quantized.,tf.compat.v1.assert_integer.yaml,2
3261,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3262,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3263,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A tensor whose shape is a prefix of data.shape.,tf.strings.unsorted_segment_join.yaml,2
3264,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,2
3265,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3266,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3267,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3268,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
3269,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
3270,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
3271,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
3272,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
3273,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
3274,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sum.yaml,2
3275,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A `SparseTensor`, `SparseTensorValue`, or an object whose type has a registered `Tensor` conversion function.",tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
3276,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
3277,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3278,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,2
3279,10,0.01184730144800351,97,"frozenset({'tensor', 'whose'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
3280,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.nn.conv1d.yaml,2
3281,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d_transpose.yaml,2
3282,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", `filter`'s `in_channels` dimension must match that of `input`.,tf.nn.conv2d_transpose.yaml,2
3283,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv2d_transpose.yaml,2
3284,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.compat.v1.nn.conv1d.yaml,2
3285,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.MaxPool2D.yaml,2
3286,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
3287,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d.yaml,2
3288,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv3d.yaml,2
3289,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
3290,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
3291,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
3292,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
3293,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
3294,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
3295,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.conv3d.yaml,2
3296,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.nn.conv3d.yaml,2
3297,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
3298,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
3299,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
3300,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv_transpose.yaml,2
3301,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv_transpose.yaml,2
3302,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
3303,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
3304,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
3305,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
3306,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
3307,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
3308,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
3309,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
3310,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d.yaml,2
3311,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv2d.yaml,2
3312,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
3313,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d.yaml,2
3314,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv2d.yaml,2
3315,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3316,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3317,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
3318,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
3319,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
3320,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
3321,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
3322,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3323,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3324,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
3325,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
3326,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
3327,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv3d_transpose.yaml,2
3328,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv3d_transpose.yaml,2
3329,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
3330,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
3331,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
3332,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
3333,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
3334,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_transpose.yaml,2
3335,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
3336,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,2
3337,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
3338,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The strides for the depthwise convolution for each dimension of `input`.,tf.compat.v1.nn.separable_conv2d.yaml,2
3339,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
3340,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
3341,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The strides for the depthwise convolution for each dimension of `input`.,tf.nn.separable_conv2d.yaml,2
3342,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
3343,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.AveragePooling2D.yaml,2
3344,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3345,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",filter's input_depth dimension must match input's depth dimensions.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3346,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3347,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.nn.conv1d_transpose.yaml,2
3348,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the sliding window for each dimension of `input`.,tf.extract_volume_patches.yaml,2
3349,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Integer specifying the dimension index at which to expand the shape of `input`.,tf.expand_dims.yaml,2
3350,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3351,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3352,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
3353,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
3354,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
3355,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
3356,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
3357,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,2
3358,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
3359,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","In this case, input to`cell` at each time-step will replicate the structure of these tuples, except for the time dimension (from which the time is taken).",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3360,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
3361,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
3362,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
3363,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
3364,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
3365,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3366,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3367,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
3368,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.batch_to_space.yaml,2
3369,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3370,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3371,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
3372,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,2
3373,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
3374,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
3375,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Specifies the dimension index at which to expand the shape of `input`.,tf.compat.v1.expand_dims.yaml,2
3376,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
3377,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
3378,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
3379,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.depthwise_conv2d.yaml,2
3380,43,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Specifies the dimension index at which to expand the shape of `input`.,tf.sparse.expand_dims.yaml,2
3381,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
3382,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3383,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,2
3384,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
3385,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
3386,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_add.yaml,2
3387,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,2
3388,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
3389,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
3390,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
3391,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,2
3392,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3393,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3394,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
3395,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Each input tensor has a corresponding shard axes, given by `input_shard_axes`, which must have size divisible by `num_shards`.",tf.compat.v1.tpu.shard.yaml,2
3396,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3397,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3398,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
3399,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_update.yaml,2
3400,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
3401,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
3402,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
3403,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,2
3404,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
3405,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,2
3406,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
3407,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
3408,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})", The provided type must match the type of the serialized tensor and no implicit conversion will take place.,tf.io.parse_tensor.yaml,2
3409,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3410,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
3411,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
3412,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must be same type as `tensor`.,tf.compat.v1.pad.yaml,2
3413,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
3414,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
3415,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
3416,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Note that the batch size of the input tensor must be divisible by`block_size * block_size`.,tf.compat.v1.batch_to_space.yaml,2
3417,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3418,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The 0-th dimension of each Tensor must have size divisible by `num_shards`.,tf.compat.v1.tpu.batch_parallel.yaml,2
3419,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
3420,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
3421,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
3422,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",It must take two arguments and return a pair of nested structures of tensors.,tf.data.experimental.scan.yaml,2
3423,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
3424,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,2
3425,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3426,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3427,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
3428,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,2
3429,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
3430,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
3431,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
3432,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
3433,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
3434,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3435,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
3436,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_local_variable.yaml,2
3437,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_local_variable.yaml,2
3438,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
3439,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
3440,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
3441,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
3442,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
3443,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
3444,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
3445,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
3446,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_variable.yaml,2
3447,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_variable.yaml,2
3448,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3449,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3450,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
3451,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must be same type as `tensor`.,tf.pad.yaml,2
3452,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,2
3453,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3454,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3455,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3456,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3457,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If false, these `Tensors` must be shaped `[batch_size, max_time, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3458,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
3459,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
3460,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," The tensors must all have the same shape, or be scalars.",tf.strings.join.yaml,2
3461,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
3462,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3463,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
3464,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
3465,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_sub.yaml,2
3466,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
3467,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3468,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
3469,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
3470,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
3471,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
3472,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
3473,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
3474,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
3475,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Must be in the range`[-rank(tensor), rank(tensor))`.",tf.reverse.yaml,2
3476,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
3477,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
3478,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3479,57,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
