constraints:
  align_corners:
    default: None
    descp: 'Geometrically, we consider the pixels of the input and output as squares
      rather than points. If set to `True`, the input and output tensors are aligned
      by the center points of their corner pixels, preserving the values at the corner
      pixels. If set to `False`, the input and output tensors are aligned by the corner
      points of their corner pixels, and the interpolation uses edge value padding
      for out-of-boundary values, making this operation independent of input size
      when `scale_factor` is kept the same. This only has an effect when `mode` is
      `''bilinear''`. Default: `False`'
    doc_dtype: bool, optional
  input:
    descp: the input tensor
    doc_dtype: Tensor
  mode:
    default: nearest
    descp: 'algorithm used for upsampling: `''nearest''` | `''bilinear''`'
    doc_dtype: str
  scale_factor:
    default: None
    descp: multiplier for spatial size. Has to match input size if it is a tuple.
    doc_dtype: float or Tuple[float]
  size:
    default: None
    descp: output spatial size.
    doc_dtype: int or Tuple[int] or Tuple[int, int] or Tuple[int, int, int]
inputs:
  optional:
  - size
  - scale_factor
  - mode
  - align_corners
  required:
  - input
link: https://pytorch.org/docs/stable/quantization.html#torch.nn.quantized.functional.interpolate
package: torch
target: interpolate
title: torch.nn.quantized.functional.interpolate
version: 1.5.0
