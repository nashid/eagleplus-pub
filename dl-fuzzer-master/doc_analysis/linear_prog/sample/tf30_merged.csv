,API,Arg,Descp,Normalized_descp,dtype,shape,ndim,range,enum,structure
0,tf.random.fixed_unigram_candidate_sampler,vocab_file,DF:,,D_TYPE,,,,QSTR,
1,tf.io.encode_jpeg,format,DF:,,D_TYPE,,CONSTANT_NUM,,QSTR,
2,tf.strings.ngrams,separator,DF:,,D_TYPE,,CONSTANT_NUM,,,
3,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",50X potentially at the expense of RAM Also only PARAM QSTR is supported by implementation CONSTANT_NUM,,,,,,
4,tf.clip_by_value,clip_value_max,"A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`. The maximum value to clip by.",A CONSTANT_NUM D BSTR D_STRUCTURE with the same shape as QSTR,D_TYPE,,CONSTANT_NUM;0,,,D_STRUCTURE
5,tf.clip_by_value,clip_value_min,"A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`. The minimum value to clip by.",A CONSTANT_NUM D BSTR D_STRUCTURE with the same shape as QSTR,D_TYPE,,CONSTANT_NUM;0,,,D_STRUCTURE
6,tf.nn.conv1d,filters,A 3D `Tensor`.  Must have the same type as `input`.,A CONSTANT_NUM D D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
7,tf.range,limit,"A 0-D `Tensor` (scalar). Upper limit of sequence, exclusive. If None, defaults to the value of `start` while the first entry of the range defaults to 0.",A CONSTANT_NUM D D_STRUCTURE BSTR,,,CONSTANT_NUM,,,D_STRUCTURE
8,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",A CONSTANT_NUM D D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
9,tf.nn.conv1d_transpose,input,"A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",A CONSTANT_NUM D D_STRUCTURE of type D_TYPE and shape BSTR for QSTR data format or BSTR for QSTR data format,D_TYPE,BSTR,CONSTANT_NUM,,,D_STRUCTURE
10,tf.nn.conv2d_transpose,input,"A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",A CONSTANT_NUM D D_STRUCTURE of type D_TYPE and shape BSTR for QSTR data format or BSTR for QSTR data format,D_TYPE,BSTR,CONSTANT_NUM,,,D_STRUCTURE
11,tf.random.stateless_normal,mean,A 0-D Tensor or Python value of type `dtype`. The mean of the normal distribution.,A CONSTANT_NUM D D_STRUCTURE or Python value of type PARAM,PARAM,,CONSTANT_NUM,,,D_STRUCTURE
12,tf.random.stateless_truncated_normal,stddev,"A 0-D Tensor or Python value of type `dtype`. The standard deviation of the normal distribution, before truncation.",A CONSTANT_NUM D D_STRUCTURE or Python value of type PARAM,PARAM,,CONSTANT_NUM,,,D_STRUCTURE
13,tf.nn.conv_transpose,output_shape,A 1-D `Tensor` representing the output shape of the deconvolution op.,A CONSTANT_NUM D D_STRUCTURE representing the output shape of the deconvolution op,int,,CONSTANT_NUM,"[0,inf)",,D_STRUCTURE
14,tf.math.segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A 1-D tensor whose size is equal to the size of `data`'s first dimension.  Values should be sorted and can be repeated.",A CONSTANT_NUM D D_STRUCTURE whose size is equal to the size of PARAMs first dimension,,&PARAM,CONSTANT_NUM,,,D_STRUCTURE
15,tf.sparse.segment_sqrt_n,indices,A 1-D `Tensor` with indices into `data`. Has same rank as`segment_ids`.,A CONSTANT_NUM D D_STRUCTURE with indices into PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
16,tf.sparse.segment_mean,segment_ids,A 1-D `Tensor` with indices into the output `Tensor`. Values should be sorted and can be repeated.,A CONSTANT_NUM D D_STRUCTURE with PARAM into the output D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
17,tf.nn.atrous_conv2d,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",A CONSTANT_NUM D D_STRUCTURE with the same type as PARAM and shape BSTR,&PARAM,BSTR,CONSTANT_NUM,,,D_STRUCTURE
18,tf.nn.atrous_conv2d_transpose,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",A CONSTANT_NUM D D_STRUCTURE with the same type as PARAM and shape BSTR,&PARAM,BSTR,CONSTANT_NUM,,,D_STRUCTURE
19,tf.nn.conv1d_transpose,filters,"A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.  `filter`'s`in_channels` dimension must match that of `value`.",A CONSTANT_NUM D D_STRUCTURE with the same type as QSTR and shape BSTR,&QSTR,BSTR,CONSTANT_NUM,,,D_STRUCTURE
20,tf.image.resize,size,"A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The new size for the images.",A CONSTANT_NUM D D_TYPE D_STRUCTURE of CONSTANT_NUM elements new_height new_width,,[CONSTANT_NUM],CONSTANT_NUM,,,D_STRUCTURE
21,tf.image.non_max_suppression_overlaps,overlaps,"A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
22,tf.image.non_max_suppression_overlaps,scores,A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
23,tf.random.stateless_truncated_normal,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,A CONSTANT_NUM D D_TYPE D_STRUCTURE or Python D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
24,tf.nn.batch_norm_with_global_normalization,mean,"A 1D mean Tensor with size matching the last dimension of t. This is the first output from tf.nn.moments, or a saved moving average thereof.",A CONSTANT_NUM D mean D_STRUCTURE with size matching the last dimension of t This is the first output from tf nn moments or a saved moving average thereof,,,CONSTANT_NUM,,,D_STRUCTURE
25,tf.shape,input,A `Tensor` or `SparseTensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
26,tf.debugging.assert_integer,x,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
27,tf.guarantee_const,input,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
28,tf.dtypes.saturate_cast,value,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
29,tf.zeros_like,input,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
30,tf.expand_dims,input,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
31,tf.math.l2_normalize,x,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
32,tf.nn.fractional_avg_pool,value,"A `Tensor`. 4-D with shape `[batch, height, width, channels]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
33,tf.linalg.expm,input,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or`complex128` with shape `[..., M, M]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
34,tf.math.expm1,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
35,tf.math.acosh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
36,tf.math.tan,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
37,tf.math.squared_difference,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
38,tf.bitcast,input,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",A D_STRUCTURE,,,,,,D_STRUCTURE
39,tf.math.bessel_i1e,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
40,tf.math.is_nan,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
41,tf.math.digamma,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
42,tf.math.bessel_i0e,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
43,tf.math.rint,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
44,tf.debugging.check_numerics,tensor,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
45,tf.math.cumulative_logsumexp,x,"A `Tensor`. Must be one of the following types: `float16`, `float32`,`float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
46,tf.math.unsorted_segment_sum,data,"A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
47,tf.extract_volume_patches,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`. 5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
48,tf.math.cumprod,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",A D_STRUCTURE,,,,,,D_STRUCTURE
49,tf.math.igammac,a,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
50,tf.math.betainc,a,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
51,tf.linalg.solve,matrix,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
52,tf.math.softplus,features,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
53,tf.nn.selu,features,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
54,tf.image.hsv_to_rgb,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. HSV data to convert. Last dimension must be size 3.",A D_STRUCTURE,,,,,,D_STRUCTURE
55,tf.image.rgb_to_hsv,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. RGB data to convert. Last dimension must be size 3.",A D_STRUCTURE,,,,,,D_STRUCTURE
56,tf.math.xdivy,x,"A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
57,tf.math.xlogy,x,"A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
58,tf.linspace,num,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 0-D tensor. Number of values to generate.",A D_STRUCTURE,,,,,,D_STRUCTURE
59,tf.space_to_batch_nd,paddings,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.  It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",A D_STRUCTURE,,,,,,D_STRUCTURE
60,tf.math.segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A 1-D tensor whose size is equal to the size of `data`'s first dimension.  Values should be sorted and can be repeated.",A D_STRUCTURE,,,,,,D_STRUCTURE
61,tf.broadcast_to,shape,"A `Tensor`. Must be one of the following types: `int32`, `int64`. An 1-D `int` Tensor. The shape of the desired output.",A D_STRUCTURE,,,,,,D_STRUCTURE
62,tf.roll,shift,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Dimension must be 0-D or 1-D. `shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`. Negative shifts will roll the elements in the opposite direction.",A D_STRUCTURE,,,,,,D_STRUCTURE
63,tf.gather_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",A D_STRUCTURE,,,,,,D_STRUCTURE
64,tf.math.argmax,axis,"A `Tensor`. Must be one of the following types: `int32`, `int64`. int32 or int64, must be in the range `-rank(input), rank(input))`. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.",A D_STRUCTURE,,,,,,D_STRUCTURE
65,tf.strings.substr,pos,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Scalar defining the position of first character in each substring",A D_STRUCTURE,,,,,,D_STRUCTURE
66,tf.batch_to_space,block_shape,"A `Tensor`. Must be one of the following types: `int32`,`int64`. 1-D with shape `[M]`, all values must be >= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",A D_STRUCTURE,,,,,,D_STRUCTURE
67,tf.bitwise.bitwise_xor,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
68,tf.image.sample_distorted_bounding_box,image_size,"A `Tensor`. Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`. 1-D, containing `[height, width, channels]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
69,tf.math.betainc,b,A `Tensor`. Must have the same type as `a`.,A D_STRUCTURE,,,,,,D_STRUCTURE
70,tf.math.polygamma,x,A `Tensor`. Must have the same type as `a`.,A D_STRUCTURE,,,,,,D_STRUCTURE
71,tf.linalg.cross,b,"A `Tensor`. Must have the same type as `a`. Another tensor, of same type and shape as `a`.",A D_STRUCTURE,,,,,,D_STRUCTURE
72,tf.linalg.triangular_solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
73,tf.dtypes.complex,imag,A `Tensor`. Must have the same type as `real`.,A D_STRUCTURE,,,,,,D_STRUCTURE
74,tf.linspace,stop,A `Tensor`. Must have the same type as `start`. 0-D tensor. Last entry in the range.,A D_STRUCTURE,,,,,,D_STRUCTURE
75,tf.bitwise.right_shift,y,A `Tensor`. Must have the same type as `x`.,A D_STRUCTURE,,,,,,D_STRUCTURE
76,tf.truncatediv,y,A `Tensor`. Must have the same type as `x`.,A D_STRUCTURE,,,,,,D_STRUCTURE
77,tf.math.greater,y,A `Tensor`. Must have the same type as `x`.,A D_STRUCTURE,,,,,,D_STRUCTURE
78,tf.math.nextafter,x2,A `Tensor`. Must have the same type as `x1`.,A D_STRUCTURE,,,,,,D_STRUCTURE
79,tf.space_to_batch,input,"A `Tensor`. N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",A D_STRUCTURE,,,,,,D_STRUCTURE
80,tf.tensor_scatter_nd_add,tensor,A `Tensor`. Tensor to copy/update.,A D_STRUCTURE,,,,,,D_STRUCTURE
81,tf.keras.backend.binary_crossentropy,output,A tensor.,A D_STRUCTURE,,,,,,D_STRUCTURE
82,tf.keras.backend.gather,reference,A tensor.,A D_STRUCTURE,,,,,,D_STRUCTURE
83,tf.test.compute_gradient,x,a list arguments for the function,a D_STRUCTURE arguments for the function,,,,,,D_STRUCTURE
84,tf.data.experimental.make_batched_features_dataset,features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values. See `tf.io.parse_example`.,A D_STRUCTURE mapping feature keys to QSTR values,,,,,,D_STRUCTURE
85,tf.io.parse_single_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,A D_STRUCTURE mapping feature keys to QSTR values,,,,,,D_STRUCTURE
86,tf.keras.backend.local_conv1d,kernel_size,"a tuple of a single integer, specifying the length of the 1D convolution window.",a D_STRUCTURE of a single D_TYPE specifying the length of the CONSTANT_NUM D convolution window,D_TYPE,[1],1,"[0,inf)",,D_STRUCTURE
87,tf.quantization.quantized_concat,values,"A list of at least 2 `Tensor` objects with the same type. The `N` Tensors to concatenate. Their ranks and types must match, and their sizes must match in all dimensions except `concat_dim`.",A D_STRUCTURE of at least CONSTANT_NUM D_STRUCTURE objects with the same type,,,,,,D_STRUCTURE
88,tf.gradients,stop_gradients,Optional. A `Tensor` or list of tensors not to differentiate through.,A D_STRUCTURE of D_STRUCTURE not to differentiate through,,,,,,D_STRUCTURE
89,tf.math.accumulate_n,inputs,"A list of `Tensor` objects, each with same shape and type.",A D_STRUCTURE of D_STRUCTURE objects each with same PARAM and type,,,,,,D_STRUCTURE
90,tf.strings.format,inputs,"A list of `Tensor` objects, or a single Tensor. The list of tensors to format into the template string. If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",A D_STRUCTURE of D_STRUCTURE objects or a single D_STRUCTURE,,,,,,D_STRUCTURE
91,tf.parallel_stack,values,A list of `Tensor` objects with the same shape and type.,A D_STRUCTURE of D_STRUCTURE objects with the same shape and type,,,,,,D_STRUCTURE
92,tf.ragged.stack,values,"A list of `tf.Tensor` or `tf.RaggedTensor`.  May not be empty. All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",A D_STRUCTURE of D_STRUCTURE or tf RaggedTensor,,,,,,D_STRUCTURE
93,tf.gradients,ys,A `Tensor` or list of tensors to be differentiated.,A D_STRUCTURE of D_STRUCTURE to be differentiated,,,,,,D_STRUCTURE
94,tf.linalg.tridiagonal_solve,diagonals,"A `Tensor` or tuple of `Tensor`s describing left-hand sides. The shape depends of `diagonals_format`, see description above. Must be`float32`, `float64`, `complex64`, or `complex128`.",A D_STRUCTURE of D_STRUCTUREs describing left hand sides,,,,,,D_STRUCTURE
95,tf.io.decode_proto,field_names,"A list of `strings`. List of strings containing proto field names. An extension field can be decoded by using its full name, e.g. EXT_PACKAGE.EXT_FIELD_NAME.",A D_STRUCTURE of D_TYPE,D_TYPE,,,,,D_STRUCTURE
96,tf.keras.backend.tile,n,A list of integer. The length must be the same as the number of dimensions in `x`.,A D_STRUCTURE of D_TYPE,D_TYPE,,,,,D_STRUCTURE
97,tf.graph_util.import_graph_def,return_elements,A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,A D_STRUCTURE of D_TYPE containing operation names in PARAM that will be returned as QSTR objects and or D_STRUCTURE names in PARAM that will be returned as D_STRUCTURE objects,D_TYPE,,,,,D_STRUCTURE
98,tf.nn.fractional_avg_pool,pooling_ratio,"A list of `floats` that has length >= 4.  Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,[REXPR],1,,,D_STRUCTURE
99,tf.nn.erosion2d,dilations,"A list of `ints` that has length `>= 4`. 1-D of length 4. The input stride for atrous morphological dilation. Must be: `[1, rate_height, rate_width, 1]`.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,[REXPR],1,,,D_STRUCTURE
100,tf.nn.dilation2d,strides,"A list of `ints` that has length `>= 4`. The stride of the sliding window for each dimension of the input tensor. Must be: `[1, stride_height, stride_width, 1]`.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,[REXPR],1,,,D_STRUCTURE
101,tf.extract_volume_patches,strides,"A list of `ints` that has length `>= 5`. 1-D of length 5. How far the centers of two consecutive patches are in`input`. Must be: `[1, stride_planes, stride_rows, stride_cols, 1]`.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,[REXPR],1,,,D_STRUCTURE
102,tf.strings.unicode_script,input,A `Tensor` of type `int32`. A Tensor of int32 Unicode code points.,A D_STRUCTURE of D_TYPE Unicode code points,D_TYPE,,,,,D_STRUCTURE
103,tf.keras.layers.average,inputs,A list of input tensors (at least 2).,A D_STRUCTURE of input D_STRUCTURE BSTR,,,,,,D_STRUCTURE
104,tf.control_dependencies,control_inputs,"A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context. Can also be `None` to clear the control dependencies. If eager execution is enabled, any callable object in the `control_inputs` list will be called.",A D_STRUCTURE of QSTR or D_STRUCTURE objects which must be executed or computed before running the operations defined in the context,,,,,,D_STRUCTURE
105,tf.nn.sampled_softmax_loss,biases,A `Tensor` of shape `[num_classes]`.  The class biases.,A D_STRUCTURE of shape BSTR,,BSTR,,,,D_STRUCTURE
106,tf.nn.nce_loss,weights,"A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].  The (possibly-partitioned) class embeddings.",A D_STRUCTURE of shape BSTR or a D_STRUCTURE of D_STRUCTUREobjects whose concatenation along dimension CONSTANT_NUM has shape BSTR,,BSTR,,,,D_STRUCTURE
107,tf.nn.sampled_softmax_loss,weights,"A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].  The (possibly-sharded) class embeddings.",A D_STRUCTURE of shape BSTR or a D_STRUCTURE of D_STRUCTUREobjects whose concatenation along dimension CONSTANT_NUM has shape BSTR,,BSTR,,,,D_STRUCTURE
108,tf.quantization.fake_quant_with_min_max_vars_gradient,min,A `Tensor` of type `float32`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
109,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,max,A `Tensor` of type `float32`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
110,tf.image.draw_bounding_boxes,colors,A `Tensor` of type `float32`. 2-D. A list of RGBA colors to cycle through for the boxes.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
111,tf.math.in_top_k,predictions,A `Tensor` of type `float32`. A `batch_size` x `classes` tensor.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
112,tf.quantization.quantize,min_range,"A `Tensor` of type `float32`. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_min`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
113,tf.strings.unicode_script,input,A `Tensor` of type `int32`. A Tensor of int32 Unicode code points.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
114,tf.audio.encode_wav,sample_rate,A `Tensor` of type `int32`. Scalar containing the sample frequency.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
115,tf.io.decode_jpeg,contents,A `Tensor` of type `string`. 0-D.  The JPEG-encoded image.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
116,tf.io.decode_csv,records,A `Tensor` of type `string`. Each string is a record/row in the csv and all records should have the same format.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
117,tf.io.decode_proto,bytes,A `Tensor` of type `string`. Tensor of serialized protos with shape `batch_shape`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
118,tf.strings.unicode_transcode,input,A `Tensor` of type `string`. The text to be processed. Can have any shape.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
119,tf.fingerprint,method,A `Tensor` of type `tf.string`. Fingerprint method used by this op. Currently available method is `farmhash64`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
120,tf.math.logical_xor,y,A `Tensor` of type bool.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
121,tf.math.cumulative_logsumexp,axis,"A `Tensor` of type `int32` or `int64` (default: 0). Must be in the range `[-rank(x), rank(x))`.",A D_STRUCTURE of type D_TYPE default CONSTANT_NUM,,,,,,D_STRUCTURE
122,tf.foldr,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE each of which will be unpacked along their first dimension,,,,,,D_STRUCTURE
123,tf.random.normal,stddev,"A Tensor or Python value of type `dtype`, broadcastable with `mean`. The standard deviation of the normal distribution.",A D_STRUCTURE or Python value of type PARAM broadcastable with PARAM,PARAM,,,,,D_STRUCTURE
124,tf.random.uniform,maxval,"A Tensor or Python value of type `dtype`, broadcastable with`minval`. The upper bound on the range of random values to generate (exclusive). Defaults to 1 if `dtype` is floating point.",A D_STRUCTURE or Python value of type PARAM broadcastable with PARAM,PARAM,,,,,D_STRUCTURE
125,tf.random.gamma,beta,A Tensor or Python value or N-D array of type `dtype`. Defaults to 1.`beta` provides the inverse scale parameter(s) of the gamma distribution(s) to sample. Must be broadcastable with `alpha`.,A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM,D_TYPE,,,,,D_STRUCTURE
126,tf.ragged.stack_dynamic_partitions,data,A `Tensor` or `RaggedTensor` containing the values to stack.,A D_STRUCTURE or QSTR containing the values to stack,,,,,,D_STRUCTURE
127,tf.math.scalar_mul,x,A `Tensor` or `IndexedSlices` to be scaled.,A D_STRUCTURE or QSTR to be scaled,,,,,,D_STRUCTURE
128,tf.strings.ngrams,data,A Tensor or RaggedTensor containing the source data for the ngrams.,A D_STRUCTURE or RaggedTensor containing the source data for the ngrams,,,,,,D_STRUCTURE
129,tf.math.not_equal,y,A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,A D_STRUCTURE or tf IndexedSlices,,,,,,D_STRUCTURE
130,tf.math.equal,x,A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,A D_STRUCTURE or tf IndexedSlices,,,,,,D_STRUCTURE
131,tf.keras.backend.softsign,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
132,tf.keras.backend.prod,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
133,tf.keras.backend.var,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
134,tf.keras.backend.hard_sigmoid,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
135,tf.keras.backend.squeeze,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
136,tf.keras.backend.cumprod,x,A tensor or variable.,A D_STRUCTURE or variable,,,,,,D_STRUCTURE
137,tf.keras.backend.categorical_crossentropy,output,"A tensor resulting from a softmax (unless `from_logits` is True, in which case `output` is expected to be the logits).",A D_STRUCTURE resulting from a softmax unless PARAM is CONSTANT_BOOL in which case QSTR is expected to be the logits,,,,,,D_STRUCTURE
138,tf.where,y,"A Tensor which is of the same type as `x`, and may be broadcastable with`condition` and `x`.",A D_STRUCTURE which is of the same type as QSTR and may be broadcastable with PARAM and QSTR,&QSTR,,,,,D_STRUCTURE
139,tf.keras.backend.local_conv2d,output_shape,"a tuple with (output_row, output_col).",a D_STRUCTURE with BSTR,,BSTR,,,,D_STRUCTURE
140,tf.math.unsorted_segment_sqrt_n,data,A `Tensor` with floating point or complex dtype.,A D_STRUCTURE with D_TYPE dtype,D_TYPE,,,,,D_STRUCTURE
141,tf.sparse.segment_sum,data,A `Tensor` with data that will be assembled in the output.,A D_STRUCTURE with data that will be assembled in the output,,,,,,D_STRUCTURE
142,tf.linalg.matrix_transpose,a,A `Tensor` with `rank >= 2`.,A D_STRUCTURE with rank REXPR,,,REXPR,,,D_STRUCTURE
143,tf.sparse.fill_empty_rows,sp_input,"A `SparseTensor` with shape `[N, M]`.",A D_STRUCTURE with shape BSTR,,BSTR,,,,D_STRUCTURE
144,tf.keras.backend.binary_crossentropy,target,A tensor with the same shape as `output`.,A D_STRUCTURE with the same shape as PARAM,,&PARAM,,,,D_STRUCTURE
145,tf.nn.sampled_softmax_loss,remove_accidental_hits,"A `bool`.  whether to remove ""accidental hits"" where a sampled class equals one of the target classes.  Default is True.",A D_TYPE,D_TYPE,,0,,,
146,tf.strings.unicode_transcode,input_encoding,"A `string`. Text encoding of the input strings. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: `""UTF-16"", ""US ASCII"", ""UTF-8""`.",A D_TYPE,D_TYPE,,0,,,
147,tf.nn.avg_pool3d,data_format,A string. 'NDHWC' and 'NCDHW' are supported.,A D_TYPE,D_TYPE,,0,,,
148,tf.nn.conv3d_transpose,data_format,A string. 'NDHWC' and 'NCDHW' are supported.,A D_TYPE,D_TYPE,,0,,,
149,tf.nn.conv1d_transpose,data_format,A string. `'NWC'` and `'NCW'` are supported.,A D_TYPE,D_TYPE,,0,,,
150,tf.nn.max_pool,data_format,"A string. Specifies the channel dimension. For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",A D_TYPE,D_TYPE,,0,,,
151,tf.math.cumprod,reverse,A `bool` (default: False).,A D_TYPE default CONSTANT_BOOL,D_TYPE,,0,,,
152,tf.einsum,equation,"a `str` describing the contraction, in the same format as`numpy.einsum`.",a D_TYPE describing the contraction in the same format as numpy einsum,D_TYPE,,0,,,
153,tf.nn.max_pool3d,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",A D_TYPE either QSTR,D_TYPE,,0,,QSTR,
154,tf.nn.conv1d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",A D_TYPE either QSTR,D_TYPE,,0,,QSTR,
155,tf.estimator.regressor_parse_example_spec,label_key,A string identifying the label. It means tf.Example stores labels with this key.,A D_TYPE identifying the label,D_TYPE,,0,,,
156,tf.keras.backend.random_uniform,minval,"A float, lower boundary of the uniform distribution to draw samples.",A D_TYPE lower boundary of the uniform distribution to draw samples,D_TYPE,,0,,,
157,tf.keras.backend.foldl,name,A string name for the foldl node in the graph,A D_TYPE name for the foldl node in the graph,D_TYPE,,0,,,
158,tf.keras.backend.foldr,name,A string name for the foldr node in the graph,A D_TYPE name for the foldr node in the graph,D_TYPE,,0,,,
159,tf.keras.layers.Conv3DTranspose,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, depth, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, depth, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
160,tf.keras.layers.GlobalMaxPool2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
161,tf.keras.layers.Conv2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
162,tf.keras.layers.UpSampling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
163,tf.keras.layers.AveragePooling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
164,tf.keras.layers.UpSampling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
165,tf.nn.dilation2d,data_format,"A `string`, only `""NHWC""` is currently supported.",A D_TYPE only QSTR is currently supported,D_TYPE,,0,,,
166,tf.image.non_max_suppression,score_threshold,A float representing the threshold for deciding when to remove boxes based on score.,A D_TYPE representing the threshold for deciding when to remove PARAM based on score,D_TYPE,,0,,,
167,tf.image.non_max_suppression_overlaps,overlap_threshold,A float representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values.,A D_TYPE representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values,D_TYPE,,0,,,
168,tf.image.non_max_suppression,iou_threshold,A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU,D_TYPE,,0,,,
169,tf.image.combined_non_max_suppression,iou_threshold,A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.,A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU,D_TYPE,,0,,,
170,tf.data.experimental.dense_to_ragged_batch,drop_remainder,"(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",A D_TYPE scalar D_STRUCTURE representing whether the last batch should be dropped in the case it has fewer than PARAM elements the default behavior is not to drop the smaller batch,D_TYPE,,0,,,D_STRUCTURE
171,tf.data.experimental.bucket_by_sequence_length,drop_remainder,"(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",A D_TYPE scalar D_STRUCTURE representing whether the last batch should be dropped in the case it has fewer than QSTR elements the default behavior is not to drop the smaller batch,D_TYPE,,0,,,D_STRUCTURE
172,tf.data.experimental.make_csv_dataset,compression_type,"(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`. Defaults to no compression.",A D_TYPE scalar evaluating to one of BSTR QSTR,D_TYPE,,0,,,
173,tf.keras.Input,ragged,"A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, seehttps://www.tensorflow.org/guide/ragged_tensors",A D_TYPE specifying whether the placeholder to be created is ragged,D_TYPE,,0,,,
174,tf.strings.format,template,A string template to format tensor values into.,A D_TYPE template to format D_STRUCTURE values into,D_TYPE,,0,,,
175,tf.keras.layers.SeparableConv1D,name,"A string, the name of the layer.",A D_TYPE the name of the layer,D_TYPE,,0,,,
176,tf.debugging.assert_negative,message,A string to prefix to the default message.,A D_TYPE to prefix to the default message,D_TYPE,,0,,,
177,tf.debugging.assert_scalar,message,A string to prefix to the default message.,A D_TYPE to prefix to the default message,D_TYPE,,0,,,
178,tf.debugging.assert_shapes,message,A string to prefix to the default message.,A D_TYPE to prefix to the default message,D_TYPE,,0,,,
179,tf.keras.backend.random_uniform,maxval,"A float, upper boundary of the uniform distribution to draw samples.",A D_TYPE upper boundary of the uniform distribution to draw samples,D_TYPE,,0,,,
180,tf.compat.forward_compatibility_horizon,day,"A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an`int`.",A day CONSTANT_NUM REXPR REXPR or CONSTANT_NUM in PARAM,int,,0,"[1,31]",,
181,tf.feature_column.numeric_column,default_value,"A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing. A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column. If a single value is provided, the same value will be applied as the default value for every item. If an iterable of values is provided, the shape of the `default_value` should be equal to the given `shape`.",A default value of QSTR will cause tf io parse_example to fail if an example does not contain this column,,,,,,
182,tf.saved_model.save,export_dir,A directory in which to write the SavedModel.,A directory in which to write the SavedModel,,,,,,
183,tf.data.experimental.make_batched_features_dataset,reader,A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors. Defaults to `tf.data.TFRecordDataset`.,A function or class that can be called with a QSTR D_STRUCTURE and BSTR PARAM and returns a QSTR of QSTR D_STRUCTURE,,,,,,
184,tf.register_tensor_conversion_function,conversion_func,A function that converts instances of `base_type` to`Tensor`.,A function that converts instances of PARAM toD_STRUCTURE,,,,,,
185,tf.estimator.add_metrics,metric_fn,"A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name. Final metrics are a union of this and `estimator's` existing metrics. If there is a name conflict between this and `estimator`s existing metrics, this will override the existing one. The values of the dict are the results of calling a metric function, namely a `(metric_tensor, update_op)` tuple. ",A function which should obey the following signature Args can only have following four arguments in any order predictions Predictions D_STRUCTURE of D_STRUCTURE created by given PARAM features Input D_STRUCTURE of D_STRUCTURE objects created by QSTR which is given to PARAM evaluate as an argument labels Labels D_STRUCTURE of D_STRUCTURE created by QSTR which is given to PARAM evaluate as an argument config config attribute of the PARAM Returns D_STRUCTURE of metric results keyed by name,,,,,,
186,tf.keras.utils.plot_model,model,A Keras model instance,A Keras model instance,,,,,,
187,tf.data.experimental.make_csv_dataset,shuffle_buffer_size,"Buffer size to use for shuffling. A large buffer size ensures better shuffling, but increases memory usage and startup time.",A large buffer size ensures better shuffling but increases memory usage and startup time,,,,,,
188,tf.reshape,name,Optional string. A name for the operation.,A name for the operation,string,,0,,,
189,tf.ones,name,Optional string. A name for the operation.,A name for the operation,string,,0,,,
190,tf.nn.max_pool1d,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
191,tf.math.reduce_prod,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
192,tf.linalg.inv,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
193,tf.math.reciprocal_no_nan,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
194,tf.fingerprint,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
195,tf.math.reduce_min,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
196,tf.nn.selu,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
197,tf.math.sinh,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
198,tf.random.uniform_candidate_sampler,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
199,tf.math.cosh,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
200,tf.math.angle,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
201,tf.bitwise.invert,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
202,tf.edit_distance,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
203,tf.math.is_nan,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
204,tf.identity_n,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
205,tf.dynamic_stitch,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
206,tf.bitwise.right_shift,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
207,tf.nn.elu,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
208,tf.math.conj,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
209,tf.image.non_max_suppression_padded,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
210,tf.ones_like,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
211,tf.random.truncated_normal,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
212,tf.io.decode_jpeg,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
213,tf.bitwise.bitwise_or,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
214,tf.bitwise.left_shift,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
215,tf.broadcast_to,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
216,tf.tensordot,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
217,tf.math.softplus,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
218,tf.linalg.cross,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
219,tf.io.decode_raw,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
220,tf.nn.relu6,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
221,tf.unstack,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
222,tf.math.unsorted_segment_sqrt_n,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
223,tf.math.acosh,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
224,tf.math.count_nonzero,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
225,tf.strings.regex_replace,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
226,tf.rank,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
227,tf.nn.sampled_softmax_loss,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
228,tf.io.decode_compressed,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
229,tf.linalg.trace,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
230,tf.math.is_finite,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
231,tf.math.real,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
232,tf.nn.sparse_softmax_cross_entropy_with_logits,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
233,tf.io.decode_bmp,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
234,tf.math.atan,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
235,tf.random.stateless_truncated_normal,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
236,tf.nn.softmax_cross_entropy_with_logits,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
237,tf.image.rgb_to_grayscale,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
238,tf.signal.ifft,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
239,tf.math.less_equal,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
240,tf.image.grayscale_to_rgb,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
241,tf.math.unsorted_segment_mean,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
242,tf.math.squared_difference,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
243,tf.math.invert_permutation,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
244,tf.io.serialize_tensor,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
245,tf.io.decode_png,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
246,tf.audio.decode_wav,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
247,tf.truncatemod,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
248,tf.math.unsorted_segment_prod,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
249,tf.math.tanh,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
250,tf.image.rgb_to_hsv,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
251,tf.extract_volume_patches,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
252,tf.clip_by_norm,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
253,tf.unique_with_counts,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
254,tf.math.segment_prod,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
255,tf.debugging.assert_type,name,"A name for this operation. Defaults to ""assert_type""",A name for this operation,string,,0,,,
256,tf.nn.separable_conv2d,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
257,tf.debugging.assert_all_finite,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
258,tf.image.convert_image_dtype,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
259,tf.image.adjust_jpeg_quality,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
260,tf.nn.depthwise_conv2d,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
261,tf.debugging.assert_equal,name,"A name for this operation (optional).  Defaults to ""assert_equal"".",A name for this operation BSTR,string,,0,,,
262,tf.debugging.assert_greater_equal,name,"A name for this operation (optional).  Defaults to ""assert_greater_equal"".",A name for this operation BSTR,string,,0,,,
263,tf.debugging.assert_non_negative,name,"A name for this operation (optional).  Defaults to ""assert_non_negative"".",A name for this operation BSTR,string,,0,,,
264,tf.debugging.assert_none_equal,name,"A name for this operation (optional).  Defaults to ""assert_none_equal"".",A name for this operation BSTR,string,,0,,,
265,tf.debugging.assert_rank_at_least,name,"A name for this operation (optional).  Defaults to ""assert_rank_at_least"".",A name for this operation BSTR,string,,0,,,
266,tf.debugging.assert_integer,name,"A name for this operation (optional). Defaults to ""assert_integer"".",A name for this operation BSTR,string,,0,,,
267,tf.math.is_strictly_increasing,name,"A name for this operation (optional). Defaults to ""is_strictly_increasing""",A name for this operation BSTR,string,,0,,,
268,tf.eye,name,"A name for this `Op`.  Defaults to ""eye"".",A name for this QSTR,string,,0,,,
269,tf.nn.collapse_repeated,name,"A name for this `Op`. Defaults to ""collapse_repeated_labels"".",A name for this QSTR,string,,0,,,
270,tf.ragged.constant,name,A name prefix for the returned tensor (optional).,A name prefix for the returned D_STRUCTURE BSTR,string,,0,,,
271,tf.ragged.boolean_mask,name,A name prefix for the returned tensor (optional).,A name prefix for the returned D_STRUCTURE BSTR,string,,0,,,
272,tf.sparse.reshape,name,A name prefix for the returned tensors (optional),A name prefix for the returned D_STRUCTURE BSTR,string,,0,,,
273,tf.linalg.adjoint,name,A name to give this `Op` (optional).,A name to give this QSTR BSTR,string,,0,,,
274,tf.linalg.tridiagonal_matmul,name,A name to give this `Op` (optional).,A name to give this QSTR BSTR,string,,0,,,
275,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",A normalized coordinate value of QSTR is mapped to the PARAM coordinate at y BSTR so as the BSTR interval of normalized PARAM height is mapped to BSTR in PARAM height coordinates,,,,,,
276,tf.compat.as_str_any,value,A object that can be converted to `str`.,A object that can be converted to D_TYPE,,,,,,
277,tf.feature_column.bucketized_column,source_column,A one-dimensional dense column which is generated with`numeric_column`.,A one dimensional dense column which is generated with QSTR,,,1,,,
278,tf.data.experimental.make_csv_dataset,label_name,"A optional string corresponding to the label column. If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",A optional D_TYPE corresponding to the label column,D_TYPE,,CONSTANT_NUM,,,
279,tf.random.stateless_uniform,seed,A shape [2] integer Tensor of seeds to the random number generator.,A PARAM BSTR D_TYPE D_STRUCTURE of seeds to the random number generator,D_TYPE,BSTR,,"[0,inf)",,D_STRUCTURE
280,tf.random.stateless_normal,seed,A shape [2] integer Tensor of seeds to the random number generator.,A PARAM BSTR D_TYPE D_STRUCTURE of seeds to the random number generator,D_TYPE,BSTR,,"[0,inf)",,D_STRUCTURE
281,tf.transpose,perm,A permutation of the dimensions of `a`.,A permutation of the dimensions of QSTR,,,,,,
282,tf.keras.mixed_precision.experimental.set_policy,policy,"A Policy, or a string that will be converted to a Policy..",A Policy or a D_TYPE that will be converted to a Policy,D_TYPE,,0,,,
283,tf.sparse.split,num_split,A Python integer. The number of ways to split.,A Python D_TYPE,D_TYPE,,0,,,
284,tf.random.categorical,seed,A Python integer. Used to create a random seed for the distribution. See `tf.compat.v1.set_random_seed` for behavior.,A Python D_TYPE,D_TYPE,,0,,,
285,tf.image.random_flip_left_right,seed,A Python integer. Used to create a random seed. See`tf.compat.v1.set_random_seed` for behavior.,A Python D_TYPE,D_TYPE,,0,,,
286,tf.keras.initializers.he_uniform,seed,A Python integer. Used to seed the random generator.,A Python D_TYPE,D_TYPE,,0,,,
287,tf.ragged.stack,axis,"A python integer, indicating the dimension along which to stack. (Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",A python D_TYPE indicating the dimension along which to stack,D_TYPE,,0,,,
288,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",A Python function which accepts numpy D_STRUCTURE objects as arguments and returns a D_STRUCTURE of numpy D_STRUCTURE objects or a single numpy D_STRUCTURE,,,,,,
289,tf.is_tensor,x,A python object to check.,A python object to check,,,,,,
290,tf.config.experimental_connect_to_cluster,cluster_spec_or_resolver,A `ClusterSpec` or `ClusterResolver` describing the cluster.,A QSTR describing the cluster,,,,,,
291,tf.estimator.train_and_evaluate,train_spec,A `TrainSpec` instance to specify the training specification.,A QSTR instance to specify the training specification,,,,,,
292,tf.graph_util.import_graph_def,graph_def,A `GraphDef` proto containing operations to be imported into the default graph.,A QSTR proto containing operations to be imported into the default graph,,,,,,
293,tf.math.in_top_k,predictions,A `Tensor` of type `float32`. A `batch_size` x `classes` tensor.,A QSTR x QSTR D_STRUCTURE,,"[QSTR,QSTR]",,,,D_STRUCTURE
294,tf.unstack,value,A rank `R > 0` `Tensor` to be unstacked.,A rank R REXPR D_STRUCTURE to be unstacked,,,REXPR,,,D_STRUCTURE
295,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
296,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
297,tf.random.fixed_unigram_candidate_sampler,num_shards,A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism. This parameter (together with `shard`) indicates the number of partitions that are being used in the overall computation.,A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism,,,,,,
298,tf.image.adjust_brightness,delta,A scalar. Amount to add to the pixel values.,A scalar,,,0,,,
299,tf.signal.hann_window,window_length,A scalar `Tensor` indicating the window length to generate.,A scalar D_STRUCTURE indicating the window length to generate,int,,0,"[0,inf)",,D_STRUCTURE
300,tf.image.non_max_suppression_padded,max_output_size,A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,A scalar D_TYPE D_STRUCTURE representing the maximum number of PARAM to be selected by non max suppression,D_TYPE,,0,"[0,inf)",,D_STRUCTURE
301,tf.one_hot,depth,A scalar defining the depth of the one hot dimension.,A scalar defining the depth of the one hot dimension,numeric,,0,"[0,inf)",,
302,tf.one_hot,off_value,A scalar defining the value to fill in output when `indices[j] != i`. (default: 0),A scalar defining the value to fill in output when PARAM BSTR i,,,0,,,
303,tf.cond,pred,A scalar determining whether to return the result of `true_fn` or`false_fn`.,A scalar determining whether to return the result of PARAM or PARAM,,,0,,,
304,tf.nn.local_response_normalization,alpha,"An optional `float`. Defaults to `1`. A scale factor, usually positive.",A scale factor usually positive,,,0,"[0,inf)",,
305,tf.debugging.assert_shapes,shapes,dictionary with (`Tensor` to shape) items. A shape must be an iterable.,A shape must be an D_STRUCTURE,,,,,,D_STRUCTURE
306,tf.nn.embedding_lookup_sparse,params,"A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.  Alternatively, a`PartitionedVariable`, created by partitioning along dimension 0. Each element must be appropriately sized for `""div""` `partition_strategy`.",A single D_STRUCTURE representing the complete embedding D_STRUCTURE of P D_STRUCTURE all of same shape except for the first dimension representing sharded embedding D_STRUCTURE,,,,,,D_STRUCTURE
307,tf.feature_column.numeric_column,default_value,"A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing. A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column. If a single value is provided, the same value will be applied as the default value for every item. If an iterable of values is provided, the shape of the `default_value` should be equal to the given `shape`.",A single value compatible with PARAM or an D_STRUCTURE of values compatible with PARAM which the column takes on during tf Example parsing if data is missing,tf.dtype,,,,,D_STRUCTURE
308,tf.tpu.experimental.initialize_tpu_system,cluster_resolver,"A tf.distribute.cluster_resolver.TPUClusterResolver, which provides information about the TPU cluster.",A tf distribute cluster_resolver TPUClusterResolver which provides information about the TPU cluster,,,,,,
309,tf.estimator.experimental.make_early_stopping_hook,estimator,A `tf.estimator.Estimator` instance.,A tf estimator Estimator instance,,,,,,
310,tf.zeros_like,dtype,"A type for the returned `Tensor`. Must be `float16`, `float32`,`float64`, `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`,`complex64`, `complex128`, `bool` or `string`.",A type for the returned D_STRUCTURE,tf.dtype,,0,,,
311,tf.feature_column.categorical_column_with_identity,key,"A unique string identifying the input feature. It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",A unique D_TYPE identifying the input feature,D_TYPE,,0,,,
312,tf.feature_column.numeric_column,key,"A unique string identifying the input feature. It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",A unique D_TYPE identifying the input feature,D_TYPE,,0,,,
313,tf.nn.batch_normalization,variance,A variance `Tensor`.,A variance D_STRUCTURE,numeric,,,,,D_STRUCTURE
314,tf.keras.preprocessing.sequence.skipgrams,sequence,"A word sequence (sentence), encoded as a list     of word indices (integers). If using a `sampling_table`,     word indices are expected to match the rank     of the words in a reference dataset (e.g. 10 would encode     the 10-th most frequently occurring token).     Note that index 0 is expected to be a non-word and will be skipped.",A word D_STRUCTURE BSTR,,,,,,D_STRUCTURE
315,tf.keras.layers.Conv3D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Activation function to use,,,,,,
316,tf.keras.layers.Layer,**kwargs,Additional keyword arguments.,Additional keyword arguments,,,,,,
317,tf.nn.convolution,dilations,Alias of dilation_rate.,Alias of dilation_rate,,,,,,
318,tf.required_space_to_batch_paddings,base_paddings,"Optional int32 Tensor of shape [N, 2].  Specifies the minimum amount of padding to use.  All elements must be >= 0.  If not specified, defaults to 0.",All elements must be REXPR,,,,"[0,inf)",,
319,tf.estimator.classifier_parse_example_spec,feature_columns,An iterable containing all feature columns. All items should be instances of classes derived from `FeatureColumn`.,All items should be instances of classes derived from QSTR,,,,,,
320,tf.feature_column.make_parse_example_spec,feature_columns,An iterable containing all feature columns. All items should be instances of classes derived from `FeatureColumn`.,All items should be instances of classes derived from QSTR,,,,,,
321,tf.keras.layers.DenseFeatures,feature_columns,"An iterable containing the FeatureColumns to use as inputs to your model. All items should be instances of classes derived from `DenseColumn` such as `numeric_column`, `embedding_column`,`bucketized_column`, `indicator_column`. If you have categorical features, you can wrap them with an `embedding_column` or`indicator_column`.",All items should be instances of classes derived from QSTR such as QSTR,,,,,,
322,tf.ragged.stack,values,"A list of `tf.Tensor` or `tf.RaggedTensor`.  May not be empty. All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",All QSTR must have the same rank and the same dtype but unlike tf stack they can have arbitrary dimension sizes,,,,,,
323,tf.nn.embedding_lookup_sparse,params,"A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.  Alternatively, a`PartitionedVariable`, created by partitioning along dimension 0. Each element must be appropriately sized for `""div""` `partition_strategy`.",Alternatively a QSTR created by partitioning along dimension CONSTANT_NUM,,,,,,
324,tf.image.adjust_brightness,delta,A scalar. Amount to add to the pixel values.,Amount to add to the pixel values,numeric,,0,"[0,inf)",,
325,tf.nest.assert_same_structure,nest2,an arbitrarily nested structure.,an arbitrarily nested structure,,,,,,
326,tf.broadcast_to,shape,"A `Tensor`. Must be one of the following types: `int32`, `int64`. An 1-D `int` Tensor. The shape of the desired output.",An CONSTANT_NUM D D_TYPE D_STRUCTURE,D_TYPE,,CONSTANT_NUM,,,D_STRUCTURE
327,tf.estimator.classifier_parse_example_spec,feature_columns,An iterable containing all feature columns. All items should be instances of classes derived from `FeatureColumn`.,An D_STRUCTURE containing all feature columns,,,,,,D_STRUCTURE
328,tf.feature_column.make_parse_example_spec,feature_columns,An iterable containing all feature columns. All items should be instances of classes derived from `FeatureColumn`.,An D_STRUCTURE containing all feature columns,,,,,,D_STRUCTURE
329,tf.keras.layers.DenseFeatures,feature_columns,"An iterable containing the FeatureColumns to use as inputs to your model. All items should be instances of classes derived from `DenseColumn` such as `numeric_column`, `embedding_column`,`bucketized_column`, `indicator_column`. If you have categorical features, you can wrap them with an `embedding_column` or`indicator_column`.",An D_STRUCTURE containing the FeatureColumns to use as inputs to your model,,,,,,D_STRUCTURE
330,tf.random.uniform_candidate_sampler,num_sampled,"An `int`.  The number of classes to randomly sample. The`sampled_candidates` return value will have shape `[num_sampled]`. If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",An D_TYPE,D_TYPE,,0,,,
331,tf.random.fixed_unigram_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,An D_TYPE,D_TYPE,,0,,,
332,tf.random.all_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,An D_TYPE,D_TYPE,,0,,,
333,tf.unstack,num,An `int`. The length of the dimension `axis`. Automatically inferred if`None` (the default).,An D_TYPE,D_TYPE,,0,,,
334,tf.random.learned_unigram_candidate_sampler,range_max,An `int`. The number of possible classes.,An D_TYPE,D_TYPE,,0,,,
335,tf.nn.sampled_softmax_loss,num_classes,An `int`. The number of possible classes.,An D_TYPE,D_TYPE,,0,,,
336,tf.gather,batch_dims,An `integer`.  The number of batch dimensions.  Must be less than `rank(indices)`.,An D_TYPE,D_TYPE,,0,,,
337,tf.strided_slice,begin,An `int32` or `int64` `Tensor`.,An D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
338,tf.slice,begin,An `int32` or `int64` `Tensor`.,An D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
339,tf.signal.linear_to_mel_weight_matrix,num_spectrogram_bins,"An integer `Tensor`. How many bins there are in the source spectrogram data, which is understood to be `fft_size // 2 + 1`, i.e. the spectrogram only contains the nonredundant FFT bins.",An D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
340,tf.keras.backend.gather,indices,An integer tensor of indices.,An D_TYPE D_STRUCTURE of indices,D_TYPE,,,,,D_STRUCTURE
341,tf.math.bincount,arr,An int32 tensor of non-negative values.,An D_TYPE D_STRUCTURE of non negative values,D_TYPE,,,,,D_STRUCTURE
342,tf.math.unsorted_segment_sqrt_n,segment_ids,An integer tensor whose shape is a prefix of `data.shape`.,An D_TYPE D_STRUCTURE whose shape is a prefix of PARAM shape,D_TYPE,,,,,D_STRUCTURE
343,tf.strided_slice,new_axis_mask,An `int32` mask.,An D_TYPE mask,D_TYPE,,,,,
344,tf.keras.backend.in_top_k,k,"An `int`, number of top elements to consider.",An D_TYPE number of top elements to consider,D_TYPE,,0,"[0,inf)",,
345,tf.keras.layers.LocallyConnected1D,kernel_size,"An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",An D_TYPE or D_STRUCTURE of a single D_TYPE specifying the length of the CONSTANT_NUM D convolution window,D_TYPE,[1],0;1,"[0,inf)",,D_STRUCTURE
346,tf.keras.layers.Conv3DTranspose,output_padding,"An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the amount of PARAM along the depth height and width,D_TYPE,[CONSTANT_NUM],0;1,"[0,inf)",,D_STRUCTURE
347,tf.keras.layers.Conv2DTranspose,output_padding,"An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the amount of PARAM along the height and width of the output D_STRUCTURE,D_TYPE,[CONSTANT_NUM],0;1,,,D_STRUCTURE
348,tf.keras.layers.Conv3DTranspose,kernel_size,"An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the depth height and width of the CONSTANT_NUM D convolution window,D_TYPE,[CONSTANT_NUM],0;1,,,D_STRUCTURE
349,tf.nn.conv1d,stride,An int or list of `ints` that has length `1` or `3`.  The number of entries by which the filter is moved right at each step.,An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
350,tf.nn.conv2d_transpose,strides,"An int or list of `ints` that has length `1`, `2` or `4`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
351,tf.nn.fractional_max_pool,pooling_ratio,"An int or list of `ints` that has length `1`, `2` or `4`. Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
352,tf.nn.max_pool3d,strides,"An int or list of `ints` that has length `1`, `3` or `5`. The stride of the sliding window for each dimension of the input tensor.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
353,tf.nn.max_pool,ksize,"An int or list of `ints` that has length `1`, `N` or `N+2`. The size of the window for each dimension of the input tensor.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM QSTR or N CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
354,tf.nn.conv1d,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM which defaults to CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
355,tf.nn.conv1d_transpose,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM which defaults to CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
356,tf.data.experimental.make_batched_features_dataset,batch_size,An int representing the number of records to combine in a single batch.,An D_TYPE representing the number of records to combine in a single batch,D_TYPE,,0,"[0,inf)",,
357,tf.data.experimental.make_csv_dataset,batch_size,An int representing the number of records to combine in a single batch.,An D_TYPE representing the number of records to combine in a single batch,D_TYPE,,0,"[0,inf)",,
358,tf.signal.inverse_stft,frame_step,An integer scalar `Tensor`. The number of samples to step.,An D_TYPE scalar D_STRUCTURE,D_TYPE,,0,,,D_STRUCTURE
359,tf.feature_column.embedding_column,dimension,"An integer specifying dimension of the embedding, must be > 0.",An D_TYPE specifying dimension of the embedding must be REXPR,D_TYPE,,0,,,
360,tf.keras.backend.cumprod,axis,"An integer, the axis to compute the product.",An D_TYPE the axis to compute the product,D_TYPE,,0,,,
361,tf.keras.backend.std,axis,"An integer, the axis to compute the standard deviation.",An D_TYPE the axis to compute the standard deviation,D_TYPE,,0,,,
362,tf.keras.backend.var,axis,"An integer, the axis to compute the variance.",An D_TYPE the axis to compute the variance,D_TYPE,,0,,,
363,tf.keras.backend.max,axis,"An integer, the axis to find maximum values.",An D_TYPE the axis to find maximum values,D_TYPE,,0,,,
364,tf.nn.local_response_normalization,beta,An optional `float`. Defaults to `0.5`. An exponent.,An exponent,,,,,,
365,tf.io.decode_proto,field_names,"A list of `strings`. List of strings containing proto field names. An extension field can be decoded by using its full name, e.g. EXT_PACKAGE.EXT_FIELD_NAME.",An extension field can be decoded by using its full PARAM e g,,,,,,
366,tf.nest.is_nested,seq,an input sequence.,an input D_STRUCTURE,,,,,,D_STRUCTURE
367,tf.nn.conv_transpose,input,"An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"". It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",An N CONSTANT_NUM dimensional D_STRUCTURE of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR or BSTR input_spatial_shape QSTR NC,,,>=CONSTANT_NUM,,,D_STRUCTURE
368,tf.random.fixed_unigram_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,An operation specific seed,,,,,,
369,tf.random.all_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,An operation specific seed,,,,,,
370,tf.image.random_hue,seed,An operation-specific seed. It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation. Please see the documentation of set_random_seed for its interaction with the graph-level random seed.,An operation specific seed,,,,,,
371,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",An optional D_STRUCTURE of D_TYPE,D_TYPE,,,,,D_STRUCTURE
372,tf.data.experimental.make_csv_dataset,select_columns,"An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select. If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines. When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified. Using this results in faster parsing and lower memory usage. If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",An optional D_STRUCTURE of D_TYPE indices or D_TYPE column names that specifies a subset of columns of CSV data to select,D_TYPE,,,,,D_STRUCTURE
373,tf.nn.fractional_avg_pool,overlapping,"An optional `bool`.  Defaults to `False`.  When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.  The result would be [20, 16] for fractional avg pooling.",An optional D_TYPE,D_TYPE,,0,,,
374,tf.quantization.quantize,narrow_range,An optional `bool`. Defaults to `False`.,An optional D_TYPE,D_TYPE,,0,,,
375,tf.quantization.fake_quant_with_min_max_vars,narrow_range,An optional `bool`. Defaults to `False`.,An optional D_TYPE,D_TYPE,,0,,,
376,tf.io.encode_base64,pad,An optional `bool`. Defaults to `False`. Bool whether padding is applied at the ends.,An optional D_TYPE,D_TYPE,,0,,,
377,tf.linalg.triangular_solve,adjoint,An optional `bool`. Defaults to `False`. Boolean indicating whether to solve with `matrix` or its (block-wise)        adjoint.,An optional D_TYPE,D_TYPE,,0,,,
378,tf.quantization.fake_quant_with_min_max_vars_gradient,narrow_range,An optional `bool`. Defaults to `False`. Whether to quantize into 2^num_bits - 1 distinct values.,An optional D_TYPE,D_TYPE,,0,,,
379,tf.linalg.triangular_solve,lower,An optional `bool`. Defaults to `True`. Boolean indicating whether the innermost matrices in `matrix` are lower or upper triangular.,An optional D_TYPE,D_TYPE,,0,,,
380,tf.nn.max_pool_with_argmax,include_batch_in_index,An optional `boolean`. Defaults to `False`. Whether to include batch dimension in flattened index of `argmax`.,An optional D_TYPE,D_TYPE,,0,,,
381,tf.nn.local_response_normalization,beta,An optional `float`. Defaults to `0.5`. An exponent.,An optional D_TYPE,D_TYPE,,0,,,
382,tf.nn.local_response_normalization,alpha,"An optional `float`. Defaults to `1`. A scale factor, usually positive.",An optional D_TYPE,D_TYPE,,0,,,
383,tf.quantization.fake_quant_with_min_max_args,max,An optional `float`. Defaults to `6`.,An optional D_TYPE,D_TYPE,,0,,,
384,tf.nn.fractional_avg_pool,seed,"An optional `int`.  Defaults to `0`.  If set to be non-zero, the random number generator is seeded by the given seed.  Otherwise it is seeded by a random seed.",An optional D_TYPE,D_TYPE,,0,,,
385,tf.image.encode_png,compression,An optional `int`. Defaults to `-1`. Compression level.,An optional D_TYPE,D_TYPE,,0,,,
386,tf.audio.decode_wav,desired_channels,An optional `int`. Defaults to `-1`. Number of sample channels wanted.,An optional D_TYPE,D_TYPE,,0,,,
387,tf.image.sample_distorted_bounding_box,seed,"An optional `int`. Defaults to `0`. If `seed` is set to non-zero, the random number generator is seeded by the given `seed`.  Otherwise, it is seeded by a random seed.",An optional D_TYPE,D_TYPE,,0,,,
388,tf.io.decode_and_crop_jpeg,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,An optional D_TYPE,D_TYPE,,0,,,
389,tf.io.encode_jpeg,y_density,An optional `int`. Defaults to `300`. Vertical pixels per density unit.,An optional D_TYPE,D_TYPE,,0,,,
390,tf.nn.local_response_normalization,depth_radius,An optional `int`. Defaults to `5`. 0-D.  Half-width of the 1-D normalization window.,An optional D_TYPE,D_TYPE,,0,,,
391,tf.quantization.fake_quant_with_min_max_args_gradient,num_bits,An optional `int`. Defaults to `8`.,An optional D_TYPE,D_TYPE,,0,,,
392,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,num_bits,"An optional `int`. Defaults to `8`. The bitwidth of the quantization; between 2 and 16, inclusive.",An optional D_TYPE,D_TYPE,,0,,,
393,tf.io.decode_proto,descriptor_source,"An optional `string`. Defaults to `""local://""`. Either the special value `local://` or a path to a file containing a serialized `FileDescriptorSet`.",An optional D_TYPE,D_TYPE,,0,,,
394,tf.data.experimental.make_csv_dataset,use_quote_delim,"An optional bool. Defaults to `True`. If false, treats double quotation marks as regular characters inside of the string fields.",An optional D_TYPE,D_TYPE,,0,,,
395,tf.math.argmin,output_type,"An optional `tf.DType` from: `tf.int32, tf.int64`. Defaults to`tf.int64`.",An optional D_TYPE from D_TYPE,D_TYPE,,0,,D_TYPE,
396,tf.io.encode_jpeg,format,"An optional `string` from: `"""", ""grayscale"", ""rgb""`. Defaults to `""""`. Per pixel image format.",An optional D_TYPE from QSTR,D_TYPE,,0,,QSTR,
397,tf.io.encode_jpeg,density_unit,"An optional `string` from: `""in"", ""cm""`. Defaults to `""in""`. Unit used to specify `x_density` and `y_density`: pixels per inch (`'in'`) or centimeter (`'cm'`).",An optional D_TYPE from QSTR,D_TYPE,,0,,QSTR,
398,tf.signal.dct,name,An optional name for the operation.,An optional name for the operation,string,,0,,,
399,tf.signal.ifftshift,name,An optional name for the operation.,An optional name for the operation,string,,0,,,
400,tf.signal.hann_window,name,An optional name for the operation.,An optional name for the operation,string,,0,,,
401,tf.feature_column.sequence_categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,An ordered D_STRUCTURE defining the vocabulary,,,,,,D_STRUCTURE
402,tf.feature_column.categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,An ordered D_STRUCTURE defining the vocabulary,,,,,,D_STRUCTURE
403,tf.strings.unicode_decode,input,An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.  `N` must be statically known.,An QSTR dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR,D_TYPE,BSTR,QSTR,,,D_STRUCTURE
404,tf.linalg.cross,b,"A `Tensor`. Must have the same type as `a`. Another tensor, of same type and shape as `a`.",Another D_STRUCTURE of same type and shape as QSTR,&QSTR,&QSTR,,,,D_STRUCTURE
405,tf.debugging.enable_check_numerics,path_length_limit,Limit to the file path included in the printed stack trace. Applicable only to ops in `tf.function`s (graphs).,Applicable only to ops in tf function BSTR,,,,,,
406,tf.keras.utils.get_file,archive_format,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.",Archive format to try for extracting the file,,,,,,
407,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",Args input D_STRUCTURE with shape BSTR BSTR representing input for the batch of samples at a certain time step,,,,,,
408,tf.autograph.trace,*args,Arguments to print to `sys.stdout`.,Arguments to print to sys stdout,,,,,,
409,tf.xla.experimental.jit_scope,separate_compiled_gradients,"If true put each gradient subgraph into a separate compilation scope. This gives fine-grained control over which portions of the graph will be compiled as a single unit. Compiling gradients separately may yield better performance for some graphs. The scope is named based on the scope of the forward computation as well as the name of the gradients. As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients.",As a result the gradients will be compiled in a scope that is separate from both the forward computation and from other gradients,,,,,,
410,tf.keras.backend.placeholder,ndim,"Number of axes of the tensor. At least one of {`shape`, `ndim`} must be specified. If both are specified, `shape` is used.",At least one of PARAM QSTR must be specified,,,,,,
411,tf.summary.audio,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many audio clips will be emitted at each step. When more than`max_outputs` many clips are provided, the first `max_outputs`many clips will be used and the rest silently discarded.",At most this many audio clips will be emitted at each PARAM,int,,0,"[0,inf)",,
412,tf.summary.image,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many images will be emitted at each step. When more than`max_outputs` many images are provided, the first `max_outputs` many images will be used and the rest silently discarded.",At most this many images will be emitted at each PARAM,int,,0,"[0,inf)",,
413,tf.nn.atrous_conv2d,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",Atrous convolution is equivalent to standard convolution with upsampled filters with effective height QSTR filter_width BSTR produced by inserting PARAM CONSTANT_NUM zeros along consecutive elements across the QSTR spatial dimensions,,,,,,
414,tf.nn.atrous_conv2d_transpose,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",Atrous convolution is equivalent to standard convolution with upsampled filters with effective height QSTR filter_width BSTR produced by inserting PARAM CONSTANT_NUM zeros along consecutive elements across the QSTR spatial dimensions,,,,,,
415,tf.unstack,num,An `int`. The length of the dimension `axis`. Automatically inferred if`None` (the default).,Automatically inferred if QSTR BSTR,,,,,,
416,tf.keras.backend.reverse,axes,Integer or iterable of integers. Axes to reverse.,Axes to reverse,int,,,,,
417,tf.keras.backend.l2_normalize,axis,axis along which to perform normalization.,axis along which to perform normalization,int,,,,,
418,tf.tuple,name,(optional) A name to use as a `name_scope` for the operation.,BSTR A name to use as a QSTR for the operation,string,,0,,,
419,tf.foldr,back_prop,(optional) True enables support for back propagation.,BSTR CONSTANT_BOOL enables support for back propagation,bool,,0,,,
420,tf.foldr,initializer,"(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",BSTR D_STRUCTURE of D_STRUCTURE as the initial value for the accumulator,,,,,,D_STRUCTURE
421,tf.config.set_logical_device_configuration,logical_devices,"(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`. If None, the default configuration will be used.",BSTR D_STRUCTURE of tf config LogicalDeviceConfiguration QSTR PhysicalDevice,,,,,,D_STRUCTURE
422,tf.foldl,name,(optional) Name prefix for the returned tensors.,BSTR Name prefix for the returned D_STRUCTURE,string,,0,,,
423,tf.map_fn,name,(optional) Name prefix for the returned tensors.,BSTR Name prefix for the returned D_STRUCTURE,string,,0,,,
424,tf.config.list_logical_devices,device_type,"(optional string) Only include devices matching this device type. For example ""CPU"" or ""GPU"".",BSTR Only include devices matching this device type,,,,,,
425,tf.nn.RNNCellDropoutWrapper,input_size,(optional) (possibly nested tuple of) `TensorShape` objects containing the depth(s) of the input tensors expected to be passed in to the `DropoutWrapper`.  Required and used <strong>iff</strong> `variational_recurrent = True` and `input_keep_prob < 1`.,BSTR QSTR objects containing the depth BSTR of the input D_STRUCTURE expected to be passed in to the QSTR,,,,,,
426,tf.strings.unicode_encode,errors,Specifies the response when an invalid codepoint is encountered (optional). One of:     * `'replace'`: Replace invalid codepoint with the       `replacement_char`. (default)     * `'ignore'`: Skip invalid codepoints.     * `'strict'`: Raise an exception for any invalid codepoint.,BSTR QSTR Skip invalid codepoints,,,,,QSTR,
427,tf.nn.ctc_loss,blank_index,"(optional) Set the class index to use for the blank label. Negative values will start from num_classes, ie, -1 will reproduce the ctc_loss behavior of using num_classes - 1 for the blank symbol. There is some memory/performance overhead to switching from the default of 0 as an additional shifted copy of the logits may be created.",BSTR Set the class index to use for the blank label,,,,,,
428,tf.nn.RNNCellDropoutWrapper,dtype,"(optional) The `dtype` of the input, state, and output tensors. Required and used <strong>iff</strong> `variational_recurrent = True`.",BSTR The QSTR of the input state and output D_STRUCTURE,QSTR,,,,,
429,tf.linalg.pinv,a,(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,BSTR which are to be pseudo inverted,,,,,,
430,tf.data.experimental.make_csv_dataset,shuffle_buffer_size,"Buffer size to use for shuffling. A large buffer size ensures better shuffling, but increases memory usage and startup time.",Buffer size to use for shuffling,int,,,"[0,inf)",,
431,tf.estimator.experimental.stop_if_no_increase_hook,eval_dir,"If set, directory containing summary files with eval metrics. By default, `estimator.eval_dir()` will be used.",By default PARAM eval_dir will be used,,,,,,
432,tf.nn.conv2d_transpose,strides,"An int or list of `ints` that has length `1`, `2` or `4`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",By default the QSTR dimensions are set to CONSTANT_NUM,,,,,,
433,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",by specifying it using this flag,,,,,,
434,tf.control_dependencies,control_inputs,"A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context. Can also be `None` to clear the control dependencies. If eager execution is enabled, any callable object in the `control_inputs` list will be called.",Can also be QSTR to clear the control dependencies,,,,,,
435,tf.keras.layers.Conv2DTranspose,output_padding,"An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
436,tf.keras.layers.Conv3DTranspose,output_padding,"An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
437,tf.keras.layers.Conv3DTranspose,kernel_size,"An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
438,tf.strings.unicode_transcode,input,A `Tensor` of type `string`. The text to be processed. Can have any shape.,Can have any shape,,,,,,
439,tf.xla.experimental.jit_scope,separate_compiled_gradients,"If true put each gradient subgraph into a separate compilation scope. This gives fine-grained control over which portions of the graph will be compiled as a single unit. Compiling gradients separately may yield better performance for some graphs. The scope is named based on the scope of the forward computation as well as the name of the gradients. As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients.",Compiling gradients separately may yield better performance for some graphs,,,,,,
440,tf.image.encode_png,compression,An optional `int`. Defaults to `-1`. Compression level.,Compression level,,,,,,
441,tf.keras.layers.GRU,reset_after,"GRU convention (whether to apply reset gate after or before matrix multiplication). False = ""before"", True = ""after"" (default and CuDNN compatible).",CONSTANT_BOOL QSTR CONSTANT_BOOL QSTR BSTR,bool,,0,,,
442,tf.keras.layers.GRUCell,reset_after,"GRU convention (whether to apply reset gate after or before matrix multiplication). False = ""before"", True = ""after"" (default and CuDNN compatible).",CONSTANT_BOOL QSTR CONSTANT_BOOL QSTR BSTR,bool,,0,,,
443,tf.nn.fractional_avg_pool,pooling_ratio,"A list of `floats` that has length >= 4.  Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",CONSTANT_FLOAT and CONSTANT_FLOAT are pooling ratio on height and width dimensions respectively,,,,,,
444,tf.nn.fractional_max_pool,pooling_ratio,"An int or list of `ints` that has length `1`, `2` or `4`. Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",CONSTANT_FLOAT and CONSTANT_FLOAT are pooling ratio on height and width dimensions respectively,,,,,,
445,tf.io.decode_jpeg,contents,A `Tensor` of type `string`. 0-D.  The JPEG-encoded image.,CONSTANT_NUM D,,,CONSTANT_NUM,,,
446,tf.image.draw_bounding_boxes,colors,A `Tensor` of type `float32`. 2-D. A list of RGBA colors to cycle through for the boxes.,CONSTANT_NUM D A D_STRUCTURE of RGBA colors to cycle through for the PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
447,tf.image.sample_distorted_bounding_box,image_size,"A `Tensor`. Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`. 1-D, containing `[height, width, channels]`.",CONSTANT_NUM D containing BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
448,tf.linspace,num,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 0-D tensor. Number of values to generate.",CONSTANT_NUM D D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
449,tf.linspace,stop,A `Tensor`. Must have the same type as `start`. 0-D tensor. Last entry in the range.,CONSTANT_NUM D D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
450,tf.nn.weighted_moments,axes,1-d tensor of int32 values; these are the axes along which to compute mean and variance.,CONSTANT_NUM d D_STRUCTURE of D_TYPE values these are the axes along which to compute mean and variance,D_TYPE,,CONSTANT_NUM,,,D_STRUCTURE
451,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",CONSTANT_NUM D D_STRUCTURE of length CONSTANT_NUM,,[CONSTANT_NUM],1,,,D_STRUCTURE
452,tf.sparse.slice,start,1-D. tensor represents the start of the slice.,CONSTANT_NUM D D_STRUCTURE represents the start of the slice,,,CONSTANT_NUM,,,D_STRUCTURE
453,tf.nn.separable_conv2d,input,4-D `Tensor` with shape according to `data_format`.,CONSTANT_NUM D D_STRUCTURE with shape according to PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
454,tf.random.categorical,logits,"2-D Tensor with shape `[batch_size, num_classes]`.  Each slice`[i, :]` represents the unnormalized log-probabilities for all classes.",CONSTANT_NUM D D_STRUCTURE with shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
455,tf.extract_volume_patches,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`. 5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",CONSTANT_NUM D D_STRUCTURE with shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
456,tf.keras.backend.local_conv2d,inputs,"4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",CONSTANT_NUM D D_STRUCTURE with shape BSTR if PARAM QSTR or CONSTANT_NUM D D_STRUCTURE with shape BSTR if PARAM QSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
457,tf.nn.ctc_beam_search_decoder,inputs,"3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`. The logits.",CONSTANT_NUM D D_TYPE D_STRUCTURE size BSTR,D_TYPE,BSTR,CONSTANT_NUM,,,D_STRUCTURE
458,tf.nn.local_response_normalization,depth_radius,An optional `int`. Defaults to `5`. 0-D.  Half-width of the 1-D normalization window.,CONSTANT_NUM D D_TYPE width of the CONSTANT_NUM D normalization window,D_TYPE,,CONSTANT_NUM,,,
459,tf.nn.erosion2d,dilations,"A list of `ints` that has length `>= 4`. 1-D of length 4. The input stride for atrous morphological dilation. Must be: `[1, rate_height, rate_width, 1]`.",CONSTANT_NUM D of length CONSTANT_NUM,,[CONSTANT_NUM],1,,,
460,tf.extract_volume_patches,strides,"A list of `ints` that has length `>= 5`. 1-D of length 5. How far the centers of two consecutive patches are in`input`. Must be: `[1, stride_planes, stride_rows, stride_cols, 1]`.",CONSTANT_NUM D of length CONSTANT_NUM,,[CONSTANT_NUM],1,,,
461,tf.nn.separable_conv2d,dilations,"1-D of size 2. The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution. If it is greater than 1, then all values of strides must be 1.",CONSTANT_NUM D of size CONSTANT_NUM,,[CONSTANT_NUM],CONSTANT_NUM,,,
462,tf.argsort,values,1-D or higher numeric `Tensor`.,CONSTANT_NUM D or higher D_TYPE D_STRUCTURE,,,>=CONSTANT_NUM,,,D_STRUCTURE
463,tf.image.hsv_to_rgb,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. HSV data to convert. Last dimension must be size 3.",CONSTANT_NUM D or higher rank,,,>=CONSTANT_NUM,,,
464,tf.image.rgb_to_hsv,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. RGB data to convert. Last dimension must be size 3.",CONSTANT_NUM D or higher rank,,,>=CONSTANT_NUM,,,
465,tf.nn.fractional_avg_pool,value,"A `Tensor`. 4-D with shape `[batch, height, width, channels]`.",CONSTANT_NUM D with shape BSTR,,BSTR,CONSTANT_NUM,,,
466,tf.batch_to_space,block_shape,"A `Tensor`. Must be one of the following types: `int32`,`int64`. 1-D with shape `[M]`, all values must be >= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",CONSTANT_NUM D with shape BSTR all values must be REXPR,,BSTR,CONSTANT_NUM,,,
467,tf.space_to_batch_nd,paddings,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.  It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",CONSTANT_NUM D with shape BSTR all values must be REXPRpaddings BSTR BSTR specifies the padding for PARAM dimension i CONSTANT_NUM which corresponds to spatial dimension QSTR,,BSTR,CONSTANT_NUM,,,
468,tf.keras.preprocessing.sequence.skipgrams,sequence,"A word sequence (sentence), encoded as a list     of word indices (integers). If using a `sampling_table`,     word indices are expected to match the rank     of the words in a reference dataset (e.g. 10 would encode     the 10-th most frequently occurring token).     Note that index 0 is expected to be a non-word and will be skipped.",CONSTANT_NUM would encode the CONSTANT_NUM th most frequently occurring token,,,,,,
469,tf.keras.layers.DepthwiseConv2D,bias_constraint,Constraint function applied to the bias vector.,Constraint function applied to the bias D_STRUCTURE,,,,,,
470,tf.keras.layers.LocallyConnected2D,bias_constraint,Constraint function applied to the bias vector.,Constraint function applied to the bias D_STRUCTURE,,,,,,
471,tf.keras.layers.ConvLSTM2D,bias_constraint,Constraint function applied to the bias vector.,Constraint function applied to the bias D_STRUCTURE,,,,,,
472,tf.keras.layers.GRUCell,bias_constraint,Constraint function applied to the bias vector. Default:`None`.,Constraint function applied to the bias D_STRUCTURE,,,,,,
473,tf.keras.layers.Embedding,embeddings_constraint,Constraint function applied to the `embeddings` matrix.,Constraint function applied to the QSTR matrix,,,,,,
474,tf.keras.layers.SimpleRNN,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,,
475,tf.keras.layers.SimpleRNN,recurrent_constraint,Constraint function applied to the `recurrent_kernel`weights matrix.  Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,,
476,tf.io.decode_image,expand_animations,"Controls the shape of the returned op's output. If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not. If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",Controls the shape of the returned op output,,,,,,
477,tf.keras.backend.depthwise_conv2d,depthwise_kernel,convolution kernel for the depthwise convolution.,convolution kernel for the depthwise convolution,,,,,,
478,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",copy can have non deterministic consequences,,,,,,
479,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",Correct choice of implementation can lead to dramatic speed improvements e g,,,,,,
480,tf.fingerprint,method,A `Tensor` of type `tf.string`. Fingerprint method used by this op. Currently available method is `farmhash64`.,Currently available method is QSTR,,,,,QSTR,
481,tf.nn.safe_embedding_lookup_sparse,sparse_ids,"`SparseTensor` of shape `[d_0, d_1, ..., d_n]` containing the ids. `d_0` is typically batch size.",d CONSTANT_NUM is typically batch size,,,,,,
482,tf.keras.preprocessing.text.text_to_word_sequence,filters,"list (or concatenation) of characters to filter out, such as     punctuation. Default: ``!""#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n``,     includes basic punctuation, tabs, and newlines.",D_STRUCTURE BSTR of characters to filter out such as punctuation,,,,,,
483,tf.keras.backend.ctc_decode,y_pred,"tensor `(samples, time_steps, num_categories)`containing the prediction, or output of the softmax.",D_STRUCTURE BSTRcontaining the prediction or output of the softmax,,,,,,D_STRUCTURE
484,tf.keras.backend.ctc_batch_cost,y_pred,"tensor `(samples, time_steps, num_categories)`containing the prediction, or output of the softmax.",D_STRUCTURE BSTRcontaining the prediction or output of the softmax,,,,,,D_STRUCTURE
485,tf.keras.layers.InputSpec,axes,Dictionary mapping integer axes to a specific dimension value.,D_STRUCTURE mapping D_TYPE axes to a specific dimension value,D_TYPE,,,,,D_STRUCTURE
486,tf.math.truediv,x,`Tensor` numerator of numeric type.,D_STRUCTURE numerator of D_TYPE type,D_TYPE,,,,,D_STRUCTURE
487,tf.keras.backend.conv2d_transpose,dilation_rate,Tuple of 2 integers.,D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
488,tf.keras.backend.pool2d,pool_size,tuple of 2 integers.,D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
489,tf.keras.backend.spatial_3d_padding,padding,"Tuple of 3 tuples, padding pattern.",D_STRUCTURE of CONSTANT_NUM tuples padding pattern,,,,,,D_STRUCTURE
490,tf.keras.backend.concatenate,tensors,list of tensors to concatenate.,D_STRUCTURE of D_STRUCTURE to concatenate,,,,,,D_STRUCTURE
491,tf.io.decode_proto,field_names,"A list of `strings`. List of strings containing proto field names. An extension field can be decoded by using its full name, e.g. EXT_PACKAGE.EXT_FIELD_NAME.",D_STRUCTURE of D_TYPE containing proto field names,D_TYPE,,,,,D_STRUCTURE
492,tf.keras.backend.zeros,shape,"Tuple or list of integers, shape of returned Keras variable",D_STRUCTURE of D_TYPE shape of returned Keras variable,D_TYPE,,1,"[0,inf)",,D_STRUCTURE
493,tf.keras.preprocessing.image.random_zoom,zoom_range,Tuple of floats; zoom range for width and height.,D_STRUCTURE of D_TYPE zoom range for width and height,D_TYPE,,,,,D_STRUCTURE
494,tf.nn.pool,dilations,"Optional.  Dilation rate.  List of N ints >= 1. Defaults to [1]*N.  If any value of dilation_rate is > 1, then all values of strides must be 1.",D_STRUCTURE of N D_TYPE REXPR,D_TYPE,[N],1,REXPR,,D_STRUCTURE
495,tf.io.decode_proto,bytes,A `Tensor` of type `string`. Tensor of serialized protos with shape `batch_shape`.,D_STRUCTURE of serialized protos with shape QSTR,,BSTR,,,,D_STRUCTURE
496,tf.eig,tensor,"`Tensor` of shape `[..., N, N]`. Only the lower triangular part of each inner inner matrix is referenced.",D_STRUCTURE of shape BSTR,,BSTR,,,,D_STRUCTURE
497,tf.nn.collapse_repeated,labels,"Tensor of shape [batch, max value in seq_length]",D_STRUCTURE of shape BSTR,,BSTR,,,,D_STRUCTURE
498,tf.nn.safe_embedding_lookup_sparse,sparse_ids,"`SparseTensor` of shape `[d_0, d_1, ..., d_n]` containing the ids. `d_0` is typically batch size.",D_STRUCTURE of shape BSTR containing the ids,int,BSTR,,"[0,inf)",,D_STRUCTURE
499,tf.nn.ctc_loss,logits,"tensor of shape [frames, batch_size, num_labels], if logits_time_major == False, shape is [batch_size, frames, num_labels].",D_STRUCTURE of shape BSTR if PARAM CONSTANT_BOOL shape is BSTR,,BSTR,,,,D_STRUCTURE
500,tf.sets.intersection,b,"`Tensor` or `SparseTensor` of the same type as `a`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,&QSTR,,,,,D_STRUCTURE
501,tf.sets.difference,b,"`Tensor` or `SparseTensor` of the same type as `a`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,&QSTR,,,,,D_STRUCTURE
502,tf.tensordot,a,`Tensor` of type `float32` or `float64`.,D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
503,tf.linalg.normalize,tensor,"`Tensor` of types `float32`, `float64`, `complex64`, `complex128`",D_STRUCTURE of types D_TYPE,D_TYPE,,,,,D_STRUCTURE
504,tf.keras.backend.argmax,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
505,tf.keras.backend.sin,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
506,tf.keras.backend.transpose,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
507,tf.keras.backend.dtype,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
508,tf.keras.backend.minimum,y,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
509,tf.keras.backend.clip,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
510,tf.keras.backend.int_shape,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
511,tf.keras.backend.conv2d_transpose,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
512,tf.keras.backend.less_equal,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
513,tf.keras.backend.sqrt,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
514,tf.keras.backend.spatial_3d_padding,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
515,tf.keras.backend.pool2d,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
516,tf.keras.backend.square,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
517,tf.tensor_scatter_nd_add,tensor,A `Tensor`. Tensor to copy/update.,D_STRUCTURE to copy update,,,,,,D_STRUCTURE
518,tf.keras.backend.print_tensor,x,Tensor to print.,D_STRUCTURE to print,,,,,,D_STRUCTURE
519,tf.debugging.assert_shapes,shapes,dictionary with (`Tensor` to shape) items. A shape must be an iterable.,D_STRUCTURE with BSTR items,,,,,,D_STRUCTURE
520,tf.keras.backend.rnn,initial_states,"Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function. In the case that state_size is in a nested shape, the shape of initial_states will also follow the nested structure.",D_STRUCTURE with shape BSTR BSTR containing the initial values for the states used in the step function,,BSTR,,,,D_STRUCTURE
521,tf.tensordot,b,`Tensor` with the same type as `a`.,D_STRUCTURE with the same type as QSTR,&QSTR,,,,,D_STRUCTURE
522,tf.keras.backend.batch_normalization,beta,Tensor with which to center the input.,D_STRUCTURE with which to center the input,,,,,,D_STRUCTURE
523,tf.keras.layers.Softmax,axis,"Integer, axis along which the softmax normalization is applied.",D_TYPE axis along which the softmax normalization is applied,D_TYPE,,,,,
524,tf.keras.layers.LSTMCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,"[0,1]",,
525,tf.keras.layers.LSTM,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,"[0,1]",,
526,tf.keras.layers.GRU,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,"[0,1]",,
527,tf.keras.layers.SimpleRNN,go_backwards,"Boolean (default False). If True, process the input sequence backwards and return the reversed sequence.",D_TYPE BSTR,D_TYPE,,,,,
528,tf.image.non_max_suppression,score_threshold,DF: float(-inf),D_TYPE BSTR,D_TYPE,,,,,
529,tf.debugging.assert_greater,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
530,tf.debugging.assert_non_negative,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
531,tf.debugging.assert_greater,y,"Numeric `Tensor`, same dtype as and broadcastable to `x`.",D_TYPE D_STRUCTURE same dtype as and broadcastable to QSTR,D_TYPE;&QSTR,,,,,D_STRUCTURE
532,tf.strings.regex_replace,input,"string `Tensor`, the source strings to process.",D_TYPE D_STRUCTURE the source D_TYPE to process,D_TYPE,,,,,D_STRUCTURE
533,tf.eye,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
534,tf.signal.linear_to_mel_weight_matrix,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
535,tf.random.stateless_normal,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
536,tf.feature_column.numeric_column,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
537,tf.random.uniform,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
538,tf.sparse.eye,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
539,tf.signal.hamming_window,dtype,DF: tf.dtypes.float32,ONE_WORD D_TYPE,tf.dtype,,,,,
540,tf.shape,out_type,DF: tf.dtypes.int32,ONE_WORD D_TYPE,tf.dtype,,,,,
541,tf.histogram_fixed_width_bins,dtype,DF: tf.dtypes.int32,ONE_WORD D_TYPE,tf.dtype,,,,,
542,tf.shape_n,out_type,DF: tf.dtypes.int32,ONE_WORD D_TYPE,tf.dtype,,,,,
543,tf.data.experimental.Counter,dtype,DF: tf.dtypes.int64,ONE_WORD D_TYPE,tf.dtype,,,,,
544,tf.math.argmin,output_type,DF: tf.dtypes.int64,ONE_WORD D_TYPE,tf.dtype,,,,,
545,tf.ragged.constant,row_splits_dtype,DF: tf.dtypes.int64,ONE_WORD D_TYPE,tf.dtype,,,,,
546,tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,DF: tf.dtypes.int64,ONE_WORD D_TYPE,tf.dtype,,,,,
547,tf.keras.layers.LSTM,stateful,"Boolean (default `False`). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",D_TYPE default CONSTANT_BOOL,bool,,0,,,
548,tf.keras.layers.LSTMCell,unit_forget_bias,"Boolean (default `True`). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force`bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",D_TYPE default CONSTANT_BOOL,bool,,0,,,
549,tf.keras.layers.SimpleRNN,use_bias,"Boolean, (default `True`), whether the layer uses a bias vector.",D_TYPE default CONSTANT_BOOL whether the layer uses a bias D_STRUCTURE,bool,,0,,,
550,tf.keras.backend.conv1d,dilation_rate,integer dilate rate.,D_TYPE dilate rate,D_TYPE,,,"[0,1]",,
551,tf.sparse.cross_hashed,hash_key,"Integer hash_key that will be used by the `FingerprintCat64`function. If not given, will use a default key.",D_TYPE hash_key that will be used by the QSTR function,D_TYPE,,,,,
552,tf.linalg.triangular_solve,lower,An optional `bool`. Defaults to `True`. Boolean indicating whether the innermost matrices in `matrix` are lower or upper triangular.,D_TYPE indicating whether the innermost matrices in PARAM are lower or upper triangular,D_TYPE,,0,,,
553,tf.linalg.triangular_solve,adjoint,An optional `bool`. Defaults to `False`. Boolean indicating whether to solve with `matrix` or its (block-wise)        adjoint.,D_TYPE indicating whether to solve with PARAM or its BSTR adjoint,D_TYPE,,0,,,
554,tf.feature_column.weighted_categorical_column,weight_feature_key,String key for weight values.,D_TYPE key for weight values,D_TYPE,,,,,
555,tf.keras.regularizers.l1,l,Float; L1 regularization factor.,D_TYPE L1 regularization factor,D_TYPE,,,,,
556,tf.keras.preprocessing.sequence.pad_sequences,maxlen,"Int, maximum length of all sequences.",D_TYPE maximum length of all PARAM,D_TYPE,,,"[0,inf)",,
557,tf.keras.preprocessing.sequence.skipgrams,vocabulary_size,"Int, maximum possible word index + 1",D_TYPE maximum possible word index CONSTANT_NUM,D_TYPE,,,,,
558,tf.estimator.experimental.stop_if_no_decrease_hook,metric_name,"`str`, metric to track. ""loss"", ""accuracy"", etc.",D_TYPE metric to track,D_TYPE,,,,,
559,tf.math.argmax,axis,"A `Tensor`. Must be one of the following types: `int32`, `int64`. int32 or int64, must be in the range `-rank(input), rank(input))`. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.",D_TYPE must be in the range rank BSTR,D_TYPE,,,BSTR,,
560,tf.image.random_brightness,max_delta,"float, must be non-negative.",D_TYPE must be non negative,D_TYPE,,,"[0,inf)",,
561,tf.io.gfile.copy,dst,"string, name of the file to which to copy to",D_TYPE name of the file to which to copy to,D_TYPE,,,,,
562,tf.keras.backend.eye,size,"Integer, number of rows/columns.",D_TYPE number of rows columns,D_TYPE,,0,"[0,inf)",,
563,tf.keras.experimental.terminate_keras_multiprocessing_pools,use_sigkill,Boolean of whether or not to perform a cleanup pass using SIGKILL.,D_TYPE of whether or not to perform a cleanup pass using SIGKILL,D_TYPE,,0,,,
564,tf.linalg.lstsq,name,"string, optional name of the operation.",D_TYPE optional name of the operation,D_TYPE,,0,,,
565,tf.keras.layers.UpSampling2D,size,"Int, or tuple of 2 integers. The upsampling factors for rows and columns.",D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
566,tf.keras.layers.AveragePooling2D,pool_size,"integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension. If only one integer is specified, the same window length will be used for both dimensions.",D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE factors by which to downscale BSTR BSTR will halve the input in both spatial dimension,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
567,tf.keras.layers.Cropping2D,cropping,"Int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints. If int: the same symmetric cropping is applied to height and width.If tuple of 2 ints: interpreted as two different symmetric cropping values for height and width:`(symmetric_height_crop, symmetric_width_crop)`.If tuple of 2 tuples of 2 ints: interpreted as`((top_crop, bottom_crop), (left_crop, right_crop))` ",D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
568,tf.keras.layers.ZeroPadding2D,padding,"Int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints. If int: the same symmetric padding is applied to height and width.If tuple of 2 ints: interpreted as two different symmetric padding values for height and width:`(symmetric_height_pad, symmetric_width_pad)`.If tuple of 2 tuples of 2 ints: interpreted as`((top_pad, bottom_pad), (left_pad, right_pad))` ",D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
569,tf.keras.layers.ZeroPadding3D,padding,"Int, or tuple of 3 ints, or tuple of 3 tuples of 2 ints. If int: the same symmetric padding is applied to height and width.If tuple of 3 ints: interpreted as two different symmetric padding values for height and width:`(symmetric_dim1_pad, symmetric_dim2_pad, symmetric_dim3_pad)`.If tuple of 3 tuples of 2 ints: interpreted as`((left_dim1_pad, right_dim1_pad), (left_dim2_pad, right_dim2_pad), (left_dim3_pad, right_dim3_pad))` ",D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE,D_TYPE,[CONSTANT_NUM],1,,,D_STRUCTURE
570,tf.keras.backend.reverse,axes,Integer or iterable of integers. Axes to reverse.,D_TYPE or D_STRUCTURE of D_TYPE,D_TYPE,,0;1,,,D_STRUCTURE
571,tf.strings.regex_replace,pattern,"string or scalar string `Tensor`, regular expression to use, see more details at https://github.com/google/re2/wiki/Syntax",D_TYPE or scalar D_TYPE D_STRUCTURE regular expression to use see more details at https github com google re2 wiki Syntax,D_TYPE,,0,,,D_STRUCTURE
572,tf.signal.fftshift,axes,"`int` or shape `tuple`, optional Axes over which to shift.  Default is None, which shifts all axes.",D_TYPE or shape D_STRUCTURE optional Axes over which to shift,D_TYPE,,0;1,"[0,inf)",,
573,tf.io.gfile.stat,path,"string, path to a file",D_TYPE path to a file,D_TYPE,,0,,,
574,tf.keras.backend.depthwise_conv2d,data_format,"string, `""channels_last""` or `""channels_first""`.",D_TYPE QSTR,D_TYPE,,,,QSTR,
575,tf.keras.backend.conv3d,data_format,"string, `""channels_last""` or `""channels_first""`.",D_TYPE QSTR,D_TYPE,,,,QSTR,
576,tf.keras.backend.pool2d,pool_mode,"string, `""max""` or `""avg""`.",D_TYPE QSTR,D_TYPE,,,,QSTR,
577,tf.keras.backend.depthwise_conv2d,padding,"string, `""same""` or `""valid""`.",D_TYPE QSTR,D_TYPE,,,,QSTR,
578,tf.keras.preprocessing.sequence.pad_sequences,padding,"String, 'pre' or 'post':     pad either before or after each sequence.",D_TYPE QSTR pad either before or after each D_STRUCTURE,D_TYPE,,,,QSTR,
579,tf.keras.backend.random_normal_variable,seed,"Integer, random seed.",D_TYPE random seed,D_TYPE,,,,,
580,tf.keras.backend.truncated_normal,seed,"Integer, random seed.",D_TYPE random seed,D_TYPE,,,,,
581,tf.keras.backend.random_binomial,seed,"Integer, random seed.",D_TYPE random seed,D_TYPE,,,,,
582,tf.keras.layers.ReLU,negative_slope,Float >= 0. Negative slope coefficient.,D_TYPE REXPR,D_TYPE,,,REXPR,,
583,tf.keras.layers.ThresholdedReLU,theta,Float >= 0. Threshold location of activation.,D_TYPE REXPR,D_TYPE,,,REXPR,,
584,tf.keras.layers.Embedding,output_dim,int >= 0. Dimension of the dense embedding.,D_TYPE REXPR,D_TYPE,,,REXPR,,
585,tf.keras.preprocessing.sequence.skipgrams,window_size,"Int, size of sampling windows (technically half-window).     The window of a word `w_i` will be     `[i - window_size, i + window_size+1]`.",D_TYPE size of sampling windows BSTR,D_TYPE,,,"[0,inf)",,
586,tf.keras.layers.AveragePooling1D,pool_size,"Integer, size of the average pooling windows.",D_TYPE size of the average pooling windows,D_TYPE,,,"[0,inf)",,
587,tf.keras.backend.categorical_crossentropy,axis,"Int specifying the channels axis. `axis=-1` corresponds to data format `channels_last', and`axis=1`corresponds to data format`channels_first`.",D_TYPE specifying the channels axis,D_TYPE,,,,,
588,tf.io.gfile.walk,topdown,"bool, Traverse pre order if True, post order if False.",D_TYPE Traverse pre order if CONSTANT_BOOL post order if CONSTANT_BOOL,D_TYPE,,0,,,
589,tf.io.encode_base64,pad,An optional `bool`. Defaults to `False`. Bool whether padding is applied at the ends.,D_TYPE whether padding is applied at the ends,D_TYPE,,0,,,
590,tf.keras.backend.sparse_categorical_crossentropy,from_logits,"Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",D_TYPE whether PARAM is the result of a softmax or is a D_STRUCTURE of logits,D_TYPE,,0,,,
591,tf.keras.layers.DepthwiseConv2D,use_bias,"Boolean, whether the layer uses a bias vector.",D_TYPE whether the layer uses a bias D_STRUCTURE,D_TYPE,,0,,,
592,tf.keras.layers.LocallyConnected2D,use_bias,"Boolean, whether the layer uses a bias vector.",D_TYPE whether the layer uses a bias D_STRUCTURE,D_TYPE,,0,,,
593,tf.keras.layers.Dense,use_bias,"Boolean, whether the layer uses a bias vector.",D_TYPE whether the layer uses a bias D_STRUCTURE,D_TYPE,,0,,,
594,tf.keras.layers.Layer,trainable,"Boolean, whether the layer's variables should be trainable.",D_TYPE whether the layer variables should be trainable,D_TYPE,,0,,,
595,tf.ragged.constant,row_splits_dtype,data type for the constructed `RaggedTensor`'s row_splits. One of `tf.int32` or `tf.int64`.,data type for the constructed QSTR row_splits,,,,,,
596,tf.keras.layers.Cropping2D,cropping,"DF: ((0, 0), (0, 0))",DEFAULT BSTR,,,2,,,
597,tf.keras.backend.spatial_3d_padding,padding,"DF: ((1, 1), (1, 1), (1, 1))",DEFAULT BSTR,,,2,,,
598,tf.keras.layers.GRU,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence. Default: `False`.",Default CONSTANT_BOOL,bool,,0,,,
599,tf.keras.layers.GRU,return_state,Boolean. Whether to return the last state in addition to the output. Default: `False`.,Default CONSTANT_BOOL,bool,,0,,,
600,tf.nn.sufficient_statistics,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
601,tf.keras.layers.LSTM,time_major,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
602,tf.keras.layers.SimpleRNN,go_backwards,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
603,tf.linalg.matmul,transpose_b,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
604,tf.quantization.fake_quant_with_min_max_vars_gradient,narrow_range,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
605,tf.quantization.quantize,narrow_range,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
606,tf.linalg.lu_reconstruct,validate_args,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
607,tf.image.resize,antialias,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
608,tf.io.encode_base64,pad,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
609,tf.quantization.fake_quant_with_min_max_vars,narrow_range,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
610,tf.function,experimental_relax_shapes,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
611,tf.keras.layers.GRU,return_sequences,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
612,tf.math.reduce_min,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
613,tf.math.cumulative_logsumexp,exclusive,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
614,tf.linalg.matvec,b_is_sparse,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
615,tf.linalg.triangular_solve,adjoint,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
616,tf.math.reduce_logsumexp,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
617,tf.math.reduce_mean,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
618,tf.image.resize_with_pad,antialias,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
619,tf.data.experimental.bucket_by_sequence_length,drop_remainder,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
620,tf.keras.utils.plot_model,show_shapes,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
621,tf.sparse.sparse_dense_matmul,adjoint_a,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
622,tf.data.experimental.dense_to_ragged_batch,drop_remainder,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
623,tf.keras.utils.plot_model,expand_nested,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
624,tf.keras.layers.LSTM,stateful,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
625,tf.keras.backend.all,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
626,tf.nn.log_poisson_loss,compute_full_loss,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
627,tf.math.cumsum,exclusive,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
628,tf.sparse.reduce_max,output_is_sparse,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
629,tf.keras.backend.sparse_categorical_crossentropy,from_logits,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
630,tf.nn.max_pool_with_argmax,include_batch_in_index,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
631,tf.linalg.matrix_rank,validate_args,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
632,tf.get_static_value,partial,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
633,tf.keras.layers.dot,normalize,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
634,tf.math.cumulative_logsumexp,reverse,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
635,tf.sparse.sparse_dense_matmul,adjoint_b,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
636,tf.keras.Input,ragged,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
637,tf.math.cumprod,reverse,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
638,tf.nn.fractional_avg_pool,overlapping,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
639,tf.keras.layers.GRU,return_state,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
640,tf.xla.experimental.jit_scope,separate_compiled_gradients,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
641,tf.keras.layers.Attention,use_scale,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
642,tf.keras.experimental.terminate_keras_multiprocessing_pools,use_sigkill,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
643,tf.linalg.svd,full_matrices,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
644,tf.data.experimental.make_batched_features_dataset,sloppy_ordering,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
645,tf.keras.layers.RNN,go_backwards,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
646,tf.keras.backend.any,keepdims,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
647,tf.keras.layers.ConvLSTM2D,return_sequences,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
648,tf.keras.layers.GRU,go_backwards,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
649,tf.io.gfile.rename,overwrite,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
650,tf.io.decode_jpeg,try_recover_truncated,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
651,tf.quantization.quantize_and_dequantize,range_given,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
652,tf.linalg.matmul,adjoint_b,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
653,tf.linalg.lu_matrix_inverse,validate_args,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
654,tf.keras.layers.ConvLSTM2D,stateful,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
655,tf.linalg.matvec,a_is_sparse,DF: False,DEFAULT CONSTANT_BOOL,bool,,0,,,
656,tf.summary.trace_on,graph,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
657,tf.data.experimental.make_csv_dataset,use_quote_delim,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
658,tf.keras.preprocessing.sequence.skipgrams,shuffle,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
659,tf.nn.sampled_softmax_loss,remove_accidental_hits,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
660,tf.keras.layers.LSTMCell,unit_forget_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
661,tf.keras.layers.DepthwiseConv2D,use_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
662,tf.keras.layers.LocallyConnected2D,use_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
663,tf.linalg.triangular_solve,lower,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
664,tf.sets.union,validate_indices,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
665,tf.io.decode_image,expand_animations,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
666,tf.keras.preprocessing.image.array_to_img,scale,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
667,tf.keras.layers.SimpleRNN,use_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
668,tf.keras.layers.ConvLSTM2D,unit_forget_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
669,tf.keras.layers.GRU,reset_after,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
670,tf.keras.preprocessing.text.hashing_trick,lower,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
671,tf.keras.layers.Layer,trainable,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
672,tf.keras.layers.LayerNormalization,center,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
673,tf.while_loop,back_prop,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
674,tf.io.gfile.walk,topdown,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
675,tf.foldr,back_prop,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
676,tf.keras.layers.GRUCell,reset_after,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
677,tf.keras.layers.BatchNormalization,center,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
678,tf.keras.layers.Dense,use_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
679,tf.keras.layers.LayerNormalization,scale,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
680,tf.xla.experimental.jit_scope,compile_ops,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
681,tf.data.experimental.make_batched_features_dataset,shuffle,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
682,tf.math.top_k,sorted,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
683,tf.keras.models.save_model,include_optimizer,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
684,tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
685,tf.keras.layers.SeparableConv1D,use_bias,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
686,tf.keras.layers.BatchNormalization,trainable,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
687,tf.linalg.tridiagonal_solve,partial_pivoting,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
688,tf.sets.difference,aminusb,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
689,tf.autograph.to_graph,recursive,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
690,tf.nest.assert_same_structure,check_types,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
691,tf.keras.utils.plot_model,show_layer_names,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
692,tf.io.decode_jpeg,fancy_upscaling,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
693,tf.keras.preprocessing.text.text_to_word_sequence,lower,DF: True,DEFAULT CONSTANT_BOOL,bool,,0,,,
694,tf.keras.backend.random_uniform,minval,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
695,tf.keras.layers.LSTMCell,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
696,tf.keras.layers.LSTM,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
697,tf.random.stateless_normal,mean,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
698,tf.keras.layers.ActivityRegularization,l1,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
699,tf.keras.layers.GRU,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
700,tf.keras.layers.SimpleRNNCell,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
701,tf.keras.layers.SimpleRNN,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
702,tf.random.normal,mean,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
703,tf.keras.preprocessing.image.random_shear,cval,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
704,tf.keras.layers.SimpleRNN,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
705,tf.keras.layers.GRUCell,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
706,tf.keras.layers.SimpleRNNCell,dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
707,tf.keras.layers.LSTM,recurrent_dropout,DF: 0.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
708,tf.keras.backend.batch_normalization,epsilon,DF: 0.001,DEFAULT CONSTANT_FLOAT,float,,0,,,
709,tf.image.ssim_multiscale,k1,DF: 0.01,DEFAULT CONSTANT_FLOAT,float,,0,,,
710,tf.keras.regularizers.l1,l,DF: 0.01,DEFAULT CONSTANT_FLOAT,float,,0,,,
711,tf.keras.regularizers.l1_l2,l2,DF: 0.01,DEFAULT CONSTANT_FLOAT,float,,0,,,
712,tf.image.ssim_multiscale,k2,DF: 0.03,DEFAULT CONSTANT_FLOAT,float,,0,,,
713,tf.keras.experimental.terminate_keras_multiprocessing_pools,grace_period,DF: 0.1,DEFAULT CONSTANT_FLOAT,float,,0,,,
714,tf.image.non_max_suppression,iou_threshold,DF: 0.5,DEFAULT CONSTANT_FLOAT,float,,0,,,
715,tf.image.non_max_suppression_overlaps,overlap_threshold,DF: 0.5,DEFAULT CONSTANT_FLOAT,float,,0,,,
716,tf.nn.local_response_normalization,beta,DF: 0.5,DEFAULT CONSTANT_FLOAT,float,,0,,,
717,tf.image.combined_non_max_suppression,iou_threshold,DF: 0.5,DEFAULT CONSTANT_FLOAT,float,,0,,,
718,tf.keras.backend.random_uniform,maxval,DF: 1.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
719,tf.random.normal,stddev,DF: 1.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
720,tf.keras.backend.truncated_normal,stddev,DF: 1.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
721,tf.random.stateless_truncated_normal,stddev,DF: 1.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
722,tf.keras.layers.ThresholdedReLU,theta,DF: 1.0,DEFAULT CONSTANT_FLOAT,float,,0,,,
723,tf.one_hot,off_value,A scalar defining the value to fill in output when `indices[j] != i`. (default: 0),default CONSTANT_NUM,int,,0,,,
724,tf.linalg.diag,num_cols,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
725,tf.linalg.diag,num_rows,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
726,tf.keras.backend.softmax,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
727,tf.image.encode_png,compression,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
728,tf.signal.idct,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
729,tf.keras.layers.Softmax,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
730,tf.audio.decode_wav,desired_channels,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
731,tf.keras.backend.categorical_crossentropy,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
732,tf.keras.layers.Concatenate,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
733,tf.keras.backend.batch_normalization,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
734,tf.strings.as_string,width,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
735,tf.signal.frame,axis,DF: -1,DEFAULT CONSTANT_NUM,int,,0,,,
736,tf.keras.layers.ZeroPadding3D,padding,"DF: (1, 1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
737,tf.keras.layers.Conv3D,strides,"DF: (1, 1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
738,tf.keras.backend.conv2d_transpose,dilation_rate,"DF: (1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
739,tf.keras.backend.depthwise_conv2d,strides,"DF: (1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
740,tf.keras.layers.ZeroPadding2D,padding,"DF: (1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
741,tf.keras.backend.temporal_padding,padding,"DF: (1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
742,tf.keras.layers.Conv2D,dilation_rate,"DF: (1, 1)",DEFAULT CONSTANT_NUM,int,,1,,,
743,tf.keras.layers.AveragePooling2D,pool_size,"DF: (2, 2)",DEFAULT CONSTANT_NUM,int,,1,,,
744,tf.keras.layers.UpSampling2D,size,"DF: (2, 2)",DEFAULT CONSTANT_NUM,int,,1,,,
745,tf.nn.depthwise_conv2d_backprop_input,dilations,"DF: [1, 1, 1, 1]",DEFAULT CONSTANT_NUM,int,,1,,,
746,tf.io.decode_and_crop_jpeg,channels,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
747,tf.keras.layers.ReLU,negative_slope,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
748,tf.keras.backend.cumprod,axis,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
749,tf.config.experimental_connect_to_cluster,task_index,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
750,tf.math.cumulative_logsumexp,axis,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
751,tf.nn.fractional_avg_pool,seed,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
752,tf.ragged.stack,axis,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
753,tf.keras.preprocessing.image.apply_affine_transform,tx,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
754,tf.strided_slice,new_axis_mask,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
755,tf.pad,constant_values,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
756,tf.gather,batch_dims,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
757,tf.image.sample_distorted_bounding_box,seed,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
758,tf.linalg.diag,k,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
759,tf.gather_nd,batch_dims,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
760,tf.keras.preprocessing.image.random_shear,channel_axis,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
761,tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
762,tf.strided_slice,end_mask,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
763,tf.keras.backend.relu,threshold,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
764,tf.keras.preprocessing.image.apply_channel_shift,channel_axis,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
765,tf.keras.datasets.reuters.load_data,skip_top,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
766,tf.random.stateless_uniform,minval,DF: 0,DEFAULT CONSTANT_NUM,int,,0,,,
767,tf.keras.preprocessing.image.random_rotation,row_axis,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
768,tf.nn.local_response_normalization,alpha,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
769,tf.keras.layers.DepthwiseConv2D,depth_multiplier,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
770,tf.keras.backend.conv1d,dilation_rate,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
771,tf.ragged.range,deltas,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
772,tf.keras.preprocessing.image.random_zoom,row_axis,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
773,tf.random.fixed_unigram_candidate_sampler,num_shards,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
774,tf.keras.layers.LocallyConnected1D,implementation,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
775,tf.keras.layers.SeparableConv2D,depth_multiplier,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
776,tf.keras.layers.LocallyConnected2D,implementation,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
777,tf.estimator.regressor_parse_example_spec,label_dimension,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
778,tf.keras.backend.conv1d,strides,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
779,tf.keras.preprocessing.image.random_rotation,interpolation_order,DF: 1,DEFAULT CONSTANT_NUM,int,,0,,,
780,tf.nondifferentiable_batch_function,max_enqueued_batches,DF: 10,DEFAULT CONSTANT_NUM,int,,0,,,
781,tf.foldl,parallel_iterations,DF: 10,DEFAULT CONSTANT_NUM,int,,0,,,
782,tf.keras.backend.ctc_decode,beam_width,DF: 100,DEFAULT CONSTANT_NUM,int,,0,,,
783,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,DF: 1000,DEFAULT CONSTANT_NUM,int,,0,,,
784,tf.data.experimental.make_csv_dataset,shuffle_buffer_size,DF: 10000,DEFAULT CONSTANT_NUM,int,,0,,,
785,tf.signal.linear_to_mel_weight_matrix,num_spectrogram_bins,DF: 129,DEFAULT CONSTANT_NUM,int,,0,,,
786,tf.keras.datasets.reuters.load_data,oov_char,DF: 2,DEFAULT CONSTANT_NUM,int,,0,,,
787,tf.keras.layers.AveragePooling1D,pool_size,DF: 2,DEFAULT CONSTANT_NUM,int,,0,,,
788,tf.keras.datasets.imdb.load_data,oov_char,DF: 2,DEFAULT CONSTANT_NUM,int,,0,,,
789,tf.summary.image,max_outputs,DF: 3,DEFAULT CONSTANT_NUM,int,,0,,,
790,tf.summary.audio,max_outputs,DF: 3,DEFAULT CONSTANT_NUM,int,,0,,,
791,tf.strings.format,summarize,DF: 3,DEFAULT CONSTANT_NUM,int,,0,,,
792,tf.io.encode_jpeg,y_density,DF: 300,DEFAULT CONSTANT_NUM,int,,0,,,
793,tf.keras.preprocessing.sequence.skipgrams,window_size,DF: 4,DEFAULT CONSTANT_NUM,int,,0,,,
794,tf.nn.local_response_normalization,depth_radius,DF: 5,DEFAULT CONSTANT_NUM,int,,0,,,
795,tf.debugging.enable_check_numerics,path_length_limit,DF: 50,DEFAULT CONSTANT_NUM,int,,0,,,
796,tf.quantization.fake_quant_with_min_max_args,max,DF: 6,DEFAULT CONSTANT_NUM,int,,0,,,
797,tf.quantization.fake_quant_with_min_max_args_gradient,max,DF: 6,DEFAULT CONSTANT_NUM,int,,0,,,
798,tf.estimator.experimental.stop_if_higher_hook,run_every_secs,DF: 60,DEFAULT CONSTANT_NUM,int,,0,,,
799,tf.estimator.experimental.stop_if_lower_hook,run_every_secs,DF: 60,DEFAULT CONSTANT_NUM,int,,0,,,
800,tf.strings.unicode_transcode,replacement_char,DF: 65533,DEFAULT CONSTANT_NUM,int,,0,,,
801,tf.quantization.fake_quant_with_min_max_args_gradient,num_bits,DF: 8,DEFAULT CONSTANT_NUM,int,,0,,,
802,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,num_bits,DF: 8,DEFAULT CONSTANT_NUM,int,,0,,,
803,tf.keras.layers.LSTMCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,int,,0,,,
804,tf.keras.layers.LSTM,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,int,,0,,,
805,tf.keras.layers.GRU,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,int,,0,,,
806,tf.keras.utils.get_file,archive_format,DF: auto,DEFAULT DF_STR,string,,0,,DF_STR,
807,tf.keras.estimator.model_to_estimator,checkpoint_format,DF: checkpoint,DEFAULT DF_STR,string,,0,,DF_STR,
808,tf.keras.layers.Bidirectional,merge_mode,DF: concat,DEFAULT DF_STR,string,,0,,DF_STR,
809,tf.keras.utils.register_keras_serializable,package,DF: Custom,DEFAULT DF_STR,string,,0,,DF_STR,
810,tf.edit_distance,name,DF: edit_distance,DEFAULT DF_STR,string,,0,,DF_STR,
811,tf.norm,ord,DF: euclidean,DEFAULT DF_STR,string,,0,,DF_STR,
812,tf.fingerprint,method,DF: farmhash64,DEFAULT DF_STR,string,,0,,DF_STR,
813,tf.keras.layers.LSTMCell,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
814,tf.keras.layers.SimpleRNNCell,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
815,tf.keras.layers.LSTM,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
816,tf.keras.layers.Dense,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
817,tf.keras.layers.DepthwiseConv2D,depthwise_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
818,tf.keras.layers.LocallyConnected2D,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
819,tf.keras.layers.ConvLSTM2D,kernel_initializer,DF: glorot_uniform,DEFAULT DF_STR,string,,0,,DF_STR,
820,tf.quantization.quantize_and_dequantize,round_mode,DF: HALF_TO_EVEN,DEFAULT DF_STR,string,,0,,DF_STR,
821,tf.keras.layers.ConvLSTM2D,recurrent_activation,DF: hard_sigmoid,DEFAULT DF_STR,string,,0,,DF_STR,
822,tf.io.encode_jpeg,density_unit,DF: in,DEFAULT DF_STR,string,,0,,DF_STR,
823,tf.searchsorted,side,DF: left,DEFAULT DF_STR,string,,0,,DF_STR,
824,tf.io.decode_proto,descriptor_source,DF: local://,DEFAULT DF_STR,string,,0,,DF_STR,
825,tf.linalg.matrix_transpose,name,DF: matrix_transpose,DEFAULT DF_STR,string,,0,,DF_STR,
826,tf.keras.backend.pool2d,pool_mode,DF: max,DEFAULT DF_STR,string,,0,,DF_STR,
827,tf.feature_column.embedding_column,combiner,DF: mean,DEFAULT DF_STR,string,,0,,DF_STR,
828,tf.nn.safe_embedding_lookup_sparse,combiner,DF: mean,DEFAULT DF_STR,string,,0,,DF_STR,
829,tf.nn.avg_pool3d,data_format,DF: NDHWC,DEFAULT DF_STR,string,,0,,DF_STR,
830,tf.nn.conv3d_transpose,data_format,DF: NDHWC,DEFAULT DF_STR,string,,0,,DF_STR,
831,tf.keras.preprocessing.image.load_img,interpolation,DF: nearest,DEFAULT DF_STR,string,,0,,DF_STR,
832,tf.keras.preprocessing.image.random_shift,fill_mode,DF: nearest,DEFAULT DF_STR,string,,0,,DF_STR,
833,tf.keras.layers.UpSampling2D,interpolation,DF: nearest,DEFAULT DF_STR,string,,0,,DF_STR,
834,tf.nn.conv2d_transpose,data_format,DF: NHWC,DEFAULT DF_STR,string,,0,,DF_STR,
835,tf.nn.depthwise_conv2d_backprop_filter,data_format,DF: NHWC,DEFAULT DF_STR,string,,0,,DF_STR,
836,tf.nn.avg_pool2d,data_format,DF: NHWC,DEFAULT DF_STR,string,,0,,DF_STR,
837,tf.nn.conv1d_transpose,data_format,DF: NWC,DEFAULT DF_STR,string,,0,,DF_STR,
838,tf.nn.max_pool1d,data_format,DF: NWC,DEFAULT DF_STR,string,,0,,DF_STR,
839,tf.keras.layers.LayerNormalization,gamma_initializer,DF: ones,DEFAULT DF_STR,string,,0,,DF_STR,
840,tf.keras.layers.SimpleRNN,recurrent_initializer,DF: orthogonal,DEFAULT DF_STR,string,,0,,DF_STR,
841,tf.keras.preprocessing.sequence.pad_sequences,padding,DF: pre,DEFAULT DF_STR,string,,0,,DF_STR,
842,tf.strings.unicode_encode,errors,DF: replace,DEFAULT DF_STR,string,,0,,DF_STR,
843,tf.nn.conv1d_transpose,padding,DF: SAME,DEFAULT DF_STR,string,,0,,DF_STR,
844,tf.nn.conv2d_transpose,padding,DF: SAME,DEFAULT DF_STR,string,,0,,DF_STR,
845,tf.nn.sampled_softmax_loss,name,DF: sampled_softmax_loss,DEFAULT DF_STR,string,,0,,DF_STR,
846,tf.linalg.set_diag,name,DF: set_diag,DEFAULT DF_STR,string,,0,,DF_STR,
847,tf.keras.layers.GRUCell,recurrent_activation,DF: sigmoid,DEFAULT DF_STR,string,,0,,DF_STR,
848,tf.keras.layers.experimental.preprocessing.TextVectorization,split,DF: SPLIT_ON_WHITESPACE,DEFAULT DF_STR,string,,0,,DF_STR,
849,tf.keras.layers.LSTMCell,activation,DF: tanh,DEFAULT DF_STR,string,,0,,DF_STR,
850,tf.keras.layers.SimpleRNNCell,activation,DF: tanh,DEFAULT DF_STR,string,,0,,DF_STR,
851,tf.keras.utils.model_to_dot,rankdir,DF: TB,DEFAULT DF_STR,string,,0,,DF_STR,
852,tf.unstack,name,DF: unstack,DEFAULT DF_STR,string,,0,,DF_STR,
853,tf.keras.layers.MaxPool1D,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
854,tf.keras.layers.MaxPool3D,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
855,tf.keras.backend.depthwise_conv2d,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
856,tf.keras.layers.Conv3DTranspose,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
857,tf.keras.layers.Conv2DTranspose,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
858,tf.keras.layers.SeparableConv1D,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
859,tf.keras.backend.pool2d,padding,DF: valid,DEFAULT DF_STR,string,,0,,DF_STR,
860,tf.config.experimental_connect_to_host,job_name,DF: worker,DEFAULT DF_STR,string,,0,,DF_STR,
861,tf.keras.layers.Conv2D,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
862,tf.keras.layers.Conv3D,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
863,tf.keras.layers.BatchNormalization,beta_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
864,tf.keras.layers.LocallyConnected1D,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
865,tf.keras.layers.LayerNormalization,beta_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
866,tf.keras.layers.LocallyConnected2D,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
867,tf.keras.layers.LSTMCell,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
868,tf.keras.layers.Dense,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
869,tf.keras.layers.ConvLSTM2D,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
870,tf.keras.layers.PReLU,alpha_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
871,tf.keras.layers.SimpleRNN,bias_initializer,DF: zeros,DEFAULT DF_STR,string,,0,,DF_STR,
872,tf.nn.sampled_softmax_loss,remove_accidental_hits,"A `bool`.  whether to remove ""accidental hits"" where a sampled class equals one of the target classes.  Default is True.",Default is CONSTANT_BOOL,bool,,0,,,
873,tf.random.fixed_unigram_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,Default is CONSTANT_NUM,int,,0,,,
874,tf.random.all_candidate_sampler,seed,An `int`. An operation-specific seed. Default is 0.,Default is CONSTANT_NUM,int,,0,,,
875,tf.debugging.assert_near,atol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The absolute tolerance.  Default is `10 * eps`.",Default is CONSTANT_NUM eps,int,,0,,,
876,tf.debugging.assert_near,rtol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The relative tolerance.  Default is `10 * eps`.",Default is CONSTANT_NUM eps,int,,0,,,
877,tf.signal.fftshift,axes,"`int` or shape `tuple`, optional Axes over which to shift.  Default is None, which shifts all axes.",Default is None which shifts all axes,,,,,,
878,tf.summary.write,name,DF: None,DEFAULT None,,,,,,
879,tf.nn.pool,name,DF: None,DEFAULT None,,,,,,
880,tf.keras.layers.Lambda,arguments,DF: None,DEFAULT None,,,,,,
881,tf.ragged.constant,name,DF: None,DEFAULT None,,,,,,
882,tf.keras.layers.Conv2D,bias_regularizer,DF: None,DEFAULT None,,,,,,
883,tf.nn.separable_conv2d,name,DF: None,DEFAULT None,,,,,,
884,tf.nn.max_pool1d,name,DF: None,DEFAULT None,,,,,,
885,tf.train.latest_checkpoint,latest_filename,DF: None,DEFAULT None,,,,,,
886,tf.math.reduce_prod,name,DF: None,DEFAULT None,,,,,,
887,tf.linalg.inv,name,DF: None,DEFAULT None,,,,,,
888,tf.debugging.assert_negative,summarize,DF: None,DEFAULT None,,,,,,
889,tf.config.list_logical_devices,device_type,DF: None,DEFAULT None,,,,,,
890,tf.math.reciprocal_no_nan,name,DF: None,DEFAULT None,,,,,,
891,tf.debugging.assert_near,atol,DF: None,DEFAULT None,,,,,,
892,tf.keras.layers.experimental.preprocessing.PreprocessingLayer,data,DF: None,DEFAULT None,,,,,,
893,tf.fingerprint,name,DF: None,DEFAULT None,,,,,,
894,tf.math.reduce_min,name,DF: None,DEFAULT None,,,,,,
895,tf.image.random_hue,seed,DF: None,DEFAULT None,,,,,,
896,tf.nn.RNNCellDropoutWrapper,input_size,DF: None,DEFAULT None,,,,,,
897,tf.summary.experimental.write_raw_pb,name,DF: None,DEFAULT None,,,,,,
898,tf.keras.layers.SimpleRNN,kernel_constraint,DF: None,DEFAULT None,,,,,,
899,tf.linalg.lu_solve,name,DF: None,DEFAULT None,,,,,,
900,tf.nn.selu,name,DF: None,DEFAULT None,,,,,,
901,tf.math.sinh,name,DF: None,DEFAULT None,,,,,,
902,tf.random.uniform_candidate_sampler,name,DF: None,DEFAULT None,,,,,,
903,tf.math.cosh,name,DF: None,DEFAULT None,,,,,,
904,tf.feature_column.sequence_numeric_column,normalizer_fn,DF: None,DEFAULT None,,,,,,
905,tf.keras.layers.Lambda,mask,DF: None,DEFAULT None,,,,,,
906,tf.keras.layers.SimpleRNN,recurrent_constraint,DF: None,DEFAULT None,,,,,,
907,tf.math.angle,name,DF: None,DEFAULT None,,,,,,
908,tf.signal.dct,name,DF: None,DEFAULT None,,,,,,
909,tf.debugging.assert_all_finite,name,DF: None,DEFAULT None,,,,,,
910,tf.bitwise.invert,name,DF: None,DEFAULT None,,,,,,
911,tf.data.experimental.make_csv_dataset,label_name,DF: None,DEFAULT None,,,,,,
912,tf.summary.flush,writer,DF: None,DEFAULT None,,,,,,
913,tf.math.is_nan,name,DF: None,DEFAULT None,,,,,,
914,tf.identity_n,name,DF: None,DEFAULT None,,,,,,
915,tf.keras.initializers.he_uniform,seed,DF: None,DEFAULT None,,,,,,
916,tf.tpu.experimental.initialize_tpu_system,cluster_resolver,DF: None,DEFAULT None,,,,,,
917,tf.keras.layers.InputSpec,axes,DF: None,DEFAULT None,,,,,,
918,tf.tuple,name,DF: None,DEFAULT None,,,,,,
919,tf.dynamic_stitch,name,DF: None,DEFAULT None,,,,,,
920,tf.bitwise.right_shift,name,DF: None,DEFAULT None,,,,,,
921,tf.keras.layers.GlobalMaxPool2D,data_format,DF: None,DEFAULT None,,,,,,
922,tf.keras.layers.InputLayer,input_shape,DF: None,DEFAULT None,,,,,,
923,tf.gradients,stop_gradients,DF: None,DEFAULT None,,,,,,
924,tf.nn.elu,name,DF: None,DEFAULT None,,,,,,
925,tf.math.conj,name,DF: None,DEFAULT None,,,,,,
926,tf.keras.backend.depthwise_conv2d,data_format,DF: None,DEFAULT None,,,,,,
927,tf.keras.layers.DepthwiseConv2D,bias_constraint,DF: None,DEFAULT None,,,,,,
928,tf.keras.layers.LocallyConnected2D,bias_constraint,DF: None,DEFAULT None,,,,,,
929,tf.keras.layers.ConvLSTM2D,activity_regularizer,DF: None,DEFAULT None,,,,,,
930,tf.nn.separable_conv2d,dilations,DF: None,DEFAULT None,,,,,,
931,tf.math.is_strictly_increasing,name,DF: None,DEFAULT None,,,,,,
932,tf.image.non_max_suppression_padded,name,DF: None,DEFAULT None,,,,,,
933,tf.train.checkpoints_iterator,timeout,DF: None,DEFAULT None,,,,,,
934,tf.ones_like,name,DF: None,DEFAULT None,,,,,,
935,tf.random.truncated_normal,name,DF: None,DEFAULT None,,,,,,
936,tf.nn.conv1d,dilations,DF: None,DEFAULT None,,,,,,
937,tf.print,end,DF: None,DEFAULT None,,,,,,
938,tf.summary.write,step,DF: None,DEFAULT None,,,,,,
939,tf.nn.convolution,dilations,DF: None,DEFAULT None,,,,,,
940,tf.io.decode_jpeg,name,DF: None,DEFAULT None,,,,,,
941,tf.signal.ifftshift,name,DF: None,DEFAULT None,,,,,,
942,tf.keras.layers.SeparableConv1D,pointwise_constraint,DF: None,DEFAULT None,,,,,,
943,tf.nn.RNNCellDropoutWrapper,input_keep_prob,DF: None,DEFAULT None,,,,,,
944,tf.linalg.lstsq,name,DF: None,DEFAULT None,,,,,,
945,tf.keras.backend.var,axis,DF: None,DEFAULT None,,,,,,
946,tf.bitwise.bitwise_or,name,DF: None,DEFAULT None,,,,,,
947,tf.bitwise.left_shift,name,DF: None,DEFAULT None,,,,,,
948,tf.broadcast_to,name,DF: None,DEFAULT None,,,,,,
949,tf.keras.backend.map_fn,dtype,DF: None,DEFAULT None,,,,,,
950,tf.zeros_like,dtype,DF: None,DEFAULT None,,,,,,
951,tf.debugging.assert_near,summarize,DF: None,DEFAULT None,,,,,,
952,tf.tensordot,name,DF: None,DEFAULT None,,,,,,
953,tf.debugging.assert_near,rtol,DF: None,DEFAULT None,,,,,,
954,tf.math.softplus,name,DF: None,DEFAULT None,,,,,,
955,tf.keras.layers.AveragePooling3D,data_format,DF: None,DEFAULT None,,,,,,
956,tf.foldr,initializer,DF: None,DEFAULT None,,,,,,
957,tf.foldl,name,DF: None,DEFAULT None,,,,,,
958,tf.linalg.cross,name,DF: None,DEFAULT None,,,,,,
959,tf.image.random_flip_left_right,seed,DF: None,DEFAULT None,,,,,,
960,tf.nn.ctc_loss,blank_index,DF: None,DEFAULT None,,,,,,
961,tf.image.convert_image_dtype,name,DF: None,DEFAULT None,,,,,,
962,tf.random.gamma,beta,DF: None,DEFAULT None,,,,,,
963,tf.random.uniform,maxval,DF: None,DEFAULT None,,,,,,
964,tf.debugging.assert_negative,message,DF: None,DEFAULT None,,,,,,
965,tf.estimator.experimental.stop_if_no_decrease_hook,run_every_steps,DF: None,DEFAULT None,,,,,,
966,tf.nn.pool,dilations,DF: None,DEFAULT None,,,,,,
967,tf.io.decode_raw,name,DF: None,DEFAULT None,,,,,,
968,tf.nn.relu6,name,DF: None,DEFAULT None,,,,,,
969,tf.keras.layers.LocallyConnected1D,activity_regularizer,DF: None,DEFAULT None,,,,,,
970,tf.keras.backend.max,axis,DF: None,DEFAULT None,,,,,,
971,tf.random.fixed_unigram_candidate_sampler,seed,DF: None,DEFAULT None,,,,,,
972,tf.where,y,DF: None,DEFAULT None,,,,,,
973,tf.image.adjust_jpeg_quality,name,DF: None,DEFAULT None,,,,,,
974,tf.ragged.range,dtype,DF: None,DEFAULT None,,,,,,
975,tf.keras.layers.SeparableConv1D,name,DF: None,DEFAULT None,,,,,,
976,tf.math.unsorted_segment_sqrt_n,name,DF: None,DEFAULT None,,,,,,
977,tf.sparse.minimum,name,DF: None,DEFAULT None,,,,,,
978,tf.math.acosh,name,DF: None,DEFAULT None,,,,,,
979,tf.keras.backend.variable,constraint,DF: None,DEFAULT None,,,,,,
980,tf.math.count_nonzero,name,DF: None,DEFAULT None,,,,,,
981,tf.keras.backend.random_normal_variable,seed,DF: None,DEFAULT None,,,,,,
982,tf.nn.collapse_repeated,name,DF: None,DEFAULT None,,,,,,
983,tf.keras.backend.conv3d,data_format,DF: None,DEFAULT None,,,,,,
984,tf.linalg.adjoint,name,DF: None,DEFAULT None,,,,,,
985,tf.strings.reduce_join,axis,DF: None,DEFAULT None,,,,,,
986,tf.graph_util.import_graph_def,return_elements,DF: None,DEFAULT None,,,,,,
987,tf.ragged.boolean_mask,name,DF: None,DEFAULT None,,,,,,
988,tf.random.categorical,seed,DF: None,DEFAULT None,,,,,,
989,tf.strings.regex_replace,name,DF: None,DEFAULT None,,,,,,
990,tf.nn.ctc_loss,unique,DF: None,DEFAULT None,,,,,,
991,tf.linalg.tridiagonal_matmul,name,DF: None,DEFAULT None,,,,,,
992,tf.math.argmax,axis,DF: None,DEFAULT None,,,,,,
993,tf.map_fn,name,DF: None,DEFAULT None,,,,,,
994,tf.io.parse_single_sequence_example,sequence_features,DF: None,DEFAULT None,,,,,,
995,tf.signal.hann_window,name,DF: None,DEFAULT None,,,,,,
996,tf.keras.utils.get_file,file_hash,DF: None,DEFAULT None,,,,,,
997,tf.keras.Input,batch_size,DF: None,DEFAULT None,,,,,,
998,tf.estimator.experimental.stop_if_lower_hook,run_every_steps,DF: None,DEFAULT None,,,,,,
999,tf.keras.backend.local_conv2d,data_format,DF: None,DEFAULT None,,,,,,
1000,tf.sparse.split,num_split,DF: None,DEFAULT None,,,,,,
1001,tf.unstack,num,DF: None,DEFAULT None,,,,,,
1002,tf.rank,name,DF: None,DEFAULT None,,,,,,
1003,tf.io.decode_compressed,name,DF: None,DEFAULT None,,,,,,
1004,tf.linalg.trace,name,DF: None,DEFAULT None,,,,,,
1005,tf.function,experimental_implements,DF: None,DEFAULT None,,,,,,
1006,tf.math.top_k,name,DF: None,DEFAULT None,,,,,,
1007,tf.keras.layers.LSTM,bias_regularizer,DF: None,DEFAULT None,,,,,,
1008,tf.math.is_finite,name,DF: None,DEFAULT None,,,,,,
1009,tf.keras.layers.Conv2D,data_format,DF: None,DEFAULT None,,,,,,
1010,tf.reshape,name,DF: None,DEFAULT None,,,,,,
1011,tf.debugging.assert_type,name,DF: None,DEFAULT None,,,,,,
1012,tf.eye,num_columns,DF: None,DEFAULT None,,,,,,
1013,tf.keras.backend.foldr,name,DF: None,DEFAULT None,,,,,,
1014,tf.keras.layers.Embedding,embeddings_constraint,DF: None,DEFAULT None,,,,,,
1015,tf.keras.backend.foldl,name,DF: None,DEFAULT None,,,,,,
1016,tf.summary.write,metadata,DF: None,DEFAULT None,,,,,,
1017,tf.keras.layers.ConvLSTM2D,bias_constraint,DF: None,DEFAULT None,,,,,,
1018,tf.debugging.assert_rank_at_least,name,DF: None,DEFAULT None,,,,,,
1019,tf.keras.layers.Conv2D,activity_regularizer,DF: None,DEFAULT None,,,,,,
1020,tf.keras.layers.Conv3D,bias_regularizer,DF: None,DEFAULT None,,,,,,
1021,tf.summary.audio,description,DF: None,DEFAULT None,,,,,,
1022,tf.math.real,name,DF: None,DEFAULT None,,,,,,
1023,tf.nn.sparse_softmax_cross_entropy_with_logits,name,DF: None,DEFAULT None,,,,,,
1024,tf.one_hot,off_value,DF: None,DEFAULT None,,,,,,
1025,tf.keras.layers.Conv2DTranspose,output_padding,DF: None,DEFAULT None,,,,,,
1026,tf.sparse.reshape,name,DF: None,DEFAULT None,,,,,,
1027,tf.io.decode_bmp,name,DF: None,DEFAULT None,,,,,,
1028,tf.data.experimental.make_csv_dataset,select_columns,DF: None,DEFAULT None,,,,,,
1029,tf.data.experimental.make_csv_dataset,shuffle_seed,DF: None,DEFAULT None,,,,,,
1030,tf.math.atan,name,DF: None,DEFAULT None,,,,,,
1031,tf.keras.backend.truncated_normal,seed,DF: None,DEFAULT None,,,,,,
1032,tf.ragged.constant,dtype,DF: None,DEFAULT None,,,,,,
1033,tf.required_space_to_batch_paddings,base_paddings,DF: None,DEFAULT None,,,,,,
1034,tf.feature_column.shared_embeddings,shared_embedding_collection_name,DF: None,DEFAULT None,,,,,,
1035,tf.nn.max_pool,data_format,DF: None,DEFAULT None,,,,,,
1036,tf.keras.layers.Conv3DTranspose,output_padding,DF: None,DEFAULT None,,,,,,
1037,tf.estimator.export.build_parsing_serving_input_receiver_fn,default_batch_size,DF: None,DEFAULT None,,,,,,
1038,tf.random.stateless_truncated_normal,name,DF: None,DEFAULT None,,,,,,
1039,tf.nn.conv1d_transpose,dilations,DF: None,DEFAULT None,,,,,,
1040,tf.keras.backend.l2_normalize,axis,DF: None,DEFAULT None,,,,,,
1041,tf.data.experimental.make_batched_features_dataset,parser_num_threads,DF: None,DEFAULT None,,,,,,
1042,tf.keras.backend.constant,dtype,DF: None,DEFAULT None,,,,,,
1043,tf.estimator.experimental.stop_if_no_increase_hook,eval_dir,DF: None,DEFAULT None,,,,,,
1044,tf.keras.layers.PReLU,shared_axes,DF: None,DEFAULT None,,,,,,
1045,tf.keras.layers.Conv3DTranspose,data_format,DF: None,DEFAULT None,,,,,,
1046,tf.nn.softmax_cross_entropy_with_logits,name,DF: None,DEFAULT None,,,,,,
1047,tf.image.rgb_to_grayscale,name,DF: None,DEFAULT None,,,,,,
1048,tf.signal.ifft,name,DF: None,DEFAULT None,,,,,,
1049,tf.nn.conv3d_transpose,name,DF: None,DEFAULT None,,,,,,
1050,tf.math.less_equal,name,DF: None,DEFAULT None,,,,,,
1051,tf.image.grayscale_to_rgb,name,DF: None,DEFAULT None,,,,,,
1052,tf.keras.layers.SimpleRNNCell,bias_regularizer,DF: None,DEFAULT None,,,,,,
1053,tf.norm,name,DF: None,DEFAULT None,,,,,,
1054,tf.debugging.assert_equal,name,DF: None,DEFAULT None,,,,,,
1055,tf.math.unsorted_segment_mean,name,DF: None,DEFAULT None,,,,,,
1056,tf.keras.layers.SeparableConv1D,pointwise_regularizer,DF: None,DEFAULT None,,,,,,
1057,tf.feature_column.numeric_column,default_value,DF: None,DEFAULT None,,,,,,
1058,tf.debugging.assert_scalar,message,DF: None,DEFAULT None,,,,,,
1059,tf.debugging.assert_shapes,message,DF: None,DEFAULT None,,,,,,
1060,tf.eye,name,DF: None,DEFAULT None,,,,,,
1061,tf.keras.layers.SeparableConv2D,bias_regularizer,DF: None,DEFAULT None,,,,,,
1062,tf.math.squared_difference,name,DF: None,DEFAULT None,,,,,,
1063,tf.keras.Input,dtype,DF: None,DEFAULT None,,,,,,
1064,tf.cond,name,DF: None,DEFAULT None,,,,,,
1065,tf.math.invert_permutation,name,DF: None,DEFAULT None,,,,,,
1066,tf.keras.backend.random_binomial,seed,DF: None,DEFAULT None,,,,,,
1067,tf.io.serialize_tensor,name,DF: None,DEFAULT None,,,,,,
1068,tf.io.decode_png,name,DF: None,DEFAULT None,,,,,,
1069,tf.debugging.assert_integer,name,DF: None,DEFAULT None,,,,,,
1070,tf.audio.decode_wav,name,DF: None,DEFAULT None,,,,,,
1071,tf.truncatemod,name,DF: None,DEFAULT None,,,,,,
1072,tf.keras.layers.UpSampling3D,data_format,DF: None,DEFAULT None,,,,,,
1073,tf.transpose,perm,DF: None,DEFAULT None,,,,,,
1074,tf.keras.layers.GRUCell,bias_constraint,DF: None,DEFAULT None,,,,,,
1075,tf.keras.layers.Conv3D,activation,DF: None,DEFAULT None,,,,,,
1076,tf.data.experimental.make_batched_features_dataset,shuffle_seed,DF: None,DEFAULT None,,,,,,
1077,tf.math.unsorted_segment_prod,name,DF: None,DEFAULT None,,,,,,
1078,tf.print,output_stream,DF: None,DEFAULT None,,,,,,
1079,tf.nn.conv2d_transpose,name,DF: None,DEFAULT None,,,,,,
1080,tf.random.all_candidate_sampler,seed,DF: None,DEFAULT None,,,,,,
1081,tf.math.tanh,name,DF: None,DEFAULT None,,,,,,
1082,tf.keras.backend.placeholder,ndim,DF: None,DEFAULT None,,,,,,
1083,tf.data.experimental.make_batched_features_dataset,reader,DF: None,DEFAULT None,,,,,,
1084,tf.image.rgb_to_hsv,name,DF: None,DEFAULT None,,,,,,
1085,tf.signal.fftshift,axes,DF: None,DEFAULT None,,,,,,
1086,tf.ones,name,DF: None,DEFAULT None,,,,,,
1087,tf.debugging.assert_none_equal,name,DF: None,DEFAULT None,,,,,,
1088,tf.signal.dct,norm,DF: None,DEFAULT None,,,,,,
1089,tf.extract_volume_patches,name,DF: None,DEFAULT None,,,,,,
1090,tf.sparse.reduce_sum,keepdims,DF: None,DEFAULT None,,,,,,
1091,tf.sparse.cross_hashed,hash_key,DF: None,DEFAULT None,,,,,,
1092,tf.keras.backend.std,axis,DF: None,DEFAULT None,,,,,,
1093,tf.clip_by_norm,name,DF: None,DEFAULT None,,,,,,
1094,tf.nn.depthwise_conv2d,name,DF: None,DEFAULT None,,,,,,
1095,tf.keras.layers.UpSampling2D,data_format,DF: None,DEFAULT None,,,,,,
1096,tf.debugging.assert_non_negative,name,DF: None,DEFAULT None,,,,,,
1097,tf.data.experimental.make_csv_dataset,compression_type,DF: None,DEFAULT None,,,,,,
1098,tf.unique_with_counts,name,DF: None,DEFAULT None,,,,,,
1099,tf.debugging.assert_greater_equal,name,DF: None,DEFAULT None,,,,,,
1100,tf.nn.RNNCellDropoutWrapper,dtype,DF: None,DEFAULT None,,,,,,
1101,tf.feature_column.crossed_column,hash_key,DF: None,DEFAULT None,,,,,,
1102,tf.math.segment_prod,name,DF: None,DEFAULT None,,,,,,
1103,tf.math.count_nonzero,axis,DF: None,DEFAULT None,,,,,,
1104,tf.keras.preprocessing.sequence.pad_sequences,maxlen,DF: None,DEFAULT None,,,,,,
1105,tf.math.reduce_euclidean_norm,axis,DF: None,DEFAULT None,,,,,,
1106,tf.math.reduce_sum,axis,DF: None,DEFAULT None,,,,,,
1107,tf.keras.estimator.model_to_estimator,custom_objects,DF: None,DEFAULT None,,,,,,
1108,tf.math.not_equal,name,DF: None,DEFAULT None,,,,,,
1109,tf.keras.layers.experimental.preprocessing.Normalization,reset_state,DF: None,DEFAULT None,,,,,,
1110,tf.sparse.eye,num_columns,DF: None,DEFAULT None,,,,,,
1111,tf.image.draw_bounding_boxes,name,DF: None,DEFAULT None,,,,,,
1112,tf.debugging.assert_greater,name,DF: None,DEFAULT None,,,,,,
1113,tf.io.parse_sequence_example,context_features,DF: None,DEFAULT None,,,,,,
1114,tf.keras.layers.LocallyConnected1D,bias_constraint,DF: None,DEFAULT None,,,,,,
1115,tf.keras.backend.any,axis,DF: None,DEFAULT None,,,,,,
1116,tf.math.reduce_logsumexp,name,DF: None,DEFAULT None,,,,,,
1117,tf.image.hsv_to_rgb,name,DF: None,DEFAULT None,,,,,,
1118,tf.keras.models.save_model,signatures,DF: None,DEFAULT None,,,,,,
1119,tf.nn.max_pool_with_argmax,name,DF: None,DEFAULT None,,,,,,
1120,tf.strings.split,name,DF: None,DEFAULT None,,,,,,
1121,tf.debugging.check_numerics,name,DF: None,DEFAULT None,,,,,,
1122,tf.feature_column.sequence_categorical_column_with_identity,default_value,DF: None,DEFAULT None,,,,,,
1123,tf.io.parse_sequence_example,sequence_features,DF: None,DEFAULT None,,,,,,
1124,tf.math.cumprod,name,DF: None,DEFAULT None,,,,,,
1125,tf.keras.layers.Cropping3D,data_format,DF: None,DEFAULT None,,,,,,
1126,tf.data.experimental.rejection_resample,seed,DF: None,DEFAULT None,,,,,,
1127,tf.keras.backend.relu,max_value,DF: None,DEFAULT None,,,,,,
1128,tf.nn.atrous_conv2d_transpose,name,DF: None,DEFAULT None,,,,,,
1129,tf.data.experimental.make_csv_dataset,prefetch_buffer_size,DF: None,DEFAULT None,,,,,,
1130,tf.no_op,name,DF: None,DEFAULT None,,,,,,
1131,tf.math.add_n,name,DF: None,DEFAULT None,,,,,,
1132,tf.keras.backend.random_binomial,dtype,DF: None,DEFAULT None,,,,,,
1133,tf.keras.preprocessing.image.img_to_array,dtype,DF: None,DEFAULT None,,,,,,
1134,tf.linalg.normalize,axis,DF: None,DEFAULT None,,,,,,
1135,tf.sparse.segment_mean,num_segments,DF: None,DEFAULT None,,,,,,
1136,tf.keras.backend.random_uniform,seed,DF: None,DEFAULT None,,,,,,
1137,tf.reduce_all,name,DF: None,DEFAULT None,,,,,,
1138,tf.io.decode_image,name,DF: None,DEFAULT None,,,,,,
1139,tf.dynamic_partition,name,DF: None,DEFAULT None,,,,,,
1140,tf.nn.avg_pool3d,name,DF: None,DEFAULT None,,,,,,
1141,tf.nn.RNNCellDropoutWrapper,seed,DF: None,DEFAULT None,,,,,,
1142,tf.summary.trace_export,profiler_outdir,DF: None,DEFAULT None,,,,,,
1143,tf.summary.scalar,description,DF: None,DEFAULT None,,,,,,
1144,tf.keras.layers.BatchNormalization,gamma_constraint,DF: None,DEFAULT None,,,,,,
1145,tf.math.count_nonzero,keepdims,DF: None,DEFAULT None,,,,,,
1146,tf.strings.unicode_transcode,name,DF: None,DEFAULT None,,,,,,
1147,tf.io.deserialize_many_sparse,rank,DF: None,DEFAULT None,,,,,,
1148,tf.expand_dims,name,DF: None,DEFAULT None,,,,,,
1149,tf.nn.avg_pool2d,name,DF: None,DEFAULT None,,,,,,
1150,tf.keras.layers.ConvLSTM2D,data_format,DF: None,DEFAULT None,,,,,,
1151,tf.nn.avg_pool,name,DF: None,DEFAULT None,,,,,,
1152,tf.keras.layers.LayerNormalization,beta_constraint,DF: None,DEFAULT None,,,,,,
1153,tf.math.accumulate_n,shape,DF: None,DEFAULT None,,,,,,
1154,tf.math.l2_normalize,name,DF: None,DEFAULT None,,,,,,
1155,tf.linalg.lu_reconstruct,name,DF: None,DEFAULT None,,,,,,
1156,tf.math.segment_min,name,DF: None,DEFAULT None,,,,,,
1157,tf.linalg.tensor_diag,name,DF: None,DEFAULT None,,,,,,
1158,tf.keras.backend.in_test_phase,training,DF: None,DEFAULT None,,,,,,
1159,tf.keras.layers.Conv1D,activity_regularizer,DF: None,DEFAULT None,,,,,,
1160,tf.math.confusion_matrix,weights,DF: None,DEFAULT None,,,,,,
1161,tf.debugging.assert_shapes,name,DF: None,DEFAULT None,,,,,,
1162,tf.linalg.cholesky,name,DF: None,DEFAULT None,,,,,,
1163,tf.feature_column.embedding_column,tensor_name_in_ckpt,DF: None,DEFAULT None,,,,,,
1164,tf.summary.create_file_writer,name,DF: None,DEFAULT None,,,,,,
1165,tf.io.decode_image,channels,DF: None,DEFAULT None,,,,,,
1166,tf.image.combined_non_max_suppression,name,DF: None,DEFAULT None,,,,,,
1167,tf.keras.backend.local_conv1d,data_format,DF: None,DEFAULT None,,,,,,
1168,tf.keras.backend.variable,dtype,DF: None,DEFAULT None,,,,,,
1169,tf.data.experimental.make_csv_dataset,column_defaults,DF: None,DEFAULT None,,,,,,
1170,tf.histogram_fixed_width_bins,name,DF: None,DEFAULT None,,,,,,
1171,tf.math.reciprocal,name,DF: None,DEFAULT None,,,,,,
1172,tf.graph_util.import_graph_def,producer_op_list,DF: None,DEFAULT None,,,,,,
1173,tf.keras.experimental.SequenceFeatures,name,DF: None,DEFAULT None,,,,,,
1174,tf.io.encode_proto,name,DF: None,DEFAULT None,,,,,,
1175,tf.keras.layers.AveragePooling2D,data_format,DF: None,DEFAULT None,,,,,,
1176,tf.keras.layers.SeparableConv1D,trainable,DF: None,DEFAULT None,,,,,,
1177,tf.io.parse_single_sequence_example,example_name,DF: None,DEFAULT None,,,,,,
1178,tf.keras.layers.Conv1D,kernel_regularizer,DF: None,DEFAULT None,,,,,,
1179,tf.strings.ngrams,name,DF: None,DEFAULT None,,,,,,
1180,tf.zeros,name,DF: None,DEFAULT None,,,,,,
1181,tf.nn.safe_embedding_lookup_sparse,max_norm,DF: None,DEFAULT None,,,,,,
1182,tf.keras.layers.Conv3D,kernel_regularizer,DF: None,DEFAULT None,,,,,,
1183,tf.keras.backend.prod,axis,DF: None,DEFAULT None,,,,,,
1184,tf.feature_column.numeric_column,normalizer_fn,DF: None,DEFAULT None,,,,,,
1185,tf.linalg.solve,name,DF: None,DEFAULT None,,,,,,
1186,tf.keras.layers.Cropping2D,data_format,DF: None,DEFAULT None,,,,,,
1187,tf.keras.layers.GRUCell,kernel_constraint,DF: None,DEFAULT None,,,,,,
1188,tf.scatter_nd,name,DF: None,DEFAULT None,,,,,,
1189,tf.cond,false_fn,DF: None,DEFAULT None,,,,,,
1190,tf.keras.layers.SeparableConv1D,activation,DF: None,DEFAULT None,,,,,,
1191,tf.nn.embedding_lookup_sparse,max_norm,DF: None,DEFAULT None,,,,,,
1192,tf.math.is_non_decreasing,name,DF: None,DEFAULT None,,,,,,
1193,tf.keras.Input,name,DF: None,DEFAULT None,,,,,,
1194,tf.linalg.pinv,name,DF: None,DEFAULT None,,,,,,
1195,tf.debugging.experimental.enable_dump_debug_info,op_regex,DF: None,DEFAULT None,,,,,,
1196,tf.image.random_crop,name,DF: None,DEFAULT None,,,,,,
1197,tf.io.parse_single_example,name,DF: None,DEFAULT None,,,,,,
1198,tf.keras.layers.Conv3DTranspose,kernel_regularizer,DF: None,DEFAULT None,,,,,,
1199,tf.nn.normalize_moments,name,DF: None,DEFAULT None,,,,,,
1200,tf.debugging.Assert,name,DF: None,DEFAULT None,,,,,,
1201,tf.debugging.assert_shapes,data,DF: None,DEFAULT None,,,,,,
1202,tf.math.reduce_mean,axis,DF: None,DEFAULT None,,,,,,
1203,tf.linalg.logm,name,DF: None,DEFAULT None,,,,,,
1204,tf.math.zero_fraction,name,DF: None,DEFAULT None,,,,,,
1205,tf.space_to_batch,name,DF: None,DEFAULT None,,,,,,
1206,tf.keras.layers.LocallyConnected2D,activation,DF: None,DEFAULT None,,,,,,
1207,tf.keras.layers.BatchNormalization,beta_regularizer,DF: None,DEFAULT None,,,,,,
1208,tf.keras.layers.Conv3D,data_format,DF: None,DEFAULT None,,,,,,
1209,tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,DF: None,DEFAULT None,,,,,,
1210,tf.math.sqrt,name,DF: None,DEFAULT None,,,,,,
1211,tf.io.read_file,name,DF: None,DEFAULT None,,,,,,
1212,tf.linspace,name,DF: None,DEFAULT None,,,,,,
1213,tf.sparse.cross,name,DF: None,DEFAULT None,,,,,,
1214,tf.keras.utils.get_file,cache_dir,DF: None,DEFAULT None,,,,,,
1215,tf.math.sigmoid,name,DF: None,DEFAULT None,,,,,,
1216,tf.sparse.slice,name,DF: None,DEFAULT None,,,,,,
1217,tf.nn.conv2d_transpose,dilations,DF: None,DEFAULT None,,,,,,
1218,tf.keras.layers.deserialize,custom_objects,DF: None,DEFAULT None,,,,,,
1219,tf.math.reduce_logsumexp,axis,DF: None,DEFAULT None,,,,,,
1220,tf.keras.layers.SimpleRNNCell,kernel_constraint,DF: None,DEFAULT None,,,,,,
1221,tf.shape,name,DF: None,DEFAULT None,,,,,,
1222,tf.keras.layers.Conv3DTranspose,kernel_constraint,DF: None,DEFAULT None,,,,,,
1223,tf.keras.layers.SimpleRNN,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Default QSTR,string,,,,QSTR,
1224,tf.keras.layers.SimpleRNN,recurrent_constraint,Constraint function applied to the `recurrent_kernel`weights matrix.  Default: `None`.,Default QSTR,string,,,,QSTR,
1225,tf.keras.layers.GRUCell,bias_constraint,Constraint function applied to the bias vector. Default:`None`.,Default QSTR,string,,,,QSTR,
1226,tf.keras.layers.LSTMCell,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default: `glorot_uniform`.",Default QSTR,string,,,,QSTR,
1227,tf.keras.layers.LSTM,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default: `glorot_uniform`.",Default QSTR,string,,,,QSTR,
1228,tf.keras.layers.SimpleRNNCell,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default:`glorot_uniform`.",Default QSTR,string,,,,QSTR,
1229,tf.keras.layers.SimpleRNN,recurrent_initializer,"Initializer for the `recurrent_kernel`weights matrix, used for the linear transformation of the recurrent state. Default: `orthogonal`.",Default QSTR,string,,,,QSTR,
1230,tf.keras.layers.LSTMCell,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Default QSTR,string,,,,QSTR,
1231,tf.keras.layers.LSTM,bias_regularizer,Regularizer function applied to the bias vector. Default:`None`.,Default QSTR,,,,,,
1232,tf.keras.layers.SimpleRNNCell,bias_regularizer,Regularizer function applied to the bias vector. Default:`None`.,Default QSTR,,,,,,
1233,tf.keras.layers.GRUCell,recurrent_activation,"Activation function to use for the recurrent step. Default: sigmoid (`sigmoid`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Default sigmoid QSTR,,,,,,
1234,tf.linalg.matrix_rank,validate_args,"When `True`, additional assertions might be embedded in the graph. Default value: `False` (i.e., no graph assertions are added).",Default value CONSTANT_BOOL BSTR,bool,,0,,,
1235,tf.linalg.lu_reconstruct,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Default value: `False` (i.e., don't validate arguments).",Default value CONSTANT_BOOL i e don t validate arguments,bool,,0,,,
1236,tf.image.ssim_multiscale,k1,Default value 0.01,Default value CONSTANT_FLOAT,float,,0,,,
1237,tf.image.ssim_multiscale,k2,"Default value 0.03 (SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of 0< K2 <0.4).",Default value CONSTANT_FLOAT SSIM is less sensitivity to K2 for lower values so it would be better if we taken the values in range of CONSTANT_NUM REXPR REXPR,float,,0,,,
1238,tf.feature_column.numeric_column,dtype,"defines the type of values. Default value is `tf.float32`. Must be a non-quantized, real integer or floating point type.",Default value is D_TYPE,tf.dtype,,0,,,
1239,tf.linalg.lu_solve,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_solve').",Default value QSTR i e QSTR,,,,,,
1240,tf.io.encode_jpeg,format,"An optional `string` from: `"""", ""grayscale"", ""rgb""`. Defaults to `""""`. Per pixel image format.",Defaults to,,,,,,
1241,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",Defaults to BSTR,,,1,,,
1242,tf.nn.pool,dilations,"Optional.  Dilation rate.  List of N ints >= 1. Defaults to [1]*N.  If any value of dilation_rate is > 1, then all values of strides must be 1.",Defaults to BSTR N If any value of dilation_rate is REXPR then all values of PARAM must be CONSTANT_NUM,,,,,,
1243,tf.nn.fractional_avg_pool,overlapping,"An optional `bool`.  Defaults to `False`.  When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.  The result would be [20, 16] for fractional avg pooling.",Defaults to CONSTANT_BOOL,bool,,0,,,
1244,tf.quantization.quantize,narrow_range,An optional `bool`. Defaults to `False`.,Defaults to CONSTANT_BOOL,bool,,0,,,
1245,tf.quantization.fake_quant_with_min_max_vars,narrow_range,An optional `bool`. Defaults to `False`.,Defaults to CONSTANT_BOOL,bool,,0,,,
1246,tf.io.encode_base64,pad,An optional `bool`. Defaults to `False`. Bool whether padding is applied at the ends.,Defaults to CONSTANT_BOOL,bool,,0,,,
1247,tf.linalg.triangular_solve,adjoint,An optional `bool`. Defaults to `False`. Boolean indicating whether to solve with `matrix` or its (block-wise)        adjoint.,Defaults to CONSTANT_BOOL,bool,,0,,,
1248,tf.quantization.fake_quant_with_min_max_vars_gradient,narrow_range,An optional `bool`. Defaults to `False`. Whether to quantize into 2^num_bits - 1 distinct values.,Defaults to CONSTANT_BOOL,bool,,0,,,
1249,tf.linalg.triangular_solve,lower,An optional `bool`. Defaults to `True`. Boolean indicating whether the innermost matrices in `matrix` are lower or upper triangular.,Defaults to CONSTANT_BOOL,bool,,0,,,
1250,tf.nn.max_pool_with_argmax,include_batch_in_index,An optional `boolean`. Defaults to `False`. Whether to include batch dimension in flattened index of `argmax`.,Defaults to CONSTANT_BOOL,bool,,0,,,
1251,tf.data.experimental.make_csv_dataset,use_quote_delim,"An optional bool. Defaults to `True`. If false, treats double quotation marks as regular characters inside of the string fields.",Defaults to CONSTANT_BOOL,bool,,0,,,
1252,tf.nn.local_response_normalization,beta,An optional `float`. Defaults to `0.5`. An exponent.,Defaults to CONSTANT_FLOAT,float,,0,,,
1253,tf.random.gamma,beta,A Tensor or Python value or N-D array of type `dtype`. Defaults to 1.`beta` provides the inverse scale parameter(s) of the gamma distribution(s) to sample. Must be broadcastable with `alpha`.,Defaults to CONSTANT_FLOATbeta provides the inverse scale parameter BSTR to sample,float,,0,,,
1254,tf.nn.local_response_normalization,alpha,"An optional `float`. Defaults to `1`. A scale factor, usually positive.",Defaults to CONSTANT_NUM,int,,0,,,
1255,tf.quantization.fake_quant_with_min_max_args,max,An optional `float`. Defaults to `6`.,Defaults to CONSTANT_NUM,int,,0,,,
1256,tf.nn.fractional_avg_pool,seed,"An optional `int`.  Defaults to `0`.  If set to be non-zero, the random number generator is seeded by the given seed.  Otherwise it is seeded by a random seed.",Defaults to CONSTANT_NUM,int,,0,,,
1257,tf.image.encode_png,compression,An optional `int`. Defaults to `-1`. Compression level.,Defaults to CONSTANT_NUM,int,,0,,,
1258,tf.audio.decode_wav,desired_channels,An optional `int`. Defaults to `-1`. Number of sample channels wanted.,Defaults to CONSTANT_NUM,int,,0,,,
1259,tf.image.sample_distorted_bounding_box,seed,"An optional `int`. Defaults to `0`. If `seed` is set to non-zero, the random number generator is seeded by the given `seed`.  Otherwise, it is seeded by a random seed.",Defaults to CONSTANT_NUM,int,,0,,,
1260,tf.io.decode_and_crop_jpeg,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Defaults to CONSTANT_NUM,int,,0,,,
1261,tf.io.encode_jpeg,y_density,An optional `int`. Defaults to `300`. Vertical pixels per density unit.,Defaults to CONSTANT_NUM,int,,0,,,
1262,tf.nn.local_response_normalization,depth_radius,An optional `int`. Defaults to `5`. 0-D.  Half-width of the 1-D normalization window.,Defaults to CONSTANT_NUM,int,,0,,,
1263,tf.quantization.fake_quant_with_min_max_args_gradient,num_bits,An optional `int`. Defaults to `8`.,Defaults to CONSTANT_NUM,int,,0,,,
1264,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,num_bits,"An optional `int`. Defaults to `8`. The bitwidth of the quantization; between 2 and 16, inclusive.",Defaults to CONSTANT_NUM,int,,0,,,
1265,tf.data.experimental.make_batched_features_dataset,parser_num_threads,Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors. Defaults to `2`.,Defaults to CONSTANT_NUM,int,,0,,,
1266,tf.nondifferentiable_batch_function,max_enqueued_batches,The maximum depth of the batch queue. Defaults to 10.,Defaults to CONSTANT_NUM,int,,0,,,
1267,tf.ragged.range,deltas,Vector or scalar `Tensor`.  Specifies the increment for each range. Defaults to `1`.,Defaults to CONSTANT_NUM,int,,0,,,
1268,tf.random.uniform,maxval,"A Tensor or Python value of type `dtype`, broadcastable with`minval`. The upper bound on the range of random values to generate (exclusive). Defaults to 1 if `dtype` is floating point.",Defaults to CONSTANT_NUM if PARAM is D_TYPE,int,,0,,,
1269,tf.estimator.experimental.stop_if_higher_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Defaults to CONSTANT_NUM seconds,int,,0,,,
1270,tf.shape,out_type,(Optional) The specified output type of the operation (`int32` or`int64`). Defaults to `tf.int32`.,Defaults to D_TYPE,tf.dtype,,0,,,
1271,tf.summary.audio,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Defaults to empty,,,,,,
1272,tf.io.decode_proto,descriptor_source,"An optional `string`. Defaults to `""local://""`. Either the special value `local://` or a path to a file containing a serialized `FileDescriptorSet`.",Defaults to local,,,,,,
1273,tf.data.experimental.make_csv_dataset,compression_type,"(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`. Defaults to no compression.",Defaults to no compression,,,,,,
1274,tf.eye,num_columns,Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.  Defaults to `num_rows`.,Defaults to PARAM,,,,,,
1275,tf.eye,name,"A name for this `Op`.  Defaults to ""eye"".",Defaults to QSTR,,,,,,
1276,tf.nn.collapse_repeated,name,"A name for this `Op`. Defaults to ""collapse_repeated_labels"".",Defaults to QSTR,,,,,,
1277,tf.debugging.assert_equal,name,"A name for this operation (optional).  Defaults to ""assert_equal"".",Defaults to QSTR,,,,,,
1278,tf.debugging.assert_greater_equal,name,"A name for this operation (optional).  Defaults to ""assert_greater_equal"".",Defaults to QSTR,,,,,,
1279,tf.debugging.assert_non_negative,name,"A name for this operation (optional).  Defaults to ""assert_non_negative"".",Defaults to QSTR,,,,,,
1280,tf.debugging.assert_none_equal,name,"A name for this operation (optional).  Defaults to ""assert_none_equal"".",Defaults to QSTR,,,,,,
1281,tf.debugging.assert_rank_at_least,name,"A name for this operation (optional).  Defaults to ""assert_rank_at_least"".",Defaults to QSTR,,,,,,
1282,tf.debugging.assert_integer,name,"A name for this operation (optional). Defaults to ""assert_integer"".",Defaults to QSTR,,,,,,
1283,tf.math.is_strictly_increasing,name,"A name for this operation (optional). Defaults to ""is_strictly_increasing""",Defaults to QSTR,,,,,,
1284,tf.debugging.assert_type,name,"A name for this operation. Defaults to ""assert_type""",Defaults to QSTR,,,,,,
1285,tf.io.encode_jpeg,density_unit,"An optional `string` from: `""in"", ""cm""`. Defaults to `""in""`. Unit used to specify `x_density` and `y_density`: pixels per inch (`'in'`) or centimeter (`'cm'`).",Defaults to QSTR,,,,,,
1286,tf.print,output_stream,"The output stream, logging level, or file to print to. Defaults to sys.stderr, but sys.stdout, tf.compat.v1.logging.info, tf.compat.v1.logging.warning, tf.compat.v1.logging.error, absl.logging.info, absl.logging.warning and absl.loogging,error are also supported. To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",Defaults to sys stderr but sys stdout tf compat v1 logging info tf compat v1 logging warning tf compat v1 logging error absl logging info absl logging warning and absl loogging error are also supported,,,,,,
1287,tf.data.experimental.make_batched_features_dataset,reader,A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors. Defaults to `tf.data.TFRecordDataset`.,Defaults to tf data TFRecordDataset,,,,,,
1288,tf.print,end,End character that is appended at the end the printed string. Defaults to the newline character.,Defaults to the newline character,,,,,,
1289,tf.data.experimental.Counter,dtype,(Optional.) The data type for counter elements. Defaults to`tf.int64`.,Defaults toD_TYPE,tf.dtype,,0,,,
1290,tf.math.argmin,output_type,"An optional `tf.DType` from: `tf.int32, tf.int64`. Defaults to`tf.int64`.",Defaults toD_TYPE,tf.dtype,,0,,,
1291,tf.feature_column.numeric_column,dtype,"defines the type of values. Default value is `tf.float32`. Must be a non-quantized, real integer or floating point type.",defines the type of values,tf.dtype,,0,,,
1292,tf.keras.Input,**kwargs,deprecated arguments support. Supports `batch_shape` and`batch_input_shape`.,deprecated arguments support,,,,,,
1293,tf.math.argmax,axis,"A `Tensor`. Must be one of the following types: `int32`, `int64`. int32 or int64, must be in the range `-rank(input), rank(input))`. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.",Describes which axis of the PARAM D_STRUCTURE to reduce across,int,,0,,,
1294,tf.nn.pool,dilations,"Optional.  Dilation rate.  List of N ints >= 1. Defaults to [1]*N.  If any value of dilation_rate is > 1, then all values of strides must be 1.",Dilation rate,numeric,,,"[0,1]",,
1295,tf.nn.conv1d,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",Dilations in the batch and depth dimensions must be CONSTANT_NUM,,,,,,
1296,tf.nn.conv1d_transpose,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",Dilations in the batch and depth dimensions must be CONSTANT_NUM,,,,,,
1297,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",Dilations in the batch and depth dimensions must be CONSTANT_NUM,,,,,,
1298,tf.roll,shift,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Dimension must be 0-D or 1-D. `shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`. Negative shifts will roll the elements in the opposite direction.",Dimension must be CONSTANT_NUM D or CONSTANT_NUM D shift BSTR specifies the number of places by which elements are shifted positively BSTR along the dimension specified by PARAM BSTR,,,CONSTANT_NUM,,,
1299,tf.keras.layers.Embedding,output_dim,int >= 0. Dimension of the dense embedding.,Dimension of the dense embedding,int,,,,,
1300,tf.train.list_variables,ckpt_dir_or_file,Directory with checkpoints file or path to checkpoint.,Directory with checkpoints file or path to checkpoint,string,,0,,,
1301,tf.histogram_fixed_width_bins,dtype,dtype for returned histogram.,dtype for returned histogram,tf.dtype,,0,,,
1302,tf.feature_column.sequence_numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",e g,,,,,,
1303,tf.io.decode_csv,records,A `Tensor` of type `string`. Each string is a record/row in the csv and all records should have the same format.,Each D_TYPE is a record row in the csv and all records should have the same format,,,,,,
1304,tf.nn.embedding_lookup_sparse,params,"A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.  Alternatively, a`PartitionedVariable`, created by partitioning along dimension 0. Each element must be appropriately sized for `""div""` `partition_strategy`.",Each element must be appropriately sized for QSTR,,,,,,
1305,tf.io.decode_raw,input_bytes,Each element of the input Tensor is converted to an array of bytes.,Each element of the input D_STRUCTURE is converted to an D_STRUCTURE of bytes,,,,,,
1306,tf.feature_column.sequence_categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,Each feature is mapped to the index of its value BSTR in QSTR,,,,,,
1307,tf.feature_column.categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,Each feature is mapped to the index of its value BSTR in QSTR,,,,,,
1308,tf.random.categorical,logits,"2-D Tensor with shape `[batch_size, num_classes]`.  Each slice`[i, :]` represents the unnormalized log-probabilities for all classes.",Each slice i represents the unnormalized log probabilities for all classes,,,,,,
1309,tf.random.fixed_unigram_candidate_sampler,vocab_file,"Each valid line in this file (which should have a CSV-like format) corresponds to a valid word ID. IDs are in sequential order, starting from num_reserved_ids. The last entry in each line is expected to be a value corresponding to the count or relative probability. Exactly one of `vocab_file` and `unigrams` needs to be passed to this operation.",Each valid line in this file BSTR corresponds to a valid word ID,,,,,,
1310,tf.xla.experimental.jit_scope,compile_ops,"Whether to enable or disable compilation in the scope. Either a Python bool, or a callable that accepts the parameter`node_def` and returns a python bool.",Either a Python D_TYPE or a callable that accepts the parameter QSTR and returns a python D_TYPE,D_TYPE,,0,,,
1311,tf.compat.dimension_value,dimension,"Either a `Dimension` instance, an integer, or None.",Either a QSTR instance an D_TYPE or None,D_TYPE,,,,,
1312,tf.keras.layers.Lambda,mask,"Either None (indicating no masking) or a callable with the same signature as the `compute_mask` layer method, or a tensor that will be returned as output mask regardless what the input is.",Either None BSTR or a callable with the same signature as the QSTR layer method or a D_STRUCTURE that will be returned as output mask regardless what the input is,,,,,,
1313,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1314,tf.io.decode_proto,descriptor_source,"An optional `string`. Defaults to `""local://""`. Either the special value `local://` or a path to a file containing a serialized `FileDescriptorSet`.",Either the special value local QSTR FileDescriptorSet,,,,,,
1315,tf.estimator.experimental.stop_if_higher_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Either this or PARAM must be set,,,,,,
1316,tf.estimator.experimental.stop_if_no_decrease_hook,run_every_steps,"If specified, calls `should_stop_fn` every`run_every_steps` steps. Either this or `run_every_secs` must be set.",Either this or PARAM must be set,,,,,,
1317,tf.estimator.experimental.stop_if_lower_hook,run_every_steps,"If specified, calls `should_stop_fn` every`run_every_steps` steps. Either this or `run_every_secs` must be set.",Either this or PARAM must be set,,,,,,
1318,tf.print,end,End character that is appended at the end the printed string. Defaults to the newline character.,End character that is appended at the end the printed D_TYPE,string,,0,,,
1319,tf.random.fixed_unigram_candidate_sampler,vocab_file,"Each valid line in this file (which should have a CSV-like format) corresponds to a valid word ID. IDs are in sequential order, starting from num_reserved_ids. The last entry in each line is expected to be a value corresponding to the count or relative probability. Exactly one of `vocab_file` and `unigrams` needs to be passed to this operation.",Exactly one of QSTR and PARAM needs to be passed to this operation,,,,,,
1320,tf.strings.unicode_transcode,input_encoding,"A `string`. Text encoding of the input strings. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: `""UTF-16"", ""US ASCII"", ""UTF-8""`.",Examples UTF CONSTANT_NUM QSTR,,,,,,
1321,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",Expected to be an D_TYPE,D_TYPE,,0,,,
1322,tf.summary.write,step,"Explicit `int64`-castable monotonic step value for this summary. If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",Explicit D_TYPE castable monotonic step value for this summary,D_TYPE,,,,,
1323,tf.io.decode_proto,field_names,"A list of `strings`. List of strings containing proto field names. An extension field can be decoded by using its full name, e.g. EXT_PACKAGE.EXT_FIELD_NAME.",EXT_PACKAGE EXT_FIELD_NAME,,,,,,
1324,tf.estimator.add_metrics,metric_fn,"A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name. Final metrics are a union of this and `estimator's` existing metrics. If there is a name conflict between this and `estimator`s existing metrics, this will override the existing one. The values of the dict are the results of calling a metric function, namely a `(metric_tensor, update_op)` tuple. ",Final metrics are a union of this and PARAMs existing metrics,,,,,,
1325,tf.fingerprint,method,A `Tensor` of type `tf.string`. Fingerprint method used by this op. Currently available method is `farmhash64`.,Fingerprint method used by this op,,,,,,
1326,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",For an example of utilizing this attribute see https github com tensorflow tensorflow blob master tensorflow compiler mlir lite transforms prepare_composite_functions_tf ccThe code above automatically detects and substitutes function that implements QSTR and allows TFLite to substitute its own implementations,,,,,,
1327,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1328,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1329,tf.batch_to_space,block_shape,"A `Tensor`. Must be one of the following types: `int32`,`int64`. 1-D with shape `[M]`, all values must be >= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",For backwards compatibility with TF CONSTANT_FLOAT this parameter may be an D_TYPE in which case it is converted to numpy D_STRUCTURE BSTR dtype numpy D_TYPE,,,,,,
1330,tf.nn.fractional_avg_pool,pooling_ratio,"A list of `floats` that has length >= 4.  Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",For example a valid pooling ratio looks like BSTR,,,,,,
1331,tf.nn.fractional_max_pool,pooling_ratio,"An int or list of `ints` that has length `1`, `2` or `4`. Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",For example a valid pooling ratio looks like BSTR,,,,,,
1332,tf.keras.layers.PReLU,shared_axes,"The axes along which to share learnable parameters for the activation function. For example, if the incoming feature maps are from a 2D convolution with output shape `(batch, height, width, channels)`, and you wish to share parameters across space so that each filter only has one set of parameters, set `shared_axes=[1, 2]`.",For example if the incoming feature maps are from a CONSTANT_NUM D convolution with output shape BSTR and you wish to share parameters across space so that each filter only has one set of parameters set shared_axes BSTR,,,,,,
1333,tf.nn.fractional_avg_pool,overlapping,"An optional `bool`.  Defaults to `False`.  When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.  The result would be [20, 16] for fractional avg pooling.",For example index CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM PARAM CONSTANT_NUM0 CONSTANT_NUM CONSTANT_NUM6 CONSTANT_NUM CONSTANT_NUMIf the pooling D_STRUCTURE is BSTR then CONSTANT_NUM6 at index CONSTANT_NUM will be used twice,,,,,,
1334,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",For example mycompany my_recurrent_cell,,,,,,
1335,tf.config.list_logical_devices,device_type,"(optional string) Only include devices matching this device type. For example ""CPU"" or ""GPU"".",For example QSTR,,,,,,
1336,tf.signal.idct,axis,For future expansion. The axis to compute the DCT along. Must be `-1`.,For future expansion,,,,,,
1337,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",For instance a tensorflow user can use this attribute to mark that their function also implements QSTR perhaps more efficiently,,,,,,
1338,tf.keras.Input,ragged,"A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, seehttps://www.tensorflow.org/guide/ragged_tensors",For more information about RaggedTensors seehttps www tensorflow org guide ragged_tensors,,,,,,
1339,tf.nn.max_pool,data_format,"A string. Specifies the channel dimension. For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",For N CONSTANT_NUM it can be either QSTR BSTR or QSTR for N CONSTANT_NUM it can be either QSTR BSTR or QSTR and for N CONSTANT_NUM either QSTR BSTR or QSTR,,,,,QSTR,
1340,tf.math.argmax,axis,"A `Tensor`. Must be one of the following types: `int32`, `int64`. int32 or int64, must be in the range `-rank(input), rank(input))`. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.",For D_STRUCTURE use axis CONSTANT_NUM,,,,,,
1341,tf.keras.layers.LSTMCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,,,,,,
1342,tf.keras.layers.LSTM,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,,,,,,
1343,tf.keras.layers.GRU,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,,,,,,
1344,tf.nn.with_space_to_batch,op,"Function that maps (input, num_spatial_dims, padding) -> output",Function that maps BSTR REXPR,,,,,,
1345,tf.keras.layers.GRU,reset_after,"GRU convention (whether to apply reset gate after or before matrix multiplication). False = ""before"", True = ""after"" (default and CuDNN compatible).",GRU convention BSTR,,,,,,
1346,tf.keras.layers.GRUCell,reset_after,"GRU convention (whether to apply reset gate after or before matrix multiplication). False = ""before"", True = ""after"" (default and CuDNN compatible).",GRU convention BSTR,,,,,,
1347,tf.sparse.segment_sqrt_n,indices,A 1-D `Tensor` with indices into `data`. Has same rank as`segment_ids`.,Has same rank as PARAM,,,&PARAM,,,
1348,tf.image.crop_to_bounding_box,target_height,Height of the result.,Height of the result,numeric,,,"[0,inf)",,
1349,tf.keras.preprocessing.image.random_shift,hrg,"Height shift range, as a float fraction of the height.",Height shift range as a D_TYPE fraction of the height,D_TYPE,,,,,
1350,tf.image.crop_to_bounding_box,offset_width,Horizontal coordinate of the top-left corner of the result in the input.,Horizontal coordinate of the top left corner of the result in the input,,,,,,
1351,tf.extract_volume_patches,strides,"A list of `ints` that has length `>= 5`. 1-D of length 5. How far the centers of two consecutive patches are in`input`. Must be: `[1, stride_planes, stride_rows, stride_cols, 1]`.",How far the centers of two consecutive patches are in PARAM,,,,,,
1352,tf.signal.linear_to_mel_weight_matrix,num_spectrogram_bins,"An integer `Tensor`. How many bins there are in the source spectrogram data, which is understood to be `fft_size // 2 + 1`, i.e. the spectrogram only contains the nonredundant FFT bins.",How many bins there are in the source spectrogram data which is understood to be fft_size CONSTANT_NUM CONSTANT_NUM i e,int,,0,"[0,inf)",,
1353,tf.keras.layers.LSTM,time_major,"The shape format of the `inputs` and `outputs` tensors. If True, the inputs and outputs will be in shape`[timesteps, batch, feature]`, whereas in the False case, it will be`[batch, timesteps, feature]`. Using `time_major = True` is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",However most TensorFlow data is batch major so by default this function accepts input and emits output in batch major form,,,,,,
1354,tf.image.hsv_to_rgb,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. HSV data to convert. Last dimension must be size 3.",HSV data to convert,,,,,,
1355,tf.random.fixed_unigram_candidate_sampler,vocab_file,"Each valid line in this file (which should have a CSV-like format) corresponds to a valid word ID. IDs are in sequential order, starting from num_reserved_ids. The last entry in each line is expected to be a value corresponding to the count or relative probability. Exactly one of `vocab_file` and `unigrams` needs to be passed to this operation.",IDs are in sequential order starting from PARAM,int,,,"[0,inf)",,
1356,tf.sparse.sparse_dense_matmul,adjoint_a,"Use the adjoint of A in the matrix multiply.  If A is complex, this is transpose(conj(A)).  Otherwise it's transpose(A).",If A is D_TYPE this is transpose BSTR,,,,,,
1357,tf.nn.conv2d_transpose,strides,"An int or list of `ints` that has length `1`, `2` or `4`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",If a single value is given it is replicated in the QSTR dimension,,,,,,
1358,tf.feature_column.numeric_column,default_value,"A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing. A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column. If a single value is provided, the same value will be applied as the default value for every item. If an iterable of values is provided, the shape of the `default_value` should be equal to the given `shape`.",If a single value is provided the same value will be applied as the default value for every item,,,,,,
1359,tf.strings.format,inputs,"A list of `Tensor` objects, or a single Tensor. The list of tensors to format into the template string. If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",If a solitary D_STRUCTURE is passed in the input D_STRUCTURE will automatically be wrapped as a D_STRUCTURE,,,,,,
1360,tf.feature_column.numeric_column,default_value,"A single value compatible with `dtype` or an iterable of values compatible with `dtype` which the column takes on during`tf.Example` parsing if data is missing. A default value of `None` will cause `tf.io.parse_example` to fail if an example does not contain this column. If a single value is provided, the same value will be applied as the default value for every item. If an iterable of values is provided, the shape of the `default_value` should be equal to the given `shape`.",If an D_STRUCTURE of values is provided the PARAM of the QSTR should be equal to the given PARAM,,,,,,
1361,tf.sparse.sparse_dense_matmul,adjoint_b,"Use the adjoint of B in the matrix multiply.  If B is complex, this is transpose(conj(B)).  Otherwise it's transpose(B).",If B is D_TYPE this is transpose BSTR,,,,,,
1362,tf.keras.backend.placeholder,ndim,"Number of axes of the tensor. At least one of {`shape`, `ndim`} must be specified. If both are specified, `shape` is used.",If both are specified PARAM is used,,,,,,
1363,tf.data.experimental.make_csv_dataset,select_columns,"An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select. If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines. When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified. Using this results in faster parsing and lower memory usage. If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",If both this and PARAM are specified these must have the same lengths and PARAM is assumed to be sorted in order of increasing column index,,,,,,
1364,tf.data.experimental.make_csv_dataset,select_columns,"An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select. If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines. When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified. Using this results in faster parsing and lower memory usage. If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",If column names are provided these must correspond to names provided in PARAM or inferred from the file PARAM lines,,,,,,
1365,tf.nn.log_poisson_loss,compute_full_loss,"whether to compute the full loss. If false, a constant term is dropped in favor of more efficient optimization.",If CONSTANT_BOOL a constant term is dropped in favor of more efficient optimization,bool,,0,,,
1366,tf.keras.layers.LSTMCell,unit_forget_bias,"Boolean (default `True`). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force`bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",If CONSTANT_BOOL add CONSTANT_NUM to the bias of the forget gate at initialization,bool,,0,,,
1367,tf.keras.layers.ConvLSTM2D,unit_forget_bias,"Boolean. If True, add 1 to the bias of the forget gate at initialization. Use in combination with `bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",If CONSTANT_BOOL add CONSTANT_NUM to the bias of the forget gate at initialization,bool,,0,,,
1368,tf.keras.layers.LayerNormalization,center,"If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored.",If CONSTANT_BOOL add offset of QSTR to normalized D_STRUCTURE,bool,,0,,,
1369,tf.keras.layers.BatchNormalization,center,"If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored.",If CONSTANT_BOOL add offset of QSTR to normalized D_STRUCTURE,bool,,0,,,
1370,tf.linalg.svd,full_matrices,"If true, compute full-sized `u` and `v`. If false (the default), compute only the leading `P` singular vectors. Ignored if `compute_uv` is `False`.",If CONSTANT_BOOL BSTR compute only the leading QSTR singular D_STRUCTURE,bool,,0,,,
1371,tf.nest.map_structure,**kwargs,"Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception). To allow this set this argument to `False`. Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.  If `False` (the default), then composite tensors are not expanded. ",If CONSTANT_BOOL BSTR then composite D_STRUCTURE are not expanded,bool,,0,,,
1372,tf.linalg.svd,full_matrices,"If true, compute full-sized `u` and `v`. If false (the default), compute only the leading `P` singular vectors. Ignored if `compute_uv` is `False`.",If CONSTANT_BOOL compute full sized QSTR,bool,,0,,,
1373,tf.summary.trace_on,graph,"If True, enables collection of executed graphs. It includes ones from tf.function invocation and ones from the legacy graph mode. The default is True.",If CONSTANT_BOOL enables collection of executed graphs,bool,,0,,,
1374,tf.keras.layers.LayerNormalization,scale,"If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",If CONSTANT_BOOL multiply by QSTR,bool,,0,,,
1375,tf.math.cumsum,exclusive,"If `True`, perform exclusive cumsum.",If CONSTANT_BOOL perform exclusive cumsum,bool,,0,,,
1376,tf.math.cumulative_logsumexp,exclusive,"If `True`, perform exclusive cumulative log-sum-exp.",If CONSTANT_BOOL perform exclusive cumulative log sum exp,bool,,0,,,
1377,tf.math.cumulative_logsumexp,reverse,"If `True`, performs the cumulative log-sum-exp in the reverse direction.",If CONSTANT_BOOL performs the cumulative log sum exp in the reverse direction,bool,,0,,,
1378,tf.keras.layers.SimpleRNN,go_backwards,"Boolean (default False). If True, process the input sequence backwards and return the reversed sequence.",If CONSTANT_BOOL process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE,bool,,0,,,
1379,tf.xla.experimental.jit_scope,separate_compiled_gradients,"If true put each gradient subgraph into a separate compilation scope. This gives fine-grained control over which portions of the graph will be compiled as a single unit. Compiling gradients separately may yield better performance for some graphs. The scope is named based on the scope of the forward computation as well as the name of the gradients. As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients.",If CONSTANT_BOOL put each gradient subgraph into a separate compilation scope,bool,,0,,,
1380,tf.keras.layers.LayerNormalization,center,"If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored.",If CONSTANT_BOOL QSTR is ignored,bool,,0,,,
1381,tf.keras.layers.BatchNormalization,center,"If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored.",If CONSTANT_BOOL QSTR is ignored,bool,,0,,,
1382,tf.keras.layers.LayerNormalization,scale,"If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",If CONSTANT_BOOL QSTR is not used,bool,,0,,,
1383,tf.linalg.matmul,transpose_b,"If `True`, `b` is transposed before multiplication.",If CONSTANT_BOOL QSTR is transposed before multiplication,bool,,0,,,
1384,tf.linalg.matvec,b_is_sparse,"If `True`, `b` is treated as a sparse matrix.",If CONSTANT_BOOL QSTR is treated as a sparse matrix,bool,,0,,,
1385,tf.sparse.reduce_sum,keepdims,"If true, retain reduced dimensions with length 1.",If CONSTANT_BOOL retain reduced dimensions with length CONSTANT_NUM,bool,,0,,,
1386,tf.math.reduce_min,keepdims,"If true, retains reduced dimensions with length 1.",If CONSTANT_BOOL retains reduced dimensions with length CONSTANT_NUM,bool,,0,,,
1387,tf.math.reduce_logsumexp,keepdims,"If true, retains reduced dimensions with length 1.",If CONSTANT_BOOL retains reduced dimensions with length CONSTANT_NUM,bool,,0,,,
1388,tf.math.reduce_mean,keepdims,"If true, retains reduced dimensions with length 1.",If CONSTANT_BOOL retains reduced dimensions with length CONSTANT_NUM,bool,,0,,,
1389,tf.sparse.reduce_max,output_is_sparse,"If true, returns a `SparseTensor` instead of a dense`Tensor` (the default).",If CONSTANT_BOOL returns a D_STRUCTURE instead of a denseD_STRUCTURE BSTR,bool,,0,,,
1390,tf.keras.layers.LSTM,time_major,"The shape format of the `inputs` and `outputs` tensors. If True, the inputs and outputs will be in shape`[timesteps, batch, feature]`, whereas in the False case, it will be`[batch, timesteps, feature]`. Using `time_major = True` is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",If CONSTANT_BOOL the inputs and outputs will be in shape BSTR whereas in the CONSTANT_BOOL case it will be BSTR,bool,,0,,,
1391,tf.keras.layers.LSTM,stateful,"Boolean (default `False`). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",If CONSTANT_BOOL the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch,bool,,0,,,
1392,tf.get_static_value,partial,"If True, the returned numpy array is allowed to have partially evaluated values. Values that can't be evaluated will be None.",If CONSTANT_BOOL the returned numpy D_STRUCTURE is allowed to have partially evaluated values,bool,,0,,,
1393,tf.io.decode_image,expand_animations,"Controls the shape of the returned op's output. If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not. If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",If CONSTANT_BOOL the returned op will produce a CONSTANT_NUM D D_STRUCTURE for all file types and will truncate animated GIFs to the first frame,bool,,0,,,
1394,tf.io.decode_image,expand_animations,"Controls the shape of the returned op's output. If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not. If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",If CONSTANT_BOOL the returned op will produce a CONSTANT_NUM D D_STRUCTURE for PNG JPEG and BMP files and a CONSTANT_NUM D D_STRUCTURE for all GIFs whether animated or not,bool,,0,,,
1395,tf.data.experimental.make_csv_dataset,use_quote_delim,"An optional bool. Defaults to `True`. If false, treats double quotation marks as regular characters inside of the string fields.",If CONSTANT_BOOL treats D_TYPE quotation marks as regular characters inside of the D_TYPE fields,bool,,0,,,
1396,tf.keras.layers.Attention,use_scale,"If `True`, will create a scalar variable to scale the attention scores.",If CONSTANT_BOOL will create a scalar variable to scale the attention scores,bool,,0,,,
1397,tf.keras.layers.Cropping2D,cropping,"Int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints. If int: the same symmetric cropping is applied to height and width.If tuple of 2 ints: interpreted as two different symmetric cropping values for height and width:`(symmetric_height_crop, symmetric_width_crop)`.If tuple of 2 tuples of 2 ints: interpreted as`((top_crop, bottom_crop), (left_crop, right_crop))` ",If D_TYPE the same symmetric cropping is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric cropping values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR,,,,,,
1398,tf.keras.layers.ZeroPadding2D,padding,"Int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints. If int: the same symmetric padding is applied to height and width.If tuple of 2 ints: interpreted as two different symmetric padding values for height and width:`(symmetric_height_pad, symmetric_width_pad)`.If tuple of 2 tuples of 2 ints: interpreted as`((top_pad, bottom_pad), (left_pad, right_pad))` ",If D_TYPE the same symmetric padding is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric padding values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR,,,,,,
1399,tf.keras.layers.ZeroPadding3D,padding,"Int, or tuple of 3 ints, or tuple of 3 tuples of 2 ints. If int: the same symmetric padding is applied to height and width.If tuple of 3 ints: interpreted as two different symmetric padding values for height and width:`(symmetric_dim1_pad, symmetric_dim2_pad, symmetric_dim3_pad)`.If tuple of 3 tuples of 2 ints: interpreted as`((left_dim1_pad, right_dim1_pad), (left_dim2_pad, right_dim2_pad), (left_dim3_pad, right_dim3_pad))` ",If D_TYPE the same symmetric padding is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric padding values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR,,,,,,
1400,tf.control_dependencies,control_inputs,"A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context. Can also be `None` to clear the control dependencies. If eager execution is enabled, any callable object in the `control_inputs` list will be called.",If eager execution is enabled any callable object in the QSTR D_STRUCTURE will be called,,,,,,
1401,tf.nn.separable_conv2d,dilations,"1-D of size 2. The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution. If it is greater than 1, then all values of strides must be 1.",If it is greater than CONSTANT_NUM then all values of PARAM must be CONSTANT_NUM,,,,,,
1402,tf.linalg.diag,num_cols,"The number of columns of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",If it is not provided the op assumes the output matrix is a square matrix and infers the matrix size from QSTR and the innermost dimension of PARAM,,,,,,
1403,tf.linalg.diag,num_rows,"The number of rows of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",If it is not provided the op assumes the output matrix is a square matrix and infers the matrix size from QSTR and the innermost dimension of PARAM,,,,,,
1404,tf.train.checkpoints_iterator,timeout,"The maximum number of seconds to wait between checkpoints. If left as `None`, then the process will wait indefinitely.",If left as QSTR then the process will wait indefinitely,,,,,,
1405,tf.range,limit,"A 0-D `Tensor` (scalar). Upper limit of sequence, exclusive. If None, defaults to the value of `start` while the first entry of the range defaults to 0.",If None defaults to the value of PARAM while the first entry of the range defaults to CONSTANT_NUM,,,,,,
1406,tf.config.set_logical_device_configuration,logical_devices,"(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`. If None, the default configuration will be used.",If None the default configuration will be used,,,,,,
1407,tf.keras.layers.Bidirectional,merge_mode,"Mode by which outputs of the forward and backward RNNs will be combined. One of {'sum', 'mul', 'concat', 'ave', None}. If None, the outputs will not be combined, they will be returned as a list.",If None the outputs will not be combined they will be returned as a D_STRUCTURE,,,,,,
1408,tf.feature_column.shared_embeddings,shared_embedding_collection_name,"Optional collective name of these columns. If not given, a reasonable name will be chosen based on the names of`categorical_columns`.",If not given a reasonable name will be chosen based on the names of PARAM,,,,,,
1409,tf.sparse.cross_hashed,hash_key,"Integer hash_key that will be used by the `FingerprintCat64`function. If not given, will use a default key.",If not given will use a default key,,,,,,
1410,tf.feature_column.sequence_numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",If not QSTR a function that can be used to normalize the value of the D_STRUCTURE after PARAM is applied for parsing,,,,,,
1411,tf.required_space_to_batch_paddings,base_paddings,"Optional int32 Tensor of shape [N, 2].  Specifies the minimum amount of padding to use.  All elements must be >= 0.  If not specified, defaults to 0.",If not specified defaults to CONSTANT_NUM,,,,,,
1412,tf.ragged.constant,dtype,"The type of elements for the returned `RaggedTensor`.  If not specified, then a default is chosen based on the scalar values in`pylist`.",If not specified then a default is chosen based on the scalar values in PARAM,,,,,,
1413,tf.ragged.range,dtype,"The type of the elements of the resulting tensor.  If not specified, then a value is chosen based on the other args.",If not specified then a value is chosen based on the other args,,,,,,
1414,tf.summary.write,step,"Explicit `int64`-castable monotonic step value for this summary. If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",If omitted this defaults to tf summary experimental get_step which must not be None,,,,,,
1415,tf.keras.layers.AveragePooling2D,pool_size,"integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension. If only one integer is specified, the same window length will be used for both dimensions.",If only one D_TYPE is specified the same window length will be used for both dimensions,,,,,,
1416,tf.random.uniform_candidate_sampler,num_sampled,"An `int`.  The number of classes to randomly sample. The`sampled_candidates` return value will have shape `[num_sampled]`. If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",If PARAM CONSTANT_BOOL QSTR must be less than or equal to PARAM,,,,,,
1417,tf.quantization.quantize_and_dequantize,input_max,"If range_given=True, the maximum input value that needs to be represented in the quantized representation. If axis is specified, this should be a vector of maximum values for each slice along axis.",If PARAM CONSTANT_BOOL the maximum PARAM value that needs to be represented in the quantized representation,,,,,,
1418,tf.keras.backend.ctc_decode,beam_width,if `greedy` is `false`: a beam search decoder will be used with a beam of this width.,if PARAM is CONSTANT_BOOL a beam search decoder will be used with a beam of this width,,,,,,
1419,tf.quantization.quantize_and_dequantize,input_max,"If range_given=True, the maximum input value that needs to be represented in the quantized representation. If axis is specified, this should be a vector of maximum values for each slice along axis.",If PARAM is specified this should be a D_STRUCTURE of maximum values for each slice along PARAM,,,,,,
1420,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",If provided contains a name of a QSTR function this implements,,,,,,
1421,tf.data.experimental.make_csv_dataset,label_name,"A optional string corresponding to the label column. If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",If provided the data for this column is returned as a separate D_STRUCTURE from the features D_STRUCTURE so that the dataset complies with the format expected by a tf Estimator train QSTR tf Estimator evaluate input function,,,,,,
1422,tf.math.reduce_euclidean_norm,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,,,,,,
1423,tf.math.reduce_sum,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,,,,,,
1424,tf.math.count_nonzero,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input), rank(input))`.",If QSTR BSTR reduces all dimensions,,,,,,
1425,tf.image.sample_distorted_bounding_box,seed,"An optional `int`. Defaults to `0`. If `seed` is set to non-zero, the random number generator is seeded by the given `seed`.  Otherwise, it is seeded by a random seed.",If QSTR is set to non zero the random number generator is seeded by the given QSTR,,,,,,
1426,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",If REXPR the circular buffer behavior will be disabled i e the execution debug events will be written to the file writers in the same way as non execution events such as op creations and source file snapshots,,,,,,
1427,tf.estimator.experimental.stop_if_no_increase_hook,eval_dir,"If set, directory containing summary files with eval metrics. By default, `estimator.eval_dir()` will be used.",If set directory containing summary files with eval metrics,,,,,,
1428,tf.nn.fractional_avg_pool,seed,"An optional `int`.  Defaults to `0`.  If set to be non-zero, the random number generator is seeded by the given seed.  Otherwise it is seeded by a random seed.",If set to be non zero the random number generator is seeded by the given seed,,,,,,
1429,tf.keras.layers.dot,normalize,"Whether to L2-normalize samples along the dot product axis before taking the dot product. If set to True, then the output of the dot product is the cosine proximity between the two samples.",If set to CONSTANT_BOOL then the output of the dot product is the cosine proximity between the two samples,bool,,0,,,
1430,tf.nn.conv1d,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",If set to k REXPR there will be k CONSTANT_NUM skipped cells between each filter element on that dimension,,,,,,
1431,tf.nn.conv1d_transpose,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",If set to k REXPR there will be k CONSTANT_NUM skipped cells between each filter element on that dimension,,,,,,
1432,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",If set to k REXPR there will be k CONSTANT_NUM skipped cells between each PARAM element on that dimension,,,,,,
1433,tf.keras.layers.Conv2DTranspose,output_padding,"An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",If set to QSTR BSTR the output shape is inferred,,,,,,
1434,tf.keras.layers.Conv3DTranspose,output_padding,"An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",If set to QSTR BSTR the output shape is inferred,,,,,,
1435,tf.sets.intersection,b,"`Tensor` or `SparseTensor` of the same type as `a`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,,,,,,
1436,tf.sets.difference,b,"`Tensor` or `SparseTensor` of the same type as `a`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,,,,,,
1437,tf.estimator.experimental.stop_if_higher_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",If specified calls QSTR at an interval of QSTR seconds,,,,,,
1438,tf.estimator.experimental.stop_if_no_decrease_hook,run_every_steps,"If specified, calls `should_stop_fn` every`run_every_steps` steps. Either this or `run_every_secs` must be set.",If specified calls QSTR every QSTR steps,,,,,,
1439,tf.estimator.experimental.stop_if_lower_hook,run_every_steps,"If specified, calls `should_stop_fn` every`run_every_steps` steps. Either this or `run_every_secs` must be set.",If specified calls QSTR every QSTR steps,,,,,,
1440,tf.nn.ctc_loss,unique,"(optional) Unique label indices as computed by ctc_unique_labels(labels).  If supplied, enable a faster, memory efficient implementation on TPU.",If supplied enable a faster memory efficient implementation on TPU,,,,,,
1441,tf.quantization.quantize,min_range,"A `Tensor` of type `float32`. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_min`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",If the PARAM attribute is specified this must be a CONSTANT_NUM D D_STRUCTURE whose size matches the PARAM dimension of the PARAM and output D_STRUCTURE,,,,,,
1442,tf.estimator.add_metrics,metric_fn,"A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name. Final metrics are a union of this and `estimator's` existing metrics. If there is a name conflict between this and `estimator`s existing metrics, this will override the existing one. The values of the dict are the results of calling a metric function, namely a `(metric_tensor, update_op)` tuple. ",If there is a name conflict between this and PARAMs existing metrics this will override the existing one,,,,,,
1443,tf.keras.preprocessing.sequence.skipgrams,sequence,"A word sequence (sentence), encoded as a list     of word indices (integers). If using a `sampling_table`,     word indices are expected to match the rank     of the words in a reference dataset (e.g. 10 would encode     the 10-th most frequently occurring token).     Note that index 0 is expected to be a non-word and will be skipped.",If using a PARAM word indices are expected to match the rank of the words in a reference dataset e g,,,,,,
1444,tf.keras.layers.Conv3D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you don t specify anything no activation is applied ie,,,,,,
1445,tf.keras.layers.DenseFeatures,feature_columns,"An iterable containing the FeatureColumns to use as inputs to your model. All items should be instances of classes derived from `DenseColumn` such as `numeric_column`, `embedding_column`,`bucketized_column`, `indicator_column`. If you have categorical features, you can wrap them with an `embedding_column` or`indicator_column`.",If you have categorical features you can wrap them with an QSTR,,,,,,
1446,tf.keras.layers.Conv3DTranspose,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, depth, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, depth, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1447,tf.keras.layers.GlobalMaxPool2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1448,tf.keras.layers.Conv2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1449,tf.keras.layers.UpSampling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1450,tf.keras.layers.AveragePooling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1451,tf.keras.layers.UpSampling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
1452,tf.keras.layers.GRUCell,recurrent_activation,"Activation function to use for the recurrent step. Default: sigmoid (`sigmoid`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you pass QSTR no PARAM is applied ie,,,,,,
1453,tf.linalg.svd,full_matrices,"If true, compute full-sized `u` and `v`. If false (the default), compute only the leading `P` singular vectors. Ignored if `compute_uv` is `False`.",Ignored if PARAM is CONSTANT_BOOL,,,,,,
1454,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",implementation mode either CONSTANT_NUM CONSTANT_NUM loops over input spatial locations to perform the forward pass,,,,,CONSTANT_NUM,
1455,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",Important Note Input and output numpy D_STRUCTUREs of QSTR are not guaranteed to be copies,,,,,,
1456,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",In place modification or storing QSTR input or return values in python datastructures without explicit np,,,,,,
1457,tf.pad,CONSTANT_NUMues,"In ""CONSTANT"" mode, the scalar pad value to use. Must be same type as `tensor`.",In QSTR PARAM the scalar pad value to use,,,,,,
1458,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",In some cases their underlying memory will be shared with the corresponding TensorFlow D_STRUCTURE,,,,,,
1459,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1460,tf.keras.backend.rnn,initial_states,"Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function. In the case that state_size is in a nested shape, the shape of initial_states will also follow the nested structure.",In the case that state_size is in a nested shape the shape of initial_states will also follow the nested structure,,,,,,
1461,tf.keras.Input,ragged,"A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, seehttps://www.tensorflow.org/guide/ragged_tensors",In this case values of QSTR in the PARAM argument represent ragged dimensions,,,,,,
1462,tf.gather_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Index D_STRUCTURE,int,,,,,D_STRUCTURE
1463,tf.keras.preprocessing.image.random_rotation,row_axis,Index of axis for rows in the input tensor.,Index of axis for rows in the input D_STRUCTURE,int,,,,,
1464,tf.keras.preprocessing.image.random_zoom,row_axis,Index of axis for rows in the input tensor.,Index of axis for rows in the input D_STRUCTURE,int,,,,,
1465,tf.keras.layers.BatchNormalization,beta_initializer,Initializer for the beta weight.,Initializer for the beta weight,,,,,,
1466,tf.keras.layers.LayerNormalization,beta_initializer,Initializer for the beta weight.,Initializer for the beta weight,,,,,,
1467,tf.keras.layers.Conv2D,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
1468,tf.keras.layers.Conv3D,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
1469,tf.keras.layers.LocallyConnected1D,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
1470,tf.keras.layers.LocallyConnected2D,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
1471,tf.keras.layers.LSTMCell,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Initializer for the bias D_STRUCTURE,,,,,,
1472,tf.keras.layers.DepthwiseConv2D,depthwise_initializer,Initializer for the depthwise kernel matrix.,Initializer for the depthwise kernel matrix,,,,,,
1473,tf.keras.layers.LayerNormalization,gamma_initializer,Initializer for the gamma weight.,Initializer for the gamma weight,,,,,,
1474,tf.keras.layers.Dense,kernel_initializer,Initializer for the `kernel` weights matrix.,Initializer for the QSTR weights matrix,,,,,,
1475,tf.keras.layers.LSTMCell,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default: `glorot_uniform`.",Initializer for the QSTR weights matrix used for the linear transformation of the inputs,,,,,,
1476,tf.keras.layers.LSTM,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default: `glorot_uniform`.",Initializer for the QSTR weights matrix used for the linear transformation of the inputs,,,,,,
1477,tf.keras.layers.SimpleRNNCell,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default:`glorot_uniform`.",Initializer for the QSTR weights matrix used for the linear transformation of the inputs,,,,,,
1478,tf.keras.layers.SimpleRNN,recurrent_initializer,"Initializer for the `recurrent_kernel`weights matrix, used for the linear transformation of the recurrent state. Default: `orthogonal`.",Initializer for the QSTR weights matrix used for the linear transformation of the recurrent state,,,,,,
1479,tf.keras.backend.separable_conv2d,x,input tensor,input D_STRUCTURE,,,,,,D_STRUCTURE
1480,tf.keras.activations.tanh,x,Input tensor.,Input D_STRUCTURE,,,,,,D_STRUCTURE
1481,tf.keras.activations.linear,x,Input tensor.,Input D_STRUCTURE,,,,,,D_STRUCTURE
1482,tf.keras.activations.softmax,x,Input tensor.,Input D_STRUCTURE,,,,,,D_STRUCTURE
1483,tf.keras.preprocessing.image.apply_channel_shift,x,Input tensor. Must be 3D.,Input D_STRUCTURE,,,,,,D_STRUCTURE
1484,tf.keras.preprocessing.image.array_to_img,x,Input Numpy array.,Input Numpy D_STRUCTURE,,,,,,D_STRUCTURE
1485,tf.keras.layers.Lambda,arguments,"Optional dictionary of keyword arguments to be passed to the function. Input shape: Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model. Output shape: Specified by `output_shape` argument",Input shape Arbitrary,,,,,,
1486,tf.keras.models.clone_model,model,Instance of `Model`(could be a functional model or a Sequential model).,Instance of Model BSTR,,,,,,
1487,tf.vectorized_map,fn,"The callable to be performed. It accepts one argument, which will have the same (possibly nested) structure as `elems`, and returns a possibly nested structure of Tensors and Operations, which may be different than the structure of `elems`.",It accepts one argument which will have the same BSTR structure as PARAM and returns a possibly nested structure of D_STRUCTURE and Operations which may be different than the structure of PARAM,,,,,,
1488,tf.scan,fn,"The callable to be performed.  It accepts two arguments.  The first will have the same structure as `initializer` if one is provided, otherwise it will have the same structure as `elems`.  The second will have the same (possibly nested) structure as `elems`.  Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",It accepts two arguments,,,,,,
1489,tf.keras.layers.experimental.preprocessing.PreprocessingLayer,data,"The data to train on. It can be passed either as a tf.data Dataset, or as a numpy array.",It can be passed either as a tf data Dataset or as a numpy D_STRUCTURE,,,,,,
1490,tf.keras.layers.Conv3DTranspose,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, depth, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, depth, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1491,tf.keras.layers.GlobalMaxPool2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1492,tf.keras.layers.Conv2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1493,tf.keras.layers.UpSampling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1494,tf.keras.layers.AveragePooling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1495,tf.keras.layers.UpSampling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
1496,tf.summary.trace_on,graph,"If True, enables collection of executed graphs. It includes ones from tf.function invocation and ones from the legacy graph mode. The default is True.",It includes ones from tf function invocation and ones from the legacy graph mode,,,,,,
1497,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",It is memory efficient but performs a lot of BSTR ops CONSTANT_NUM stores layer weights in a dense but sparsely populated CONSTANT_NUM D matrix and implements the forward pass as a single matrix multiply,,,,,,
1498,tf.space_to_batch_nd,paddings,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.  It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",It is required that PARAM BSTR divides QSTR This operation is equivalent to the following steps Zero pad the start and end of dimensions BSTR of the PARAM according to QSTR to produce QSTR of shape QSTR Reshape QSTR to QSTR of shape BSTR padded_shape BSTR PARAM BSTR PARAM BSTR padded_shape BSTR PARAM BSTR PARAM BSTR remaining_shapePermute dimensions of QSTR to,,,,,,
1499,tf.feature_column.categorical_column_with_identity,key,"A unique string identifying the input feature. It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",It is used as the column name and the D_STRUCTURE key for feature parsing configs featureD_STRUCTURE objects and feature columns,,,,,,
1500,tf.feature_column.numeric_column,key,"A unique string identifying the input feature. It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",It is used as the column name and the D_STRUCTURE key for feature parsing configs featureD_STRUCTURE objects and feature columns,,,,,,
1501,tf.estimator.regressor_parse_example_spec,label_key,A string identifying the label. It means tf.Example stores labels with this key.,It means tf Example stores labels with this key,,,,,,
1502,tf.nn.conv_transpose,input,"An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"". It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",It must be one of the following types D_TYPE,D_TYPE,,,,,
1503,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",It uses a lot of RAM but performs few BSTR ops CONSTANT_NUM stores layer weights in a sparse D_STRUCTURE and implements the forward pass as a single sparse matrix multiply How to choose CONSTANT_NUM large dense models CONSTANT_NUM small models CONSTANT_NUM large sparse models where QSTR stands for large input output activations i e,,,,,,
1504,tf.image.random_hue,seed,An operation-specific seed. It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation. Please see the documentation of set_random_seed for its interaction with the graph-level random seed.,It will be used in conjunction with the graph level seed to determine the real seeds that will be used in this operation,,,,,,
1505,tf.scan,fn,"The callable to be performed.  It accepts two arguments.  The first will have the same structure as `initializer` if one is provided, otherwise it will have the same structure as `elems`.  The second will have the same (possibly nested) structure as `elems`.  Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",Its output must have the same structure as PARAM if one is provided otherwise it must have the same structure as PARAM,,,,,,
1506,tf.boolean_mask,mask,"K-D boolean tensor, K <= N and K must be known statically.",K D D_TYPE D_STRUCTURE K REXPR and K must be known statically,D_TYPE,,K,,,D_STRUCTURE
1507,tf.keras.backend.ones_like,x,Keras variable or tensor.,Keras variable or D_STRUCTURE,,,,,,D_STRUCTURE
1508,tf.keras.layers.ActivityRegularization,l1,L1 regularization factor (positive float).,L1 regularization factor BSTR,,,,,,
1509,tf.feature_column.sequence_numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",lambda x BSTR,,,,,,
1510,tf.image.hsv_to_rgb,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. HSV data to convert. Last dimension must be size 3.",Last dimension must be size CONSTANT_NUM,,,,,,
1511,tf.image.rgb_to_hsv,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. RGB data to convert. Last dimension must be size 3.",Last dimension must be size CONSTANT_NUM,,,,,,
1512,tf.image.rgb_to_grayscale,images,The RGB tensor to convert. Last dimension must have size 3 and should contain RGB values.,Last dimension must have size CONSTANT_NUM and should contain RGB values,,,,,,
1513,tf.linspace,stop,A `Tensor`. Must have the same type as `start`. 0-D tensor. Last entry in the range.,Last entry in the range,,,,,,
1514,tf.estimator.export.build_parsing_serving_input_receiver_fn,default_batch_size,the number of query examples expected per batch. Leave unset for variable batch size (recommended).,Leave unset for variable batch size BSTR,,,,,,
1515,tf.keras.backend.ctc_label_dense_to_sparse,label_lengths,length of the labels.,length of the PARAM,int,,,"[0,inf)",,
1516,tf.debugging.enable_check_numerics,path_length_limit,Limit to the file path included in the printed stack trace. Applicable only to ops in `tf.function`s (graphs).,Limit to the file path included in the printed stack trace,,,,,,
1517,tf.image.random_contrast,lower,float.  Lower bound for the random contrast factor.,Lower bound for the random contrast factor,,,,,,
1518,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",many PARAM QSTR large QSTR and QSTR stands for few connections between inputs and outputs i e,,,,,,
1519,tf.summary.audio,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Markdown is supported,,,,,,
1520,tf.image.random_jpeg_quality,max_jpeg_quality,Maximum jpeg encoding quality to use.,Maximum jpeg encoding quality to use,,,,,,
1521,tf.nondifferentiable_batch_function,batch_timeout_micros,Maximum number of microseconds to wait before outputting an incomplete batch.,Maximum number of microseconds to wait before outputting an incomplete batch,int,,0,"[0,inf)",,
1522,tf.ragged.stack,values,"A list of `tf.Tensor` or `tf.RaggedTensor`.  May not be empty. All`values` must have the same rank and the same dtype; but unlike`tf.stack`, they can have arbitrary dimension sizes.",May not be empty,,,,,,
1523,tf.debugging.assert_all_finite,message,Message to log on failure.,Message to log on failure,string,,,,,
1524,tf.image.resize_with_pad,method,Method to use for resizing image. See `image.resize()`,Method to use for resizing PARAM,,,,,,
1525,tf.keras.datasets.mnist.load_data,path,DF: mnist.npz,mnist npz,,,,,,
1526,tf.keras.layers.Bidirectional,merge_mode,"Mode by which outputs of the forward and backward RNNs will be combined. One of {'sum', 'mul', 'concat', 'ave', None}. If None, the outputs will not be combined, they will be returned as a list.",Mode by which outputs of the forward and backward RNNs will be combined,,,,,,
1527,tf.strings.ngrams,separator,"The separator string used between ngram elements. Must be a string constant, not a Tensor.",Must be a D_TYPE constant not a D_STRUCTURE,D_TYPE,,0,,,
1528,tf.signal.linear_to_mel_weight_matrix,dtype,The `DType` of the result matrix. Must be a floating point type.,Must be a D_TYPE type,D_TYPE,,0,,,
1529,tf.feature_column.numeric_column,dtype,"defines the type of values. Default value is `tf.float32`. Must be a non-quantized, real integer or floating point type.",Must be a non quantized real D_TYPE type,D_TYPE,,0,,,
1530,tf.compat.forward_compatibility_horizon,day,"A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an`int`.",Must be anD_TYPE,D_TYPE,,0,,,
1531,tf.random.gamma,beta,A Tensor or Python value or N-D array of type `dtype`. Defaults to 1.`beta` provides the inverse scale parameter(s) of the gamma distribution(s) to sample. Must be broadcastable with `alpha`.,Must be broadcastable with PARAM,,,,,,
1532,tf.nn.erosion2d,dilations,"A list of `ints` that has length `>= 4`. 1-D of length 4. The input stride for atrous morphological dilation. Must be: `[1, rate_height, rate_width, 1]`.",Must be BSTR,,BSTR,,,,
1533,tf.nn.dilation2d,strides,"A list of `ints` that has length `>= 4`. The stride of the sliding window for each dimension of the input tensor. Must be: `[1, stride_height, stride_width, 1]`.",Must be BSTR,,BSTR,,,,
1534,tf.extract_volume_patches,strides,"A list of `ints` that has length `>= 5`. 1-D of length 5. How far the centers of two consecutive patches are in`input`. Must be: `[1, stride_planes, stride_rows, stride_cols, 1]`.",Must be BSTR,,BSTR,,,,
1535,tf.image.extract_patches,sizes,"The size of the extracted patches. Must be [1, size_rows, size_cols, 1].",Must be BSTR,,BSTR,,,,
1536,tf.feature_column.sequence_categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,Must be castable to PARAM,,,,,,
1537,tf.feature_column.categorical_column_with_vocabulary_list,vocabulary_list,An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in `vocabulary_list`. Must be castable to `dtype`.,Must be castable to PARAM,,,,,,
1538,tf.signal.idct,axis,For future expansion. The axis to compute the DCT along. Must be `-1`.,Must be CONSTANT_NUM,,,,,CONSTANT_NUM,
1539,tf.keras.preprocessing.image.apply_channel_shift,x,Input tensor. Must be 3D.,Must be CONSTANT_NUM D,,,CONSTANT_NUM,,,
1540,tf.zeros_like,dtype,"A type for the returned `Tensor`. Must be `float16`, `float32`,`float64`, `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`,`complex64`, `complex128`, `bool` or `string`.",Must be D_TYPE,D_TYPE,,,,,
1541,tf.linalg.expm,input,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or`complex128` with shape `[..., M, M]`.",Must be D_TYPE with shape BSTR,D_TYPE,BSTR,,,,
1542,tf.gather,indices,"The index `Tensor`.  Must be one of the following types: `int32`,`int64`. Must be in range `[0, params.shape[axis])`.",Must be in range CONSTANT_NUM PARAM shape BSTR,,BSTR,,,,
1543,tf.math.cumulative_logsumexp,axis,"A `Tensor` of type `int32` or `int64` (default: 0). Must be in the range `[-rank(x), rank(x))`.",Must be in the range BSTR,,,,BSTR,,
1544,tf.math.reduce_euclidean_norm,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,,,,BSTR,,
1545,tf.math.reduce_sum,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,,,,BSTR,,
1546,tf.math.count_nonzero,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input), rank(input))`.",Must be in the range BSTR,,,,,,
1547,tf.gather,batch_dims,An `integer`.  The number of batch dimensions.  Must be less than `rank(indices)`.,Must be less than rank BSTR,,,,,,
1548,tf.math.expm1,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1549,tf.math.acosh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1550,tf.math.tan,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1551,tf.math.squared_difference,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1552,tf.bitcast,input,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1553,tf.math.bessel_i1e,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1554,tf.math.is_nan,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1555,tf.math.digamma,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1556,tf.math.bessel_i0e,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1557,tf.math.rint,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1558,tf.debugging.check_numerics,tensor,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1559,tf.math.cumulative_logsumexp,x,"A `Tensor`. Must be one of the following types: `float16`, `float32`,`float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1560,tf.math.unsorted_segment_sum,data,"A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1561,tf.extract_volume_patches,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`. 5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1562,tf.math.cumprod,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1563,tf.math.igammac,a,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1564,tf.math.betainc,a,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1565,tf.linalg.solve,matrix,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1566,tf.math.softplus,features,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1567,tf.nn.selu,features,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1568,tf.image.hsv_to_rgb,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. HSV data to convert. Last dimension must be size 3.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1569,tf.image.rgb_to_hsv,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. RGB data to convert. Last dimension must be size 3.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1570,tf.math.xdivy,x,"A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1571,tf.math.xlogy,x,"A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1572,tf.linspace,num,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 0-D tensor. Number of values to generate.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1573,tf.space_to_batch_nd,paddings,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.  It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",Must be one of the following types D_TYPE,D_TYPE,,,,,
1574,tf.math.segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A 1-D tensor whose size is equal to the size of `data`'s first dimension.  Values should be sorted and can be repeated.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1575,tf.broadcast_to,shape,"A `Tensor`. Must be one of the following types: `int32`, `int64`. An 1-D `int` Tensor. The shape of the desired output.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1576,tf.roll,shift,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Dimension must be 0-D or 1-D. `shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`. Negative shifts will roll the elements in the opposite direction.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1577,tf.gather_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1578,tf.math.argmax,axis,"A `Tensor`. Must be one of the following types: `int32`, `int64`. int32 or int64, must be in the range `-rank(input), rank(input))`. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1579,tf.strings.substr,pos,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Scalar defining the position of first character in each substring",Must be one of the following types D_TYPE,D_TYPE,,,,,
1580,tf.batch_to_space,block_shape,"A `Tensor`. Must be one of the following types: `int32`,`int64`. 1-D with shape `[M]`, all values must be >= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1581,tf.bitwise.bitwise_xor,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1582,tf.image.sample_distorted_bounding_box,image_size,"A `Tensor`. Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`. 1-D, containing `[height, width, channels]`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1583,tf.gather,indices,"The index `Tensor`.  Must be one of the following types: `int32`,`int64`. Must be in range `[0, params.shape[axis])`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
1584,tf.einsum,**kwargs,"- optimize: Optimization strategy to use to find contraction path using opt_einsum. Must be 'greedy', 'optimal', 'branch-2', 'branch-all' or   'auto'. (optional, default: 'greedy'). name: A name for the operation (optional). ",Must be QSTR branch CONSTANT_NUM QSTR,D_TYPE,,CONSTANT_NUM,,QSTR;branch;CONSTANT_NUM,
1585,tf.pad,CONSTANT_NUMues,"In ""CONSTANT"" mode, the scalar pad value to use. Must be same type as `tensor`.",Must be same type as D_STRUCTURE,&D_STRUCTURE,,CONSTANT_NUM,,,
1586,tf.linalg.tridiagonal_solve,diagonals,"A `Tensor` or tuple of `Tensor`s describing left-hand sides. The shape depends of `diagonals_format`, see description above. Must be`float32`, `float64`, `complex64`, or `complex128`.",Must beD_TYPE,D_TYPE,,,,,
1587,tf.image.ssim_multiscale,img2,Second image batch. Must have the same rank as img1.,Must have the same rank as PARAM,,,&PARAM,,,
1588,tf.linalg.triangular_solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Must have the same type as PARAM,&PARAM,,,,,
1589,tf.dtypes.complex,imag,A `Tensor`. Must have the same type as `real`.,Must have the same type as PARAM,&PARAM,,,,,
1590,tf.linspace,stop,A `Tensor`. Must have the same type as `start`. 0-D tensor. Last entry in the range.,Must have the same type as PARAM,&PARAM,,,,,
1591,tf.math.nextafter,x2,A `Tensor`. Must have the same type as `x1`.,Must have the same type as PARAM,&PARAM,,,,,
1592,tf.nn.conv1d,filters,A 3D `Tensor`.  Must have the same type as `input`.,Must have the same type as PARAM,&PARAM,,,,,
1593,tf.math.betainc,b,A `Tensor`. Must have the same type as `a`.,Must have the same type as QSTR,&PARAM,,,,,
1594,tf.math.polygamma,x,A `Tensor`. Must have the same type as `a`.,Must have the same type as QSTR,&PARAM,,,,,
1595,tf.linalg.cross,b,"A `Tensor`. Must have the same type as `a`. Another tensor, of same type and shape as `a`.",Must have the same type as QSTR,&PARAM,,,,,
1596,tf.bitwise.right_shift,y,A `Tensor`. Must have the same type as `x`.,Must have the same type as QSTR,&PARAM,,,,,
1597,tf.truncatediv,y,A `Tensor`. Must have the same type as `x`.,Must have the same type as QSTR,&PARAM,,,,,
1598,tf.math.greater,y,A `Tensor`. Must have the same type as `x`.,Must have the same type as QSTR,&PARAM,,,,,
1599,tf.boolean_mask,tensor,N-D tensor.,N D D_STRUCTURE,,,,,,D_STRUCTURE
1600,tf.space_to_batch,input,"A `Tensor`. N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",N D with shape input_shape BSTR spatial_shape remaining_shape where spatial_shape has QSTR dimensions,,,,,,
1601,tf.einsum,**kwargs,"- optimize: Optimization strategy to use to find contraction path using opt_einsum. Must be 'greedy', 'optimal', 'branch-2', 'branch-all' or   'auto'. (optional, default: 'greedy'). name: A name for the operation (optional). ",name A name for the operation BSTR,string,,0,,,
1602,tf.nn.pool,name,Optional. Name of the op.,Name of the op,string,,0,,,
1603,tf.feature_column.sequence_categorical_column_with_identity,num_buckets,"Range of inputs. Namely, inputs are expected to be in the range `[0, num_buckets)`.",Namely inputs are expected to be in the range BSTR,,,,BSTR,,
1604,tf.keras.backend.one_hot,indices,"nD integer tensor of shape`(batch_size, dim1, dim2, ... dim(n-1))`",nD D_TYPE D_STRUCTURE of shape BSTR,D_TYPE,BSTR,,,,D_STRUCTURE
1605,tf.ragged.stack,axis,"A python integer, indicating the dimension along which to stack. (Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",Negative PARAM are supported only if the rank of at least one PARAM value is statically known,,,,,,
1606,tf.roll,shift,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Dimension must be 0-D or 1-D. `shift[i]` specifies the number of places by which elements are shifted positively (towards larger indices) along the dimension specified by `axis[i]`. Negative shifts will roll the elements in the opposite direction.",Negative shifts will roll the elements in the opposite direction,,,,"(-inf,0]",,
1607,tf.keras.layers.ReLU,negative_slope,Float >= 0. Negative slope coefficient.,Negative slope coefficient,,,,"(-inf,0]",,
1608,tf.nn.ctc_loss,blank_index,"(optional) Set the class index to use for the blank label. Negative values will start from num_classes, ie, -1 will reproduce the ctc_loss behavior of using num_classes - 1 for the blank symbol. There is some memory/performance overhead to switching from the default of 0 as an additional shifted copy of the logits may be created.",Negative values will start from num_classes ie CONSTANT_NUM will reproduce the ctc_loss behavior of using num_classes CONSTANT_NUM for the blank symbol,,,,,,
1609,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",new_states D_STRUCTURE of D_STRUCTURE same length and shapes as QSTR,,,,,,
1610,tf.keras.layers.LayerNormalization,scale,"If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",nn relu this can be disabled since the scaling will be done by the next layer,,,,,,
1611,tf.keras.utils.get_file,archive_format,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.",None or an empty D_STRUCTURE will return no matches found,,,,,,
1612,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",Normalized coordinates outside the BSTR range are allowed in which case we use PARAM to extrapolate the input PARAM values,,,,,,
1613,tf.feature_column.sequence_numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Normalizer function takes the input D_STRUCTURE as its argument and returns the output D_STRUCTURE,,,,,,
1614,tf.nest.map_structure,*structure,"scalar, or tuple or list of constructed scalars and/or other tuples/lists, or scalars.  Note: numpy arrays are considered as scalars.",Note numpy D_STRUCTURE are considered as scalars,,,,,,
1615,tf.keras.preprocessing.sequence.skipgrams,sequence,"A word sequence (sentence), encoded as a list     of word indices (integers). If using a `sampling_table`,     word indices are expected to match the rank     of the words in a reference dataset (e.g. 10 would encode     the 10-th most frequently occurring token).     Note that index 0 is expected to be a non-word and will be skipped.",Note that index CONSTANT_NUM is expected to be a non word and will be skipped,,,,,,
1616,tf.nest.map_structure,**kwargs,"Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception). To allow this set this argument to `False`. Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.  If `False` (the default), then composite tensors are not expanded. ",Note that namedtuples with identical name and fields are always considered to have the same shallow structure QSTR If set to CONSTANT_BOOL then composite D_STRUCTURE such as D_STRUCTURE and tf RaggedTensor are expanded into their component D_STRUCTURE,,,,,,
1617,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1618,tf.ragged.stack,axis,"A python integer, indicating the dimension along which to stack. (Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",Note Unlike tf stack the QSTR parameter must be statically known,,,,,,
1619,tf.keras.backend.placeholder,ndim,"Number of axes of the tensor. At least one of {`shape`, `ndim`} must be specified. If both are specified, `shape` is used.",Number of axes of the D_STRUCTURE,int,,0,"[0,inf)",,
1620,tf.io.decode_and_crop_jpeg,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Number of color channels for the decoded image,int,,0,"[0,inf)",,
1621,tf.config.threading.set_intra_op_parallelism_threads,num_threads,Number of parallel threads,Number of parallel threads,int,,0,"[0,inf)",,
1622,tf.audio.decode_wav,desired_channels,An optional `int`. Defaults to `-1`. Number of sample channels wanted.,Number of sample channels wanted,int,,0,"[0,inf)",,
1623,tf.data.experimental.make_batched_features_dataset,parser_num_threads,Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors. Defaults to `2`.,Number of threads to use for parsing QSTR D_STRUCTURE into a D_STRUCTURE of QSTR D_STRUCTURE,int,,0,"[0,inf)",,
1624,tf.linspace,num,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 0-D tensor. Number of values to generate.",Number of values to generate,int,,0,"[0,inf)",,
1625,tf.ragged.constant,row_splits_dtype,data type for the constructed `RaggedTensor`'s row_splits. One of `tf.int32` or `tf.int64`.,One of D_TYPE,D_TYPE,,,,,
1626,tf.quantization.quantize_and_dequantize,round_mode,"Rounding mode when rounding from float values to quantized ones. one of ['HALF_TO_EVEN', 'HALF_UP']",one of QSTR,,,,,QSTR,
1627,tf.keras.layers.MaxPool1D,padding,"One of `""valid""` or `""same""` (case-insensitive).",One of QSTR BSTR,,,,,QSTR,
1628,tf.keras.layers.MaxPool3D,padding,"One of `""valid""` or `""same""` (case-insensitive).",One of QSTR BSTR,,,,,QSTR,
1629,tf.keras.layers.Conv3DTranspose,padding,"one of `""valid""` or `""same""` (case-insensitive).",one of QSTR BSTR,,,,,QSTR,
1630,tf.keras.layers.Conv2DTranspose,padding,"one of `""valid""` or `""same""` (case-insensitive).",one of QSTR BSTR,,,,,QSTR,
1631,tf.keras.layers.Bidirectional,merge_mode,"Mode by which outputs of the forward and backward RNNs will be combined. One of {'sum', 'mul', 'concat', 'ave', None}. If None, the outputs will not be combined, they will be returned as a list.",One of QSTR None,,,,,QSTR,
1632,tf.strings.unicode_encode,errors,Specifies the response when an invalid codepoint is encountered (optional). One of:     * `'replace'`: Replace invalid codepoint with the       `replacement_char`. (default)     * `'ignore'`: Skip invalid codepoints.     * `'strict'`: Raise an exception for any invalid codepoint.,One of QSTR Replace invalid codepoint with the PARAM,,,,,QSTR,
1633,tf.data.experimental.bucket_by_sequence_length,drop_remainder,"(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",ONE_WORD BSTR,,,,,,
1634,tf.data.experimental.dense_to_ragged_batch,drop_remainder,"(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",ONE_WORD BSTR,,,,,,
1635,tf.data.experimental.make_csv_dataset,compression_type,"(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`. Defaults to no compression.",ONE_WORD BSTR,,,,,,
1636,tf.data.experimental.Counter,dtype,(Optional.) The data type for counter elements. Defaults to`tf.int64`.,ONE_WORD BSTR,,,,,,
1637,tf.shape,out_type,(Optional) The specified output type of the operation (`int32` or`int64`). Defaults to `tf.int32`.,ONE_WORD BSTR,,,,,,
1638,tf.nn.ctc_loss,unique,"(optional) Unique label indices as computed by ctc_unique_labels(labels).  If supplied, enable a faster, memory efficient implementation on TPU.",ONE_WORD BSTR,,,,,,
1639,tf.debugging.assert_rank_at_least,x,`Tensor`.,ONE_WORD D_STRUCTURE,,,,,,D_STRUCTURE
1640,tf.debugging.assert_near,atol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The absolute tolerance.  Default is `10 * eps`.",ONE_WORD D_STRUCTURE,,,,,,D_STRUCTURE
1641,tf.debugging.assert_near,rtol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The relative tolerance.  Default is `10 * eps`.",ONE_WORD D_STRUCTURE,,,,,,D_STRUCTURE
1642,tf.keras.backend.foldl,elems,tensor,ONE_WORD D_STRUCTURE,,,,,,D_STRUCTURE
1643,tf.keras.layers.ConvLSTM2D,unit_forget_bias,"Boolean. If True, add 1 to the bias of the forget gate at initialization. Use in combination with `bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",ONE_WORD D_TYPE,D_TYPE,,,,,
1644,tf.keras.layers.GRU,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence. Default: `False`.",ONE_WORD D_TYPE,D_TYPE,,,,,
1645,tf.keras.layers.GRU,return_state,Boolean. Whether to return the last state in addition to the output. Default: `False`.,ONE_WORD D_TYPE,D_TYPE,,,,,
1646,tf.keras.preprocessing.text.hashing_trick,lower,boolean. Whether to set the text to lowercase.,ONE_WORD D_TYPE,D_TYPE,,,,,
1647,tf.image.random_contrast,lower,float.  Lower bound for the random contrast factor.,ONE_WORD D_TYPE,D_TYPE,,,,,
1648,tf.keras.preprocessing.text.text_to_word_sequence,filters,"list (or concatenation) of characters to filter out, such as     punctuation. Default: ``!""#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n``,     includes basic punctuation, tabs, and newlines.",ONE_WORD Default,,,,,,
1649,tf.nn.pool,dilations,"Optional.  Dilation rate.  List of N ints >= 1. Defaults to [1]*N.  If any value of dilation_rate is > 1, then all values of strides must be 1.",ONE_WORD Optional,,,,,,
1650,tf.gradients,stop_gradients,Optional. A `Tensor` or list of tensors not to differentiate through.,ONE_WORD Optional,,,,,,
1651,tf.nn.pool,name,Optional. Name of the op.,ONE_WORD Optional,,,,,,
1652,tf.keras.Input,ragged,"A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, seehttps://www.tensorflow.org/guide/ragged_tensors",Only one of QSTR and PARAM can be CONSTANT_BOOL,,,,,,
1653,tf.eig,tensor,"`Tensor` of shape `[..., N, N]`. Only the lower triangular part of each inner inner matrix is referenced.",Only the lower triangular part of each inner inner matrix is referenced,,,,,,
1654,tf.einsum,**kwargs,"- optimize: Optimization strategy to use to find contraction path using opt_einsum. Must be 'greedy', 'optimal', 'branch-2', 'branch-all' or   'auto'. (optional, default: 'greedy'). name: A name for the operation (optional). ",optimize Optimization strategy to use to find contraction path using opt_einsum,,,,,,
1655,tf.feature_column.shared_embeddings,shared_embedding_collection_name,"Optional collective name of these columns. If not given, a reasonable name will be chosen based on the names of`categorical_columns`.",Optional collective name of these columns,string,,0,,,
1656,tf.keras.layers.Lambda,arguments,"Optional dictionary of keyword arguments to be passed to the function. Input shape: Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model. Output shape: Specified by `output_shape` argument",Optional D_STRUCTURE of keyword arguments to be passed to the PARAM,,,,,,D_STRUCTURE
1657,tf.reshape,name,Optional string. A name for the operation.,Optional D_TYPE,D_TYPE,,,,,
1658,tf.ones,name,Optional string. A name for the operation.,Optional D_TYPE,D_TYPE,,,,,
1659,tf.required_space_to_batch_paddings,base_paddings,"Optional int32 Tensor of shape [N, 2].  Specifies the minimum amount of padding to use.  All elements must be >= 0.  If not specified, defaults to 0.",Optional D_TYPE D_STRUCTURE of shape BSTR,D_TYPE,BSTR,,,,D_STRUCTURE
1660,tf.summary.write,name,Optional string name for this op.,Optional D_TYPE name for this op,D_TYPE,,0,,,
1661,tf.summary.experimental.write_raw_pb,name,Optional string name for this op.,Optional D_TYPE name for this op,D_TYPE,,0,,,
1662,tf.summary.audio,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many audio clips will be emitted at each step. When more than`max_outputs` many clips are provided, the first `max_outputs`many clips will be used and the rest silently discarded.",Optional D_TYPE or rank CONSTANT_NUM D_TYPE D_STRUCTURE,D_TYPE,,0,,,D_STRUCTURE
1663,tf.summary.image,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many images will be emitted at each step. When more than`max_outputs` many images are provided, the first `max_outputs` many images will be used and the rest silently discarded.",Optional D_TYPE or rank CONSTANT_NUM D_TYPE D_STRUCTURE,D_TYPE,,0,,,D_STRUCTURE
1664,tf.einsum,**kwargs,"- optimize: Optimization strategy to use to find contraction path using opt_einsum. Must be 'greedy', 'optimal', 'branch-2', 'branch-all' or   'auto'. (optional, default: 'greedy'). name: A name for the operation (optional). ",optional default QSTR,,,,,,
1665,tf.summary.audio,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Optional long form description for this summary as a constant D_TYPE,D_TYPE,,0,,,
1666,tf.math.top_k,name,Optional name for the operation.,Optional name for the operation,string,,0,,,
1667,tf.train.latest_checkpoint,latest_filename,Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames. See the corresponding argument to `Saver.save()`.,Optional name for the protocol buffer file that contains the D_STRUCTURE of most recent checkpoint filenames,string,,0,,,
1668,tf.nn.conv3d_transpose,name,Optional name for the returned tensor.,Optional name for the returned D_STRUCTURE,string,,0,,,
1669,tf.nn.conv2d_transpose,name,Optional name for the returned tensor.,Optional name for the returned D_STRUCTURE,string,,0,,,
1670,tf.sparse.minimum,name,optional name of the operation.,optional name of the operation,string,,0,,,
1671,tf.cond,name,Optional name prefix for the returned tensors.,Optional name prefix for the returned D_STRUCTURE,string,,0,,,
1672,tf.eye,num_columns,Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.  Defaults to `num_rows`.,Optional non negative D_TYPE scalar D_STRUCTURE giving the number of columns in each batch matrix,D_TYPE,,0,"[0,inf)",,D_STRUCTURE
1673,tf.keras.layers.SeparableConv1D,pointwise_constraint,Optional projection function to be applied to the pointwise kernel after being updated by an `Optimizer`.,Optional projection function to be applied to the pointwise kernel after being updated by an QSTR,,,,,,
1674,tf.keras.backend.variable,constraint,Optional projection function to be applied to the variable after an optimizer update.,Optional projection function to be applied to the variable after an optimizer update,,,,,,
1675,tf.keras.layers.SeparableConv1D,pointwise_regularizer,Optional regularizer for the pointwise convolution kernel.,Optional regularizer for the pointwise convolution kernel,,,,,,
1676,tf.keras.Input,batch_size,optional static batch size (integer).,optional static batch size BSTR,int,,,"[0,inf)",,
1677,tf.summary.write,metadata,"Optional SummaryMetadata, as a proto or serialized bytes",Optional SummaryMetadata as a proto or serialized bytes,,,,,,
1678,tf.keras.utils.get_file,archive_format,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.",Options are QSTR and None,,,,,QSTR,
1679,tf.keras.utils.get_file,origin,Original URL of the file.,Original URL of the file,string,,0,,,
1680,tf.summary.flush,writer,The `tf.summary.SummaryWriter` resource to flush. The thread default will be used if this parameter is None. Otherwise a `tf.no_op` is returned.,Otherwise a tf no_op is returned,,,,,,
1681,tf.nn.fractional_avg_pool,seed,"An optional `int`.  Defaults to `0`.  If set to be non-zero, the random number generator is seeded by the given seed.  Otherwise it is seeded by a random seed.",Otherwise it is seeded by a random seed,,,,,,
1682,tf.image.sample_distorted_bounding_box,seed,"An optional `int`. Defaults to `0`. If `seed` is set to non-zero, the random number generator is seeded by the given `seed`.  Otherwise, it is seeded by a random seed.",Otherwise it is seeded by a random seed,,,,,,
1683,tf.sparse.sparse_dense_matmul,adjoint_a,"Use the adjoint of A in the matrix multiply.  If A is complex, this is transpose(conj(A)).  Otherwise it's transpose(A).",Otherwise it transpose BSTR,,,,,,
1684,tf.sparse.sparse_dense_matmul,adjoint_b,"Use the adjoint of B in the matrix multiply.  If B is complex, this is transpose(conj(B)).  Otherwise it's transpose(B).",Otherwise it transpose BSTR,,,,,,
1685,tf.keras.backend.map_fn,dtype,Output data type.,Output data type,tf.dtype,,0,,,
1686,tf.keras.layers.Lambda,arguments,"Optional dictionary of keyword arguments to be passed to the function. Input shape: Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model. Output shape: Specified by `output_shape` argument",Output shape Specified by PARAM argument,int,,1,"[0,inf)",,
1687,tf.keras.layers.ConvLSTM2D,recurrent_activation,Activation function to use for the recurrent step.,PARAM function to use for the recurrent step,,,,,,
1688,tf.keras.layers.GRUCell,recurrent_activation,"Activation function to use for the recurrent step. Default: sigmoid (`sigmoid`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",PARAM function to use for the recurrent step,,,,,,
1689,tf.linalg.diag,k,"Diagonal offset(s). Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals. `k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band. `k[0]` must not be larger than `k[1]`.",PARAM offset BSTR,,,,,,
1690,tf.histogram_fixed_width,value_range,"Shape [2] `Tensor` of same `dtype` as `values`. values <= value_range[0] will be mapped to hist[0], values >= value_range[1] will be mapped to hist[-1].",PARAM REXPR BSTR will be mapped to hist BSTR PARAM REXPR BSTR will be mapped to hist BSTR,,,,,,
1691,tf.keras.datasets.mnist.load_data,path,path where to cache the dataset locally (relative to ~/.keras/datasets).,path where to cache the dataset locally relative to keras datasets,string,,0,,,
1692,tf.nn.compute_average_loss,per_example_loss,Per-example loss.,Per example loss,,,,,,
1693,tf.io.encode_jpeg,format,"An optional `string` from: `"""", ""grayscale"", ""rgb""`. Defaults to `""""`. Per pixel image format.",Per pixel PARAM format,,,,,,
1694,tf.feature_column.sequence_numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Please note that even though the most common use case of this function is normalization it can be used for any kind of Tensorflow transformations,,,,,,
1695,tf.image.random_hue,seed,An operation-specific seed. It will be used in conjunction with the graph-level seed to determine the real seeds that will be used in this operation. Please see the documentation of set_random_seed for its interaction with the graph-level random seed.,Please see the documentation of set_random_seed for its interaction with the graph level random seed,,,,,,
1696,tf.nn.fractional_avg_pool,pooling_ratio,"A list of `floats` that has length >= 4.  Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",Pooling ratio for each dimension of PARAM currently only supports row and col dimension and should be REXPR,numeric,,,,,
1697,tf.nn.fractional_max_pool,pooling_ratio,"An int or list of `ints` that has length `1`, `2` or `4`. Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",Pooling ratio for each dimension of PARAM currently only supports row and col dimension and should be REXPR,numeric,,,,,
1698,tf.keras.backend.resize_images,height_factor,Positive integer.,Positive D_TYPE,D_TYPE,,,"(0,inf)",,
1699,tf.keras.layers.Dense,units,"Positive integer, dimensionality of the output space.",Positive D_TYPE dimensionality of the output space,D_TYPE,,,"(0,inf)",,
1700,tf.linalg.diag,k,"Diagonal offset(s). Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals. `k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band. `k[0]` must not be larger than `k[1]`.",Positive value means superdiagonal CONSTANT_NUM refers to the main PARAM and negative value means subdiagonals,,,,,,
1701,tf.debugging.assert_negative,summarize,Print this many entries of each tensor.,Print this many entries of each D_STRUCTURE,int,,0,"[0,inf)",,
1702,tf.debugging.assert_near,summarize,Print this many entries of each tensor.,Print this many entries of each D_STRUCTURE,int,,0,"[0,inf)",,
1703,tf.nn.sufficient_statistics,keepdims,produce statistics with the same dimensionality as the input.,produce statistics with the same dimensionality as the input,,,,,,
1704,tf.linalg.lu_reconstruct,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Default value: `False` (i.e., don't validate arguments).",Python D_TYPE indicating whether arguments should be checked for correctness,D_TYPE,,,,,
1705,tf.linalg.lu_solve,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_solve').",Python D_TYPE name given to ops managed by this object,D_TYPE,,,,,
1706,tf.keras.layers.Conv3D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,,
1707,tf.nn.avg_pool3d,data_format,A string. 'NDHWC' and 'NCDHW' are supported.,QSTR are supported,,,,,QSTR,
1708,tf.nn.conv3d_transpose,data_format,A string. 'NDHWC' and 'NCDHW' are supported.,QSTR are supported,,,,,QSTR,
1709,tf.nn.conv1d_transpose,data_format,A string. `'NWC'` and `'NCW'` are supported.,QSTR are supported,,,,,QSTR,
1710,tf.keras.utils.model_to_dot,rankdir,"`rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot.",QSTR argument passed to PyDot a D_TYPE specifying the format of the plot QSTR creates a vertical plot QSTR creates a horizontal plot,,,,,,
1711,tf.linalg.lu_reconstruct,perm,"`p` as returned by `tf.linag.lu`, i.e., if `matmul(P, matmul(L, U)) = X` then `perm = argmax(P)`.",QSTR as returned by tf linag lu i e if matmul BSTR X QSTR perm argmax BSTR,,,,,,
1712,tf.linalg.diag,k,"Diagonal offset(s). Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals. `k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band. `k[0]` must not be larger than `k[1]`.",QSTR can be a single D_TYPE BSTR or a pair of D_TYPE specifying the low and high ends of a matrix band,D_TYPE,[2],0;1,,,
1713,tf.keras.backend.categorical_crossentropy,axis,"Int specifying the channels axis. `axis=-1` corresponds to data format `channels_last', and`axis=1`corresponds to data format`channels_first`.",QSTR channels_last and QSTR channels_first,,,,,,
1714,tf.estimator.experimental.stop_if_no_decrease_hook,metric_name,"`str`, metric to track. ""loss"", ""accuracy"", etc.",QSTR etc,,,,,QSTR,
1715,tf.signal.dct,norm,The normalization to apply. `None` for no normalization or `'ortho'`for orthonormal normalization.,QSTR for no normalization or QSTR for orthonormal normalization,,,,,QSTR,
1716,tf.nn.atrous_conv2d,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",QSTR in_channels dimension must match that of PARAM,,,,,,
1717,tf.nn.atrous_conv2d_transpose,filters,"A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`. `filters`'`in_channels` dimension must match that of `value`. Atrous convolution is equivalent to standard convolution with upsampled filters with effective height `filter_height + (filter_height - 1) * (rate - 1)` and effective width `filter_width + (filter_width - 1) * (rate - 1)`, produced by inserting `rate - 1` zeros along consecutive elements across the`filters`' spatial dimensions.",QSTR in_channels dimension must match that of PARAM,,,,,,
1718,tf.keras.utils.get_file,archive_format,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.",QSTR includes tar tar gz and tar bz files,,,,,,
1719,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1720,tf.linalg.diag,k,"Diagonal offset(s). Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals. `k` can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band. `k[0]` must not be larger than `k[1]`.",QSTR k BSTR,,,,,,
1721,tf.strings.unicode_decode,input,An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.  `N` must be statically known.,QSTR must be statically known,,,,,,
1722,tf.keras.layers.GRUCell,recurrent_activation,"Activation function to use for the recurrent step. Default: sigmoid (`sigmoid`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR PARAM a BSTR x,,,,,,
1723,tf.searchsorted,side,left' or 'right'; 'left' corresponds to lower_bound and 'right' to upper_bound.,QSTR QSTR corresponds to lower_bound and QSTR to upper_bound,,,,,QSTR,
1724,tf.strings.unicode_encode,errors,Specifies the response when an invalid codepoint is encountered (optional). One of:     * `'replace'`: Replace invalid codepoint with the       `replacement_char`. (default)     * `'ignore'`: Skip invalid codepoints.     * `'strict'`: Raise an exception for any invalid codepoint.,QSTR Raise an exception for any invalid codepoint,,,,,QSTR,
1725,tf.nn.conv1d_transpose,filters,"A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.  `filter`'s`in_channels` dimension must match that of `value`.",QSTR s QSTR dimension must match that of QSTR,,,,,,
1726,tf.data.experimental.make_csv_dataset,shuffle_seed,Randomization seed to use for shuffling.,Randomization seed to use for shuffling,,,,,,
1727,tf.data.experimental.make_batched_features_dataset,shuffle_seed,Randomization seed to use for shuffling.,Randomization seed to use for shuffling,,,,,,
1728,tf.feature_column.sequence_categorical_column_with_identity,num_buckets,"Range of inputs. Namely, inputs are expected to be in the range `[0, num_buckets)`.",Range of inputs,,,,,,
1729,tf.keras.layers.ConvLSTM2D,activity_regularizer,Regularizer function applied to.,Regularizer function applied to,,,,,,
1730,tf.keras.layers.Conv2D,bias_regularizer,Regularizer function applied to the bias vector.,Regularizer function applied to the bias D_STRUCTURE,,,,,,
1731,tf.keras.layers.Conv3D,bias_regularizer,Regularizer function applied to the bias vector.,Regularizer function applied to the bias D_STRUCTURE,,,,,,
1732,tf.keras.layers.SeparableConv2D,bias_regularizer,Regularizer function applied to the bias vector.,Regularizer function applied to the bias D_STRUCTURE,,,,,,
1733,tf.keras.layers.LSTM,bias_regularizer,Regularizer function applied to the bias vector. Default:`None`.,Regularizer function applied to the bias D_STRUCTURE,,,,,,
1734,tf.keras.layers.SimpleRNNCell,bias_regularizer,Regularizer function applied to the bias vector. Default:`None`.,Regularizer function applied to the bias D_STRUCTURE,,,,,,
1735,tf.keras.layers.LocallyConnected1D,activity_regularizer,"Regularizer function applied to the output of the layer (its ""activation"")..",Regularizer function applied to the output of the layer BSTR,,,,,,
1736,tf.keras.layers.Conv2D,activity_regularizer,"Regularizer function applied to the output of the layer (its ""activation"")..",Regularizer function applied to the output of the layer BSTR,,,,,,
1737,tf.nn.RNNCellDropoutWrapper,dtype,"(optional) The `dtype` of the input, state, and output tensors. Required and used <strong>iff</strong> `variational_recurrent = True`.",Required and used REXPR REXPR strong REXPR CONSTANT_BOOL,,,,,,
1738,tf.nn.RNNCellDropoutWrapper,input_size,(optional) (possibly nested tuple of) `TensorShape` objects containing the depth(s) of the input tensors expected to be passed in to the `DropoutWrapper`.  Required and used <strong>iff</strong> `variational_recurrent = True` and `input_keep_prob < 1`.,Required and used REXPR REXPR strong REXPR CONSTANT_BOOL and PARAM REXPR,,,,,,
1739,tf.image.resize_with_pad,method,DF: ResizeMethod.BILINEAR,ResizeMethod BILINEAR,,,,,,
1740,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",Returns output D_STRUCTURE with shape BSTR BSTR,,,,,,
1741,tf.keras.datasets.reuters.get_word_index,path,DF: reuters_word_index.json,reuters_word_index json,,,,,,
1742,tf.image.rgb_to_hsv,images,"A `Tensor`. Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`. 1-D or higher rank. RGB data to convert. Last dimension must be size 3.",RGB data to convert,,,,,,
1743,tf.image.adjust_gamma,image,RGB image or images to adjust.,RGB image or images to adjust,numeric,,,,,
1744,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",RNN step function,,,,,,
1745,tf.quantization.quantize_and_dequantize,round_mode,"Rounding mode when rounding from float values to quantized ones. one of ['HALF_TO_EVEN', 'HALF_UP']",Rounding mode when rounding from D_TYPE values to quantized ones,,,,,,
1746,tf.debugging.assert_near,atol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The absolute tolerance.  Default is `10 * eps`.",Same QSTR as and broadcastable to QSTR,,,,,,
1747,tf.debugging.assert_near,rtol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The relative tolerance.  Default is `10 * eps`.",Same QSTR as and broadcastable to QSTR,,,,,,
1748,tf.audio.encode_wav,sample_rate,A `Tensor` of type `int32`. Scalar containing the sample frequency.,Scalar containing the sample frequency,,,0,,,D_STRUCTURE
1749,tf.debugging.assert_rank,rank,Scalar integer `Tensor`.,Scalar D_TYPE D_STRUCTURE,D_TYPE,,0,,,D_STRUCTURE
1750,tf.strings.substr,pos,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Scalar defining the position of first character in each substring",Scalar defining the position of first character in each substring,,,0,,,D_STRUCTURE
1751,tf.nest.map_structure,*structure,"scalar, or tuple or list of constructed scalars and/or other tuples/lists, or scalars.  Note: numpy arrays are considered as scalars.",scalar or D_STRUCTURE of constructed scalars and or other tuples D_STRUCTURE or scalars,,,0;1,,,D_STRUCTURE
1752,tf.image.ssim_multiscale,img2,Second image batch. Must have the same rank as img1.,Second image batch,numeric,,,,,
1753,tf.image.resize_with_pad,method,Method to use for resizing image. See `image.resize()`,See PARAM resize,,,,,,
1754,tf.image.resize_with_pad,antialias,Whether to use anti-aliasing when resizing. See 'image.resize()'.,See PARAM resize,,,,,,
1755,tf.random.categorical,seed,A Python integer. Used to create a random seed for the distribution. See `tf.compat.v1.set_random_seed` for behavior.,See tf compat v1 set_random_seed for behavior,,,,,,
1756,tf.image.random_flip_left_right,seed,A Python integer. Used to create a random seed. See`tf.compat.v1.set_random_seed` for behavior.,See tf compat v1 set_random_seed for behavior,,,,,,
1757,tf.data.experimental.make_batched_features_dataset,features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` values. See `tf.io.parse_example`.,See tf io parse_example,,,,,,
1758,tf.train.latest_checkpoint,latest_filename,Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames. See the corresponding argument to `Saver.save()`.,See the corresponding argument to Saver save,,,,,,
1759,tf.nn.max_pool3d,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",See the QSTR section of tf nn convolution for details,,,,,QSTR,
1760,tf.nn.conv1d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",See the QSTR section of tf nn convolution for details,,,,,QSTR,
1761,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",Seehttps github com tensorflow community blob master rfcs CONSTANT_NUM standardizing composite_ops mdfor details,,,,,,
1762,tf.keras.layers.LSTMCell,unit_forget_bias,"Boolean (default `True`). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force`bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",Setting it to CONSTANT_BOOL will also force PARAM QSTR,,,,,,
1763,tf.histogram_fixed_width,value_range,"Shape [2] `Tensor` of same `dtype` as `values`. values <= value_range[0] will be mapped to hist[0], values >= value_range[1] will be mapped to hist[-1].",Shape BSTR D_STRUCTURE of same PARAM as PARAM,,&PARAM,CONSTANT_NUM,,,D_STRUCTURE
1764,tf.keras.layers.InputLayer,input_shape,"Shape tuple (not including the batch axis), or `TensorShape`instance (not including the batch axis).",Shape D_STRUCTURE BSTR or QSTR instance BSTR,,,,,,D_STRUCTURE
1765,tf.linalg.solve,matrix,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Shape is BSTR,,BSTR,,,,
1766,tf.linalg.triangular_solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Shape is BSTR,,BSTR,,,,
1767,tf.math.reduce_variance,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,,,,,
1768,tf.math.reduce_logsumexp,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,,,,,
1769,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",Size of the circular buffers for execution events,int,,,"[0,inf)",,
1770,tf.keras.layers.LocallyConnected1D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `input_size`,`output_size`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio`filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes`(input_size, input_filters)`, `(output_size, filters)`respectively.It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM.Also, only `padding=""valid""` is supported by `implementation=1`.",small ratio PARAM input_filters PARAM BSTR where inputs to and outputs of the layer are assumed to have shapes BSTR BSTRrespectively It is recommended to benchmark each in the setting of interest to pick the most efficient one BSTR,,,,,,
1771,tf.nn.max_pool,data_format,"A string. Specifies the channel dimension. For N=1 it can be either ""NWC"" (default) or ""NCW"", for N=2 it can be either ""NHWC"" (default) or ""NCHW"" and for N=3 either ""NDHWC"" (default) or ""NCDHW"".",Specifies the channel dimension,,,,,,
1772,tf.ragged.range,deltas,Vector or scalar `Tensor`.  Specifies the increment for each range. Defaults to `1`.,Specifies the increment for each range,,,,,,
1773,tf.required_space_to_batch_paddings,base_paddings,"Optional int32 Tensor of shape [N, 2].  Specifies the minimum amount of padding to use.  All elements must be >= 0.  If not specified, defaults to 0.",Specifies the minimum amount of padding to use,numeric,,,"[0,inf)",,
1774,tf.strings.unicode_encode,errors,Specifies the response when an invalid codepoint is encountered (optional). One of:     * `'replace'`: Replace invalid codepoint with the       `replacement_char`. (default)     * `'ignore'`: Skip invalid codepoints.     * `'strict'`: Raise an exception for any invalid codepoint.,Specifies the response when an invalid codepoint is encountered BSTR,,,,,,
1775,tf.feature_column.crossed_column,hash_key,Specify the hash_key that will be used by the `FingerprintCat64`function to combine the crosses fingerprints on SparseCrossOp (optional).,Specify the hash_key that will be used by the QSTR function to combine the crosses fingerprints on SparseCrossOp BSTR,,,,,,
1776,tf.keras.backend.truncated_normal,stddev,Standard deviation of the values.,Standard deviation of the values,numeric,,,,,
1777,tf.keras.layers.Dot,**kwargs,Standard layer keyword arguments.,Standard layer keyword arguments,,,,,,
1778,tf.keras.layers.multiply,**kwargs,Standard layer keyword arguments.,Standard layer keyword arguments,,,,,,
1779,tf.keras.layers.average,**kwargs,Standard layer keyword arguments.,Standard layer keyword arguments,,,,,,
1780,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",states D_STRUCTURE of D_STRUCTURE,,,,,,
1781,tf.keras.backend.depthwise_conv2d,strides,strides tuple (length 2).,strides D_STRUCTURE BSTR,int,,,"[0,inf)",,D_STRUCTURE
1782,tf.keras.Input,**kwargs,deprecated arguments support. Supports `batch_shape` and`batch_input_shape`.,Supports QSTR,,,,,QSTR,
1783,tf.keras.preprocessing.text.text_to_word_sequence,filters,"DF: !""#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n",t n,,,,,,
1784,tf.keras.preprocessing.text.text_to_word_sequence,filters,"list (or concatenation) of characters to filter out, such as     punctuation. Default: ``!""#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n``,     includes basic punctuation, tabs, and newlines.",t n includes basic punctuation tabs and newlines,,,,,,
1785,tf.strings.unicode_transcode,input_encoding,"A `string`. Text encoding of the input strings. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: `""UTF-16"", ""US ASCII"", ""UTF-8""`.",Text encoding of the PARAM D_TYPE,,,,,,
1786,tf.signal.inverse_stft,window_fn,DF: tf.signal.hann_window,tf signal hann_window,,,,,,
1787,tf.gradients,unconnected_gradients,DF: tf.UnconnectedGradients.NONE,tf UnconnectedGradients NONE,,,,,,
1788,tf.debugging.assert_near,atol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The absolute tolerance.  Default is `10 * eps`.",The absolute tolerance,,,,"[0,inf)",,
1789,tf.quantization.quantize,min_range,"A `Tensor` of type `float32`. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_min`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",The adjusted value is written to QSTR,,,,,,
1790,tf.keras.layers.Conv2DTranspose,output_padding,"An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",The amount of output PARAM along a given dimension must be lower than the stride along that same dimension,int,,0,"[0,inf)",,
1791,tf.keras.layers.Conv3DTranspose,output_padding,"An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to `None` (default), the output shape is inferred.",The amount of output PARAM along a given dimension must be lower than the stride along that same dimension,int,,0,"[0,inf)",,
1792,tf.keras.layers.PReLU,shared_axes,"The axes along which to share learnable parameters for the activation function. For example, if the incoming feature maps are from a 2D convolution with output shape `(batch, height, width, channels)`, and you wish to share parameters across space so that each filter only has one set of parameters, set `shared_axes=[1, 2]`.",The axes along which to share learnable parameters for the activation function,int,,,,,
1793,tf.signal.idct,axis,For future expansion. The axis to compute the DCT along. Must be `-1`.,The axis to compute the DCT along,int,,,,,
1794,tf.register_tensor_conversion_function,base_type,The base type or tuple of base types for all objects that`conversion_func` accepts.,The base type or D_STRUCTURE of base types for all objects that PARAM accepts,tf.dtype,,,,,D_STRUCTURE
1795,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,num_bits,"An optional `int`. Defaults to `8`. The bitwidth of the quantization; between 2 and 16, inclusive.",The bitwidth of the quantization between CONSTANT_NUM inclusive,,,,,,
1796,tf.nn.nce_loss,weights,"A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].  The (possibly-partitioned) class embeddings.",The BSTR class embeddings,,,,,,
1797,tf.nn.sampled_softmax_loss,weights,"A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].  The (possibly-sharded) class embeddings.",The BSTR class embeddings,,,,,,
1798,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1799,tf.scan,fn,"The callable to be performed.  It accepts two arguments.  The first will have the same structure as `initializer` if one is provided, otherwise it will have the same structure as `elems`.  The second will have the same (possibly nested) structure as `elems`.  Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",The callable to be performed,,,,,,
1800,tf.vectorized_map,fn,"The callable to be performed. It accepts one argument, which will have the same (possibly nested) structure as `elems`, and returns a possibly nested structure of Tensors and Operations, which may be different than the structure of `elems`.",The callable to be performed,,,,,,
1801,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1802,tf.nn.sampled_softmax_loss,biases,A `Tensor` of shape `[num_classes]`.  The class biases.,The class biases,,,,,,
1803,tf.strings.format,inputs,"A list of `Tensor` objects, or a single Tensor. The list of tensors to format into the template string. If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",The D_STRUCTURE of D_STRUCTURE to format into the PARAM D_TYPE,D_TYPE,,,,,D_STRUCTURE
1804,tf.debugging.Assert,data,The tensors to print out when condition is false.,The D_STRUCTURE to print out when PARAM is CONSTANT_BOOL,,,,,,D_STRUCTURE
1805,tf.math.reduce_variance,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,,,,,,D_STRUCTURE
1806,tf.math.reduce_logsumexp,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,,,,,,D_STRUCTURE
1807,tf.sparse.slice,sp_input,The `SparseTensor` to split.,The D_STRUCTURE to split,,,,,,D_STRUCTURE
1808,tf.keras.backend.local_conv2d,data_format,"the data format, channels_first or channels_last.",the data format channels_first or channels_last,,,,,channels_first;channels_last,
1809,tf.keras.layers.experimental.preprocessing.PreprocessingLayer,data,"The data to train on. It can be passed either as a tf.data Dataset, or as a numpy array.",The data to train on,,,,,,
1810,tf.keras.Input,dtype,"The data type expected by the input, as a string (`float32`, `float64`, `int32`...)",The data type expected by the input as a D_TYPE BSTR,tf.dtype;D_TYPE,,,,BSTR,
1811,tf.data.experimental.Counter,dtype,(Optional.) The data type for counter elements. Defaults to`tf.int64`.,The data type for counter elements,tf.dtype,,,,,
1812,tf.strings.reduce_join,axis,"Which axis to join along. The default behavior is to join all elements, producing a scalar.",The default behavior is to join all elements producing a scalar,,,,,,
1813,tf.summary.trace_on,graph,"If True, enables collection of executed graphs. It includes ones from tf.function invocation and ones from the legacy graph mode. The default is True.",The default is CONSTANT_BOOL,bool,,0,,,
1814,tf.keras.backend.softmax,axis,The dimension softmax would be performed on. The default is -1 which indicates the last dimension.,The default is CONSTANT_NUM which indicates the last dimension,int,,0,,,
1815,tf.keras.utils.get_file,archive_format,"Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.",The default QSTR is QSTR,,,,,,
1816,tf.nn.conv1d,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",The dilation factor for each dimension of PARAM,,,,,,
1817,tf.nn.conv1d_transpose,dilations,"An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.",The dilation factor for each dimension of PARAM,,,,,,
1818,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",The dilation factor for each dimension of QSTR,,,,,,
1819,tf.nn.separable_conv2d,dilations,"1-D of size 2. The dilation rate in which we sample input values across the `height` and `width` dimensions in atrous convolution. If it is greater than 1, then all values of strides must be 1.",The dilation rate in which we sample PARAM values across the QSTR dimensions in atrous convolution,numeric,,,,,
1820,tf.nn.depthwise_conv2d_backprop_input,dilations,"An optional list of `ints`. Defaults to `[1, 1, 1, 1]`. 1-D tensor of length 4.  The dilation factor for each dimension of`input`. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of`data_format`, see above for details. Dilations in the batch and depth dimensions must be 1.",The dimension order is determined by the value of PARAM see above for details,,,,,,
1821,tf.nn.conv2d_transpose,strides,"An int or list of `ints` that has length `1`, `2` or `4`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",The dimension order is determined by the value of PARAM see below for details,,,,,,
1822,tf.keras.backend.softmax,axis,The dimension softmax would be performed on. The default is -1 which indicates the last dimension.,The dimension softmax would be performed on,int,,,,,
1823,tf.math.reduce_euclidean_norm,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,int,,,,,
1824,tf.math.reduce_sum,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,int,,,,,
1825,tf.math.count_nonzero,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input), rank(input))`.",The dimensions to reduce,int,,,,,
1826,tf.keras.utils.get_file,file_hash,The expected hash string of the file after download. The sha256 and md5 hash algorithms are both supported.,The expected hash D_TYPE of the file after download,D_TYPE,,,,,
1827,tf.nn.fractional_avg_pool,pooling_ratio,"A list of `floats` that has length >= 4.  Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",The first and last elements must be CONSTANT_FLOAT because we don t allow pooling on batch and channels dimensions,,,,,,
1828,tf.nn.fractional_max_pool,pooling_ratio,"An int or list of `ints` that has length `1`, `2` or `4`. Pooling ratio for each dimension of `value`, currently only supports row and col dimension and should be >= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions.  1.44 and 1.73 are pooling ratio on height and width dimensions respectively.",The first and last elements must be CONSTANT_FLOAT because we don t allow pooling on batch and channels dimensions,,,,,,
1829,tf.keras.backend.rnn,step_function,"RNN step function. Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.     states; List of tensors. Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states; List of tensors, same length and shapes         as 'states'. The first state in the list must be the         output tensor at the previous timestep.",The first state in the D_STRUCTURE must be the output D_STRUCTURE at the previous timestep,,,,,,
1830,tf.scan,fn,"The callable to be performed.  It accepts two arguments.  The first will have the same structure as `initializer` if one is provided, otherwise it will have the same structure as `elems`.  The second will have the same (possibly nested) structure as `elems`.  Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",The first will have the same structure as PARAM if one is provided otherwise it will have the same structure as PARAM,,,,,,
1831,tf.gather,indices,"The index `Tensor`.  Must be one of the following types: `int32`,`int64`. Must be in range `[0, params.shape[axis])`.",The index D_STRUCTURE,,,,,,D_STRUCTURE
1832,tf.sparse.reshape,sp_input,The input `SparseTensor`.,The input D_STRUCTURE,,,,,,D_STRUCTURE
1833,tf.io.serialize_sparse,sp_input,The input `SparseTensor`.,The input D_STRUCTURE,,,,,,D_STRUCTURE
1834,tf.nn.erosion2d,dilations,"A list of `ints` that has length `>= 4`. 1-D of length 4. The input stride for atrous morphological dilation. Must be: `[1, rate_height, rate_width, 1]`.",The input stride for atrous morphological dilation,int,,,"[0,inf)",,
1835,tf.einsum,*inputs,"the inputs to contract (each one a `Tensor`), whose shapes should be consistent with `equation`.",the inputs to contract BSTR whose shapes should be consistent with PARAM,,,,,,
1836,tf.config.experimental_connect_to_host,job_name,The job name under which the new server will be accessible.,The job name under which the new server will be accessible,string,,0,,,
1837,tf.io.decode_jpeg,contents,A `Tensor` of type `string`. 0-D.  The JPEG-encoded image.,The JPEG encoded image,numeric,,,,,
1838,tf.random.fixed_unigram_candidate_sampler,vocab_file,"Each valid line in this file (which should have a CSV-like format) corresponds to a valid word ID. IDs are in sequential order, starting from num_reserved_ids. The last entry in each line is expected to be a value corresponding to the count or relative probability. Exactly one of `vocab_file` and `unigrams` needs to be passed to this operation.",The last entry in each line is expected to be a value corresponding to the count or relative probability,,,,,,
1839,tf.keras.backend.tile,n,A list of integer. The length must be the same as the number of dimensions in `x`.,The length must be the same as the number of dimensions in QSTR,,,,,,
1840,tf.unstack,num,An `int`. The length of the dimension `axis`. Automatically inferred if`None` (the default).,The length of the dimension PARAM,int,,,"[0,inf)",,
1841,tf.config.experimental_connect_to_cluster,task_index,The local task index.,The local task index,int,,,,,
1842,tf.nn.ctc_beam_search_decoder,inputs,"3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`. The logits.",The logits,,,,,,
1843,tf.nondifferentiable_batch_function,max_enqueued_batches,The maximum depth of the batch queue. Defaults to 10.,The maximum depth of the batch queue,numeric,,,"[0,inf)",,
1844,tf.train.checkpoints_iterator,timeout,"The maximum number of seconds to wait between checkpoints. If left as `None`, then the process will wait indefinitely.",The maximum number of seconds to wait between checkpoints,int,,0,"[0,inf)",,
1845,tf.clip_by_value,clip_value_max,"A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`. The maximum value to clip by.",The maximum value to clip by,numeric,,,,,
1846,tf.random.stateless_normal,mean,A 0-D Tensor or Python value of type `dtype`. The mean of the normal distribution.,The mean of the normal distribution,numeric,,,,,
1847,tf.quantization.quantize,min_range,"A `Tensor` of type `float32`. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_min`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",The minimum value of the quantization range,numeric,,,,,
1848,tf.clip_by_value,clip_value_min,"A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`. The minimum value to clip by.",The minimum value to clip by,numeric,,,,,
1849,tf.data.experimental.copy_to_device,target_device,The name of a device to which elements will be copied.,The name of a device to which elements will be copied,string,,0,,,
1850,tf.norm,name,The name of the op.,The name of the op,string,,0,,,
1851,tf.foldr,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM,,,,,,D_STRUCTURE
1852,tf.image.resize,size,"A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The new size for the images.",The new size for the PARAM,int,,,,,
1853,tf.signal.dct,norm,The normalization to apply. `None` for no normalization or `'ortho'`for orthonormal normalization.,The normalization to apply,,,,,,
1854,tf.gather,batch_dims,An `integer`.  The number of batch dimensions.  Must be less than `rank(indices)`.,The number of batch dimensions,int,,0,"[0,inf)",,
1855,tf.random.uniform_candidate_sampler,num_sampled,"An `int`.  The number of classes to randomly sample. The`sampled_candidates` return value will have shape `[num_sampled]`. If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",The number of classes to randomly sample,int,,0,"[0,inf)",,
1856,tf.linalg.diag,num_cols,"The number of columns of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",The number of columns of the output matrix,int,,0,"[0,inf)",,
1857,tf.keras.layers.DepthwiseConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The number of depthwise convolution output channels for each input channel,int,,0,"[0,inf)",,
1858,tf.nn.conv1d,stride,An int or list of `ints` that has length `1` or `3`.  The number of entries by which the filter is moved right at each step.,The number of entries by which the filter is moved right at each step,int,,0,"[0,inf)",,
1859,tf.random.learned_unigram_candidate_sampler,range_max,An `int`. The number of possible classes.,The number of possible classes,int,,0,"[0,inf)",,
1860,tf.nn.sampled_softmax_loss,num_classes,An `int`. The number of possible classes.,The number of possible classes,int,,0,"[0,inf)",,
1861,tf.estimator.export.build_parsing_serving_input_receiver_fn,default_batch_size,the number of query examples expected per batch. Leave unset for variable batch size (recommended).,the number of query examples expected per batch,int,,0,"[0,inf)",,
1862,tf.linalg.diag,num_rows,"The number of rows of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from `d_lower`, `d_upper`, and the innermost dimension of `diagonal`.",The number of rows of the output matrix,int,,0,"[0,inf)",,
1863,tf.signal.inverse_stft,frame_step,An integer scalar `Tensor`. The number of samples to step.,The number of samples to step,int,,0,"[0,inf)",,
1864,tf.sparse.split,num_split,A Python integer. The number of ways to split.,The number of ways to split,int,,0,"[0,inf)",,
1865,tf.keras.layers.Conv3DTranspose,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, depth, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, depth, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1866,tf.keras.layers.GlobalMaxPool2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1867,tf.keras.layers.Conv2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1868,tf.keras.layers.UpSampling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1869,tf.keras.layers.AveragePooling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1870,tf.keras.layers.UpSampling3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,,,,,QSTR,
1871,tf.sparse.minimum,sp_b,the other `SparseTensor` operand with the same requirements (and the same shape).,the other D_STRUCTURE operand with the same requirements BSTR,,,,,,D_STRUCTURE
1872,tf.print,output_stream,"The output stream, logging level, or file to print to. Defaults to sys.stderr, but sys.stdout, tf.compat.v1.logging.info, tf.compat.v1.logging.warning, tf.compat.v1.logging.error, absl.logging.info, absl.logging.warning and absl.loogging,error are also supported. To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",The output stream logging level or file to print to,,,,,,
1873,tf.nn.max_pool3d,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",The padding algorithm,,,,,,
1874,tf.nn.conv1d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",The padding algorithm,,,,,,
1875,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1876,tf.quantization.quantized_concat,values,"A list of at least 2 `Tensor` objects with the same type. The `N` Tensors to concatenate. Their ranks and types must match, and their sizes must match in all dimensions except `concat_dim`.",The QSTR D_STRUCTURE to concatenate,,,,,,
1877,tf.signal.linear_to_mel_weight_matrix,dtype,The `DType` of the result matrix. Must be a floating point type.,The QSTR of the result matrix,,,,,,
1878,tf.random.uniform_candidate_sampler,num_sampled,"An `int`.  The number of classes to randomly sample. The`sampled_candidates` return value will have shape `[num_sampled]`. If`unique=True`, `num_sampled` must be less than or equal to `range_max`.",The QSTR return value will have shape BSTR,,,,,,
1879,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",The QSTR th row of the D_STRUCTURE specifies the coordinates of a box in the box_ind BSTR PARAM and is specified in normalized coordinates BSTR,,,,,,
1880,tf.debugging.assert_near,rtol,"`Tensor`.  Same `dtype` as, and broadcastable to, `x`. The relative tolerance.  Default is `10 * eps`.",The relative tolerance,,,,,,
1881,tf.nn.fractional_avg_pool,overlapping,"An optional `bool`.  Defaults to `False`.  When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.  The result would be [20, 16] for fractional avg pooling.",The result would be BSTR for fractional avg pooling,,,,,,
1882,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1883,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",The returns numpy D_STRUCTUREs must match the number and types defined PARAM,,,,,,
1884,tf.image.rgb_to_grayscale,images,The RGB tensor to convert. Last dimension must have size 3 and should contain RGB values.,The RGB D_STRUCTURE to convert,,,,,,D_STRUCTURE
1885,tf.xla.experimental.jit_scope,separate_compiled_gradients,"If true put each gradient subgraph into a separate compilation scope. This gives fine-grained control over which portions of the graph will be compiled as a single unit. Compiling gradients separately may yield better performance for some graphs. The scope is named based on the scope of the forward computation as well as the name of the gradients. As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients.",The scope is named based on the scope of the forward computation as well as the name of the gradients,,,,,,
1886,tf.scan,fn,"The callable to be performed.  It accepts two arguments.  The first will have the same structure as `initializer` if one is provided, otherwise it will have the same structure as `elems`.  The second will have the same (possibly nested) structure as `elems`.  Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",The second will have the same BSTR structure as PARAM,,,,,,
1887,tf.strings.ngrams,separator,"The separator string used between ngram elements. Must be a string constant, not a Tensor.",The separator D_TYPE used between ngram elements,D_TYPE,,,,,
1888,tf.keras.utils.get_file,file_hash,The expected hash string of the file after download. The sha256 and md5 hash algorithms are both supported.,The sha256 and md5 hash algorithms are both supported,,,,,,
1889,tf.linalg.tridiagonal_solve,diagonals,"A `Tensor` or tuple of `Tensor`s describing left-hand sides. The shape depends of `diagonals_format`, see description above. Must be`float32`, `float64`, `complex64`, or `complex128`.",The shape depends of PARAM see description above,,,,,,
1890,tf.keras.layers.LSTM,time_major,"The shape format of the `inputs` and `outputs` tensors. If True, the inputs and outputs will be in shape`[timesteps, batch, feature]`, whereas in the False case, it will be`[batch, timesteps, feature]`. Using `time_major = True` is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",The shape format of the QSTR D_STRUCTURE,,,,,,
1891,tf.broadcast_to,shape,"A `Tensor`. Must be one of the following types: `int32`, `int64`. An 1-D `int` Tensor. The shape of the desired output.",The shape of the desired output,int,,1,"[0,inf)",,
1892,tf.random.stateless_truncated_normal,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,The shape of the output D_STRUCTURE,int,,1,"[0,inf)",,
1893,tf.image.extract_patches,sizes,"The size of the extracted patches. Must be [1, size_rows, size_cols, 1].",The size of the extracted patches,int,,,"[0,inf)",,
1894,tf.nn.max_pool,ksize,"An int or list of `ints` that has length `1`, `N` or `N+2`. The size of the window for each dimension of the input tensor.",The size of the window for each dimension of the PARAM D_STRUCTURE,int,,,"[0,inf)",,
1895,tf.signal.linear_to_mel_weight_matrix,num_spectrogram_bins,"An integer `Tensor`. How many bins there are in the source spectrogram data, which is understood to be `fft_size // 2 + 1`, i.e. the spectrogram only contains the nonredundant FFT bins.",the spectrogram only contains the nonredundant FFT bins,,,,,,
1896,tf.random.normal,stddev,"A Tensor or Python value of type `dtype`, broadcastable with `mean`. The standard deviation of the normal distribution.",The standard deviation of the normal distribution,numeric,,,,,
1897,tf.random.stateless_truncated_normal,stddev,"A 0-D Tensor or Python value of type `dtype`. The standard deviation of the normal distribution, before truncation.",The standard deviation of the normal distribution before truncation,numeric,,,,,
1898,tf.nn.conv2d_transpose,strides,"An int or list of `ints` that has length `1`, `2` or `4`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",The stride of the sliding window for each dimension of PARAM,int,,,"[0,inf)",,
1899,tf.nn.dilation2d,strides,"A list of `ints` that has length `>= 4`. The stride of the sliding window for each dimension of the input tensor. Must be: `[1, stride_height, stride_width, 1]`.",The stride of the sliding window for each dimension of the PARAM D_STRUCTURE,int,,,"[0,inf)",,
1900,tf.nn.max_pool3d,strides,"An int or list of `ints` that has length `1`, `3` or `5`. The stride of the sliding window for each dimension of the input tensor.",The stride of the sliding window for each dimension of the PARAM D_STRUCTURE,int,,,"[0,inf)",,
1901,tf.strings.unicode_transcode,input,A `Tensor` of type `string`. The text to be processed. Can have any shape.,The text to be processed,string,,,,,
1902,tf.summary.flush,writer,The `tf.summary.SummaryWriter` resource to flush. The thread default will be used if this parameter is None. Otherwise a `tf.no_op` is returned.,The tf summary SummaryWriter resource to flush,,,,,,
1903,tf.summary.flush,writer,The `tf.summary.SummaryWriter` resource to flush. The thread default will be used if this parameter is None. Otherwise a `tf.no_op` is returned.,The thread default will be used if this parameter is None,,,,,,
1904,tf.keras.layers.DepthwiseConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The total number of depthwise convolution output channels will be equal to filters_in depth_multiplier,int,,0,"[0,inf)",,
1905,tf.eye,dtype,The type of an element in the resulting `Tensor`,The type of an element in the resulting D_STRUCTURE,tf.dtype,,,,,
1906,tf.sparse.eye,dtype,The type of element in the resulting `Tensor`.,The type of element in the resulting D_STRUCTURE,tf.dtype,,,,,
1907,tf.ragged.constant,dtype,"The type of elements for the returned `RaggedTensor`.  If not specified, then a default is chosen based on the scalar values in`pylist`.",The type of elements for the returned QSTR,tf.dtype,,,,,
1908,tf.keras.backend.constant,dtype,The type of the elements of the resulting tensor.,The type of the elements of the resulting D_STRUCTURE,tf.dtype,,,,,
1909,tf.ragged.range,dtype,"The type of the elements of the resulting tensor.  If not specified, then a value is chosen based on the other args.",The type of the elements of the resulting D_STRUCTURE,tf.dtype,,,,,
1910,tf.random.stateless_normal,dtype,The type of the output.,The type of the output,tf.dtype,,,,,
1911,tf.random.uniform,dtype,"The type of the output: `float16`, `float32`, `float64`, `int32`, or `int64`.",The type of the output D_TYPE,tf.dtype,,,,,
1912,tf.keras.backend.local_conv2d,kernel,"the unshared weight for convolution, with shape (output_items, feature_dim, filters).",the unshared weight for convolution with shape BSTR,numeric,,,,,
1913,tf.random.uniform,maxval,"A Tensor or Python value of type `dtype`, broadcastable with`minval`. The upper bound on the range of random values to generate (exclusive). Defaults to 1 if `dtype` is floating point.",The upper bound on the range of random values to generate BSTR,numeric,,,,,
1914,tf.keras.layers.UpSampling2D,size,"Int, or tuple of 2 integers. The upsampling factors for rows and columns.",The upsampling factors for rows and columns,,,,,,
1915,tf.estimator.add_metrics,metric_fn,"A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name. Final metrics are a union of this and `estimator's` existing metrics. If there is a name conflict between this and `estimator`s existing metrics, this will override the existing one. The values of the dict are the results of calling a metric function, namely a `(metric_tensor, update_op)` tuple. ",The values of the D_STRUCTURE are the results of calling a metric function namely a BSTR D_STRUCTURE,,,,,,
1916,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",The width dimension is treated similarly,numeric,,,,,
1917,tf.keras.preprocessing.sequence.skipgrams,window_size,"Int, size of sampling windows (technically half-window).     The window of a word `w_i` will be     `[i - window_size, i + window_size+1]`.",The window of a word QSTR will be BSTR,,,,,,
1918,tf.quantization.quantized_concat,values,"A list of at least 2 `Tensor` objects with the same type. The `N` Tensors to concatenate. Their ranks and types must match, and their sizes must match in all dimensions except `concat_dim`.",Their ranks and types must match and their sizes must match in all dimensions except PARAM,,,,,,
1919,tf.nn.ctc_loss,blank_index,"(optional) Set the class index to use for the blank label. Negative values will start from num_classes, ie, -1 will reproduce the ctc_loss behavior of using num_classes - 1 for the blank symbol. There is some memory/performance overhead to switching from the default of 0 as an additional shifted copy of the logits may be created.",There is some memory performance overhead to switching from the default of CONSTANT_NUM as an additional shifted copy of the PARAM may be created,,,,,,
1920,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",These circular buffers are designed to reduce the overhead of debugging dumping,,,,,,
1921,tf.io.parse_single_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,These features are associated with data within the QSTR section of the QSTR proto,,,,,,
1922,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",They are written to the file system only when the proper flushing method is called BSTR,,,,,,
1923,tf.debugging.experimental.enable_dump_debug_info,circular_buffer_size,"Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If <= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.",They hold the most recent debug events concerning eager execution of ops and tf function QSTR tf function s,,,,,,
1924,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1925,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1926,tf.keras.layers.RNN,cell,"A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has: A `call(input_at_t, states_at_t)` method, returning`(output_at_t, states_at_t_plus_1)`. The call method of the cell can also take the optional argument `constants`, see section ""Note on passing external constants"" below.A `state_size` attribute. This can be a single integer (single state) in which case it is the size of the recurrent state. This can also be a list/tuple of integers (one size per state). The `state_size` can also be TensorShape or tuple/list of TensorShape, to represent high dimension state.A `output_size` attribute. This can be a single integer or a TensorShape, which represent the shape of the output. For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the`state_size`.A `get_initial_state(inputs=None, batch_size=None, dtype=None)`method that creates a tensor meant to be fed to `call()` as the initial state, if the user didn't specify any initial state via other means. The returned initial state should have a shape of [batch_size, cell.state_size]. The cell might choose to create a tensor full of zeros, or full of other values based on the cell's implementation.`inputs` is the input tensor to the RNN layer, which should contain the batch size as its shape[0], and also dtype. Note that the shape[0] might be `None` during the graph construction. Either the `inputs` or the pair of `batch_size` and `dtype` are provided.`batch_size` is a scalar tensor that represents the batch size of the inputs. `dtype` is `tf.DType` that represents the dtype of the",,,,,,,
1927,tf.numpy_function,func,"A Python function, which accepts `numpy.ndarray` objects as arguments and returns a list of `numpy.ndarray` objects (or a single`numpy.ndarray`). This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the number and types defined `Tout`. Important Note: Input and output `numpy.ndarray`s of `func` are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing `func` input or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.",This function must accept as many arguments as there are D_STRUCTURE in PARAM and these argument types will match the correspondingD_STRUCTURE objects in PARAM,,,,,,
1928,tf.xla.experimental.jit_scope,separate_compiled_gradients,"If true put each gradient subgraph into a separate compilation scope. This gives fine-grained control over which portions of the graph will be compiled as a single unit. Compiling gradients separately may yield better performance for some graphs. The scope is named based on the scope of the forward computation as well as the name of the gradients. As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients.",This gives fine grained control over which portions of the graph will be compiled as a single unit,,,,,,
1929,tf.strings.unicode_transcode,input_encoding,"A `string`. Text encoding of the input strings. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: `""UTF-16"", ""US ASCII"", ""UTF-8""`.",This is any of the encodings supported by ICU ucnv algorithmic converters,,,,,,
1930,tf.keras.layers.LSTMCell,unit_forget_bias,"Boolean (default `True`). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force`bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",This is recommended in Jozefowicz et al,,,,,,
1931,tf.keras.layers.ConvLSTM2D,unit_forget_bias,"Boolean. If True, add 1 to the bias of the forget gate at initialization. Use in combination with `bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",This is recommended in Jozefowicz et al,,,,,,
1932,tf.function,experimental_implements,"If provided, contains a name of a ""known"" function this implements. For example ""mycompany.my_recurrent_cell"". This is stored as an attribute in inference function, which can then be detected when processing serialized function. Seehttps://github.com/tensorflow/community/blob/master/rfcs/20190610-standardizing-composite_ops.mdfor details.  For an example of utilizing this attribute see:https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/lite/transforms/prepare_composite_functions_tf.ccThe code above automatically detects and substitutes function that implements ""embedded_matmul"" and allows TFLite to substitute its own implementations. For instance, a tensorflow user can use this attribute to mark that their function also implements`embedded_matmul``` (perhaps more efficiently!) by specifying it using this flag.",This is stored as an attribute in inference function which can then be detected when processing serialized function,,,,,,
1933,tf.random.fixed_unigram_candidate_sampler,num_shards,A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism. This parameter (together with `shard`) indicates the number of partitions that are being used in the overall computation.,This parameter BSTR indicates the number of partitions that are being used in the overall computation,,,,,,
1934,tf.quantization.quantize,min_range,"A `Tensor` of type `float32`. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_min`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",This value may be adjusted by the op depending on other parameters,,,,,,
1935,tf.keras.layers.ThresholdedReLU,theta,Float >= 0. Threshold location of activation.,Threshold location of activation,,,,,,
1936,tf.nest.map_structure,**kwargs,"Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception). To allow this set this argument to `False`. Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.  If `False` (the default), then composite tensors are not expanded. ",To allow this set this argument to CONSTANT_BOOL,,,,,,
1937,tf.print,output_stream,"The output stream, logging level, or file to print to. Defaults to sys.stderr, but sys.stdout, tf.compat.v1.logging.info, tf.compat.v1.logging.warning, tf.compat.v1.logging.error, absl.logging.info, absl.logging.warning and absl.loogging,error are also supported. To print to a file, pass a string started with ""file://"" followed by the file path, e.g., ""file:///tmp/foo.out"".",To print to a file pass a D_TYPE started with file followed by the file path e g file tmp foo out,,,,,,
1938,tf.nn.RNNCellDropoutWrapper,input_keep_prob,"unit Tensor or float between 0 and 1, input keep probability; if it is constant and 1, no input dropout will be added.",unit D_STRUCTURE or D_TYPE between CONSTANT_NUM input keep probability if it is constant and CONSTANT_NUM no input dropout will be added,D_TYPE,,,"[0,1]",,D_STRUCTURE
1939,tf.io.encode_jpeg,density_unit,"An optional `string` from: `""in"", ""cm""`. Defaults to `""in""`. Unit used to specify `x_density` and `y_density`: pixels per inch (`'in'`) or centimeter (`'cm'`).",Unit used to specify PARAM and PARAM pixels per inch QSTR or centimeter QSTR,,,,,,
1940,tf.range,limit,"A 0-D `Tensor` (scalar). Upper limit of sequence, exclusive. If None, defaults to the value of `start` while the first entry of the range defaults to 0.",Upper limit of D_STRUCTURE exclusive,,,,,,
1941,tf.keras.layers.ConvLSTM2D,unit_forget_bias,"Boolean. If True, add 1 to the bias of the forget gate at initialization. Use in combination with `bias_initializer=""zeros""`. This is recommended in Jozefowicz et al.",Use in combination with PARAM QSTR,,,,,,
1942,tf.sparse.sparse_dense_matmul,adjoint_a,"Use the adjoint of A in the matrix multiply.  If A is complex, this is transpose(conj(A)).  Otherwise it's transpose(A).",Use the adjoint of A in the matrix multiply,,,,,,
1943,tf.sparse.sparse_dense_matmul,adjoint_b,"Use the adjoint of B in the matrix multiply.  If B is complex, this is transpose(conj(B)).  Otherwise it's transpose(B).",Use the adjoint of B in the matrix multiply,,,,,,
1944,tf.keras.layers.Lambda,arguments,"Optional dictionary of keyword arguments to be passed to the function. Input shape: Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model. Output shape: Specified by `output_shape` argument",Use the keyword argument input_shape BSTR when using this layer as the first layer in a model,,,,,,
1945,tf.keras.datasets.reuters.load_data,**kwargs,Used for backwards compatibility.,Used for backwards compatibility,,,,,,
1946,tf.image.random_flip_left_right,seed,A Python integer. Used to create a random seed. See`tf.compat.v1.set_random_seed` for behavior.,Used to create a random seed,,,,,,
1947,tf.random.categorical,seed,A Python integer. Used to create a random seed for the distribution. See `tf.compat.v1.set_random_seed` for behavior.,Used to create a random seed for the distribution,,,,,,
1948,tf.keras.initializers.he_uniform,seed,A Python integer. Used to seed the random generator.,Used to seed the random generator,,,,,,
1949,tf.data.experimental.make_csv_dataset,select_columns,"An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select. If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines. When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified. Using this results in faster parsing and lower memory usage. If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",Using this results in faster parsing and lower memory usage,,,,,,
1950,tf.keras.layers.LSTM,time_major,"The shape format of the `inputs` and `outputs` tensors. If True, the inputs and outputs will be in shape`[timesteps, batch, feature]`, whereas in the False case, it will be`[batch, timesteps, feature]`. Using `time_major = True` is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.",Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation,,,,,,
1951,tf.compat.as_text,encoding,DF: utf-8,utf CONSTANT_NUM,,,,,,
1952,tf.nest.map_structure,**kwargs,"Valid keyword args are: `check_types`: If set to `True` (default) the types of iterables within the structures have to be same (e.g.`map_structure(func, [1], (1,))` raises a `TypeError`exception). To allow this set this argument to `False`. Note that namedtuples with identical name and fields are always considered to have the same shallow structure.`expand_composites`: If set to `True`, then composite tensors such as `tf.SparseTensor` and `tf.RaggedTensor` are expanded into their component tensors.  If `False` (the default), then composite tensors are not expanded. ",Valid keyword args are QSTR If set to CONSTANT_BOOL BSTR the types of iterables within the structures have to be same e g map_structure PARAM BSTR BSTR raises a QSTR exception,,,,,,
1953,tf.config.experimental.set_synchronous_execution,enable,Whether operations should be dispatched synchronously. Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,Valid values None sets the system default CONSTANT_BOOL executes each operation synchronously CONSTANT_BOOL executes each operation asynchronously,,,,,,
1954,tf.math.segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A 1-D tensor whose size is equal to the size of `data`'s first dimension.  Values should be sorted and can be repeated.",Values should be sorted and can be repeated,,,,,,
1955,tf.sparse.segment_mean,segment_ids,A 1-D `Tensor` with indices into the output `Tensor`. Values should be sorted and can be repeated.,Values should be sorted and can be repeated,,,,,,
1956,tf.get_static_value,partial,"If True, the returned numpy array is allowed to have partially evaluated values. Values that can't be evaluated will be None.",Values that can t be evaluated will be None,,,,,,
1957,tf.ragged.range,deltas,Vector or scalar `Tensor`.  Specifies the increment for each range. Defaults to `1`.,D_STRUCTURE or scalar D_STRUCTURE,,,0;1,,,D_STRUCTURE
1958,tf.image.crop_to_bounding_box,offset_height,Vertical coordinate of the top-left corner of the result in the input.,Vertical coordinate of the top left corner of the result in the input,,,,,,
1959,tf.io.encode_jpeg,y_density,An optional `int`. Defaults to `300`. Vertical pixels per density unit.,Vertical pixels per density unit,,,,,,
1960,tf.image.crop_and_resize,boxes,"A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor specifies the coordinates of a box in the `box_ind[i]` image and is specified in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the `[0, 1]` interval of normalized image height is mapped to `[0, image_height - 1]` in image height coordinates. We do allow `y1` > `y2`, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the `[0, 1]` range are allowed, in which case we use `extrapolation_value` to extrapolate the input image values.",We do allow QSTR QSTR in which case the sampled crop is an up down flipped version of the original PARAM,,,,,,
1961,tf.keras.backend.in_train_phase,x,What to return in train phase (tensor or callable that returns a tensor).,What to return in train phase BSTR,,,,,,
1962,tf.linalg.matrix_rank,validate_args,"When `True`, additional assertions might be embedded in the graph. Default value: `False` (i.e., no graph assertions are added).",When CONSTANT_BOOL additional assertions might be embedded in the graph,bool,,0,,,
1963,tf.function,experimental_relax_shapes,"When True, `tf.function` may generate fewer, graphs that are less specialized on input shapes.",When CONSTANT_BOOL tf function may generate fewer graphs that are less specialized on input shapes,bool,,0,,,
1964,tf.summary.audio,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many audio clips will be emitted at each step. When more than`max_outputs` many clips are provided, the first `max_outputs`many clips will be used and the rest silently discarded.",When more than QSTR many clips are provided the first QSTR many clips will be used and the rest silently discarded,,,,,,
1965,tf.summary.image,max_outputs,"Optional `int` or rank-0 integer `Tensor`. At most this many images will be emitted at each step. When more than`max_outputs` many images are provided, the first `max_outputs` many images will be used and the rest silently discarded.",When more than QSTR many images are provided the first QSTR many images will be used and the rest silently discarded,,,,,,
1966,tf.nn.fractional_avg_pool,overlapping,"An optional `bool`.  Defaults to `False`.  When set to `True`, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:`index  0  1  2  3  4``value  20 5  16 3  7`If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.  The result would be [20, 16] for fractional avg pooling.",When set to CONSTANT_BOOL it means when pooling the values at the boundary of adjacent pooling cells are used by both cells,bool,,0,,,
1967,tf.keras.layers.LayerNormalization,scale,"If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer.",When the next layer is linear also e g,,,,,,
1968,tf.data.experimental.make_csv_dataset,select_columns,"An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select. If column names are provided, these must correspond to names provided in`column_names` or inferred from the file header lines. When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified. Using this results in faster parsing and lower memory usage. If both this and `column_defaults` are specified, these must have the same lengths, and `column_defaults` is assumed to be sorted in order of increasing column index.",When this argument is specified only a subset of CSV columns will be parsed and returned corresponding to the columns specified,,,,,,
1969,tf.keras.datasets.reuters.get_word_index,path,where to cache the data (relative to `~/.keras/dataset`).,where to cache the data relative to keras dataset,,,,,,
1970,tf.while_loop,back_prop,Whether backprop is enabled for this while loop.,Whether backprop is enabled for this while loop,bool,,0,,,
1971,tf.config.experimental.set_synchronous_execution,enable,Whether operations should be dispatched synchronously. Valid values: None: sets the system default.True: executes each operation synchronously.False: executes each operation asynchronously.,Whether operations should be dispatched synchronously,bool,,0,,,
1972,tf.keras.backend.all,keepdims,whether the drop or broadcast the reduction axes.,whether the drop or broadcast the reduction axes,bool,,0,,,
1973,tf.nn.log_poisson_loss,compute_full_loss,"whether to compute the full loss. If false, a constant term is dropped in favor of more efficient optimization.",whether to compute the full loss,bool,,0,,,
1974,tf.keras.utils.plot_model,show_shapes,whether to display shape information.,whether to display shape information,bool,,0,,,
1975,tf.xla.experimental.jit_scope,compile_ops,"Whether to enable or disable compilation in the scope. Either a Python bool, or a callable that accepts the parameter`node_def` and returns a python bool.",Whether to enable or disable compilation in the scope,bool,,0,,,
1976,tf.config.set_soft_device_placement,enabled,Whether to enable soft placement.,Whether to enable soft placement,bool,,0,,,
1977,tf.keras.utils.plot_model,expand_nested,Whether to expand nested models into clusters.,Whether to expand nested models into clusters,bool,,0,,,
1978,tf.nn.max_pool_with_argmax,include_batch_in_index,An optional `boolean`. Defaults to `False`. Whether to include batch dimension in flattened index of `argmax`.,Whether to include batch dimension in flattened index of QSTR,bool,,0,,,
1979,tf.keras.layers.dot,normalize,"Whether to L2-normalize samples along the dot product axis before taking the dot product. If set to True, then the output of the dot product is the cosine proximity between the two samples.",Whether to L2 normalize samples along the dot product axis before taking the dot product,bool,,0,,,
1980,tf.quantization.fake_quant_with_min_max_vars_gradient,narrow_range,An optional `bool`. Defaults to `False`. Whether to quantize into 2^num_bits - 1 distinct values.,Whether to quantize into CONSTANT_NUM PARAM CONSTANT_NUM distinct values,bool,,0,,,
1981,tf.nn.sampled_softmax_loss,remove_accidental_hits,"A `bool`.  whether to remove ""accidental hits"" where a sampled class equals one of the target classes.  Default is True.",whether to remove QSTR where a sampled class equals one of the target classes,bool,,0,,,
1982,tf.keras.preprocessing.image.array_to_img,scale,"Whether to rescale image values to be within `[0, 255]`.",Whether to rescale image values to be within BSTR,bool,,0,,,
1983,tf.keras.layers.GRU,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence. Default: `False`.",Whether to return the last output in the output D_STRUCTURE or the full D_STRUCTURE,bool,,0,,,
1984,tf.keras.layers.GRU,return_state,Boolean. Whether to return the last state in addition to the output. Default: `False`.,Whether to return the last state in addition to the output,bool,,0,,,
1985,tf.keras.preprocessing.text.hashing_trick,lower,boolean. Whether to set the text to lowercase.,Whether to set the PARAM to lowercase,bool,,0,,,
1986,tf.keras.preprocessing.sequence.skipgrams,shuffle,Whether to shuffle the word couples before returning them.,Whether to shuffle the word couples before returning them,bool,,0,,,
1987,tf.image.resize,antialias,Whether to use an anti-aliasing filter when downsampling an image.,Whether to use an anti aliasing filter when downsampling an image,bool,,0,,,
1988,tf.image.resize_with_pad,antialias,Whether to use anti-aliasing when resizing. See 'image.resize()'.,Whether to use anti aliasing when resizing,bool,,0,,,
1989,tf.sets.union,validate_indices,Whether to validate the order and range of sparse indices in `a` and `b`.,Whether to validate the order and range of sparse indices in QSTR,bool,,0,,,
1990,tf.strings.reduce_join,axis,"Which axis to join along. The default behavior is to join all elements, producing a scalar.",Which axis to join along,int,,,,,
1991,tf.keras.preprocessing.image.apply_affine_transform,tx,Width shift.,Width shift,,,,,,
1992,tf.keras.preprocessing.image.random_shift,wrg,"Width shift range, as a float fraction of the width.",Width shift range as a D_TYPE fraction of the width,D_TYPE,,,,,
1993,tf.keras.datasets.reuters.load_data,oov_char,words that were cut out because of the `num_words`or `skip_top` limit will be replaced with this character.,words that were cut out because of the PARAMor PARAM limit will be replaced with this character,string,,,,,
1994,tf.keras.backend.function,**kwargs,Passed to `tf.Session.run`.,Passed to tf Session run,,,,,,
1995,tf.keras.layers.DenseFeatures,**kwargs,Keyword arguments to construct a layer.,Keyword arguments to construct a layer,,,,,,
1996,tf.keras.layers.dot,**kwargs,Standard layer keyword arguments.,Standard layer keyword arguments,,,,,,
1997,tf.keras.preprocessing.image.save_img,**kwargs,Additional keyword arguments passed to `PIL.Image.save()`.,Additional keyword arguments passed to PIL Image save,,,,,,
1998,tf.nn.RNNCellDropoutWrapper,**kwargs,dict of keyword arguments for base layer.,D_STRUCTURE of keyword arguments for base layer,,,,,,D_STRUCTURE
1999,tf.linalg.matrix_rank,a,(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,BSTR which are to be pseudo inverted,float,,,,,tensor
2000,tf.sets.difference,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,&QSTR,,,,,D_STRUCTURE
2001,tf.sets.difference,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,,,,,,
2002,tf.sets.intersection,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",D_STRUCTURE of the same type as QSTR,&QSTR,,,,,D_STRUCTURE
2003,tf.sets.intersection,a,"`Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices must be sorted in row-major order.",If sparse indices must be sorted in row major order,,,,,,
2004,tf.sets.size,a,"`SparseTensor`, with indices sorted in row-major order.",D_STRUCTURE with indices sorted in row major order,,,,,,D_STRUCTURE
2005,tf.linalg.matvec,a_is_sparse,"If `True`, `a` is treated as a sparse matrix.",If CONSTANT_BOOL QSTR is treated as a sparse matrix,bool,,0,,,
2006,tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you don t specify anything no activation is applied ie,,,,,,
2007,tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,,
2008,tf.keras.layers.LocallyConnected2D,activation,"Activation function to use. If you don't specify anything, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",activation function to use,,,,,,
2009,tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Default hyperbolic tangent QSTR,,,,,,
2010,tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you pass QSTR no activation is applied ie,,,,,,
2011,tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,,
2012,tf.keras.layers.LSTMCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",activation function to use,,,,,,
2013,tf.keras.layers.SeparableConv1D,activation,Activation function. Set it to None to maintain a linear activation.,Set it to None to maintain a linear activation,,,,,,
2014,tf.keras.layers.SeparableConv1D,activation,Activation function. Set it to None to maintain a linear activation.,activation function,,,,,,
2015,tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",Default hyperbolic tangent QSTR,,,,,,
2016,tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",If you pass QSTR no activation is applied ie,,,,,,
2017,tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",QSTR activation a BSTR x,,,,,,
2018,tf.keras.layers.SimpleRNNCell,activation,"Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `None`, no activation is applied (ie. ""linear"" activation: `a(x) = x`).",activation function to use,,,,,,
2019,tf.keras.layers.Conv1D,activity_regularizer,"Regularizer function applied to the output of the layer (its ""activation"")..",Regularizer function applied to the output of the layer BSTR,,,,,,
2020,tf.linalg.matmul,adjoint_b,"If `True`, `b` is conjugated and transposed before multiplication.",If CONSTANT_BOOL QSTR is conjugated and transposed before multiplication,bool,,0,,,
2021,tf.keras.layers.PReLU,alpha_initializer,Initializer function for the weights.,Initializer function for the weights,,,,,,
2022,tf.sets.difference,aminusb,"Whether to subtract `b` from `a`, vs vice versa.",Whether to subtract QSTR from QSTR vs vice versa,bool,,0,,,
2023,tf.keras.backend.any,axis,axis along which to perform the reduction.,axis along which to perform the reduction,int,,,,,
2024,tf.keras.backend.batch_normalization,axis,"Integer, the axis that should be normalized. (typically the features axis).",BSTR,,,,,,
2025,tf.keras.backend.batch_normalization,axis,"Integer, the axis that should be normalized. (typically the features axis).",D_TYPE the axis that should be normalized,D_TYPE,,,,,
2026,tf.keras.backend.prod,axis,"An integer, the axis to compute the product.",An D_TYPE the axis to compute the product,D_TYPE,,0,,,
2027,tf.keras.layers.Concatenate,axis,Axis along which to concatenate.,axis along which to concatenate,int,,,,,
2028,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",Example If you are passing a D_STRUCTURE that can be either a matrix or a batch of matrices at runtime pass axis BSTR instead of axis None to make sure that matrix norms are computed,,,,,,
2029,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If axis is a CONSTANT_NUM D_STRUCTURE of Python D_TYPE it is considered a batch of matrices and axis determines the axes in D_STRUCTURE over which to compute a matrix norm,int,,,,,D_STRUCTURE
2030,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If axis is a Python D_TYPE the input is considered a batch of D_STRUCTURE and axis determines the axis inD_STRUCTURE over which to compute D_STRUCTURE norms,D_TYPE,,0,,,
2031,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",If axis is QSTR BSTR the input is considered a D_STRUCTURE and a single D_STRUCTURE norm is computed over the entire set of values in the D_STRUCTURE i e,int,,,,,D_STRUCTURE
2032,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",Negative indices are supported,,,,,,
2033,tf.linalg.normalize,axis,"If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`. If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms. If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass`axis=[-2,-1]` instead of `axis=None` to make sure that matrix norms are computed.",norm D_STRUCTURE PARAM PARAM QSTR norm reshape D_STRUCTURE BSTR PARAM PARAM,D_TYPE,,CONSTANT_NUM,,,D_STRUCTURE
2034,tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,,,,,,
2035,tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,,,,BSTR,,
2036,tf.math.reduce_logsumexp,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,int,,,,,
2037,tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",If QSTR BSTR reduces all dimensions,,,,,,
2038,tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",Must be in the range BSTR,,,,BSTR,,
2039,tf.math.reduce_mean,axis,"The dimensions to reduce. If `None` (the default), reduces all dimensions. Must be in the range `[-rank(input_tensor), rank(input_tensor))`.",The dimensions to reduce,int,,,,,
2040,tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,A scalar D_TYPE D_STRUCTURE indicating the axis to frame,D_TYPE,,0,,,D_STRUCTURE
2041,tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,Defaults to the last axis,,,,,,
2042,tf.signal.frame,axis,A scalar integer `Tensor` indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.,Supports negative values for indexing from the end,,,,,,
2043,tf.gather_nd,batch_dims,An integer or a scalar 'Tensor'. The number of batch dimensions.,An D_TYPE or a scalar QSTR,D_TYPE,,0,,,D_STRUCTURE
2044,tf.gather_nd,batch_dims,An integer or a scalar 'Tensor'. The number of batch dimensions.,The number of batch dimensions,int,,0,"[0,inf)",,
2045,tf.keras.backend.normalize_batch_in_training,beta,Tensor with which to center the input.,D_STRUCTURE with which to center the input,,,,,,D_STRUCTURE
2046,tf.nn.batch_norm_with_global_normalization,beta,A 1D beta Tensor with size matching the last dimension of t. An offset to be added to the normalized tensor.,A CONSTANT_NUM D beta D_STRUCTURE with size matching the last dimension of t An offset to be added to the normalized D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
2047,tf.keras.layers.LayerNormalization,beta_constraint,Optional constraint for the beta weight.,Optional constraint for the beta weight,,,,,,
2048,tf.keras.layers.BatchNormalization,beta_regularizer,Optional regularizer for the beta weight.,Optional regularizer for the beta weight,,,,,,
2049,tf.nn.bias_add,bias,"A 1-D `Tensor` with size matching the channel dimension of `value`. Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",A CONSTANT_NUM D D_STRUCTURE with size matching the channel dimension of PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
2050,tf.nn.bias_add,bias,"A 1-D `Tensor` with size matching the channel dimension of `value`. Must be the same type as `value` unless `value` is a quantized type, in which case a different quantized type may be used.",Must be the same type as PARAM unless PARAM is a quantized type in which case a different quantized type may be used,&PARAM,,,,,
2051,tf.keras.layers.LocallyConnected1D,bias_constraint,Constraint function applied to the bias vector.,Constraint function applied to the bias D_STRUCTURE,,,,,,
2052,tf.keras.layers.ConvLSTM2D,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
2053,tf.keras.layers.Dense,bias_initializer,Initializer for the bias vector.,Initializer for the bias D_STRUCTURE,,,,,,
2054,tf.keras.layers.SimpleRNN,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Default QSTR,,,,,,
2055,tf.keras.layers.SimpleRNN,bias_initializer,Initializer for the bias vector. Default: `zeros`.,Initializer for the bias D_STRUCTURE,,,,,,
2056,tf.io.decode_compressed,bytes,A `Tensor` of type `string`. A Tensor of string which is compressed.,A D_STRUCTURE of D_TYPE which is compressed,D_TYPE,,,,,D_STRUCTURE
2057,tf.io.decode_compressed,bytes,A `Tensor` of type `string`. A Tensor of string which is compressed.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2058,tf.compat.as_text,bytes_or_text,"A `bytes`, `str`, or `unicode` object.",A QSTR D_TYPE or QSTR object,D_TYPE,,0,,,
2059,tf.keras.utils.get_file,cache_dir,"Location to store cached files, when None it defaults to the Keras   Directory.",Location to store cached files when None it defaults to the Keras Directory,,,,,,
2060,tf.feature_column.embedding_column,categorical_column,A `CategoricalColumn` created by a`categorical_column_with_*` function. This column produces the sparse IDs that are inputs to the embedding lookup.,A QSTR created by a categorical_column_with function,,,,,,
2061,tf.feature_column.embedding_column,categorical_column,A `CategoricalColumn` created by a`categorical_column_with_*` function. This column produces the sparse IDs that are inputs to the embedding lookup.,This column produces the sparse IDs that are inputs to the embedding lookup,int,,,"[0,inf)",,
2062,tf.keras.preprocessing.image.apply_channel_shift,channel_axis,Index of axis for channels in the input tensor.`,Index of axis for channels in the input D_STRUCTURE,int,,,,,
2063,tf.keras.preprocessing.image.random_shear,channel_axis,Index of axis for channels in the input tensor.,Index of axis for channels in the input D_STRUCTURE,int,,,,,
2064,tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,An optional D_TYPE,D_TYPE,,0,,,
2065,tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Defaults to CONSTANT_NUM,,,,,,
2066,tf.io.decode_image,channels,An optional `int`. Defaults to `0`. Number of color channels for the decoded image.,Number of color channels for the decoded image,int,,0,"[0,inf)",,
2067,tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",if CONSTANT_BOOL BSTR types of sequences are checked as well including the keys of dictionaries,bool,,0,,,
2068,tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",If set to CONSTANT_BOOL for example a D_STRUCTURE of objects will look the same if they have the same size,bool,,0,,,
2069,tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",Note that namedtuples with identical name and fields are always considered to have the same shallow structure,,,,,,
2070,tf.nest.assert_same_structure,check_types,"if `True` (default) types of sequences are checked as well, including the keys of dictionaries. If set to `False`, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",Two types will also be considered the same if they are both D_STRUCTURE subtypes which allows QSTR from trackable dependency tracking to compare equal,,,,,,
2071,tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Currently saving object based checkpoints from QSTR is only supported by Functional and Sequential models,,,,,,
2072,tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Estimators use name based tf train Saver checkpoints while Keras models use object based checkpoints from tf train Checkpoint,,,,,,
2073,tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",May be QSTR depending on whether to save checkpoints from tf compat v1 train Saver QSTR tf train Checkpoint,,,,,,
2074,tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",Sets the format of the checkpoint saved by the estimator when training,,,,,,
2075,tf.keras.estimator.model_to_estimator,checkpoint_format,"Sets the format of the checkpoint saved by the estimator when training. May be `saver` or `checkpoint`, depending on whether to save checkpoints from `tf.compat.v1.train.Saver` or `tf.train.Checkpoint`. The default is `checkpoint`. Estimators use name-based `tf.train.Saver`checkpoints, while Keras models use object-based checkpoints from`tf.train.Checkpoint`. Currently, saving object-based checkpoints from`model_to_estimator` is only supported by Functional and Sequential models.",The default is QSTR,,,,,,
2076,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",A D_STRUCTURE,,,,,,D_STRUCTURE
2077,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",Cholesky factorization of QSTR e g,,,,,,
2078,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",For that reason only the lower triangular parts BSTR of the last two dimensions of chol are used,,,,,,
2079,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",Must be D_TYPE shape is BSTR,D_TYPE,BSTR,,,,
2080,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",The strictly upper part is assumed to be zero and not accessed,,,,,,
2081,tf.linalg.cholesky_solve,chol,"A `Tensor`.  Must be `float32` or `float64`, shape is `[..., M, M]`. Cholesky factorization of `A`, e.g. `chol = tf.linalg.cholesky(A)`. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of `chol` are used.  The strictly upper part is assumed to be zero and not accessed.",chol tf linalg cholesky BSTR,,,,,,
2082,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",A optional D_STRUCTURE of default values for the CSV fields,,,,,,D_STRUCTURE
2083,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",Each item in the D_STRUCTURE is either a valid CSV dtype BSTR or aD_STRUCTURE with one of the aforementioned types,,,,,,
2084,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If a dtype is provided instead of a D_STRUCTURE the column is also treated as required,,,,,,
2085,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If both this and PARAM are specified these must have the same lengths and column_defaults is assumed to be sorted in order of increasing column index,,,,,,
2086,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",If this D_STRUCTURE is not provided tries to infer types based on reading the first PARAM rows of files specified and assumes all columns are optional defaulting to CONSTANT_NUMfor D_TYPE values and for D_TYPE values,,,,,,
2087,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",One item per selected column of the input record,,,,,,
2088,tf.data.experimental.make_csv_dataset,column_defaults,"A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values. If both this and`select_columns` are specified, these must have the same lengths, and`column_defaults` is assumed to be sorted in order of increasing column index.",The D_STRUCTURE can either be a scalar default value BSTR,,,,,,
2089,tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",A D_TYPE specifying how to reduce if there are multiple entries in a single row,D_TYPE,,0,,,
2090,tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",Currently QSTR are supported with QSTR the default,,,,,QSTR,
2091,tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",Each of this can be thought as example level normalizations on the column,,,,,,
2092,tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",For more information see tf embedding_lookup_sparse,,,,,,
2093,tf.feature_column.embedding_column,combiner,"A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see`tf.embedding_lookup_sparse`.",QSTR often achieves good accuracy in particular with bag of words columns,,,,,,
2094,tf.nn.safe_embedding_lookup_sparse,combiner,"A string specifying how to combine embedding results for each entry. Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",A D_TYPE specifying how to combine embedding results for each entry,D_TYPE,,0,,,
2095,tf.nn.safe_embedding_lookup_sparse,combiner,"A string specifying how to combine embedding results for each entry. Currently ""mean"", ""sqrtn"" and ""sum"" are supported, with ""mean"" the default.",Currently QSTR are supported with QSTR the default,,,,,QSTR,
2096,tf.audio.decode_wav,contents,"A `Tensor` of type `string`. The WAV-encoded audio, usually from a file.",A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2097,tf.audio.decode_wav,contents,"A `Tensor` of type `string`. The WAV-encoded audio, usually from a file.",The WAV encoded audio usually from a file,,,,,,
2098,tf.io.parse_sequence_example,context_features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values. These features are associated with a `SequenceExample` as a whole.,A D_STRUCTURE mapping feature keys to QSTR values,,,,,,D_STRUCTURE
2099,tf.io.parse_sequence_example,context_features,A `dict` mapping feature keys to `FixedLenFeature` or`VarLenFeature` or `RaggedFeature` values. These features are associated with a `SequenceExample` as a whole.,These features are associated with a QSTR as a whole,,,,,,
2100,tf.keras.estimator.model_to_estimator,custom_objects,Dictionary for custom objects.,D_STRUCTURE for custom objects,,,,,,D_STRUCTURE
2101,tf.keras.layers.deserialize,custom_objects,dict mapping class names (or function names) of custom (non-Keras) objects to class/functions,D_STRUCTURE mapping class names BSTR objects to class functions,,,,,,D_STRUCTURE
2102,tf.keras.preprocessing.image.random_shear,cval,Value used for points outside the boundaries     of the input if `mode='constant'`.,Value used for points outside the boundaries of the input if mode QSTR,,,,,,
2103,tf.debugging.assert_shapes,data,The tensors to print out if the condition is False.  Defaults to error message and first few entries of the violating tensor.,Defaults to error PARAM and first few entries of the violating D_STRUCTURE,,,,,,
2104,tf.debugging.assert_shapes,data,The tensors to print out if the condition is False.  Defaults to error message and first few entries of the violating tensor.,The D_STRUCTURE to print out if the condition is CONSTANT_BOOL,,,,,,D_STRUCTURE
2105,tf.fingerprint,data,A `Tensor`. Must have rank 1 or higher.,A D_STRUCTURE,,,,,,D_STRUCTURE
2106,tf.fingerprint,data,A `Tensor`. Must have rank 1 or higher.,Must have rank CONSTANT_NUM or higher,,,>=CONSTANT_NUM,,,
2107,tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",A D_STRUCTURE representing audio data with shape BSTR where QSTR is the number of audio clips QSTR is the number of frames and QSTR is the number of channels,int,BSTR,,"[-1.0,1.0]",,D_STRUCTURE
2108,tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",Any of the dimensions may be statically unknown i e QSTR,,,,,,
2109,tf.summary.audio,data,"A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels. Elements should be floating-point values in `[-1.0, 1.0]`. Any of the dimensions may be statically unknown (i.e., `None`).",Elements should be D_TYPE values in BSTR,D_TYPE,,,BSTR,,
2110,tf.keras.backend.local_conv1d,data_format,"the data format, channels_first or channels_last.",the data format channels_first or channels_last,,,,,channels_first;channels_last,
2111,tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
2112,tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
2113,tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
2114,tf.keras.layers.AveragePooling2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,,
2115,tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
2116,tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
2117,tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
2118,tf.keras.layers.Conv3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,,,,,,
2119,tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
2120,tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
2121,tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
2122,tf.keras.layers.ConvLSTM2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, time, ..., channels)`while `channels_first` corresponds to inputs with shape `(batch, time, channels, ...)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,,,,,,
2123,tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
2124,tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
2125,tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
2126,tf.keras.layers.Cropping2D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR,,,,,,
2127,tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",A D_TYPE one of QSTR BSTR or QSTR,D_TYPE,,0,,QSTR,
2128,tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",If you never set it then it will be QSTR,,,,,,
2129,tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",It defaults to the QSTR value found in your Keras config file at keras keras json,,,,,,
2130,tf.keras.layers.Cropping3D,data_format,"A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be ""channels_last"".",The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR,,,,,,
2131,tf.nn.avg_pool2d,data_format,A string. 'NHWC' and 'NCHW' are supported.,A D_TYPE,D_TYPE,,0,,,
2132,tf.nn.avg_pool2d,data_format,A string. 'NHWC' and 'NCHW' are supported.,QSTR are supported,,,,,QSTR,
2133,tf.nn.conv2d_transpose,data_format,A string. 'NHWC' and 'NCHW' are supported.,A D_TYPE,D_TYPE,,0,,,
2134,tf.nn.conv2d_transpose,data_format,A string. 'NHWC' and 'NCHW' are supported.,QSTR are supported,,,,,QSTR,
2135,tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Alternatively the format could be QSTR the data storage order of BSTR,,,,,,
2136,tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",An optional D_TYPE from QSTR,D_TYPE,,0,,QSTR,
2137,tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Defaults to QSTR,,,,,,
2138,tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",Specify the data format of the PARAM and output data,,,,,,
2139,tf.nn.depthwise_conv2d_backprop_filter,data_format,"An optional `string` from: `""NHWC"", ""NCHW""`. Defaults to `""NHWC""`. Specify the data format of the input and output data. With the default format ""NHWC"", the data is stored in the order of:   [batch, height, width, channels]. Alternatively, the format could be ""NCHW"", the data storage order of:   [batch, channels, height, width].",With the default format QSTR the data is stored in the order of BSTR,,,,,,
2140,tf.nn.max_pool1d,data_format,"An optional string from: ""NWC"", ""NCW"". Defaults to ""NWC"".",An optional D_TYPE from QSTR,D_TYPE,,0,,QSTR,
2141,tf.nn.max_pool1d,data_format,"An optional string from: ""NWC"", ""NCW"". Defaults to ""NWC"".",Defaults to QSTR,,,,,,
2142,tf.feature_column.sequence_categorical_column_with_identity,default_value,"If `None`, this column's graph operations will fail for out-of-range inputs. Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",If QSTR this column graph operations will fail for out of range inputs,,,,,,
2143,tf.feature_column.sequence_categorical_column_with_identity,default_value,"If `None`, this column's graph operations will fail for out-of-range inputs. Otherwise, this value must be in the range`[0, num_buckets)`, and will replace out-of-range inputs.",Otherwise this value must be in the range BSTR and will replace out of range inputs,,,,,,
2144,tf.keras.layers.SeparableConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The number of depthwise convolution output channels for each input channel,int,,0,"[0,inf)",,
2145,tf.keras.layers.SeparableConv2D,depth_multiplier,The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to `filters_in * depth_multiplier`.,The total number of depthwise convolution output channels will be equal to filters_in depth_multiplier,,,,,,
2146,tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Defaults to empty,,,,,,
2147,tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Markdown is supported,,,,,,
2148,tf.summary.scalar,description,"Optional long-form description for this summary, as a constant `str`. Markdown is supported. Defaults to empty.",Optional long form description for this summary as a constant D_TYPE,D_TYPE,,,,,
2149,tf.device,device_name,The device name to use in the context.,The device name to use in the context,string,,0,,,
2150,tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the dilation rate to use for dilated convolution,D_TYPE,[CONSTANT_NUM],,"[0,1]",,D_STRUCTURE
2151,tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
2152,tf.keras.layers.Conv2D,dilation_rate,"an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.",Currently specifying any dilation_rate value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM,,,,,,
2153,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM defaults to CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],0;1,,,D_STRUCTURE
2154,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",By default the QSTR dimensions are set to CONSTANT_NUM,,,,,,
2155,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",If a single value is given it is replicated in the QSTR dimension,,,,,,
2156,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",If set to k REXPR there will be k CONSTANT_NUM skipped cells between each filter element on that dimension,,,,,,
2157,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",The dilation factor for each dimension of PARAM,,,,,,
2158,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",The dimension order is determined by the value of PARAM see above for details,,,,,,
2159,tf.nn.conv2d_transpose,dilations,"An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1. The dilation factor for each dimension of`input`. If a single value is given it is replicated in the `H` and `W` dimension. By default the `N` and `C` dimensions are set to 1. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of `data_format`, see above for details. Dilations in the batch and depth dimensions if a 4-d tensor must be 1.",dilations in the batch and depth dimensions if a CONSTANT_NUM d D_STRUCTURE must be CONSTANT_NUM,,,,,,
2160,tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",A D_STRUCTURE of D_TYPE that has length REXPR,D_TYPE,[REXPR],,,,D_STRUCTURE
2161,tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",Must be BSTR,D_TYPE,BSTR,,,,
2162,tf.nn.dilation2d,dilations,"A list of `ints` that has length `>= 4`. The input stride for atrous morphological dilation. Must be:`[1, rate_height, rate_width, 1]`.",The PARAM stride for atrous morphological dilation,int,,,"[0,inf)",,
2163,tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",A D_STRUCTURE,,,,,,D_STRUCTURE
2164,tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",CONSTANT_NUM D,,,CONSTANT_NUM,,,
2165,tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2166,tf.fill,dims,"A `Tensor`. Must be one of the following types: `int32`, `int64`. 1-D. Represents the shape of the output tensor.",Represents the shape of the output D_STRUCTURE,int,,1,"[0,inf)",,
2167,tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2168,tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,,,,,,
2169,tf.keras.layers.SimpleRNN,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,,,,"[0,1]",,
2170,tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2171,tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Default CONSTANT_NUM,,,,,,
2172,tf.keras.layers.SimpleRNNCell,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the inputs,,,,"[0,1]",,
2173,tf.keras.backend.random_binomial,dtype,"String, dtype of returned tensor.",D_TYPE dtype of returned D_STRUCTURE,D_TYPE;tf.dtype,,0,,,
2174,tf.keras.backend.variable,dtype,Tensor type.,D_STRUCTURE type,,,,,,D_STRUCTURE
2175,tf.keras.preprocessing.image.img_to_array,dtype,Dtype to use for the returned array.,dtype to use for the returned D_STRUCTURE,tf.dtype,,,,,
2176,tf.signal.hamming_window,dtype,The data type to produce. Must be a floating point type.,Must be a D_TYPE type,D_TYPE,,0,,,
2177,tf.signal.hamming_window,dtype,The data type to produce. Must be a floating point type.,The data type to produce,tf.dtype,,,,,
2178,tf.foldl,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE each of which will be unpacked along their first dimension,,,,,,D_STRUCTURE
2179,tf.foldl,elems,"A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.  The nested sequence of the resulting slices will be the first argument to `fn`.",The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM,,,,,,
2180,tf.keras.backend.map_fn,elems,tensor,D_STRUCTURE,,,,,,D_STRUCTURE
2181,tf.compat.as_text,encoding,A string indicating the charset for decoding unicode.,A D_TYPE indicating the charset for decoding unicode,D_TYPE,,0,,,
2182,tf.strided_slice,end_mask,An `int32` mask.,An D_TYPE mask,D_TYPE,,,,,
2183,tf.autograph.to_graph,entity,Python callable or class to convert.,Python callable or class to convert,,,,,,
2184,tf.keras.backend.batch_normalization,epsilon,Fuzz factor.,Fuzz factor,,,,,,
2185,tf.estimator.add_metrics,estimator,A `tf.estimator.Estimator` object.,A tf estimator estimator object,,,,,,
2186,tf.io.parse_single_sequence_example,example_name,"A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",A scalar BSTR the PARAM of the PARAM proto,string,,0,,,tensor
2187,tf.grad_pass_through,f,function `f(*x)` that returns a `Tensor` or nested structure of `Tensor`outputs.,function f BSTR that returns a D_STRUCTURE or nested structure of D_STRUCTUREoutputs,,,,,,
2188,tf.cond,false_fn,The callable to be performed if pred is false.,The callable to be performed if PARAM is CONSTANT_BOOL,,,,,,
2189,tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,An optional D_TYPE,D_TYPE,,0,,,
2190,tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,Defaults to CONSTANT_BOOL,,,,,,
2191,tf.io.decode_jpeg,fancy_upscaling,An optional `bool`. Defaults to `True`. If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).,If CONSTANT_BOOL use a slower but nicer upscaling of the chroma planes BSTR,bool,,0,,,
2192,tf.data.experimental.make_csv_dataset,file_pattern,List of files or patterns of file paths containing CSV records. See `tf.io.gfile.glob` for pattern rules.,D_STRUCTURE of files or patterns of file paths containing CSV records,,,,,,D_STRUCTURE
2193,tf.data.experimental.make_csv_dataset,file_pattern,List of files or patterns of file paths containing CSV records. See `tf.io.gfile.glob` for pattern rules.,See tf io gfile glob for pattern rules,,,,,,
2194,tf.keras.preprocessing.image.random_shift,fill_mode,"Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",Points outside the boundaries of the input are filled according to the given mode one of QSTR,,,,,QSTR,
2195,tf.keras.layers.LocallyConnected1D,filters,"Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",D_TYPE the dimensionality of the output space i e,D_TYPE,,,,,
2196,tf.keras.layers.LocallyConnected1D,filters,"Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",the number of output filters in the convolution,int,,0,"[0,inf)",,
2197,tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",A CONSTANT_NUM D D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2198,tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",A D_STRUCTURE,,,,,,D_STRUCTURE
2199,tf.nn.conv2d,filters,"A `Tensor`. Must have the same type as `input`. A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",Must have the same type as PARAM,&PARAM,,,,,
2200,tf.nn.convolution,filters,Alias of filter.,Alias of filter,,,,,,
2201,tf.signal.inverse_stft_window_fn,frame_step,An integer scalar `Tensor`. The number of samples to step.,An D_TYPE scalar D_STRUCTURE,D_TYPE,,0,,,D_STRUCTURE
2202,tf.signal.inverse_stft_window_fn,frame_step,An integer scalar `Tensor`. The number of samples to step.,The number of samples to step,int,,0,"[0,inf)",,
2203,tf.py_function,func,"A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",A Python function which accepts a D_STRUCTURE of D_STRUCTURE objects having element types that match the corresponding D_STRUCTURE objects in PARAMand returns a D_STRUCTURE of D_STRUCTURE objects or a single D_STRUCTURE or QSTR having element types that match the corresponding values in PARAM,,,,,,
2204,tf.keras.layers.BatchNormalization,gamma_constraint,Optional constraint for the gamma weight.,Optional constraint for the gamma weight,,,,,,
2205,tf.keras.layers.GRU,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",D_TYPE default CONSTANT_BOOL,D_TYPE,,0,,,
2206,tf.keras.layers.GRU,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",If CONSTANT_BOOL process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE,bool,,0,,,
2207,tf.keras.layers.RNN,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",D_TYPE default CONSTANT_BOOL,D_TYPE,,0,,,
2208,tf.keras.layers.RNN,go_backwards,"Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.",If CONSTANT_BOOL process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE,bool,,0,,,
2209,tf.keras.experimental.terminate_keras_multiprocessing_pools,grace_period,Time (in seconds) to wait for process cleanup to propagate.,Time BSTR to wait for process cleanup to propagate,,,,,,
2210,tf.edit_distance,hypothesis,A `SparseTensor` containing hypothesis sequences.,A D_STRUCTURE containing hypothesis sequences,,,,,,D_STRUCTURE
2211,tf.image.crop_to_bounding_box,image,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2212,tf.image.transpose,image,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2213,tf.image.resize,images,"4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",CONSTANT_NUM D D_STRUCTURE of shape BSTR or CONSTANT_NUM D D_STRUCTURE of shape BSTR,,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2214,tf.image.ssim,img1,First image batch.,First image batch,numeric,,,,,
2215,tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",It is memory efficient but performs a lot of BSTR ops CONSTANT_NUM stores layer weights in a dense but sparsely populated CONSTANT_NUM D matrix and implements the forward pass as a single matrix multiply,,,,,,
2216,tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",It uses a lot of RAM but performs few BSTR ops CONSTANT_NUM stores layer weights in a sparse D_STRUCTURE and implements the forward pass as a single sparse matrix multiply How to choose CONSTANT_NUM large dense models CONSTANT_NUM small models CONSTANT_NUM large sparse models where QSTR stands for large input output activations i e,,,,,,
2217,tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",many PARAM QSTR large np prod BSTR np prod BSTR and QSTR stands for few connections between inputs and outputs i e,,,,,,
2218,tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",small ratio PARAM input_filters np prod BSTR where inputs to and outputs of the layer are assumed to have shapes input_size BSTR output_size BSTR respectively,,,,,,
2219,tf.keras.layers.LocallyConnected2D,implementation,"implementation mode, either `1`, `2`, or `3`.`1` loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops.`2` stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.`3` stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.How to choose:`1`: large, dense models,`2`: small models,`3`: large, sparse models,where ""large"" stands for large input/output activations (i.e. many `filters`, `input_filters`, large `np.prod(input_size)`,`np.prod(output_size)`), and ""sparse"" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * np.prod(kernel_size) / (np.prod(input_size) np.prod(strides))`, where inputs to and outputs of the layer are assumed to have shapes`input_size + (input_filters,)`,`output_size + (filters,)` respectively. ",implementation mode either CONSTANT_NUM CONSTANT_NUM loops over input spatial locations to perform the forward pass,,,,,CONSTANT_NUM,
2220,tf.keras.models.save_model,include_optimizer,"If True, save optimizer's state together.",If CONSTANT_BOOL save optimizer state together,bool,,0,,,
2221,tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",A D_STRUCTURE,,,,,,D_STRUCTURE
2222,tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Index D_STRUCTURE,,,,,,D_STRUCTURE
2223,tf.scatter_nd,indices,"A `Tensor`. Must be one of the following types: `int32`, `int64`. Index tensor.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2224,tf.py_function,inp,A list of `Tensor` objects.,A D_STRUCTURE of D_STRUCTURE objects,,,,,,D_STRUCTURE
2225,tf.linalg.band_part,input,A `Tensor`. Rank `k` tensor.,A D_STRUCTURE,,,,,,D_STRUCTURE
2226,tf.linalg.band_part,input,A `Tensor`. Rank `k` tensor.,Rank QSTR D_STRUCTURE,,,QSTR,,,D_STRUCTURE
2227,tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2228,tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2229,tf.linalg.inv,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",Shape is BSTR,,BSTR,,,,
2230,tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2231,tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",A D_STRUCTURE of shape BSTR whose inner most CONSTANT_NUM dimensions form matrices of size BSTR,,BSTR,,,,D_STRUCTURE
2232,tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",Let QSTR be the minimum of QSTR,,,,,,
2233,tf.linalg.qr,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2234,tf.math.argmax,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2235,tf.math.argmax,input,"A `Tensor`. Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2236,tf.nn.avg_pool1d,input,A 3-D `Tensor` of the format specified by `data_format`.,A CONSTANT_NUM D D_STRUCTURE of the format specified by PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
2237,tf.nn.conv1d,input,"A 3D `Tensor`.  Must be of type `float16`, `float32`, or `float64`.",A CONSTANT_NUM D D_STRUCTURE,,,CONSTANT_NUM,,,D_STRUCTURE
2238,tf.nn.conv1d,input,"A 3D `Tensor`.  Must be of type `float16`, `float32`, or `float64`.",Must be of type D_TYPE,D_TYPE,,,,,
2239,tf.nn.max_pool2d,input,A 4-D `Tensor` of the format specified by `data_format`.,A CONSTANT_NUM D D_STRUCTURE of the format specified by PARAM,,,CONSTANT_NUM,,,D_STRUCTURE
2240,tf.rank,input,A `Tensor` or `SparseTensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
2241,tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",A D_STRUCTURE,,,,,,D_STRUCTURE
2242,tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",A D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2243,tf.signal.fft2d,input,"A `Tensor`. Must be one of the following types: `complex64`, `complex128`. A complex tensor.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2244,tf.strings.lower,input,A `Tensor` of type `string`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2245,tf.strings.to_number,input,A `Tensor` of type `string`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2246,tf.keras.backend.ctc_batch_cost,input_length,"tensor `(samples, 1)` containing the sequence length for each batch item in `y_pred`.",D_STRUCTURE BSTR containing the D_STRUCTURE length for each batch item in PARAM,,,,,,D_STRUCTURE
2247,tf.quantization.quantized_concat,input_maxes,A list with the same length as `values` of `Tensor` objects with type `float32`. The maximum scalar values for each of the input tensors.,A D_STRUCTURE with the same length as PARAM of D_STRUCTURE objects with type D_TYPE,D_TYPE,&PARAM,,,,D_STRUCTURE
2248,tf.quantization.quantized_concat,input_maxes,A list with the same length as `values` of `Tensor` objects with type `float32`. The maximum scalar values for each of the input tensors.,The maximum scalar PARAM for each of the input D_STRUCTURE,numeric,,0,,,
2249,tf.math.reduce_mean,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,,,,,
2250,tf.math.reduce_mean,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,,,,,,D_STRUCTURE
2251,tf.math.reduce_sum,input_tensor,The tensor to reduce. Should have numeric type.,Should have D_TYPE type,D_TYPE,,,,,
2252,tf.math.reduce_sum,input_tensor,The tensor to reduce. Should have numeric type.,The D_STRUCTURE to reduce,,,,,,D_STRUCTURE
2253,tf.keras.backend.function,inputs,List of placeholder tensors.,D_STRUCTURE of placeholder D_STRUCTURE,,,,,,D_STRUCTURE
2254,tf.keras.layers.minimum,inputs,A list of input tensors (at least 2).,A D_STRUCTURE of input D_STRUCTURE BSTR,,,,,,D_STRUCTURE
2255,tf.strings.unsorted_segment_join,inputs,A `Tensor` of type `string`. The input to be joined.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2256,tf.strings.unsorted_segment_join,inputs,A `Tensor` of type `string`. The input to be joined.,The input to be joined,,,,,,
2257,tf.keras.preprocessing.image.apply_channel_shift,intensity,Transformation intensity.,Transformation intensity,,,,,,
2258,tf.keras.preprocessing.image.random_channel_shift,intensity_range,Transformation intensity.,Transformation intensity,,,,,,
2259,tf.keras.layers.UpSampling2D,interpolation,"A string, one of `nearest` or `bilinear`.",A D_TYPE one of QSTR,D_TYPE,,0,,QSTR,
2260,tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",By default QSTR is used,,,,,,
2261,tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",If PIL version CONSTANT_NUM CONSTANT_NUM or newer is installed QSTR are also supported,,,,,,
2262,tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",If PIL version CONSTANT_NUM CONSTANT_NUM or newer is installed QSTR is also supported,,,,,,
2263,tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",Supported methods are QSTR,,,,,QSTR,
2264,tf.keras.preprocessing.image.load_img,interpolation,"Interpolation method used to resample the image if the     target size is different from that of the loaded image.     Supported methods are ""nearest"", ""bilinear"", and ""bicubic"".     If PIL version 1.1.3 or newer is installed, ""lanczos"" is also     supported. If PIL version 3.4.0 or newer is installed, ""box"" and     ""hamming"" are also supported. By default, ""nearest"" is used.`",interpolation method used to resample the image if the target size is different from that of the loaded image,,,,,,
2265,tf.keras.preprocessing.image.random_rotation,interpolation_order,"int, order of spline interpolation.     see `ndimage.interpolation.affine_transform``",D_TYPE order of spline interpolation,D_TYPE,,,,,
2266,tf.keras.preprocessing.image.random_rotation,interpolation_order,"int, order of spline interpolation.     see `ndimage.interpolation.affine_transform``",see ndimage interpolation affine_transform,,,,,,
2267,tf.image.adjust_jpeg_quality,jpeg_quality,Python int or Tensor of type int32. jpeg encoding quality.,jpeg encoding quality,,,,,,
2268,tf.image.adjust_jpeg_quality,jpeg_quality,Python int or Tensor of type int32. jpeg encoding quality.,Python D_TYPE or D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2269,tf.keras.backend.any,keepdims,whether the drop or broadcast the reduction axes.,whether the drop or broadcast the reduction axes,bool,,0,,,
2270,tf.math.count_nonzero,keepdims,"If true, retains reduced dimensions with length 1.",If CONSTANT_BOOL retains reduced dimensions with length CONSTANT_NUM,bool,,0,,,
2271,tf.keras.backend.conv2d_transpose,kernel,kernel tensor.,kernel D_STRUCTURE,,,,,,D_STRUCTURE
2272,tf.keras.layers.Conv3DTranspose,kernel_constraint,Constraint function applied to the kernel matrix.,Constraint function applied to the kernel matrix,,,,,,
2273,tf.keras.layers.GRUCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,,
2274,tf.keras.layers.GRUCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Default QSTR,,,,,,
2275,tf.keras.layers.SimpleRNNCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Constraint function applied to the QSTR weights matrix,,,,,,
2276,tf.keras.layers.SimpleRNNCell,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,Default QSTR,,,,,,
2277,tf.keras.layers.ConvLSTM2D,kernel_initializer,"Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs.",Initializer for the QSTR weights matrix used for the linear transformation of the inputs,,,,,,
2278,tf.keras.layers.LocallyConnected2D,kernel_initializer,Initializer for the `kernel` weights matrix.,Initializer for the QSTR weights matrix,,,,,,
2279,tf.keras.layers.Conv1D,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,,
2280,tf.keras.layers.Conv3D,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,,
2281,tf.keras.layers.Conv3DTranspose,kernel_regularizer,Regularizer function applied to the `kernel` weights matrix.,Regularizer function applied to the QSTR weights matrix,,,,,,
2282,tf.keras.backend.local_conv2d,kernel_size,"a tuple of 2 integers, specifying the width and height of the 2D convolution window.",a D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the width and height of the CONSTANT_NUM D convolution window,D_TYPE,[CONSTANT_NUM],,"[0,inf)",,D_STRUCTURE
2283,tf.keras.layers.Conv2DTranspose,kernel_size,"An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the height and width of the CONSTANT_NUM D convolution window,D_TYPE,[CONSTANT_NUM],,"[0,inf)",,D_STRUCTURE
2284,tf.keras.layers.Conv2DTranspose,kernel_size,"An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
2285,tf.feature_column.sequence_categorical_column_with_identity,key,A unique string identifying the input feature.,A unique D_TYPE identifying the input feature,D_TYPE,,0,,,
2286,tf.nn.avg_pool3d,ksize,"An int or list of `ints` that has length `1`, `3` or `5`. The size of the window for each dimension of the input tensor.",An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],0;1,,,D_STRUCTURE
2287,tf.nn.avg_pool3d,ksize,"An int or list of `ints` that has length `1`, `3` or `5`. The size of the window for each dimension of the input tensor.",The size of the window for each dimension of the PARAM D_STRUCTURE,int,,,"[0,inf)",,
2288,tf.keras.regularizers.l1_l2,l2,Float; L2 regularization factor.,D_TYPE l2 regularization factor,D_TYPE,,,,,
2289,tf.estimator.regressor_parse_example_spec,label_dimension,"Number of regression targets per example. This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",Number of regression targets per example,int,,0,"[0,inf)",,
2290,tf.estimator.regressor_parse_example_spec,label_dimension,"Number of regression targets per example. This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",This is the size of the last dimension of the labels and logits D_STRUCTURE objects typically these have shape BSTR,int,,,"[0,inf)",,
2291,tf.nn.softmax_cross_entropy_with_logits,labels,"Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",Each D_STRUCTURE along the class dimension should hold a valid probability distribution e g,,,,,,
2292,tf.nn.softmax_cross_entropy_with_logits,labels,"Each vector along the class dimension should hold a valid probability distribution e.g. for the case in which labels are of shape`[batch_size, num_classes]`, each row of `labels[i]` must be a valid probability distribution.",for the case in which labels are of shape BSTR each row of labels BSTR must be a valid probability distribution,,,,,,
2293,tf.random.poisson,lam,A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM lam provides the rate parameter BSTR to sample,PARAM,,,,,D_STRUCTURE
2294,tf.sequence_mask,lengths,"integer tensor, all its values <= maxlen.",D_TYPE D_STRUCTURE all its values REXPR,D_TYPE,,,REXPR,,D_STRUCTURE
2295,tf.signal.mfccs_from_log_mel_spectrograms,log_mel_spectrograms,"A `[..., num_mel_bins]` `float32`/`float64` `Tensor`of log-magnitude mel-scale spectrograms.",A BSTR D_TYPE D_STRUCTUREof log magnitude mel scale spectrograms,D_TYPE,BSTR,,,,D_STRUCTURE
2296,tf.estimator.experimental.call_logit_fn,logit_fn,A logit_fn as defined above.,A logit_fn as defined above,,,,,,
2297,tf.keras.preprocessing.text.text_to_word_sequence,lower,boolean. Whether to convert the input to lowercase.,D_TYPE,D_TYPE,,,,,
2298,tf.keras.preprocessing.text.text_to_word_sequence,lower,boolean. Whether to convert the input to lowercase.,Whether to convert the input to lowercase,bool,,0,,,
2299,tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,A potentially ragged D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2300,tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,rank BSTR must be known statically,,,,,,
2301,tf.ragged.boolean_mask,mask,A potentially ragged boolean tensor.  `mask`'s shape must be a prefix of `data`'s shape.  `rank(mask)` must be known statically.,masks shape must be a prefix of PARAMs shape,,,,,,
2302,tf.linalg.logdet,matrix,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2303,tf.linalg.logdet,matrix,"A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",Must be D_TYPE with shape BSTR,D_TYPE,BSTR,,,,
2304,tf.quantization.fake_quant_with_min_max_args_gradient,max,An optional `float`. Defaults to `6`.,An optional D_TYPE,D_TYPE,,0,,,
2305,tf.quantization.fake_quant_with_min_max_args_gradient,max,An optional `float`. Defaults to `6`.,Defaults to CONSTANT_NUM,,,,,,
2306,tf.nn.embedding_lookup_sparse,max_norm,"If not `None`, each embedding is clipped if its l2-norm is larger than this value, before combining.",If not QSTR each embedding is clipped if its l2 norm is larger than this value before combining,,,,,,
2307,tf.nn.safe_embedding_lookup_sparse,max_norm,"If not `None`, all embeddings are l2-normalized to max_norm before combining.",If not QSTR all embeddings are l2 normalized to max_norm before combining,,,,,,
2308,tf.estimator.experimental.stop_if_no_decrease_hook,max_steps_without_decrease,"`int`, maximum number of training steps with no decrease in the given metric.",D_TYPE maximum number of training steps with no decrease in the given metric,D_TYPE,,0,"[0,inf)",,
2309,tf.image.psnr,max_val,"The dynamic range of the images (i.e., the difference between the maximum the and minimum allowed values).",The dynamic range of the images BSTR,,,,,,
2310,tf.keras.backend.clip,max_value,"Python float, integer, or tensor.",Python D_TYPE or D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2311,tf.keras.backend.relu,max_value,float. Saturation threshold.,D_TYPE,D_TYPE,,,,,
2312,tf.keras.backend.relu,max_value,float. Saturation threshold.,Saturation PARAM,,,,,,
2313,tf.random.normal,mean,"A Tensor or Python value of type `dtype`, broadcastable with `stddev`. The mean of the normal distribution.",A D_STRUCTURE or Python value of type PARAM broadcastable with PARAM,PARAM,,,,,D_STRUCTURE
2314,tf.random.normal,mean,"A Tensor or Python value of type `dtype`, broadcastable with `stddev`. The mean of the normal distribution.",The mean of the normal distribution,numeric,,,,,
2315,tf.io.encode_proto,message_type,A `string`. Name of the proto message type to decode.,A D_TYPE,D_TYPE,,0,,,
2316,tf.io.encode_proto,message_type,A `string`. Name of the proto message type to decode.,PARAM of the proto message type to decode,string,,,,,
2317,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient,min,A `Tensor` of type `float32`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2318,tf.keras.backend.clip,min_value,"Python float, integer, or tensor.",Python D_TYPE or D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2319,tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,A CONSTANT_NUM D D_STRUCTURE or Python value of type PARAM,PARAM,,CONSTANT_NUM,,,D_STRUCTURE
2320,tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,Defaults to CONSTANT_NUM,,,,,,
2321,tf.random.stateless_uniform,minval,A 0-D Tensor or Python value of type `dtype`. The lower bound on the range of random values to generate.  Defaults to 0.,The lower bound on the range of random values to generate,,,,,,
2322,tf.debugging.Assert,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
2323,tf.debugging.assert_greater,name,"A name for this operation (optional).  Defaults to ""assert_greater"".",A name for this operation BSTR,string,,0,,,
2324,tf.debugging.assert_greater,name,"A name for this operation (optional).  Defaults to ""assert_greater"".",Defaults to QSTR,,,,,,
2325,tf.debugging.assert_shapes,name,"A name for this operation (optional).  Defaults to ""assert_shapes"".",A name for this operation BSTR,string,,0,,,
2326,tf.debugging.assert_shapes,name,"A name for this operation (optional).  Defaults to ""assert_shapes"".",Defaults to QSTR,,,,,,
2327,tf.debugging.check_numerics,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2328,tf.dynamic_partition,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2329,tf.expand_dims,name,Optional string. The name of the output `Tensor`.,Optional D_TYPE,D_TYPE,,,,,
2330,tf.expand_dims,name,Optional string. The name of the output `Tensor`.,The name of the output D_STRUCTURE,string,,0,,,
2331,tf.histogram_fixed_width_bins,name,A name for this operation (defaults to 'histogram_fixed_width').,A name for this operation defaults to QSTR,string,,0,,,
2332,tf.image.combined_non_max_suppression,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2333,tf.image.draw_bounding_boxes,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2334,tf.image.hsv_to_rgb,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2335,tf.image.random_crop,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
2336,tf.io.decode_image,name,A name for the operation (optional),A name for the operation BSTR,string,,0,,,
2337,tf.io.encode_proto,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2338,tf.io.parse_single_example,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
2339,tf.io.read_file,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2340,tf.keras.experimental.SequenceFeatures,name,Name to give to the SequenceFeatures.,name to give to the SequenceFeatures,string,,0,,,
2341,tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,An optional name D_TYPE for the layer,D_TYPE,,0,,,
2342,tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,It will be autogenerated if it isn t provided,,,,,,
2343,tf.keras.Input,name,An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.,Should be unique in a model BSTR,,,,,,
2344,tf.linalg.cholesky,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2345,tf.linalg.logm,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2346,tf.linalg.lu_reconstruct,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_reconstruct').",Default value QSTR i e QSTR,,,,,,
2347,tf.linalg.lu_reconstruct,name,"Python `str` name given to ops managed by this object. Default value: `None` (i.e., 'lu_reconstruct').",Python D_TYPE name given to ops managed by this object,D_TYPE,,,,,
2348,tf.linalg.matrix_transpose,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2349,tf.linalg.pinv,name,Python `str` prefixed to ops created by this function. Default value: 'pinv'.,Default value QSTR,,,,,,
2350,tf.linalg.pinv,name,Python `str` prefixed to ops created by this function. Default value: 'pinv'.,Python D_TYPE prefixed to ops created by this function,D_TYPE,,,,,
2351,tf.linalg.set_diag,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2352,tf.linalg.solve,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2353,tf.linalg.tensor_diag,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2354,tf.linspace,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2355,tf.math.add_n,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2356,tf.math.cumprod,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2357,tf.math.is_non_decreasing,name,"A name for this operation (optional).  Defaults to ""is_non_decreasing""",A name for this operation BSTR,string,,0,,,
2358,tf.math.is_non_decreasing,name,"A name for this operation (optional).  Defaults to ""is_non_decreasing""",Defaults to QSTR,,,,,,
2359,tf.math.l2_normalize,name,A name for this operation (optional).,A name for this operation BSTR,string,,0,,,
2360,tf.math.not_equal,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2361,tf.math.reciprocal,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2362,tf.math.reduce_logsumexp,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2363,tf.math.segment_min,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2364,tf.math.sigmoid,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2365,tf.math.sqrt,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2366,tf.math.zero_fraction,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2367,tf.nn.atrous_conv2d_transpose,name,Optional name for the returned tensor.,Optional name for the returned D_STRUCTURE,string,,0,,,
2368,tf.nn.avg_pool,name,Optional name for the operation.,Optional name for the operation,string,,0,,,
2369,tf.nn.avg_pool2d,name,Optional name for the operation.,Optional name for the operation,string,,0,,,
2370,tf.nn.avg_pool3d,name,Optional name for the operation.,Optional name for the operation,string,,0,,,
2371,tf.nn.max_pool_with_argmax,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2372,tf.nn.normalize_moments,name,Name used to scope the operations that compute the moments.,name used to scope the operations that compute the moments,string,,,,,
2373,tf.no_op,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2374,tf.reduce_all,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2375,tf.scatter_nd,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2376,tf.shape,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2377,tf.space_to_batch,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2378,tf.sparse.cross,name,Optional name for the op.,Optional name for the op,string,,0,,,
2379,tf.sparse.slice,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2380,tf.strings.ngrams,name,The op name.,The op name,string,,0,,,
2381,tf.strings.split,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2382,tf.strings.unicode_transcode,name,A name for the operation (optional).,A name for the operation BSTR,string,,0,,,
2383,tf.summary.create_file_writer,name,a name for the op that creates the writer.,a name for the op that creates the writer,string,,0,,,
2384,tf.zeros,name,Optional string. A name for the operation.,A name for the operation,string,,0,,,
2385,tf.zeros,name,Optional string. A name for the operation.,Optional D_TYPE,D_TYPE,,,,,
2386,tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Optional specification for ngrams to create from the possibly PARAM input text,,,,,,
2387,tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Passing None means that no ngrams will be created,,,,,,
2388,tf.keras.layers.experimental.preprocessing.TextVectorization,ngrams,"Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.",Values can be None an D_TYPE or D_STRUCTURE of D_TYPE passing an D_TYPE will create ngrams up to that D_TYPE and passing a D_STRUCTURE of D_TYPE will create ngrams for the specified values in the D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2389,tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",e g,,,,,,
2390,tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",If not QSTR a function that can be used to normalize the value of the D_STRUCTURE after PARAM is applied for parsing,,,,,,
2391,tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",lambda x BSTR,,,,,,
2392,tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Normalizer function takes the input D_STRUCTURE as its argument and returns the output D_STRUCTURE,,,,,,
2393,tf.feature_column.numeric_column,normalizer_fn,"If not `None`, a function that can be used to normalize the value of the tensor after `default_value` is applied for parsing. Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.",Please note that even though the most common use case of this function is normalization it can be used for any kind of Tensorflow transformations,,,,,,
2394,tf.sparse.eye,num_columns,Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix. Defaults to `num_rows`.,Defaults to PARAM,,,,,,
2395,tf.sparse.eye,num_columns,Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix. Defaults to `num_rows`.,Optional non negative D_TYPE scalar D_STRUCTURE giving the number of columns in the resulting matrix,D_TYPE,,0,"[0,inf)",,D_STRUCTURE
2396,tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",A positive num_oov_buckets can not be specified with PARAM,,,,,,
2397,tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value,,,,,,
2398,tf.feature_column.categorical_column_with_vocabulary_list,num_oov_buckets,"Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a hash of the input value. A positive `num_oov_buckets` can not be specified with `default_value`.",Non negative D_TYPE the number of out of vocabulary buckets,D_TYPE,,0,"[0,inf)",,
2399,tf.random.fixed_unigram_candidate_sampler,num_sampled,An `int`.  The number of classes to randomly sample.,An D_TYPE,D_TYPE,,0,,,
2400,tf.random.fixed_unigram_candidate_sampler,num_sampled,An `int`.  The number of classes to randomly sample.,The number of classes to randomly sample,int,,0,"[0,inf)",,
2401,tf.math.unsorted_segment_min,num_segments,"A `Tensor`. Must be one of the following types: `int32`, `int64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2402,tf.math.unsorted_segment_min,num_segments,"A `Tensor`. Must be one of the following types: `int32`, `int64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2403,tf.sparse.segment_mean,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,An optional D_TYPE scalar,D_TYPE,,0,,,
2404,tf.sparse.segment_mean,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,Indicates the size of the outputD_STRUCTURE,int,,,"[0,inf)",,
2405,tf.config.threading.set_inter_op_parallelism_threads,num_threads,Number of parallel threads,Number of parallel threads,int,,0,"[0,inf)",,
2406,tf.test.create_local_cluster,num_workers,Number of worker servers to start.,Number of worker servers to start,int,,0,"[0,inf)",,
2407,tf.image.extract_glimpse,offsets,"A `Tensor` of type `float32`. A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR containing the y x locations of the center of each window,D_TYPE,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2408,tf.image.extract_glimpse,offsets,"A `Tensor` of type `float32`. A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2409,tf.keras.datasets.imdb.load_data,oov_char,words that were cut out because of the `num_words`or `skip_top` limit will be replaced with this character.,words that were cut out because of the PARAMor PARAM limit will be replaced with this character,,,,,,
2410,tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",Dump data from only the D_STRUCTURE from op types that matches to the regular expression through Python re match,,,,,,
2411,tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",It does not refer to the names of nodes e g dense MatMul dense_1 MatMul_1 which are unique within a function REXPR REXPR REXPR CONSTANT_NUM Dump D_STRUCTURE data from only MatMul and Relu ops op_regex MatMul Relu,,,,,,
2412,tf.debugging.experimental.enable_dump_debug_info,op_regex,"Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`). ""Op type"" refers to the names of the TensorFlow operations (e.g., ""MatMul"", ""LogSoftmax""), which may repeat in a TensorFlow function. It does not refer to the names of nodes (e.g., ""dense/MatMul"", ""dense_1/MatMul_1"") which are unique within a function.<ul><li>Example 1: Dump tensor data from only MatMul and Relu ops`op_regex=""^(MatMul|Relu)$""`.",QSTR refers to the names of the TensorFlow operations e g QSTR which may repeat in a TensorFlow function,,,,,,
2413,tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Default is QSTR which is equivalent to Frobenius norm ifD_STRUCTURE is a matrix and equivalent to CONSTANT_NUM norm for D_STRUCTURE,,,,,,
2414,tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Order of the norm,,,,,,
2415,tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",See the description of PARAM on how to compute norms for a batch of D_STRUCTURE or matrices stored in a D_STRUCTURE,,,,,,
2416,tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Some restrictions apply a The Frobenius norm QSTR is not defined for D_STRUCTURE b If PARAM is a CONSTANT_NUM D_STRUCTURE BSTR only QSTR CONSTANT_NUM np inf are supported,,,,,,
2417,tf.norm,ord,"Order of the norm. Supported values are `'fro'`, `'euclidean'`,`1`, `2`, `np.inf` and any positive real number yielding the corresponding p-norm. Default is `'euclidean'` which is equivalent to Frobenius norm if`tensor` is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm `'fro'` is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only `'euclidean'`, '`fro'`, `1`,    `2`, `np.inf` are supported. See the description of `axis` on how to compute norms for a batch of vectors or matrices stored in a tensor.",Supported values are QSTR CONSTANT_NUM np inf and any positive real number yielding the corresponding p norm,,,,,QSTR;CONSTANT_NUM,
2418,tf.shape_n,out_type,The specified output type of the operation (`int32` or `int64`). Defaults to `tf.int32`(optional).,Defaults to D_TYPE BSTR,,,,,,
2419,tf.shape_n,out_type,The specified output type of the operation (`int32` or `int64`). Defaults to `tf.int32`(optional).,The specified output type of the operation BSTR,tf.dtype,,,,BSTR,
2420,tf.keras.backend.conv2d_transpose,output_shape,1D int tensor for the output shape.,CONSTANT_NUM D D_TYPE D_STRUCTURE for the output shape,,,CONSTANT_NUM,,,D_STRUCTURE
2421,tf.io.gfile.rename,overwrite,"boolean, if false it's an error for `dst` to be occupied by an existing file.",D_TYPE if CONSTANT_BOOL it an error for PARAM to be occupied by an existing file,D_TYPE,,0,,,
2422,tf.keras.utils.register_keras_serializable,package,The package that this class belongs to.,The package that this class belongs to,,,,,,
2423,tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",Defaults to CONSTANT_BOOL,,,,,,
2424,tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",If CONSTANT_BOOL the output will have its feature axis padded to PARAM even if the number of unique tokens in the vocabulary is less than PARAM resulting in a D_STRUCTURE of shape BSTR regardless of vocabulary size,bool,,0,,,
2425,tf.keras.layers.experimental.preprocessing.TextVectorization,pad_to_max_tokens,"Only valid in  ""binary"", ""count"", and ""tf-idf"" modes. If True, the output will have its feature axis padded to `max_tokens` even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.",Only valid in QSTR modes,,,,,,
2426,tf.extract_volume_patches,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.We specify the size-related attributes as:",A D_TYPE from QSTR,D_TYPE,,0,,QSTR,
2427,tf.extract_volume_patches,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.We specify the size-related attributes as:",The type of padding algorithm to use We specify the size related attributes as,,,,,,
2428,tf.keras.backend.pool2d,padding,"string, `""same""` or `""valid""`.",D_TYPE QSTR,D_TYPE,,0,,QSTR,
2429,tf.keras.backend.temporal_padding,padding,"Tuple of 2 integers, how many zeros to add at the start and end of dim 1.",D_STRUCTURE of CONSTANT_NUM D_TYPE how many zeros to add at the start and end of dim CONSTANT_NUM,D_TYPE,[CONSTANT_NUM],,"[0,inf)",,D_STRUCTURE
2430,tf.keras.layers.SeparableConv1D,padding,"One of `""valid""`, `""same""`, or `""causal""` (case-insensitive).",One of QSTR BSTR,,,,,QSTR,
2431,tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",A D_TYPE either QSTR,D_TYPE,,0,,QSTR,
2432,tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",See the QSTR section of tf nn convolution for details,,,,,,
2433,tf.nn.conv2d_transpose,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",The padding algorithm,,,,,,
2434,tf.nn.dilation2d,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.",A D_TYPE from QSTR,D_TYPE,,0,,QSTR,
2435,tf.nn.dilation2d,padding,"A `string` from: `""SAME"", ""VALID""`. The type of padding algorithm to use.",The type of padding algorithm to use,,,,,,
2436,tf.foldl,parallel_iterations,(optional) The number of iterations allowed to run in parallel.,BSTR The number of iterations allowed to run in parallel,int,,0,"[0,inf)",,
2437,tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",CONSTANT_BOOL by default,bool,,0,,,
2438,tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",Partial pivoting is unnecessary in some cases including diagonally dominant and symmetric positive definite matrices see e g,,,,,,
2439,tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",Partial pivoting makes the procedure more stable but slower,,,,,,
2440,tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",theorem CONSTANT_NUM in BSTR,,,,,,
2441,tf.linalg.tridiagonal_solve,partial_pivoting,"whether to perform partial pivoting. `True` by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).",whether to perform partial pivoting,bool,,0,,,
2442,tf.io.gfile.listdir,path,"string, path to a directory",D_TYPE path to a directory,D_TYPE,,,,,
2443,tf.io.gfile.mkdir,path,"string, name of the directory to be created",D_TYPE name of the directory to be created,D_TYPE,,0,,,
2444,tf.io.gfile.remove,path,"string, a path",D_TYPE a path,D_TYPE,,,,,
2445,tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,An D_TYPE specifying the number of feature batches to prefetch for performance improvement,D_TYPE,,0,"[0,inf)",,
2446,tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,Defaults to auto tune,,,,,,
2447,tf.data.experimental.make_csv_dataset,prefetch_buffer_size,An int specifying the number of feature batches to prefetch for performance improvement. Recommended value is the number of batches consumed per training step. Defaults to auto-tune.,Recommended value is the number of batches consumed per training step,,,,,,
2448,tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",An QSTR proto with the BSTR D_STRUCTURE of QSTR used by the producer of the graph,,,,,,D_STRUCTURE
2449,tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",BSTR,,,,,,
2450,tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",If provided unrecognized attrs for ops in PARAM that have their default value according to producer_op_list will be removed,,,,,,
2451,tf.graph_util.import_graph_def,producer_op_list,"(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph. If provided, unrecognized attrs for ops in `graph_def` that have their default value according to `producer_op_list` will be removed. This will allow some more`GraphDef`s produced by later binaries to be accepted by earlier binaries.",This will allow some more QSTR produced by later binaries to be accepted by earlier binaries,,,,,,
2452,tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",It is required when profiler is enabled when trace was started,,,,,,
2453,tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",Otherwise it is ignored,,,,,,
2454,tf.summary.trace_export,profiler_outdir,"Output directory for profiler. It is required when profiler is enabled when trace was started. Otherwise, it is ignored.",Output directory for profiler,,,,,,
2455,tf.quantization.quantize_and_dequantize,range_given,"If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",If CONSTANT_BOOL use PARAM and PARAM for the range of the PARAM otherwise determine min and max from the PARAM D_STRUCTURE,bool,,0,,,
2456,tf.io.deserialize_many_sparse,rank,"(optional) Python int, the rank of the `SparseTensor` objects.",BSTR Python D_TYPE the rank of the D_STRUCTURE objects,D_TYPE,,,"[0,inf)",,
2457,tf.keras.layers.AlphaDropout,rate,"float, drop probability (as with `Dropout`). The multiplicative noise will have standard deviation `sqrt(rate / (1 - rate))`.",D_TYPE drop probability as with QSTR,D_TYPE,,,"[0,1]",,
2458,tf.keras.layers.AlphaDropout,rate,"float, drop probability (as with `Dropout`). The multiplicative noise will have standard deviation `sqrt(rate / (1 - rate))`.",The multiplicative noise will have standard deviation sqrt BSTR,,,,,,
2459,tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2460,tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,,,,,,
2461,tf.keras.layers.GRUCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,,,,"[0,1]",,
2462,tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2463,tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,,,,,,
2464,tf.keras.layers.LSTM,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,,,,"[0,1]",,
2465,tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2466,tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,,,,,,
2467,tf.keras.layers.SimpleRNN,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,,,,"[0,1]",,
2468,tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,D_TYPE between CONSTANT_NUM,D_TYPE,,,CONSTANT_NUM,,
2469,tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Default CONSTANT_NUM,,,,,,
2470,tf.keras.layers.SimpleRNNCell,recurrent_dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.,Fraction of the PARAM to drop for the linear transformation of the recurrent state,,,,"[0,1]",,
2471,tf.autograph.to_graph,recursive,Whether to recursively convert any functions that the converted function may call.,Whether to recursively convert any functions that the converted function may call,bool,,0,,,
2472,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",An optional D_TYPE,D_TYPE,,0,,,
2473,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Any valid unicode codepoint may be used,,,,,,
2474,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Defaults to CONSTANT_NUM,,,,,,
2475,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",For UTF CONSTANT_NUM BE and UTF CONSTANT_NUM LE any CONSTANT_NUM byte replacement character will preserve byte alignment to the source,,,,,,
2476,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",Note that for UTF CONSTANT_NUM passing a replacement character expressible in CONSTANT_NUM byte such as QSTR will preserve D_TYPE alignment to the source since invalid bytes will be replaced with a CONSTANT_NUM byte replacement,,,,,,
2477,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",The default value is the default unicode replacement character is 0xFFFD or U CONSTANT_NUM,,,,,,
2478,tf.strings.unicode_transcode,replacement_char,"An optional `int`. Defaults to `65533`. The replacement character codepoint to be used in place of any invalid formatting in the input when `errors='replace'`. Any valid unicode codepoint may be used. The default value is the default unicode replacement character is 0xFFFD or U+65533.)Note that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve string alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.",The replacement character codepoint to be used in place of any invalid formatting in the PARAM when PARAM QSTR,,,,,,
2479,tf.keras.layers.experimental.preprocessing.Normalization,reset_state,"Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. Subclasses may choose to throw if reset_state is set to 'False'.",Optional argument specifying whether to clear the state of the layer at the start of the call to QSTR or whether to start from the existing state,bool,,0,,,
2480,tf.keras.layers.experimental.preprocessing.Normalization,reset_state,"Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. Subclasses may choose to throw if reset_state is set to 'False'.",Subclasses may choose to throw if reset_state is set to CONSTANT_BOOL,,,,,,
2481,tf.keras.layers.ConvLSTM2D,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence.",D_TYPE,D_TYPE,,,,,
2482,tf.keras.layers.ConvLSTM2D,return_sequences,"Boolean. Whether to return the last output in the output sequence, or the full sequence.",Whether to return the last output in the output D_STRUCTURE or the full D_STRUCTURE,bool,,0,,,
2483,tf.linalg.lu_solve,rhs,"Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`. To handle vector cases, use: `lu_solve(..., rhs[..., tf.newaxis])[..., 0]`.",Matrix shaped D_TYPE D_STRUCTURE representing targets for which to solve A X rhs,D_TYPE,,,,,D_STRUCTURE
2484,tf.linalg.lu_solve,rhs,"Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`. To handle vector cases, use: `lu_solve(..., rhs[..., tf.newaxis])[..., 0]`.",To handle D_STRUCTURE cases use lu_solve rhs BSTR BSTR,,,,,,
2485,tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2486,tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Must have the same type as PARAM,&PARAM,,,,,
2487,tf.linalg.solve,rhs,"A `Tensor`. Must have the same type as `matrix`. Shape is `[..., M, K]`.",Shape is BSTR,,BSTR,,,,
2488,tf.linalg.tridiagonal_matmul,rhs,"A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",A D_STRUCTURE of shape BSTR and with the same dtype as PARAM,&PARAM,BSTR,,,,D_STRUCTURE
2489,tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,The dtype that should be used for the `row_splits` of any new ragged tensors.  Existing `tf.RaggedTensor` elements do not have their row_splits dtype changed.,Existing tf RaggedTensor elements do not have their row_splits dtype changed,,,,,,
2490,tf.data.experimental.dense_to_ragged_batch,row_splits_dtype,The dtype that should be used for the `row_splits` of any new ragged tensors.  Existing `tf.RaggedTensor` elements do not have their row_splits dtype changed.,The dtype that should be used for the QSTR of any new ragged D_STRUCTURE,tf.dtype,,,,,
2491,tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Defaults to CONSTANT_NUM seconds,,,,,,
2492,tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",Either this or PARAM must be set,,,,,,
2493,tf.estimator.experimental.stop_if_lower_hook,run_every_secs,"If specified, calls `should_stop_fn` at an interval of`run_every_secs` seconds. Defaults to 60 seconds. Either this or`run_every_steps` must be set.",If specified calls QSTR at an interval of run_every_secs seconds,,,,,,
2494,tf.nn.batch_norm_with_global_normalization,scale_after_normalization,A bool indicating whether the resulted tensor needs to be multiplied with gamma.,A D_TYPE indicating whether the resulted D_STRUCTURE needs to be multiplied with PARAM,D_TYPE,,0,,,
2495,tf.image.non_max_suppression_padded,scores,A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,A CONSTANT_NUM D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR,D_TYPE,BSTR,CONSTANT_NUM,,,D_STRUCTURE
2496,tf.data.experimental.rejection_resample,seed,(Optional.) Python integer seed for the resampler.,BSTR,,,,,,
2497,tf.data.experimental.rejection_resample,seed,(Optional.) Python integer seed for the resampler.,Python D_TYPE seed for the resampler,D_TYPE,,,,,
2498,tf.keras.backend.random_uniform,seed,"Integer, random seed.",D_TYPE random seed,D_TYPE,,,,,
2499,tf.nn.RNNCellDropoutWrapper,seed,"(optional) integer, the randomness seed.",BSTR D_TYPE the randomness seed,D_TYPE,,,,,
2500,tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2501,tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",A D_STRUCTURE whose shape is a prefix of PARAM shape,,,,,,D_STRUCTURE
2502,tf.math.unsorted_segment_min,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of `data.shape`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2503,tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",A D_STRUCTURE,,,,,,D_STRUCTURE
2504,tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",A D_STRUCTURE whose shape is a prefix of data shape,,,,,,D_STRUCTURE
2505,tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2506,tf.strings.unsorted_segment_join,segment_ids,"A `Tensor`. Must be one of the following types: `int32`, `int64`. A tensor whose shape is a prefix of data.shape.  Negative segment ids are not supported.",Negative segment ids are not supported,,,,"[0,inf)",,
2507,tf.io.parse_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,A D_STRUCTURE mapping feature keys to QSTR values,,,,,,D_STRUCTURE
2508,tf.io.parse_sequence_example,sequence_features,A `dict` mapping feature keys to`FixedLenSequenceFeature` or `VarLenFeature` or `RaggedFeature` values. These features are associated with data within the `FeatureList` section of the `SequenceExample` proto.,These features are associated with data within the QSTR section of the QSTR proto,,,,,,
2509,tf.keras.preprocessing.sequence.pad_sequences,sequences,"List of lists, where each element is a sequence.",D_STRUCTURE of D_STRUCTURE where each element is a D_STRUCTURE,,,,,,D_STRUCTURE
2510,tf.io.parse_sequence_example,serialized,A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,A D_STRUCTURE BSTR of type D_TYPE containing binary serialized QSTR protos,D_TYPE,,1,,,D_STRUCTURE
2511,tf.io.parse_tensor,serialized,A `Tensor` of type `string`. A scalar string containing a serialized TensorProto proto.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2512,tf.io.parse_tensor,serialized,A `Tensor` of type `string`. A scalar string containing a serialized TensorProto proto.,A scalar D_TYPE containing a serialized TensorProto proto,D_TYPE,,0,,,
2513,tf.ensure_shape,shape,"A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",A QSTR representing the shape of this D_STRUCTURE a QSTR a D_STRUCTURE or None,int,,1,"[0,inf)",,
2514,tf.keras.backend.reshape,shape,Target shape tuple.,Target shape D_STRUCTURE,int,,1,"[0,inf)",,D_STRUCTURE
2515,tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",A value of QSTR means infer the input shape from the shapes in PARAM,,,,,,
2516,tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",Also controls the output shape of this op which may affect type inference in other ops,int,,1,"[0,inf)",,
2517,tf.math.accumulate_n,shape,"Expected shape of elements of `inputs` (optional). Also controls the output shape of this op, which may affect type inference in other ops. A value of `None` means ""infer the input shape from the shapes in `inputs`"".",Expected shape of elements of PARAM BSTR,int,,1,"[0,inf)",,
2518,tf.random.stateless_uniform,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,A CONSTANT_NUM D D_TYPE D_STRUCTURE or Python D_STRUCTURE,D_TYPE,,CONSTANT_NUM,,,D_STRUCTURE
2519,tf.random.stateless_uniform,shape,A 1-D integer Tensor or Python array. The shape of the output tensor.,The shape of the output D_STRUCTURE,int,,1,"[0,inf)",,
2520,tf.keras.utils.plot_model,show_layer_names,whether to display layer names.,whether to display layer names,bool,,0,,,
2521,tf.data.experimental.make_batched_features_dataset,shuffle,"A boolean, indicates whether the input should be shuffled. Defaults to `True`.",A D_TYPE indicates whether the input should be shuffled,D_TYPE,,0,,,
2522,tf.data.experimental.make_batched_features_dataset,shuffle,"A boolean, indicates whether the input should be shuffled. Defaults to `True`.",Defaults to CONSTANT_BOOL,,,,,,
2523,tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",A BSTR D_STRUCTURE,,BSTR,,,,D_STRUCTURE
2524,tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",Rank must be at least CONSTANT_NUM,,,>=CONSTANT_NUM,,,
2525,tf.signal.frame,signal,"A `[..., samples, ...]` `Tensor`. The rank and dimensions may be unknown. Rank must be at least 1.",The rank and dimensions may be unknown,,,,,,
2526,tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,Applicable to the QSTR format only,,,,,,
2527,tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,Please see the signatures argument in tf saved_model save for details,,,,,,
2528,tf.keras.models.save_model,signatures,Signatures to save with the SavedModel. Applicable to the 'tf' format only. Please see the `signatures` argument in`tf.saved_model.save` for details.,signatures to save with the SavedModel,,,,,,
2529,tf.io.encode_proto,sizes,"A `Tensor` of type `int32`. Tensor of int32 with shape `[batch_shape, len(field_names)]`.",A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2530,tf.io.encode_proto,sizes,"A `Tensor` of type `int32`. Tensor of int32 with shape `[batch_shape, len(field_names)]`.",D_STRUCTURE of D_TYPE with shape BSTR,D_TYPE,BSTR,,,,D_STRUCTURE
2531,tf.keras.datasets.reuters.load_data,skip_top,skip the top N most frequently occurring words (which may not be informative).,skip the top N most frequently occurring words BSTR,,,,,,
2532,tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",Defaults to CONSTANT_BOOL,,,,,,
2533,tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",If CONSTANT_BOOL reading performance will be improved at the cost of non deterministic ordering,bool,,0,,,
2534,tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",If CONSTANT_BOOL the order of elements produced is deterministic prior to shuffling elements are still randomized if PARAM CONSTANT_BOOL,bool,,0,,,
2535,tf.data.experimental.make_batched_features_dataset,sloppy_ordering,"If `True`, reading performance will be improved at the cost of non-deterministic ordering. If `False`, the order of elements produced is deterministic prior to shuffling (elements are still randomized if `shuffle=True`. Note that if the seed is set, then order of elements after shuffling is deterministic). Defaults to `False`.",Note that if the seed is set then order of elements after shuffling is deterministic,,,,,,
2536,tf.math.top_k,sorted,If true the resulting `k` elements will be sorted by the values in descending order.,If CONSTANT_BOOL the resulting QSTR elements will be sorted by the values in descending order,bool,,0,,,
2537,tf.sparse.maximum,sp_a,"a `SparseTensor` operand whose dtype is real, and indices lexicographically ordered.",a D_STRUCTURE operand whose dtype is real and indices lexicographically ordered,,,,,,D_STRUCTURE
2538,tf.sparse.retain,sp_input,The input `SparseTensor` with `N` non-empty elements.,The input D_STRUCTURE with QSTR non empty elements,,,,,,D_STRUCTURE
2539,tf.sparse.softmax,sp_input,"N-D `SparseTensor`, where `N >= 2`.",N D D_STRUCTURE where N REXPR,,,REXPR,,,D_STRUCTURE
2540,tf.nn.embedding_lookup_sparse,sp_weights,"either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1. If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",either a D_STRUCTURE of D_TYPE weights or QSTR to indicate all weights should be taken to be CONSTANT_NUM,D_TYPE,,,,,D_STRUCTURE
2541,tf.nn.embedding_lookup_sparse,sp_weights,"either a `SparseTensor` of float / double weights, or `None` to indicate all weights should be taken to be 1. If specified, `sp_weights`must have exactly the same shape and indices as `sp_ids`.",If specified sp_weightsmust have exactly the same shape and indices as PARAM,,,,,,
2542,tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",Optional specification for splitting the input text,,,,,,
2543,tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",The default is QSTR,,,,,,
2544,tf.keras.layers.experimental.preprocessing.TextVectorization,split,"Optional specification for splitting the input text. Values can be None (no splitting), 'whitespace' (split on ASCII whitespace), or a Callable. The default is 'whitespace'.",Values can be None BSTR QSTR BSTR or a Callable,,,,,QSTR,
2545,tf.keras.layers.ConvLSTM2D,stateful,"Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",D_TYPE BSTR,D_TYPE,,,,,
2546,tf.keras.layers.ConvLSTM2D,stateful,"Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.",If CONSTANT_BOOL the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch,bool,,0,,,
2547,tf.summary.experimental.set_step,step,"An `int64`-castable default step value, or None to unset.",An D_TYPE castable default step value or None to unset,D_TYPE,,0,,,
2548,tf.keras.backend.conv1d,strides,stride integer.,stride D_TYPE,D_TYPE,,,"[0,inf)",,
2549,tf.keras.backend.local_conv1d,strides,"a tuple of a single integer, specifying the stride length of the convolution.",a D_STRUCTURE of a single D_TYPE specifying the stride length of the convolution,D_TYPE,[1],,"[0,inf)",,D_STRUCTURE
2550,tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE specifying the strides of the convolution along each spatial dimension,D_TYPE,[CONSTANT_NUM],0;1,"[0,inf)",,D_STRUCTURE
2551,tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",Can be a single D_TYPE to specify the same value for all spatial dimensions,D_TYPE,,0,,,
2552,tf.keras.layers.Conv3D,strides,"An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.",Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM,,,,,,
2553,tf.nn.depthwise_conv2d_backprop_input,strides,A list of `ints`. The stride of the sliding window for each dimension of the input of the convolution.,A D_STRUCTURE of D_TYPE,D_TYPE,,,,,D_STRUCTURE
2554,tf.nn.depthwise_conv2d_backprop_input,strides,A list of `ints`. The stride of the sliding window for each dimension of the input of the convolution.,The stride of the sliding window for each dimension of the input of the convolution,int,,,"[0,inf)",,
2555,tf.data.experimental.from_variant,structure,A `tf.data.experimental.Structure` object representing the structure of each element in the dataset.,A tf data experimental structure object representing the structure of each element in the dataset,,,,,,
2556,tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",An optional D_TYPE,D_TYPE,,0,,,
2557,tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",Defaults to CONSTANT_NUM,,,,,,
2558,tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",If set to CONSTANT_NUM all elements of the D_STRUCTURE will be shown,,,,,,
2559,tf.strings.format,summarize,"An optional `int`. Defaults to `3`. When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively). If set to -1, all elements of the tensor will be shown.",When formatting the D_STRUCTURE show the first and last summarizeentries of each D_STRUCTURE dimension BSTR,,,,,,
2560,tf.keras.backend.in_top_k,targets,A 1D tensor of length `batch_size` and type `int32` or `int64`.,A CONSTANT_NUM D D_STRUCTURE of length QSTR and type D_TYPE,D_TYPE,[QSTR],CONSTANT_NUM,,,D_STRUCTURE
2561,tf.io.serialize_tensor,tensor,A `Tensor`. A Tensor of type `T`.,A D_STRUCTURE,,,,,,D_STRUCTURE
2562,tf.io.serialize_tensor,tensor,A `Tensor`. A Tensor of type `T`.,A D_STRUCTURE of type QSTR,QSTR,,,,,D_STRUCTURE
2563,tf.linalg.svd,tensor,"`Tensor` of shape `[..., M, N]`. Let `P` be the minimum of `M` and`N`.",D_STRUCTURE of shape BSTR,,BSTR,,,,D_STRUCTURE
2564,tf.linalg.svd,tensor,"`Tensor` of shape `[..., M, N]`. Let `P` be the minimum of `M` and`N`.",Let QSTR be the minimum of QSTR,,,,,,
2565,tf.sparse.from_dense,tensor,A dense `Tensor` to be converted to a `SparseTensor`.,A dense D_STRUCTURE to be converted to a D_STRUCTURE,,,,,,D_STRUCTURE
2566,tf.tensor_scatter_nd_sub,tensor,A `Tensor`. Tensor to copy/update.,A D_STRUCTURE,,,,,,D_STRUCTURE
2567,tf.tensor_scatter_nd_sub,tensor,A `Tensor`. Tensor to copy/update.,D_STRUCTURE to copy update,,,,,,D_STRUCTURE
2568,tf.tensor_scatter_nd_update,tensor,A `Tensor`. Tensor to copy/update.,A D_STRUCTURE,,,,,,D_STRUCTURE
2569,tf.tensor_scatter_nd_update,tensor,A `Tensor`. Tensor to copy/update.,D_STRUCTURE to copy update,,,,,,D_STRUCTURE
2570,tf.feature_column.embedding_column,tensor_name_in_ckpt,Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights. Required if `ckpt_to_load_from` is not`None`.,Name of the D_STRUCTURE in PARAM from which to restore the column weights,string,,0,,,
2571,tf.feature_column.embedding_column,tensor_name_in_ckpt,Name of the `Tensor` in `ckpt_to_load_from` from which to restore the column weights. Required if `ckpt_to_load_from` is not`None`.,Required if PARAM is not QSTR,,,,,,
2572,tf.keras.backend.batch_get_value,tensors,list of ops to run.,D_STRUCTURE of ops to run,,,,,,D_STRUCTURE
2573,tf.keras.backend.relu,threshold,float. Threshold value for thresholded activation.,D_TYPE,D_TYPE,,,,,
2574,tf.keras.backend.relu,threshold,float. Threshold value for thresholded activation.,threshold value for thresholded activation,,,,,,
2575,tf.keras.layers.BatchNormalization,trainable,"Boolean, if `True` the variables will be marked as trainable.",D_TYPE if CONSTANT_BOOL the variables will be marked as trainable,D_TYPE,,0,,,
2576,tf.keras.layers.SeparableConv1D,trainable,"Boolean, if `True` the weights of this layer will be marked as trainable (and listed in `layer.trainable_weights`).",D_TYPE if CONSTANT_BOOL the weights of this layer will be marked as trainable and listed in layer trainable_weights,D_TYPE,,0,,,
2577,tf.keras.backend.in_test_phase,training,"Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",Optional scalar D_STRUCTURE BSTR specifying the learning phase,bool;int,,0,,,D_STRUCTURE
2578,tf.nn.compute_accidental_hits,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",A D_STRUCTURE of type D_TYPE and shape BSTR,D_TYPE,BSTR,,,,D_STRUCTURE
2579,tf.nn.compute_accidental_hits,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",The target classes,,,,,,
2580,tf.random.all_candidate_sampler,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",A D_STRUCTURE of type D_TYPE and shape BSTR,D_TYPE,BSTR,,,,D_STRUCTURE
2581,tf.random.all_candidate_sampler,true_classes,"A `Tensor` of type `int64` and shape `[batch_size, num_true]`. The target classes.",The target classes,,,,,,
2582,tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,An optional D_TYPE,D_TYPE,,0,,,
2583,tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,Defaults to CONSTANT_BOOL,,,,,,
2584,tf.io.decode_jpeg,try_recover_truncated,An optional `bool`. Defaults to `False`. If true try to recover an image from truncated input.,If CONSTANT_BOOL try to recover an image from truncated input,bool,,0,,,
2585,tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,Accepted values are constants defined in the class tf UnconnectedGradients QSTR none,,,,,,
2586,tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,Optional,,,,,,
2587,tf.gradients,unconnected_gradients,Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class `tf.UnconnectedGradients` and the default value is`none`.,Specifies the gradient value returned when the given input D_STRUCTURE are unconnected,,,,,,
2588,tf.random.fixed_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,A D_TYPE,D_TYPE,,0,,,
2589,tf.random.fixed_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,Determines whether all sampled classes in a batch are unique,,,,,,
2590,tf.random.learned_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,A D_TYPE,D_TYPE,,0,,,
2591,tf.random.learned_unigram_candidate_sampler,unique,A `bool`. Determines whether all sampled classes in a batch are unique.,Determines whether all sampled classes in a batch are unique,,,,,,
2592,tf.keras.layers.SimpleRNNCell,units,"Positive integer, dimensionality of the output space.",Positive D_TYPE dimensionality of the output space,D_TYPE,,,"(0,inf)",,
2593,tf.scatter_nd,updates,A `Tensor`. Updates to scatter into output.,A D_STRUCTURE,,,,,,D_STRUCTURE
2594,tf.scatter_nd,updates,A `Tensor`. Updates to scatter into output.,updates to scatter into output,,,,,,
2595,tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,A D_STRUCTURE,,,,,,D_STRUCTURE
2596,tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,Must have the same type as D_STRUCTURE,&D_STRUCTURE,,,,,
2597,tf.tensor_scatter_nd_sub,updates,A `Tensor`. Must have the same type as `tensor`. Updates to scatter into output.,updates to scatter into output,,,,,,
2598,tf.keras.layers.SeparableConv1D,use_bias,"Boolean, whether the layer uses a bias.",D_TYPE whether the layer uses a bias,D_TYPE,,0,,,
2599,tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Default value CONSTANT_BOOL i e don t validate arguments,,,,,,
2600,tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Note this function does not verify the implied matrix is actually invertible even when validate_args CONSTANT_BOOL,,,,,,
2601,tf.linalg.lu_matrix_inverse,validate_args,"Python `bool` indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when `validate_args=True`. Default value: `False` (i.e., don't validate arguments).",Python D_TYPE indicating whether arguments should be checked for correctness,D_TYPE,,0,,,
2602,tf.make_tensor_proto,values,Values to put in the TensorProto.,values to put in the TensorProto,,,,,,
2603,tf.variable_creator_scope,variable_creator,the passed creator,the passed creator,,,,,,
2604,tf.data.experimental.from_variant,variant,A scalar `tf.variant` tensor representing a dataset.,A scalar D_TYPE D_STRUCTURE representing a dataset,D_TYPE,,0,,,D_STRUCTURE
2605,tf.math.confusion_matrix,weights,An optional `Tensor` whose shape matches `predictions`.,An optional D_STRUCTURE whose shape matches PARAM,,&PARAM,,,,D_STRUCTURE
2606,tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,An optional D_TYPE,D_TYPE,,0,,,
2607,tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Applies to both D_TYPE and D_TYPE numbers,D_TYPE,,,,,
2608,tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Defaults to CONSTANT_NUM,,,,,,
2609,tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Only used if width CONSTANT_NUM,,,,,,
2610,tf.strings.as_string,width,An optional `int`. Defaults to `-1`. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width > -1.,Pad pre decimal numbers to this width,,,,,,
2611,tf.signal.inverse_stft,window_fn,"A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype. If set to `None`, no windowing is used.",A callable that takes a window length and a QSTR keyword argument and returns a BSTR D_STRUCTURE of samples in the provided datatype,,,,,,
2612,tf.signal.inverse_stft,window_fn,"A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype. If set to `None`, no windowing is used.",If set to QSTR no windowing is used,,,,,,
2613,tf.bitwise.right_shift,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2614,tf.bitwise.right_shift,x,"A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2615,tf.debugging.assert_non_positive,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2616,tf.debugging.assert_positive,x,Numeric `Tensor`.,D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2617,tf.ensure_shape,x,A `Tensor`.,A D_STRUCTURE,,,,,,D_STRUCTURE
2618,tf.keras.backend.all,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
2619,tf.keras.backend.argmin,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
2620,tf.keras.backend.batch_normalization,x,Input tensor or variable.,Input D_STRUCTURE or variable,,,,,,D_STRUCTURE
2621,tf.keras.backend.count_params,x,Variable or tensor.,Variable or D_STRUCTURE,,,,,,D_STRUCTURE
2622,tf.keras.backend.normalize_batch_in_training,x,Input tensor or variable.,Input D_STRUCTURE or variable,,,,,,D_STRUCTURE
2623,tf.keras.backend.not_equal,x,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
2624,tf.keras.preprocessing.image.random_channel_shift,x,Input tensor. Must be 3D.,Input D_STRUCTURE,,,,,,D_STRUCTURE
2625,tf.keras.preprocessing.image.random_channel_shift,x,Input tensor. Must be 3D.,Must be CONSTANT_NUM D,,,CONSTANT_NUM,,,
2626,tf.math.asinh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2627,tf.math.asinh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2628,tf.math.erfinv,x,`Tensor` with type `float` or `double`.,D_STRUCTURE with type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2629,tf.math.floor,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2630,tf.math.floor,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2631,tf.math.lbeta,x,"A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",A rank n CONSTANT_NUM D_STRUCTURE n REXPR with type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2632,tf.math.log_sigmoid,x,A Tensor with type `float32` or `float64`.,A D_STRUCTURE with type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2633,tf.math.logical_and,x,A `Tensor` of type `bool`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2634,tf.math.minimum,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2635,tf.math.minimum,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2636,tf.math.multiply_no_nan,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2637,tf.math.multiply_no_nan,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2638,tf.math.reciprocal,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2639,tf.math.reciprocal,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2640,tf.math.sign,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2641,tf.math.sign,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2642,tf.math.tanh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2643,tf.math.tanh,x,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2644,tf.math.zeta,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2645,tf.math.zeta,x,"A `Tensor`. Must be one of the following types: `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2646,tf.nn.dropout,x,A floating point tensor.,A D_TYPE D_STRUCTURE,D_TYPE,,,,,D_STRUCTURE
2647,tf.math.nextafter,x1,"A `Tensor`. Must be one of the following types: `float64`, `float32`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2648,tf.math.nextafter,x1,"A `Tensor`. Must be one of the following types: `float64`, `float32`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2649,tf.keras.backend.less_equal,y,Tensor or variable.,D_STRUCTURE or variable,,,,,,D_STRUCTURE
2650,tf.math.atan2,y,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",A D_STRUCTURE,,,,,,D_STRUCTURE
2651,tf.math.atan2,y,"A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",Must be one of the following types D_TYPE,D_TYPE,,,,,
2652,tf.math.equal,y,A `tf.Tensor` or `tf.SparseTensor` or `tf.IndexedSlices`.,A D_STRUCTURE or tf IndexedSlices,,,,,,D_STRUCTURE
2653,tf.math.logical_and,y,A `Tensor` of type `bool`.,A D_STRUCTURE of type D_TYPE,D_TYPE,,,,,D_STRUCTURE
2654,tf.math.squared_difference,y,A `Tensor`. Must have the same type as `x`.,A D_STRUCTURE,,,,,,D_STRUCTURE
2655,tf.math.squared_difference,y,A `Tensor`. Must have the same type as `x`.,Must have the same type as QSTR,&PARAM,,,,,
2656,tf.compat.forward_compatibility_horizon,year,"A year (e.g., 2018). Must be an `int`.",A year BSTR,,,,,,
2657,tf.compat.forward_compatibility_horizon,year,"A year (e.g., 2018). Must be an `int`.",Must be an D_TYPE,D_TYPE,,0,,,
2658,tf.compat.forward_compatible,year,"A year (e.g., 2018). Must be an `int`.",A year BSTR,,,,,,
2659,tf.compat.forward_compatible,year,"A year (e.g., 2018). Must be an `int`.",Must be an D_TYPE,D_TYPE,,0,,,