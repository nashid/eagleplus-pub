constraints:
  candidate_feature_ids:
    descp: A Tensor of type int32. Rank 1 tensor with ids for each feature. This is
      the real id of the feature.
    dtype:
    - tf.int32
    ndim:
    - '1'
    tensor_t:
    - tf.tensor
  l1:
    descp: A Tensor of type float32. l1 regularization factor on leaf weights, per
      instance based.
    dtype:
    - tf.float32
    tensor_t:
    - tf.tensor
  l2:
    descp: A Tensor of type float32. l2 regularization factor on leaf weights, per
      instance based.
    dtype:
    - tf.float32
    tensor_t:
    - tf.tensor
  logits_dimension:
    descp: An int that is >= 1. The dimension of logit, i.e., number of classes.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  min_node_weight:
    descp: A Tensor of type float32. mininum avg of hessians in a node before required
      for the node to be considered for splitting.
    dtype:
    - tf.float32
    tensor_t:
    - tf.tensor
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - tf.string
    ndim:
    - '0'
  node_id_range:
    descp: A Tensor of type int32. A Rank 1 tensor (shape=[2]) to specify the range
      [first, last) of node ids to process within stats_summary_list. The nodes are
      iterated between the two nodes specified by the tensor, as like for node_id
      in range(node_id_range[0], node_id_range[1]) (Note that the last index node_id_range[1]
      is exclusive).
    dtype:
    - tf.int32
    ndim:
    - '1'
    tensor_t:
    - tf.tensor
  split_types:
    descp: A Tensor of type string. A Rank 1 tensor indicating if this Op should perform
      inequality split or equality split per feature.
    dtype:
    - tf.string
    ndim:
    - '1'
    tensor_t:
    - tf.tensor
  stats_summaries_list:
    descp: A list of at least 1 Tensor objects with type float32. A list of Rank 4
      tensor (#shape=[max_splits, feature_dims, bucket, stats_dims]) for accumulated
      stats summary (gradient/hessian) per node, per dimension, per buckets for each
      feature. The first dimension of the tensor is the maximum number of splits,
      and thus not all elements of it will be used, but only the indexes specified
      by node_ids will be used.
    dtype:
    - tf.float32
    ndim:
    - '4'
    range:
    - '[0,inf)'
    structure:
    - list
  tree_complexity:
    descp: A Tensor of type float32. adjustment to the gain, per leaf based.
    dtype:
    - tf.float32
    tensor_t:
    - tf.tensor
inputs:
  optional:
  - name
  required:
  - node_id_range
  - stats_summaries_list
  - split_types
  - candidate_feature_ids
  - l1
  - l2
  - tree_complexity
  - min_node_weight
  - logits_dimension
link: https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/raw_ops/BoostedTreesCalculateBestFeatureSplitV2
outputs:
- A tuple of Tensor objects (node_ids, gains, feature_ids, feature_dimensions, thresholds,
  left_node_contribs, right_node_contribs, split_with_default_directions).
- node_ids: A Tensor of type int32.
- gains: A Tensor of type float32.
- feature_ids: A Tensor of type int32.
- feature_dimensions: A Tensor of type int32.
- thresholds: A Tensor of type int32.
- left_node_contribs: A Tensor of type float32.
- right_node_contribs: A Tensor of type float32.
- split_with_default_directions: A Tensor of type string.
package: tensorflow
target: BoostedTreesCalculateBestFeatureSplitV2
title: tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2
version: 2.2.0
