constraints:
  X:
    descp: array of shape (n_samples, n_features) Data matrix
    ndim:
    - '1'
    - '2'
    shape:
    - '[n_samples,n_features]'
  algorithm:
    default: lasso_lars
    descp: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''} lars:
      uses the least angle regression method (linear_model.lars_path) lasso_lars:
      uses Lars to compute the Lasso solution lasso_cd: uses the coordinate descent
      method to compute the Lasso solution (linear_model.Lasso). lasso_lars will be
      faster if the estimated components are sparse. omp: uses orthogonal matching
      pursuit to estimate the sparse solution threshold: squashes to zero all coefficients
      less than alpha from the projection dictionary * X'''
    dtype:
    - string
  alpha:
    default: None
    descp: 'float, 1. by default If `algorithm=''lasso_lars''` or `algorithm=''lasso_cd''`,
      `alpha` is the penalty applied to the L1 norm. If `algorithm=''threshold''`,
      `alpha` is the absolute value of the threshold below which coefficients will
      be squashed to zero. If `algorithm=''omp''`, `alpha` is the tolerance parameter:
      the value of the reconstruction error targeted. In this case, it overrides `n_nonzero_coefs`.'
    dtype:
    - float
    ndim:
    - '0'
  check_input:
    default: 'True'
    descp: boolean, optional If False, the input arrays X and dictionary will not
      be checked.
    dtype:
    - boolean
    ndim:
    - '0'
  copy_cov:
    default: 'True'
    descp: boolean, optional Whether to copy the precomputed covariance matrix; if
      False, it may be overwritten.
    dtype:
    - boolean
    ndim:
    - '0'
  cov:
    default: None
    descp: array, shape=(n_components, n_samples) Precomputed covariance, dictionary'
      * X
  dictionary:
    descp: array of shape (n_components, n_features) The dictionary matrix against
      which to solve the sparse coding of the data. Some of the algorithms assume
      normalized rows for meaningful output.
    ndim:
    - '1'
    - '2'
    shape:
    - '[n_components,n_features]'
  gram:
    default: None
    descp: array, shape=(n_components, n_components) Precomputed Gram matrix, dictionary
      * dictionary'
  init:
    default: None
    descp: array of shape (n_samples, n_components) Initialization value of the sparse
      codes. Only used if `algorithm='lasso_cd'`.
    ndim:
    - '1'
    - '2'
    shape:
    - '[n_samples,n_components]'
  max_iter:
    default: '1000'
    descp: int, 1000 by default Maximum number of iterations to perform if `algorithm='lasso_cd'`
      or `lasso_lars`.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  n_jobs:
    default: None
    descp: int or None, optional (default=None) Number of parallel jobs to run. ``None``
      means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using
      all processors. See :term:`Glossary <n_jobs>` for more details.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  n_nonzero_coefs:
    default: None
    descp: int, 0.1 * n_features by default Number of nonzero coefficients to target
      in each column of the solution. This is only used by `algorithm='lars'` and
      `algorithm='omp'` and is overridden by `alpha` in the `omp` case.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  positive:
    default: 'False'
    descp: boolean, optional Whether to enforce positivity when finding the encoding.
    dtype:
    - boolean
    ndim:
    - '0'
  verbose:
    default: '0'
    descp: int, optional Controls the verbosity; the higher, the more messages. Defaults
      to 0.
    dtype:
    - int
    ndim:
    - '0'
dependency:
- n_components
- n_features
- n_samples
inputs:
  optional:
  - gram
  - cov
  - algorithm
  - n_nonzero_coefs
  - alpha
  - copy_cov
  - init
  - max_iter
  - n_jobs
  - check_input
  - verbose
  - positive
  required:
  - X
  - dictionary
link: ''
package: scikit-learn
target: sparse_encode
title: sklearn.decomposition.sparse_encode
version: 0.24.X
