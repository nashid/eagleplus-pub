,Unnamed: 0,API,Arg,Descp,Normalized_descp,dtype,tensor_t,structure,shape,ndim,range,enum
0,0,torch.jit.save,_extra_files,Map from filename to contents which will be stored as part of 'f'.,Map from filename to contents which will be stored as part of QSTR,,,,,,,
1,1,torch.einsum,*operands,The operands to compute the Einstein sum of.,The operands to compute the Einstein sum of,,,,,,,
2,2,torch.nn.init.uniform_,a,the lower bound of the uniform distribution,the lower bound of the uniform distribution,numeric,,,,,,
3,3,torch.tensordot,a,Left tensor to contract,Left D_STRUCTURE to contract,,D_STRUCTURE,,,,,
4,4,torch.nn.Transformer,activation,"the activation function of encoder/decoder intermediate layer, relu or gelu (default=relu).",the activation function of encoder decoder intermediate layer relu or gelu default relu,,,,,,,
5,5,torch.nn.BatchNorm1d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",a D_TYPE value that when set to CONSTANT_BOOL this module has learnable affine parameters,D_TYPE,,,,0,,
6,6,torch.nn.BatchNorm1d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
7,7,torch.nn.BatchNorm3d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",a D_TYPE value that when set to CONSTANT_BOOL this module has learnable affine parameters,D_TYPE,,,,0,,
8,8,torch.nn.BatchNorm3d,affine,"a boolean value that when set to `True`, this module has learnable affine parameters. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
9,9,torch.nn.functional.interpolate,align_corners,"Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'` or `'trilinear'`. Default: `False`",Default CONSTANT_BOOL,bool,,,,0,,
10,10,torch.nn.functional.interpolate,align_corners,"Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'` or `'trilinear'`. Default: `False`",Geometrically we consider the pixels of the PARAM and output as squares rather than points,,,,,,,
11,11,torch.nn.functional.interpolate,align_corners,"Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'` or `'trilinear'`. Default: `False`",If set to CONSTANT_BOOL the PARAM and output D_STRUCTURE are aligned by the center points of their corner pixels preserving the values at the corner pixels,bool,,,,0,,
12,12,torch.nn.functional.interpolate,align_corners,"Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'` or `'trilinear'`. Default: `False`",If set to CONSTANT_BOOL the PARAM and output D_STRUCTURE are aligned by the corner points of their corner pixels and the interpolation uses edge value padding for out of boundary values making this operation independent of PARAM PARAM when PARAM is kept the same,bool,,,,0,,
13,13,torch.nn.functional.interpolate,align_corners,"Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'` or `'trilinear'`. Default: `False`",This only has an effect when PARAM is QSTR,,,,,,,
14,14,torch.nn.LocalResponseNorm,alpha,multiplicative factor. Default: 0.0001,Default CONSTANT_NUM,bool,,,,0,,
15,15,torch.nn.LocalResponseNorm,alpha,multiplicative factor. Default: 0.0001,multiplicative factor,numeric,,,,,,
16,16,torch.nn.utils.prune.random_unstructured,amount,"quantity of parameters to prune. If `float`, should be between 0.0 and 1.0 and represent the fraction of parameters to prune. If `int`, it represents the absolute number of parameters to prune.",If D_TYPE it represents the absolute number of parameters to prune,D_TYPE,,,,0,"[0,inf)",
17,17,torch.nn.utils.prune.random_unstructured,amount,"quantity of parameters to prune. If `float`, should be between 0.0 and 1.0 and represent the fraction of parameters to prune. If `int`, it represents the absolute number of parameters to prune.",If D_TYPE should be between CONSTANT_NUM and represent the fraction of parameters to prune,D_TYPE,,,,0,"[0,inf)",
18,18,torch.nn.utils.prune.random_unstructured,amount,"quantity of parameters to prune. If `float`, should be between 0.0 and 1.0 and represent the fraction of parameters to prune. If `int`, it represents the absolute number of parameters to prune.",quantity of parameters to prune,int,,,,0,"[0,inf)",
19,19,torch.distributed.all_gather,async_op,Whether this op should be an async op,Whether this op should be an async op,bool,,,,0,,
20,20,torch.quantize_per_channel,axis,dimension on which apply per-channel quantization,dimension on which apply per channel quantization,int,,,,0,,
21,21,torch.tensordot,b,Right tensor to contract,Right D_STRUCTURE to contract,,D_STRUCTURE,,,,,
22,22,torch.nn.utils.rnn.pack_padded_sequence,batch_first,"if `True`, the input is expected in `B x T x *` format.",if CONSTANT_BOOL the PARAM is expected in B x T x format,bool,,,,0,,
23,23,torch.addr,beta,multiplier for `input` ( beta ),multiplier for PARAM BSTR,numeric,,,,,,
24,24,torch.nn.ConvTranspose3d,bias,"If `True`, adds a learnable bias to the output. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
25,25,torch.nn.ConvTranspose3d,bias,"If `True`, adds a learnable bias to the output. Default: `True`",If CONSTANT_BOOL adds a learnable bias to the output,bool,,,,0,,
26,26,torch.nn.quantized.functional.conv2d,bias,non-quantized bias tensor of shape (out _channels) . The tensor type must be torch.float.,non quantized bias D_STRUCTURE of shape BSTR,,D_STRUCTURE,,BSTR,,,
27,27,torch.nn.quantized.functional.conv2d,bias,non-quantized bias tensor of shape (out _channels) . The tensor type must be torch.float.,The D_STRUCTURE type must be D_TYPE,D_TYPE,D_STRUCTURE,,,,,
28,28,torch.nn.functional.avg_pool1d,ceil_mode,"when True, will use ceil instead of floor to compute the output shape. Default: `False`",Default CONSTANT_BOOL,bool,,,,0,,
29,29,torch.nn.functional.avg_pool1d,ceil_mode,"when True, will use ceil instead of floor to compute the output shape. Default: `False`",when CONSTANT_BOOL will use ceil instead of floor to compute the output shape,bool,,,,0,,
30,30,torch.chunk,chunks,number of chunks to return,number of chunks to return,int,,,,0,"[0,inf)",
31,31,torch.autograd.functional.hessian,create_graph,"If `True`, the Hessian will be computed in a differentiable manner. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
32,32,torch.autograd.functional.hessian,create_graph,"If `True`, the Hessian will be computed in a differentiable manner. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",If CONSTANT_BOOL the Hessian will be computed in a differentiable manner,bool,,,,0,,
33,33,torch.autograd.functional.hessian,create_graph,"If `True`, the Hessian will be computed in a differentiable manner. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",Note that when PARAM is CONSTANT_BOOL the result can not require gradients or be disconnected from the PARAM,,,,,,,
34,34,torch.autograd.functional.vjp,create_graph,"If `True`, both the output and result will be computed in a differentiable way. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
35,35,torch.autograd.functional.vjp,create_graph,"If `True`, both the output and result will be computed in a differentiable way. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",If CONSTANT_BOOL both the output and result will be computed in a differentiable way,bool,,,,0,,
36,36,torch.autograd.functional.vjp,create_graph,"If `True`, both the output and result will be computed in a differentiable way. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.",Note that when PARAM is CONSTANT_BOOL the result can not require gradients or be disconnected from the PARAM,,,,,,,
37,37,torch.argsort,descending,controls the sorting order (ascending or descending),controls the sorting order BSTR,,,,,,,
38,38,torch.empty_like,device,"the desired device of returned tensor. Default: if `None`, defaults to the device of `input`.",Default if QSTR defaults to the device of PARAM,,,,,,,
39,39,torch.empty_like,device,"the desired device of returned tensor. Default: if `None`, defaults to the device of `input`.",the desired device of returned D_STRUCTURE,,,,,,,
40,40,torch.ones,device,"the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.",Default if QSTR uses the current device for the default D_STRUCTURE type see torch set_default_tensor_type,,,,,,,
41,41,torch.ones,device,"the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.",the desired device of returned D_STRUCTURE,,,,,,,
42,42,torch.ones,device,"the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.",device will be the CPU for CPU D_STRUCTURE types and the current CUDA device for CUDA D_STRUCTURE types,,,,,,,
43,43,torch.triu,diagonal,the diagonal to consider,the diagonal to consider,,,,,,,
44,44,torch.nn.functional.conv_transpose2d,dilation,"the spacing between kernel elements. Can be a single number or a tuple `(dH, dW)`. Default: 1",Can be a single number or a D_STRUCTURE BSTR,int,,D_STRUCTURE,,0;1,,
45,45,torch.nn.functional.conv_transpose2d,dilation,"the spacing between kernel elements. Can be a single number or a tuple `(dH, dW)`. Default: 1",Default CONSTANT_NUM,bool,,,,0,,
46,46,torch.nn.functional.conv_transpose2d,dilation,"the spacing between kernel elements. Can be a single number or a tuple `(dH, dW)`. Default: 1",the spacing between kernel elements,,,,,,,
47,47,torch.nn.CosineSimilarity,dim,Dimension where cosine similarity is computed. Default: 1,Default CONSTANT_NUM,bool,,,,0,,
48,48,torch.nn.CosineSimilarity,dim,Dimension where cosine similarity is computed. Default: 1,Dimension where cosine similarity is computed,int,,,,0,,
49,49,torch.nn.functional.gumbel_softmax,dim,A dimension along which softmax will be computed. Default: -1.,A dimension along which softmax will be computed,int,,,,0,,
50,50,torch.nn.functional.gumbel_softmax,dim,A dimension along which softmax will be computed. Default: -1.,Default CONSTANT_NUM,bool,,,,0,,
51,51,torch.sum,dim,the dimension or dimensions to reduce.,the dimension or dimensions to reduce,int,,,,0;1,,
52,52,torch.unsqueeze,dim,the index at which to insert the singleton dimension,the index at which to insert the singleton dimension,int,,,,0,,
53,53,torch.nn.AdaptiveLogSoftmaxWithLoss,div_value,value used as an exponent to compute sizes of the clusters. Default: 4.0,Default CONSTANT_NUM,bool,,,,0,,
54,54,torch.nn.AdaptiveLogSoftmaxWithLoss,div_value,value used as an exponent to compute sizes of the clusters. Default: 4.0,value used as an exponent to compute sizes of the clusters,,,,,,,
55,55,torch.utils.dlpack.from_dlpack,dlpack,a PyCapsule object with the dltensor,a PyCapsule object with the dltensor,,,,,,,
56,56,torch.distributed.send,dst,Destination rank.,Destination rank,int,,,,0,,
57,57,torch.bartlett_window,dtype,"the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`). Only floating point types are supported.",Default if QSTR uses a global default see torch set_default_tensor_type,,,,,,,
58,58,torch.bartlett_window,dtype,"the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`). Only floating point types are supported.",Only D_TYPE point types are supported,,,,,,,
59,59,torch.bartlett_window,dtype,"the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`). Only floating point types are supported.",the desired data type of returned D_STRUCTURE,dtype,,,,,,
60,60,torch.eye,dtype,"the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",Default if QSTR uses a global default see torch set_default_tensor_type,,,,,,,
61,61,torch.eye,dtype,"the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).",the desired data type of returned D_STRUCTURE,dtype,,,,,,
62,62,torch.rand_like,dtype,"the desired data type of returned Tensor. Default: if `None`, defaults to the dtype of `input`.",Default if QSTR defaults to the dtype of PARAM,,,,,,,
63,63,torch.rand_like,dtype,"the desired data type of returned Tensor. Default: if `None`, defaults to the dtype of `input`.",the desired data type of returned D_STRUCTURE,dtype,,,,,,
64,64,torch.nn.InstanceNorm3d,eps,a value added to the denominator for numerical stability. Default: 1e-5,a value added to the denominator for numerical stability,,,,,0,,
65,65,torch.nn.InstanceNorm3d,eps,a value added to the denominator for numerical stability. Default: 1e-5,Default CONSTANT_NUM,bool,,,,0,,
66,66,torch.utils.cpp_extension.load,extra_cflags,optional list of compiler flags to forward to the build.,optional D_STRUCTURE of compiler flags to forward to the build,,,,,,,
67,67,torch.nn.functional.poisson_nll_loss,full,"whether to compute full loss, i. e. to add the Stirling approximation term. Default: `False` target *  log(target) - target + 0.5 *  log(2 *  pi * target) .",Default CONSTANT_BOOL PARAM log BSTR,bool,,,,0,,
68,68,torch.nn.functional.poisson_nll_loss,full,"whether to compute full loss, i. e. to add the Stirling approximation term. Default: `False` target *  log(target) - target + 0.5 *  log(2 *  pi * target) .",whether to compute full loss i e to add the Stirling approximation term,bool,,,,0,,
69,69,torch.utils.checkpoint.checkpoint_sequential,functions,A `torch.nn.Sequential` or the list of modules or functions (comprising the model) to run sequentially.,A torch nn Sequential or the D_STRUCTURE of modules or functions BSTR to run sequentially,,,D_STRUCTURE,,,,
70,70,torch.multinomial,generator,a pseudorandom number generator for sampling,a pseudorandom number generator for sampling,,,,,,,
71,71,torch.lu,get_infos,"if set to `True`, returns an info IntTensor. Default: `False`",Default CONSTANT_BOOL,bool,,,,0,,
72,72,torch.lu,get_infos,"if set to `True`, returns an info IntTensor. Default: `False`",if set to CONSTANT_BOOL returns an info IntTensor,bool,,,,0,,
73,73,torch.autograd.gradgradcheck,grad_outputs,The gradients with respect to the function's outputs.,The gradients with respect to the function outputs,numeric,,,,,,
74,74,torch.distributed.get_world_size,group,The process group to work on,The process group to work on,,,,,,,
75,75,torch.distributed.reduce,group,The process group to work on,The process group to work on,,,,,,,
76,76,torch.nn.ConvTranspose2d,groups,Number of blocked connections from input channels to output channels. Default: 1,Default CONSTANT_NUM,bool,,,,0,,
77,77,torch.nn.ConvTranspose2d,groups,Number of blocked connections from input channels to output channels. Default: 1,Number of blocked connections from input channels to output channels,int,,,,0,"[0,inf)",
78,78,torch.nn.functional.nll_loss,ignore_index,"Specifies a target value that is ignored and does not contribute to the input gradient. When `size_average` is `True`, the loss is averaged over non-ignored targets. Default: -100",Default CONSTANT_NUM,bool,,,,0,,
79,79,torch.nn.functional.nll_loss,ignore_index,"Specifies a target value that is ignored and does not contribute to the input gradient. When `size_average` is `True`, the loss is averaged over non-ignored targets. Default: -100",Specifies a PARAM value that is ignored and does not contribute to the PARAM gradient,,,,,,,
80,80,torch.nn.functional.nll_loss,ignore_index,"Specifies a target value that is ignored and does not contribute to the input gradient. When `size_average` is `True`, the loss is averaged over non-ignored targets. Default: -100",When PARAM is CONSTANT_BOOL the loss is averaged over non ignored targets,,,,,,,
81,81,torch.nn.CELU,inplace,can optionally do the operation in-place. Default: `False`,can optionally do the operation in place,,,,,,,
82,82,torch.nn.CELU,inplace,can optionally do the operation in-place. Default: `False`,Default CONSTANT_BOOL,bool,,,,0,,
83,83,torch.nn.functional.dropout3d,inplace,"If set to `True`, will do this operation in-place. Default: `False`",Default CONSTANT_BOOL,bool,,,,0,,
84,84,torch.nn.functional.dropout3d,inplace,"If set to `True`, will do this operation in-place. Default: `False`",If set to CONSTANT_BOOL will do this operation in place,bool,,,,0,,
85,85,torch.nn.RReLU,inplace,can optionally do the operation in-place. Default: `False`,can optionally do the operation in place,,,,,,,
86,86,torch.nn.RReLU,inplace,can optionally do the operation in-place. Default: `False`,Default CONSTANT_BOOL,bool,,,,0,,
87,87,torch.abs,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
88,88,torch.addcdiv,input,the tensor to be added,the D_STRUCTURE to be added,,D_STRUCTURE,,,,,
89,89,torch.addcmul,input,the tensor to be added,the D_STRUCTURE to be added,,D_STRUCTURE,,,,,
90,90,torch.clamp,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
91,91,torch.div,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
92,92,torch.ifft,input,the input tensor of at least `signal_ndim` `+ 1` dimensions,the input D_STRUCTURE of at least PARAM CONSTANT_NUM dimensions,,D_STRUCTURE,,,PARAM +CONSTANT_NUM,,
93,93,torch.le,input,the tensor to compare,the D_STRUCTURE to compare,,D_STRUCTURE,,,,,
94,94,torch.logical_and,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
95,95,torch.masked_select,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
96,96,torch.mm,input,the first matrix to be multiplied,the first matrix to be multiplied,numeric,,,,,,
97,97,torch.narrow,input,the tensor to narrow,the D_STRUCTURE to narrow,,D_STRUCTURE,,,,,
98,98,torch.neg,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
99,99,torch.nn.functional.avg_pool1d,input,"input tensor of shape (minibatch , in _channels , iW) ",input D_STRUCTURE of shape BSTR,,D_STRUCTURE,,BSTR,,,
100,100,torch.nn.functional.conv_transpose2d,input,"input tensor of shape (minibatch , in _channels , iH , iW) ",input D_STRUCTURE of shape BSTR,,D_STRUCTURE,,BSTR,,,
101,101,torch.nonzero,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
102,102,torch.norm,input,the input tensor,the input D_STRUCTURE,,D_STRUCTURE,,,,,
103,103,torch.numel,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
104,104,torch.pinverse,input,"The input tensor of size (*, m, n)  where *  is zero or more batch dimensions",The input D_STRUCTURE of size BSTR where is zero or more batch dimensions,,D_STRUCTURE,,BSTR,,,
105,105,torch.rand_like,input,the size of `input` will determine size of the output tensor.,the size of input will determine size of the output D_STRUCTURE,numeric,,,,,"[0,inf)",
106,106,torch.remainder,input,the dividend,the dividend,,,,,,,
107,107,torch.repeat_interleave,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
108,108,torch.sigmoid,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
109,109,torch.square,input,the input tensor.,the input D_STRUCTURE,,D_STRUCTURE,,,,,
110,110,torch.nn.LSTM,input_size,The number of expected features in the input x,The number of expected features in the input x,int,,,,0,"[0,inf)",
111,111,torch.nn.RNN,input_size,The number of expected features in the input x,The number of expected features in the input x,int,,,,0,"[0,inf)",
112,112,torch.autograd.gradcheck,inputs,inputs to the function,inputs to the function,,,,,,,
113,113,torch.utils.cpp_extension.load,is_python_module,"If `True` (default), imports the produced shared library as a Python module. If `False`, loads it into the process as a plain dynamic library.",If CONSTANT_BOOL BSTR imports the produced shared library as a Python module,bool,,,,0,,
114,114,torch.utils.cpp_extension.load,is_python_module,"If `True` (default), imports the produced shared library as a Python module. If `False`, loads it into the process as a plain dynamic library.",If CONSTANT_BOOL loads it into the process as a plain dynamic library,bool,,,,0,,
115,115,torch.kthvalue,keepdim,whether the output tensor has `dim` retained or not.,whether the output D_STRUCTURE has PARAM retained or not,bool,,,,0,,
116,116,torch.min,keepdim,whether the output tensor has `dim` retained or not.,whether the output D_STRUCTURE has PARAM retained or not,bool,,,,0,,
117,117,torch.sum,keepdim,whether the output tensor has `dim` retained or not.,whether the output D_STRUCTURE has PARAM retained or not,bool,,,,0,,
118,118,torch.nn.AvgPool1d,kernel_size,the size of the window,the size of the window,numeric,,,,,"[0,inf)",
119,119,torch.nn.Conv1d,kernel_size,Size of the convolving kernel,Size of the convolving kernel,numeric,,,,,"[0,inf)",
120,120,torch.nn.Softshrink,lambd,the  lambda  (must be no less than zero) value for the Softshrink formulation. Default: 0.5,Default CONSTANT_NUM,bool,,,,0,,
121,121,torch.nn.Softshrink,lambd,the  lambda  (must be no less than zero) value for the Softshrink formulation. Default: 0.5,the lambda BSTR value for the Softshrink formulation,,,,,,,
122,122,torch.empty_like,layout,"the desired layout of returned tensor. Default: if `None`, defaults to the layout of `input`.",Default if QSTR defaults to the layout of PARAM,,,,,,,
123,123,torch.empty_like,layout,"the desired layout of returned tensor. Default: if `None`, defaults to the layout of `input`.",the desired layout of returned D_STRUCTURE,,,,,,,
124,124,torch.linspace,layout,the desired layout of returned Tensor. Default: `torch.strided`.,Default torch strided,,,,,,,
125,125,torch.linspace,layout,the desired layout of returned Tensor. Default: `torch.strided`.,the desired layout of returned D_STRUCTURE,,,,,,,
126,126,torch.rand,layout,the desired layout of returned Tensor. Default: `torch.strided`.,Default torch strided,,,,,,,
127,127,torch.rand,layout,the desired layout of returned Tensor. Default: `torch.strided`.,the desired layout of returned D_STRUCTURE,,,,,,,
128,128,torch.jit.save,m,A `ScriptModule` to save.,A QSTR to save,,,,,,,
129,129,torch.quantization.swap_module,mapping,a dictionary that maps from nn module to nnq module,a D_STRUCTURE that maps from nn module to nnq module,,,D_STRUCTURE,,,,
130,130,torch.sparse.addmm,mat,a dense matrix to be added,a dense matrix to be added,numeric,,,,,,
131,131,torch.addmm,mat1,the first matrix to be multiplied,the first matrix to be multiplied,numeric,,,,,,
132,132,torch.nn.utils.clip_grad_norm_,max_norm,max norm of the gradients,max norm of the gradients,numeric,,,,,,
133,133,torch.lobpcg,method,"select LOBPCG method. See the description of the function above. Default is ""ortho"".",Default is QSTR,,,,,,,
134,134,torch.lobpcg,method,"select LOBPCG method. See the description of the function above. Default is ""ortho"".",See the description of the function above,,,,,,,
135,135,torch.lobpcg,method,"select LOBPCG method. See the description of the function above. Default is ""ortho"".",select LOBPCG method,,,,,,,
136,136,torch.histc,min,lower end of the range (inclusive),lower end of the range BSTR,,,,,,,
137,137,torch.nn.BatchNorm3d,momentum,the value used for the running_mean and running_var computation. Can be set to `None` for cumulative moving average (i.e. simple average). Default: 0.1,Can be set to QSTR for cumulative moving average i e,,,,,,,
138,138,torch.nn.BatchNorm3d,momentum,the value used for the running_mean and running_var computation. Can be set to `None` for cumulative moving average (i.e. simple average). Default: 0.1,Default CONSTANT_NUM,bool,,,,0,,
139,139,torch.nn.BatchNorm3d,momentum,the value used for the running_mean and running_var computation. Can be set to `None` for cumulative moving average (i.e. simple average). Default: 0.1,simple average,,,,,,,
140,140,torch.nn.BatchNorm3d,momentum,the value used for the running_mean and running_var computation. Can be set to `None` for cumulative moving average (i.e. simple average). Default: 0.1,the value used for the running_mean and running_var computation,,,,,,,
141,141,torch.nn.InstanceNorm1d,momentum,the value used for the running_mean and running_var computation. Default: 0.1,Default CONSTANT_NUM,bool,,,,0,,
142,142,torch.nn.InstanceNorm1d,momentum,the value used for the running_mean and running_var computation. Default: 0.1,the value used for the running_mean and running_var computation,,,,,,,
143,143,torch.nn.utils.prune.remove,name,parameter name within `module` on which pruning will act.,parameter name within PARAM on which pruning will act,,,,,,,
144,144,torch.nn.utils.spectral_norm,name,name of weight parameter,name of weight parameter,string,,,,0,,
145,145,torch.nn.utils.weight_norm,name,name of weight parameter,name of weight parameter,string,,,,0,,
146,146,torch.cuda.set_rng_state,new_state,The desired state,The desired state,,,,,,,
147,147,torch.pca_lowrank,niter,"the number of subspace iterations to conduct; niter must be a nonnegative integer, and defaults to 2.",the number of subspace iterations to conduct niter must be a nonnegative D_TYPE and defaults to CONSTANT_NUM,int,,,,0,"[0,inf)",
148,148,torch.nn.functional.embedding,norm_type,The p of the p-norm to compute for the `max_norm` option. Default `2`.,Default CONSTANT_NUM,bool,,,,0,,
149,149,torch.nn.functional.embedding,norm_type,The p of the p-norm to compute for the `max_norm` option. Default `2`.,The p of the p norm to compute for the PARAM option,,,,,,,
150,150,torch.is_tensor,obj,Object to test,Object to test,,,,,,,
151,151,torch.eq,other,the tensor or value to compare,the D_STRUCTURE or value to compare,D_TYPE,D_STRUCTURE,,,,,
152,152,torch.floor_divide,other,the denominator,the denominator,,,,,,,
153,153,torch.logical_and,other,the tensor to compute AND with,the D_STRUCTURE to compute AND with,,D_STRUCTURE,,,,,
154,154,torch.ne,other,the tensor or value to compare,the D_STRUCTURE or value to compare,D_TYPE,D_STRUCTURE,,,,,
155,155,torch.clamp,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
156,156,torch.gt,out,the output tensor that must be a BoolTensor,the output D_STRUCTURE that must be a D_TYPE,D_TYPE,D_STRUCTURE,,,,,
157,157,torch.log,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
158,158,torch.log1p,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
159,159,torch.logical_and,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
160,160,torch.logical_not,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
161,161,torch.logical_or,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
162,162,torch.logsumexp,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
163,163,torch.mode,out,"the result tuple of two output tensors (values, indices)",the result D_STRUCTURE of two output D_STRUCTURE BSTR,,,D_STRUCTURE,,,,
164,164,torch.round,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
165,165,torch.sin,out,the output tensor.,the output D_STRUCTURE,,D_STRUCTURE,,,,,
166,166,torch.symeig,out,"the output tuple of (Tensor, Tensor)",the output D_STRUCTURE of BSTR,,D_STRUCTURE,,,,,
167,167,torch.nn.functional.adaptive_avg_pool1d,output_size,the target output size (single integer),the target output size BSTR,numeric,,,,,"[0,inf)",
168,168,torch.autograd.grad,outputs,outputs of the differentiated function.,outputs of the differentiated function,,,,,,,
169,169,torch.distributions.kl.kl_divergence,p,A `Distribution` object.,A QSTR object,,,,,,,
170,170,torch.nn.ConstantPad3d,padding,"the size of the padding. If is int, uses the same padding in all boundaries. If a 6-tuple, uses (padding _left , padding _right , padding _top , padding _bottom , padding _front , padding _back )",If a CONSTANT_NUM D_STRUCTURE uses BSTR,,,D_STRUCTURE,,1,,
171,171,torch.nn.ConstantPad3d,padding,"the size of the padding. If is int, uses the same padding in all boundaries. If a 6-tuple, uses (padding _left , padding _right , padding _top , padding _bottom , padding _front , padding _back )",If is D_TYPE uses the same padding in all boundaries,D_TYPE,,,,,,
172,172,torch.nn.ConstantPad3d,padding,"the size of the padding. If is int, uses the same padding in all boundaries. If a 6-tuple, uses (padding _left , padding _right , padding _top , padding _bottom , padding _front , padding _back )",the size of the padding,numeric,,,,,"[0,inf)",
173,173,torch.nn.functional.avg_pool1d,padding,"implicit zero paddings on both sides of the input. Can be a single number or a tuple (padW,). Default: 0",Can be a single number or a D_STRUCTURE BSTR,int,,D_STRUCTURE,,0;1,,
174,174,torch.nn.functional.avg_pool1d,padding,"implicit zero paddings on both sides of the input. Can be a single number or a tuple (padW,). Default: 0",Default CONSTANT_NUM,bool,,,,0,,
175,175,torch.nn.functional.avg_pool1d,padding,"implicit zero paddings on both sides of the input. Can be a single number or a tuple (padW,). Default: 0",implicit zero paddings on both sides of the PARAM,,,,,,,
176,176,torch.nn.MaxUnpool2d,padding,Padding that was added to the input,padding that was added to the input,,,,,,,
177,177,torch.nn.functional.embedding,padding_idx,"If given, pads the output with the embedding vector at `padding_idx` (initialized to zeros) whenever it encounters the index.",If given pads the output with the embedding vector at padding_idx BSTR whenever it encounters the index,,,,,,,
178,178,torch.hamming_window,periodic,"If True, returns a window to be used as periodic function. If False, return a symmetric window.",If CONSTANT_BOOL return a symmetric window,bool,,,,0,,
179,179,torch.hamming_window,periodic,"If True, returns a window to be used as periodic function. If False, return a symmetric window.",If CONSTANT_BOOL returns a window to be used as periodic function,bool,,,,0,,
180,180,torch.nn.functional.binary_cross_entropy_with_logits,pos_weight,a weight of positive examples. Must be a vector with length equal to the number of classes.,a PARAM of positive examples,numeric,,,,,,
181,181,torch.nn.functional.binary_cross_entropy_with_logits,pos_weight,a weight of positive examples. Must be a vector with length equal to the number of classes.,Must be a vector with length equal to the number of classes,,,vector,,1,,
182,182,torch.hub.load_state_dict_from_url,progress,whether or not to display a progress bar to stderr. Default: True,Default CONSTANT_BOOL,bool,,,,0,,
183,183,torch.hub.load_state_dict_from_url,progress,whether or not to display a progress bar to stderr. Default: True,whether or not to display a progress bar to stderr,bool,,,,0,,
184,184,torch.nn.utils.prune.global_unstructured,pruning_method,"a valid pruning function from this module, or a custom one implemented by the user that satisfies the implementation guidelines and has `PRUNING_TYPE='unstructured'`.",a valid pruning function from this module or a custom one implemented by the user that satisfies the implementation guidelines and has PRUNING_TYPE QSTR,,,,,,,
185,185,torch.quantization.propagate_qconfig_,qconfig_dict,"dictionary that maps from name or type of submodule to quantization configuration, qconfig applies to all submodules of a given module unless qconfig for the submodules are specified (when the submodule already has qconfig attribute)",D_STRUCTURE that maps from name or type of submodule to quantization configuration qconfig applies to all submodules of a given PARAM unless qconfig for the submodules are specified BSTR,,,D_STRUCTURE,,,,
186,186,torch.nn.BCELoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",By default the losses are averaged or summed over observations for each minibatch depending on PARAM,,,,,,,
187,187,torch.nn.BCELoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
188,188,torch.nn.BCELoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Deprecated BSTR,,,,,,,
189,189,torch.nn.BCELoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",When reduce is CONSTANT_BOOL returns a loss per batch element instead and ignores PARAM,,,,,,,
190,190,torch.nn.MultiLabelMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",By default the losses are averaged or summed over observations for each minibatch depending on PARAM,,,,,,,
191,191,torch.nn.MultiLabelMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
192,192,torch.nn.MultiLabelMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Deprecated BSTR,,,,,,,
193,193,torch.nn.MultiLabelMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",When reduce is CONSTANT_BOOL returns a loss per batch element instead and ignores PARAM,,,,,,,
194,194,torch.nn.TripletMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",By default the losses are averaged or summed over observations for each minibatch depending on PARAM,,,,,,,
195,195,torch.nn.TripletMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
196,196,torch.nn.TripletMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",Deprecated BSTR,,,,,,,
197,197,torch.nn.TripletMarginLoss,reduce,"Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`",When reduce is CONSTANT_BOOL returns a loss per batch element instead and ignores PARAM,,,,,,,
198,198,torch.nn.CrossEntropyLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Default QSTR,,,,,,,
199,199,torch.nn.CrossEntropyLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Note PARAM and PARAM are in the process of being deprecated and in the meantime specifying either of those two args will override reduction,,,,,,,
200,200,torch.nn.CrossEntropyLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",QSTR no reduction will be applied QSTR the sum of the output will be divided by the number of elements in the output QSTR the output will be summed,,,,,,,
201,201,torch.nn.CrossEntropyLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Specifies the reduction to apply to the output QSTR QSTR QSTR,,,,,,,QSTR
202,202,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,Default QSTR,,,,,,,
203,203,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,QSTR no reduction will be applied,,,,,,,
204,204,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,QSTR the output will be divided by the number of elements in the output,,,,,,,
205,205,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,QSTR the output will be summed,,,,,,,
206,206,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,QSTR the sum of the output will be divided by batchsize,,,,,,,
207,207,torch.nn.KLDivLoss,reduction,Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`,Specifies the reduction to apply to the output QSTR QSTR QSTR QSTR,,,,,,,QSTR
208,208,torch.nn.NLLLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Default QSTR,,,,,,,
209,209,torch.nn.NLLLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Note PARAM and PARAM are in the process of being deprecated and in the meantime specifying either of those two args will override reduction,,,,,,,
210,210,torch.nn.NLLLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",QSTR no reduction will be applied QSTR the sum of the output will be divided by the number of elements in the output QSTR the output will be summed,,,,,,,
211,211,torch.nn.NLLLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Specifies the reduction to apply to the output QSTR QSTR QSTR,,,,,,,QSTR
212,212,torch.nn.TripletMarginLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Default QSTR,,,,,,,
213,213,torch.nn.TripletMarginLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Note PARAM and PARAM are in the process of being deprecated and in the meantime specifying either of those two args will override reduction,,,,,,,
214,214,torch.nn.TripletMarginLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",QSTR no reduction will be applied QSTR the sum of the output will be divided by the number of elements in the output QSTR the output will be summed,,,,,,,
215,215,torch.nn.TripletMarginLoss,reduction,"Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`",Specifies the reduction to apply to the output QSTR QSTR QSTR,,,,,,,QSTR
216,216,torch.eye,requires_grad,If autograd should record operations on the returned tensor. Default: `False`.,Default CONSTANT_BOOL,bool,,,,0,,
217,217,torch.eye,requires_grad,If autograd should record operations on the returned tensor. Default: `False`.,If autograd should record operations on the returned D_STRUCTURE,,,,,,,
218,218,torch.sparse_coo_tensor,requires_grad,If autograd should record operations on the returned tensor. Default: `False`.,Default CONSTANT_BOOL,bool,,,,0,,
219,219,torch.sparse_coo_tensor,requires_grad,If autograd should record operations on the returned tensor. Default: `False`.,If autograd should record operations on the returned D_STRUCTURE,,,,,,,
220,220,torch.nn.functional.adaptive_max_pool3d,return_indices,whether to return pooling indices. Default: `False`,Default CONSTANT_BOOL,bool,,,,0,,
221,221,torch.nn.functional.adaptive_max_pool3d,return_indices,whether to return pooling indices. Default: `False`,whether to return pooling indices,bool,,,,0,,
222,222,torch.nn.MaxPool2d,return_indices,"if `True`, will return the max indices along with the outputs. Useful for `torch.nn.MaxUnpool2d` later",if CONSTANT_BOOL will return the max indices along with the outputs,bool,,,,0,,
223,223,torch.nn.MaxPool2d,return_indices,"if `True`, will return the max indices along with the outputs. Useful for `torch.nn.MaxUnpool2d` later",Useful for torch nn MaxUnpool2d later,,,,,,,
224,224,torch.triu_indices,row,number of rows in the 2-D matrix.,number of rows in the CONSTANT_NUM D matrix,int,,,,0,"[0,inf)",
225,225,torch.autograd.gradcheck,rtol,relative tolerance,relative tolerance,,,,,,,
226,226,torch.nn.quantized.functional.conv3d,scale,quantization scale for the output. Default: 1.0,Default CONSTANT_NUM,bool,,,,0,,
227,227,torch.nn.quantized.functional.conv3d,scale,quantization scale for the output. Default: 1.0,quantization scale for the output,,,,,,,
228,228,torch.cuda.manual_seed,seed,The desired seed.,The desired seed,,,,,,,
229,229,torch.rfft,signal_ndim,"the number of dimensions in each signal. `signal_ndim` can only be 1, 2 or 3",the number of dimensions in each signal,int,,,,0,"[0,inf)",
230,230,torch.rfft,signal_ndim,"the number of dimensions in each signal. `signal_ndim` can only be 1, 2 or 3",signal_ndim can only be CONSTANT_NUM,,,,,,,CONSTANT_NUM
231,231,torch.normal,size,a sequence of integers defining the shape of the output tensor.,a D_STRUCTURE of D_TYPE defining the shape of the output D_STRUCTURE,D_TYPE,,D_STRUCTURE,,1,,
232,232,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",By default the losses are averaged over each loss element in the batch,,,,,,,
233,233,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",Default CONSTANT_BOOL,bool,,,,0,,
234,234,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",Deprecated BSTR,,,,,,,
235,235,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",If the field size_average is set to CONSTANT_BOOL the losses are instead summed for each minibatch,,,,,,,
236,236,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",Ignored when PARAM is CONSTANT_BOOL,,,,,,,
237,237,torch.nn.L1Loss,size_average,"Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when reduce is `False`. Default: `True`",Note that for some losses there are multiple elements per sample,,,,,,,
238,238,torch.utils.cpp_extension.load,sources,A list of relative or absolute paths to C++ source files.,A D_STRUCTURE of relative or absolute paths to C source files,,,D_STRUCTURE,,,,
239,239,torch.distributed.broadcast,src,Source rank.,Source rank,int,,,,,,
240,240,torch.logspace,start,the starting value for the set of points,the starting value for the set of points,,,,,,,
241,241,torch.narrow,start,the starting dimension,the starting dimension,int,,,,0,,
242,242,torch.linspace,steps,number of points to sample between `start` and `end`. Default: `100`.,Default CONSTANT_NUM,bool,,,,0,,
243,243,torch.linspace,steps,number of points to sample between `start` and `end`. Default: `100`.,number of points to sample between PARAM and PARAM,int,,,,0,"[0,inf)",
244,244,torch.as_strided,storage_offset,the offset in the underlying storage of the output tensor,the offset in the underlying storage of the output D_STRUCTURE,,,,,,,
245,245,torch.cuda.stream,stream,selected stream. This manager is a no-op if it's `None`.,selected stream,,,,,,,
246,246,torch.cuda.stream,stream,selected stream. This manager is a no-op if it's `None`.,This manager is a no op if it QSTR,,,,,,,
247,247,torch.autograd.functional.hessian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hessian for said inputs, which is the expected mathematical value. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
248,248,torch.autograd.functional.hessian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hessian for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL an error will be raised when we detect that there exists an input such that all the outputs are independent of it,bool,,,,0,,
249,249,torch.autograd.functional.hessian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hessian for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL we return a D_STRUCTURE of zeros as the hessian for said PARAM which is the expected mathematical value,bool,,,,0,,
250,250,torch.autograd.functional.hvp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hvp for said inputs, which is the expected mathematical value. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
251,251,torch.autograd.functional.hvp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hvp for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL an error will be raised when we detect that there exists an input such that all the outputs are independent of it,bool,,,,0,,
252,252,torch.autograd.functional.hvp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the hvp for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL we return a D_STRUCTURE of zeros as the hvp for said PARAM which is the expected mathematical value,bool,,,,0,,
253,253,torch.autograd.functional.jacobian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the jacobian for said inputs, which is the expected mathematical value. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
254,254,torch.autograd.functional.jacobian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the jacobian for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL an error will be raised when we detect that there exists an input such that all the outputs are independent of it,bool,,,,0,,
255,255,torch.autograd.functional.jacobian,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the jacobian for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL we return a D_STRUCTURE of zeros as the jacobian for said PARAM which is the expected mathematical value,bool,,,,0,,
256,256,torch.autograd.functional.vhp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the vhp for said inputs, which is the expected mathematical value. Defaults to `False`.",Defaults to CONSTANT_BOOL,bool,,,,0,,
257,257,torch.autograd.functional.vhp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the vhp for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL an error will be raised when we detect that there exists an input such that all the outputs are independent of it,bool,,,,0,,
258,258,torch.autograd.functional.vhp,strict,"If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the vhp for said inputs, which is the expected mathematical value. Defaults to `False`.",If CONSTANT_BOOL we return a D_STRUCTURE of zeros as the vhp for said PARAM which is the expected mathematical value,bool,,,,0,,
259,259,torch.nn.MaxPool2d,stride,the stride of the window. Default value is `kernel_size`,Default value is PARAM,,,,,,,
260,260,torch.nn.MaxPool2d,stride,the stride of the window. Default value is `kernel_size`,the stride of the window,int,,,,,"[0,inf)",
261,261,torch.nn.MaxUnpool1d,stride,Stride of the max pooling window. It is set to `kernel_size` by default.,It is set to PARAM by default,,,,,,,
262,262,torch.nn.MaxUnpool1d,stride,Stride of the max pooling window. It is set to `kernel_size` by default.,stride of the max pooling window,int,,,,,"[0,inf)",
263,263,torch.nn.quantized.functional.avg_pool2d,stride,"stride of the pooling operation. Can be a single number or a tuple (sH, sW). Default: `kernel_size`",Can be a single number or a D_STRUCTURE BSTR,int,,D_STRUCTURE,,0;1,,
264,264,torch.nn.quantized.functional.avg_pool2d,stride,"stride of the pooling operation. Can be a single number or a tuple (sH, sW). Default: `kernel_size`",Default PARAM,,,,,,,
265,265,torch.nn.quantized.functional.avg_pool2d,stride,"stride of the pooling operation. Can be a single number or a tuple (sH, sW). Default: `kernel_size`",stride of the pooling operation,int,,,,,"[0,inf)",
266,266,torch.nn.Unfold,stride,the stride of the sliding blocks in the input spatial dimensions. Default: 1,Default CONSTANT_NUM,bool,,,,0,,
267,267,torch.nn.Unfold,stride,the stride of the sliding blocks in the input spatial dimensions. Default: 1,the stride of the sliding blocks in the input spatial dimensions,int,,,,,"[0,inf)",
268,268,torch.nn.functional.kl_div,target,Tensor of the same shape as input,D_STRUCTURE of the same shape as PARAM,,D_STRUCTURE,,&input,,,
269,269,torch.distributed.all_gather,tensor,Tensor to be broadcast from current process.,D_STRUCTURE to be broadcast from current process,,D_STRUCTURE,,,,,
270,270,torch.nn.init.ones_,tensor,an n-dimensional torch.Tensor,an n dimensional D_STRUCTURE,,D_STRUCTURE,,,,,
271,271,torch.cat,tensors,"any python sequence of tensors of the same type. Non-empty tensors provided must have the same shape, except in the cat dimension.",any python D_STRUCTURE of D_STRUCTURE of the same type,,D_STRUCTURE,D_STRUCTURE,,,,
272,272,torch.cat,tensors,"any python sequence of tensors of the same type. Non-empty tensors provided must have the same shape, except in the cat dimension.",Non empty D_STRUCTURE provided must have the same shape except in the cat dimension,,D_STRUCTURE,,,,,
273,273,torch.nn.functional.affine_grid,theta,input batch of affine matrices with shape (N  times 2  times 3 ) for 2D or (N  times 3  times 4 ) for 3D,input batch of affine matrices with shape BSTR for 3D,numeric,,,BSTR,,,
274,274,torch.can_cast,to,The target `torch.dtype`.,The target D_TYPE,D_TYPE,,,,,,
275,275,torch.hub.download_url_to_file,url,URL of the object to download,url of the object to download,,,,,,,
276,276,torch.addcdiv,value,multiplier for tensor1 / tensor2,multiplier for PARAM PARAM,numeric,,,,,,
277,277,torch.sparse_coo_tensor,values,"Initial values for the tensor. Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",Can be a D_STRUCTURE NumPy D_STRUCTURE scalar and other types,,,D_STRUCTURE,,0;1,,
278,278,torch.sparse_coo_tensor,values,"Initial values for the tensor. Can be a list, tuple, NumPy `ndarray`, scalar, and other types.",Initial values for the D_STRUCTURE,,,,,,,
279,279,torch.onnx.export,verbose,"if specified, we will print out a debug description of the trace being exported.",if specified we will print out a debug description of the trace being exported,,,,,,,
280,280,torch.nn.functional.binary_cross_entropy_with_logits,weight,a manual rescaling weight if provided it's repeated to match input tensor shape,a manual rescaling weight if provided it repeated to match PARAM D_STRUCTURE shape,numeric,,,,,,
281,281,torch.nn.functional.conv_transpose1d,weight,"filters of shape (in _channels ,  out _channels/groups , kW) ",filters of shape BSTR,,,,BSTR,,,
282,282,torch.cdist,x1,input tensor of shape B  times P  times M .,input D_STRUCTURE of shape B times P times M,,D_STRUCTURE,,"[B,P,M]",,,
283,283,torch.nn.CTCLoss,zero_infinity,Whether to zero infinite losses and the associated gradients. Default: `False` Infinite losses mainly occur when the inputs are too short to be aligned to the targets.,Default CONSTANT_BOOL Infinite losses mainly occur when the inputs are too D_TYPE to be aligned to the targets,bool,,,,0,,
284,284,torch.nn.CTCLoss,zero_infinity,Whether to zero infinite losses and the associated gradients. Default: `False` Infinite losses mainly occur when the inputs are too short to be aligned to the targets.,Whether to zero infinite losses and the associated gradients,bool,,,,0,,
285,285,torch.clamp,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
286,286,torch.addcdiv,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
287,287,torch.numel,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
288,288,torch.masked_select,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
289,289,torch.addmm,mat1,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
290,290,torch.sigmoid,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
291,291,torch.logical_and,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
292,292,torch.mm,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
293,293,torch.abs,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
294,294,torch.remainder,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
295,295,torch.square,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
296,296,torch.einsum,*operands,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
297,297,torch.norm,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
298,298,torch.tensordot,a,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
299,299,torch.neg,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
300,300,torch.div,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
301,301,torch.ifft,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
302,302,torch.tensordot,b,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
303,303,torch.rand_like,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
304,304,torch.repeat_interleave,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
305,305,torch.narrow,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
306,306,torch.nonzero,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
307,307,torch.logical_and,other,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
308,308,torch.cdist,x1,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
309,309,torch.le,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
310,310,torch.distributed.all_gather,tensor,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
311,311,torch.addcmul,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
312,312,torch.sparse.addmm,mat,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
313,313,torch.pinverse,input,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
314,314,torch.sparse_coo_tensor,values,DD: array_like,ONE_WORD D_STRUCTURE,,,D_STRUCTURE,,,,
315,315,torch.nn.functional.affine_grid,theta,DD: Tensor,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,,
316,316,torch.cat,tensors,DD: sequence of Tensors,D_STRUCTURE of D_STRUCTURE,,D_STRUCTURE,D_STRUCTURE,,,,
317,317,torch.autograd.grad,outputs,DD: sequence of Tensor,D_STRUCTURE of D_STRUCTURE,,D_STRUCTURE,D_STRUCTURE,,,,
318,318,torch.autograd.gradcheck,inputs,DD: tuple of Tensor or Tensor,D_STRUCTURE of D_STRUCTURE,,D_STRUCTURE,D_STRUCTURE,,,,
319,319,torch.autograd.gradgradcheck,grad_outputs,"DD: tuple of Tensor or Tensor, optional",D_STRUCTURE of D_STRUCTURE optional,,D_STRUCTURE,D_STRUCTURE,,,,
320,320,torch.logical_and,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
321,321,torch.round,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
322,322,torch.symeig,out,"DD: tuple, optional",D_STRUCTURE optional,,,D_STRUCTURE,,,,
323,323,torch.mode,out,"DD: tuple, optional",D_STRUCTURE optional,,,D_STRUCTURE,,,,
324,324,torch.gt,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
325,325,torch.logsumexp,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
326,326,torch.log1p,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
327,327,torch.clamp,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
328,328,torch.logical_not,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
329,329,torch.nn.functional.binary_cross_entropy_with_logits,weight,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
330,330,torch.nn.functional.binary_cross_entropy_with_logits,pos_weight,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
331,331,torch.sin,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
332,332,torch.logical_or,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
333,333,torch.log,out,"DD: Tensor, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,,
334,334,torch.ne,other,DD: Tensor or float,D_STRUCTURE or D_TYPE,D_TYPE,D_STRUCTURE,,,,,
335,335,torch.eq,other,DD: Tensor or float,D_STRUCTURE or D_TYPE,D_TYPE,D_STRUCTURE,,,,,
336,336,torch.floor_divide,other,DD: Tensor or Scalar,D_STRUCTURE or Scalar,,D_STRUCTURE,,,0,,
337,337,torch.linspace,steps,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
338,338,torch.nn.utils.prune.random_unstructured,amount,DD: int or float,ONE_WORD D_TYPE,D_TYPE,,,,,,
339,339,torch.distributed.send,dst,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
340,340,torch.cuda.set_rng_state,new_state,DD: torch.ByteTensor,ONE_WORD D_TYPE,D_TYPE,,,,,,
341,341,torch.triu_indices,row,DD: `int`,ONE_WORD D_TYPE,D_TYPE,,,,,,
342,342,torch.nn.utils.prune.remove,name,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,,,
343,343,torch.narrow,start,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
344,344,torch.hub.download_url_to_file,url,DD: string,ONE_WORD D_TYPE,D_TYPE,,,,,,
345,345,torch.cuda.manual_seed,seed,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
346,346,torch.histc,min,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
347,347,torch.sum,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,,,,
348,348,torch.normal,size,DD: int...,ONE_WORD D_TYPE,D_TYPE,,,,,,
349,349,torch.kthvalue,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,,,,
350,350,torch.min,keepdim,DD: bool,ONE_WORD D_TYPE,D_TYPE,,,,,,
351,351,torch.distributed.broadcast,src,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
352,352,torch.unsqueeze,dim,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
353,353,torch.nn.functional.gumbel_softmax,dim,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
354,354,torch.quantize_per_channel,axis,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
355,355,torch.chunk,chunks,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
356,356,torch.rfft,signal_ndim,DD: int,ONE_WORD D_TYPE,D_TYPE,,,,,,
357,357,torch.logspace,start,DD: float,ONE_WORD D_TYPE,D_TYPE,,,,,,
358,358,torch.nn.utils.clip_grad_norm_,max_norm,DD: float or int,ONE_WORD D_TYPE,D_TYPE,,,,,,
359,359,torch.nn.ConstantPad3d,padding,"DD: int, tuple",D_TYPE D_STRUCTURE,D_TYPE,,D_STRUCTURE,,,,
360,360,torch.onnx.export,verbose,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,,,,,
361,361,torch.nn.TripletMarginLoss,reduction,"DD: string, optional",D_TYPE optional,D_TYPE,,,,,,
362,362,torch.nn.utils.spectral_norm,name,"DD: str, optional",D_TYPE optional,D_TYPE,,,,,,
363,363,torch.lobpcg,method,"DD: str, optional",D_TYPE optional,D_TYPE,,,,,,
364,364,torch.nn.CTCLoss,zero_infinity,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
365,365,torch.nn.functional.nll_loss,ignore_index,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
366,366,torch.eye,requires_grad,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
367,367,torch.autograd.functional.jacobian,strict,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
368,368,torch.triu,diagonal,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
369,369,torch.nn.MultiLabelMarginLoss,reduce,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
370,370,torch.nn.ConvTranspose2d,groups,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
371,371,torch.nn.CrossEntropyLoss,reduction,"DD: string, optional",D_TYPE optional,D_TYPE,,,,,,
372,372,torch.pca_lowrank,niter,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
373,373,torch.nn.KLDivLoss,reduction,"DD: string, optional",D_TYPE optional,D_TYPE,,,,,,
374,374,torch.nn.BCELoss,reduce,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
375,375,torch.distributed.all_gather,async_op,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
376,376,torch.nn.AdaptiveLogSoftmaxWithLoss,div_value,"DD: float, optional",D_TYPE optional,D_TYPE,,,,,,
377,377,torch.lu,get_infos,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
378,378,torch.nn.functional.embedding,padding_idx,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
379,379,torch.nn.utils.rnn.pack_padded_sequence,batch_first,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
380,380,torch.nn.TripletMarginLoss,reduce,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
381,381,torch.rand_like,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,,
382,382,torch.hub.load_state_dict_from_url,progress,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
383,383,torch.as_strided,storage_offset,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
384,384,torch.hamming_window,periodic,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
385,385,torch.nn.utils.weight_norm,name,"DD: str, optional",D_TYPE optional,D_TYPE,,,,,,
386,386,torch.autograd.functional.vjp,create_graph,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
387,387,torch.argsort,descending,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
388,388,torch.sparse_coo_tensor,requires_grad,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
389,389,torch.autograd.functional.vhp,strict,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
390,390,torch.nn.functional.interpolate,align_corners,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
391,391,torch.nn.NLLLoss,reduction,"DD: string, optional",D_TYPE optional,D_TYPE,,,,,,
392,392,torch.autograd.functional.hessian,strict,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
393,393,torch.eye,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,,
394,394,torch.nn.functional.embedding,norm_type,"DD: float, optional",D_TYPE optional,D_TYPE,,,,,,
395,395,torch.nn.CosineSimilarity,dim,"DD: int, optional",D_TYPE optional,D_TYPE,,,,,,
396,396,torch.autograd.functional.hvp,strict,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
397,397,torch.autograd.gradcheck,rtol,"DD: float, optional",D_TYPE optional,D_TYPE,,,,,,
398,398,torch.nn.L1Loss,size_average,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
399,399,torch.bartlett_window,dtype,"DD: `torch.dtype`, optional",D_TYPE optional,D_TYPE,,,,,,
400,400,torch.nn.ConvTranspose3d,bias,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
401,401,torch.autograd.functional.hessian,create_graph,"DD: bool, optional",D_TYPE optional,D_TYPE,,,,,,
402,402,torch.nn.MaxUnpool2d,padding,DD: int or tuple,D_TYPE or D_STRUCTURE,D_TYPE,,D_STRUCTURE,,,,
403,403,torch.nn.MaxUnpool1d,stride,DD: int or tuple,D_TYPE or D_STRUCTURE,D_TYPE,,D_STRUCTURE,,,,
404,404,torch.nn.Conv1d,kernel_size,DD: int or tuple,D_TYPE or D_STRUCTURE,D_TYPE,,D_STRUCTURE,,,,
405,405,torch.sum,dim,DD: int or tuple of python:ints,D_TYPE or D_STRUCTURE of python D_TYPE,D_TYPE,,D_STRUCTURE,,,,
406,406,torch.nn.Unfold,stride,"DD: int or tuple, optional",D_TYPE or D_STRUCTURE optional,D_TYPE,,D_STRUCTURE,,,,
407,407,torch.distributions.kl.kl_divergence,p,DD: Distribution,ONE_WORD Distribution,,,,,,,
408,408,torch.can_cast,to,DD: dpython:type,dpython type,dtype,,,,,,
409,409,torch.nn.utils.prune.global_unstructured,pruning_method,DD: function,ONE_WORD function,,,,,,,
410,410,torch.addr,beta,"DD: Number, optional",Number optional,numeric,,,,,,
411,411,torch.addcdiv,value,"DD: Number, optional",Number optional,numeric,,,,,,
412,412,torch.is_tensor,obj,DD: Object,ONE_WORD Object,,,,,,,
413,413,torch.distributed.get_world_size,group,"DD: ProcessGroup, optional",ProcessGroup optional,,,,,,,
414,414,torch.distributed.reduce,group,"DD: ProcessGroup, optional",ProcessGroup optional,,,,,,,
415,415,torch.cuda.stream,stream,DD: Stream,ONE_WORD Stream,,,,,,,
416,416,torch.empty_like,device,"DD: `torch.device`, optional",torch device optional,,,,,,,
417,417,torch.ones,device,"DD: `torch.device`, optional",torch device optional,,,,,,,
418,418,torch.multinomial,generator,"DD: `torch.Generator`, optional",torch Generator optional,,,,,,,
419,419,torch.rand,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,,
420,420,torch.linspace,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,,
421,421,torch.empty_like,layout,"DD: `torch.layout`, optional",torch layout optional,,,,,,,
