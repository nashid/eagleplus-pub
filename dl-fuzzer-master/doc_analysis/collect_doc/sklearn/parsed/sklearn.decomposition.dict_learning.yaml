constraints:
  X: {descp: 'array of shape (n_samples, n_features) Data matrix.'}
  alpha: {descp: 'int, Sparsity controlling parameter.'}
  callback: {default: None, descp: 'callable or None, optional (default: None) Callable
      that gets invoked every five iterations'}
  code_init: {default: None, descp: 'array of shape (n_samples, n_components), Initial
      value for the sparse code for warm restart scenarios.'}
  dict_init: {default: None, descp: 'array of shape (n_components, n_features), Initial
      value for the dictionary for warm restart scenarios.'}
  max_iter: {default: '100', descp: 'int, Maximum number of iterations to perform.'}
  method: {default: lars, descp: '{''lars'', ''cd''} lars: uses the least angle regression
      method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate
      descent method to compute the Lasso solution (linear_model.Lasso). Lars will
      be faster if the estimated components are sparse.'}
  method_max_iter: {default: '1000', descp: 'int, optional (default=1000) Maximum
      number of iterations to perform.'}
  n_components: {descp: 'int, Number of dictionary atoms to extract.'}
  n_jobs: {default: None, descp: 'int or None, optional (default=None) Number of parallel
      jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
      ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.'}
  positive_code: {default: 'False', descp: bool Whether to enforce positivity when
      finding the code.}
  positive_dict: {default: 'False', descp: bool Whether to enforce positivity when
      finding the dictionary.}
  random_state: {default: None, descp: 'int, RandomState instance or None, optional
      (default=None) If int, random_state is the seed used by the random number generator;
      If RandomState instance, random_state is the random number generator; If None,
      the random number generator is the RandomState instance used by `np.random`.'}
  return_n_iter: {default: 'False', descp: bool Whether or not to return the number
      of iterations.}
  tol: {default: 1e-08, descp: 'float, Tolerance for the stopping condition.'}
  verbose: {default: 'False', descp: 'bool, optional (default: False) To control the
      verbosity of the procedure.'}
inputs:
  optional: [max_iter, tol, method, n_jobs, dict_init, code_init, callback, verbose,
    random_state, return_n_iter, positive_dict, positive_code, method_max_iter]
  required: [X, n_components, alpha]
link: ''
package: sklearn
target: dict_learning
title: sklearn.decomposition.dict_learning
version: 0.24.2
