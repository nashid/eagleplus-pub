aliases:
- tf.compat.v1.nn.ctc_beam_search_decoder_v2
constraints:
  beam_width:
    default: '100'
    descp: An int scalar >= 0 (beam search beam width).
    dtype:
    - int
    - tf.dtype
    enum:
    - (beam
    - beam
    - search
    - width)
    ndim:
    - '0'
    - '1'
    range:
    - (beam_search_beam_width)
    - '[0,inf)'
    shape:
    - '[2]'
  inputs:
    descp: 3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`. The logits.
    dtype:
    - float
    - int
    - tf.bool
    - tf.dtype
    - tf.string
    enum:
    - '[max_time'
    - batch_size
    - num_classes]
    ndim:
    - '0'
    - '1'
    - '3'
    range:
    - '[0,inf)'
    - '[max_time,batch_size,num_classes]'
    shape:
    - '[2]'
    - '[max_time,batch_size,num_classes]'
    tensor_t:
    - tf.tensor
  sequence_length:
    descp: 1-D `int32` vector containing sequence lengths, having size`[batch_size]`.
    dtype:
    - int
    - tf.bool
    - tf.int32
    ndim:
    - '0'
    - '1'
    range:
    - '[0,1]'
    - '[0,inf)'
    shape:
    - '[1]'
    - '[batch_size]'
    - '[n]'
    structure:
    - list
  top_paths:
    default: '1'
    descp: An int scalar >= 0, <= beam_width (controls output size).
    dtype:
    - int
    - tf.dtype
    enum:
    - (controls
    - output
    - size)
    ndim:
    - '0'
    - '1'
    range:
    - (controls_output_size)
    - '[0,inf)'
    shape:
    - '[2]'
inputs:
  optional:
  - beam_width
  - top_paths
  required:
  - inputs
  - sequence_length
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/nn/ctc_beam_search_decoder
outputs: A tuple `(decoded, log_probabilities)` where
package: tensorflow
target: ctc_beam_search_decoder
title: tf.nn.ctc_beam_search_decoder
version: 2.1.0
