constraints:
  dense_defaults:
    descp: 'A list of Tensor objects with types from: float32, int64, string. A dict
      mapping string keys to Tensors. The keys of the dict must match the dense_keys
      of the feature.'
    structure:
    - list(tf.tensor)
  dense_keys:
    descp: A list of strings. A list of Ndense string Tensors (scalars). The keys
      expected in the Examples features associated with dense values.
    dtype:
    - tf.string
    ndim:
    - '1'
    structure:
    - list
    - list(tf.string)
    tensor_t:
    - tf.tensor
  dense_shapes:
    descp: A list of shapes (each a tf.TensorShape or list of ints). List of tuples
      with the same length as dense_keys. The shape of the data for each dense feature
      referenced by dense_keys. Required for any input tensors identified by dense_keys.
      Must be either fully defined, or may contain an unknown first dimension. An
      unknown first dimension means the feature is treated as having a variable number
      of blocks, and the output shape along this dimension is considered unknown at
      graph build time. Padding is applied for minibatch elements smaller than the
      maximum number of blocks for the given feature along this dimension.
    dtype:
    - int
    shape:
    - shape:&dense_keys
    structure:
    - list
    - list(int)
  input_dataset:
    descp: A Tensor of type variant.
    dtype:
    - tf.variant
    tensor_t:
    - tf.tensor
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - tf.string
    ndim:
    - '0'
  num_parallel_calls:
    descp: A Tensor of type int64.
    dtype:
    - tf.int64
    ndim:
    - '0'
    range:
    - '[0,inf)'
    tensor_t:
    - tf.tensor
  output_shapes:
    descp: A list of shapes (each a tf.TensorShape or list of ints) that has length
      >= 1. The list of shapes being produced.
    dtype:
    - int
    structure:
    - list
    - list(int)
  output_types:
    descp: A list of tf.DTypes that has length >= 1. The type list for the return
      values.
    dtype:
    - tf.dtype
    ndim:
    - '1'
    shape:
    - '[>=1]'
    structure:
    - list(tf.dtype)
  ragged_keys:
    default: '[]'
    descp: An optional list of strings. Defaults to [].
    dtype:
    - tf.string
    ndim:
    - '1'
    structure:
    - list(tf.string)
  ragged_split_types:
    default: '[]'
    descp: 'An optional list of tf.DTypes from: tf.int32, tf.int64. Defaults to [].'
    dtype:
    - tf.dtype
    ndim:
    - '1'
    structure:
    - list
  ragged_value_types:
    default: '[]'
    descp: 'An optional list of tf.DTypes from: tf.float32, tf.int64, tf.string. Defaults
      to [].'
    dtype:
    - tf.dtype
    ndim:
    - '1'
    structure:
    - list
  sloppy:
    default: 'False'
    descp: An optional bool. Defaults to False.
    dtype:
    - tf.bool
    ndim:
    - '0'
  sparse_keys:
    descp: A list of strings. A list of string keys in the examples features. The
      results for these keys will be returned as SparseTensor objects.
    dtype:
    - tf.string
    ndim:
    - '1'
    structure:
    - list(tf.string)
  sparse_types:
    descp: 'A list of tf.DTypes from: tf.float32, tf.int64, tf.string. A list of DTypes
      of the same length as sparse_keys. Only tf.float32 (FloatList), tf.int64 (Int64List),
      and tf.string (BytesList) are supported.'
    dtype:
    - tf.dtype
    ndim:
    - '1'
    shape:
    - shape:&sparse_keys
    structure:
    - list
    - list(tf.dtype)
inputs:
  optional:
  - sloppy
  - ragged_keys
  - ragged_value_types
  - ragged_split_types
  - name
  required:
  - input_dataset
  - num_parallel_calls
  - dense_defaults
  - sparse_keys
  - dense_keys
  - sparse_types
  - dense_shapes
  - output_types
  - output_shapes
link: https://www.tensorflow.org/versions/r2.3/api_docs/python/tf/raw_ops/ParseExampleDataset
outputs:
- A Tensor of type variant.
package: tensorflow
target: ParseExampleDataset
title: tf.raw_ops.ParseExampleDataset
version: 2.3.0
