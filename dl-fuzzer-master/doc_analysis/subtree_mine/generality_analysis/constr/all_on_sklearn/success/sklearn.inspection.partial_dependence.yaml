constraints:
  X:
    descp: '{array-like or dataframe} of shape (n_samples, n_features) ``X`` is used
      both to generate a grid of values for the ``features``, and to compute the averaged
      predictions when method is ''brute''.'
    dtype:
    - boolean
    ndim:
    - '0'
    - '2'
    shape:
    - '[n_samples,n_features]'
    structure:
    - ndarray
  estimator:
    descp: BaseEstimator A fitted estimator object implementing :term:`predict`, :term:`predict_proba`,
      or :term:`decision_function`. Multioutput-multiclass classifiers are not supported.
    enum:
    - decision_function
    - predict
    - predict_proba
  features:
    descp: array-like of {int, str} The feature (e.g. `[0]`) or pair of interacting
      features (e.g. `[(0, 1)]`) for which the partial dependency should be computed.
    dtype:
    - int
    - string
    ndim:
    - '0'
    structure:
    - ndarray
  grid_resolution:
    default: '100'
    descp: int, optional (default=100) The number of equally spaced points on the
      grid, for each target feature.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  method:
    default: auto
    descp: 'str, optional (default=''auto'') The method used to calculate the averaged
      predictions: - ''recursion'' is only supported for gradient boosting estimator
      (namely :class:`GradientBoostingClassifier<sklearn.ensemble.GradientBoostingClassifier>`,
      :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>`,
      :class:`HistGradientBoostingClassifier<sklearn.ensemble.HistGradientBoostingClassifier>`,
      :class:`HistGradientBoostingRegressor<sklearn.ensemble.HistGradientBoostingRegressor>`)
      but is more efficient in terms of speed. With this method, ``X`` is only used
      to build the grid and the partial dependences are computed using the training
      data. This method does not account for the ``init`` predictor of the boosting
      process, which may lead to incorrect values (see warning below). With this method,
      the target response of a classifier is always the decision function, not the
      predicted probabilities. - ''brute'' is supported for any estimator, but is
      more computationally intensive. - ''auto'': - ''recursion'' is used for :class:`GradientBoostingClassifier<sklearn.ensemble.GradientBoostingClassifier>`
      and :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>`
      if ``init=None``, and for :class:`HistGradientBoostingClassifier<sklearn.ensemble.HistGradientBoostingClassifier>`
      and :class:`HistGradientBoostingRegressor<sklearn.ensemble.HistGradientBoostingRegressor>`.
      - ''brute'' is used for all other estimators.'
    dtype:
    - string
    enum:
    - auto
    - recursion
    ndim:
    - '0'
  percentiles:
    default: (0.05, 0.95)
    descp: tuple of float, optional (default=(0.05, 0.95)) The lower and upper percentile
      used to create the extreme values for the grid. Must be in [0, 1].
    dtype:
    - float
    structure:
    - tuple
  response_method:
    default: auto
    descp: '''auto'', ''predict_proba'' or ''decision_function'',             optional
      (default=''auto'') Specifies whether to use :term:`predict_proba` or :term:`decision_function`
      as the target response. For regressors this parameter is ignored and the response
      is always the output of :term:`predict`. By default, :term:`predict_proba` is
      tried first and we revert to :term:`decision_function` if it doesn''t exist.
      If ``method`` is ''recursion'', the response is always the output of :term:`decision_function`.'
    dtype:
    - boolean
    - string
    enum:
    - auto
    - decision_function
    - predict_proba
    ndim:
    - '0'
inputs:
  optional:
  - response_method
  - percentiles
  - grid_resolution
  - method
  required:
  - estimator
  - X
  - features
link: ''
package: sklearn
target: partial_dependence
title: sklearn.inspection.partial_dependence
version: 0.24.2
