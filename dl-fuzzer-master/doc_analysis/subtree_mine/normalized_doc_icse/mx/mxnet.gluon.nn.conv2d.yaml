constraints:
  '**kwargs':
    descp: ''
    normalized_descp: []
  activation:
    default: None
    descp: 'Activation function to use. See `Activation()`. If you don''t specify
      anything, no activation is applied (ie. "linear" activation: a(x) = x).'
    doc_dtype: str
    normalized_default: DEFAULT None
    normalized_descp:
    - Activation function to use
    - See Activation
    - If you don t specify anything no activation is applied ie
    - QSTR activation a BSTR x
    normalized_docdtype: ONE_WORD D_TYPE
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    doc_dtype: str or Initializer
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Initializer for the bias vector
    normalized_docdtype: D_TYPE or Initializer
  channels:
    descp: The dimensionality of the output space, i.e. the number of output channels
      (filters) in the convolution.
    doc_dtype: int
    normalized_descp:
    - The dimensionality of the output space i e
    - the number of output channels BSTR in the convolution
    normalized_docdtype: ONE_WORD D_TYPE
  dilation:
    default: (1,1)
    descp: Specifies the dilation rate to use for dilated convolution.
    doc_dtype: int or tuple/list of 2 int
    normalized_default: CONSTANT_NUM CONSTANT_NUM
    normalized_descp:
    - Specifies the dilation rate to use for dilated convolution
    normalized_docdtype: D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE
  groups:
    default: '1'
    descp: Controls the connections between inputs and outputs. At groups=1, all inputs
      are convolved to all outputs. At groups=2, the operation becomes equivalent
      to having two conv layers side by side, each seeing half the input channels,
      and producing half the output channels, and both subsequently concatenated.
    doc_dtype: int
    normalized_default: DEFAULT CONSTANT_NUM
    normalized_descp:
    - Controls the connections between inputs and outputs
    - At groups CONSTANT_NUM all inputs are convolved to all outputs
    - At groups CONSTANT_NUM the operation becomes equivalent to having two conv layers
      side by side each seeing half the input PARAM and producing half the output
      PARAM and both subsequently concatenated
    normalized_docdtype: ONE_WORD D_TYPE
  in_channels:
    default: '0'
    descp: The number of input channels to this layer. If not specified, initialization
      will be deferred to the first time forward is called and in_channels will be
      inferred from the shape of input data.
    doc_dtype: int, default 0
    normalized_default: DEFAULT CONSTANT_NUM
    normalized_descp:
    - The number of input PARAM to this layer
    - If not specified initialization will be deferred to the first time forward is
      called and in_channels will be inferred from the shape of input data
    normalized_docdtype: D_TYPE default CONSTANT_NUM
  kernel_size:
    descp: Specifies the dimensions of the convolution window.
    doc_dtype: int or tuple/list of 2 int
    normalized_descp:
    - Specifies the dimensions of the convolution window
    normalized_docdtype: D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE
  layout:
    default: NCHW
    descp: Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC'
      layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width
      dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions.
    doc_dtype: str, default 'NCHW'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Dimension ordering of data and weight
    - Only supports QSTR layout for now
    - QSTR stands for batch channel height and width dimensions respectively
    - Convolution is applied on the QSTR dimensions
    normalized_docdtype: D_TYPE default QSTR
  padding:
    default: (0,0)
    descp: If padding is non-zero, then the input is implicitly zero-padded on both
      sides for padding number of points
    doc_dtype: int or a tuple/list of 2 int,
    normalized_default: CONSTANT_NUM CONSTANT_NUM
    normalized_descp:
    - If padding is non zero then the input is implicitly zero padded on both sides
      for padding number of points
    normalized_docdtype: D_TYPE or a D_STRUCTURE of CONSTANT_NUM D_TYPE
  strides:
    default: (1,1)
    descp: Specify the strides of the convolution.
    doc_dtype: int or tuple/list of 2 int,
    normalized_default: CONSTANT_NUM CONSTANT_NUM
    normalized_descp:
    - Specify the strides of the convolution
    normalized_docdtype: D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE
  use_bias:
    default: 'True'
    descp: Whether the layer uses a bias vector.
    doc_dtype: bool
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - Whether the layer uses a bias vector
    normalized_docdtype: ONE_WORD D_TYPE
  weight_initializer:
    default: None
    descp: Initializer for the weight weights matrix.
    doc_dtype: str or Initializer
    normalized_default: DEFAULT None
    normalized_descp:
    - Initializer for the weight weights matrix
    normalized_docdtype: D_TYPE or Initializer
inputs:
  optional:
  - strides
  - padding
  - dilation
  - groups
  - layout
  - activation
  - use_bias
  - weight_initializer
  - bias_initializer
  - in_channels
  required:
  - channels
  - kernel_size
  - '**kwargs'
link: https://mxnet.apache.org/versions/1.6.0/api/python/docs/api/gluon/nn/index.html#mxnet.gluon.nn.Conv2D
package: mxnet
target: Conv2D
title: mxnet.gluon.nn.Conv2D
version: 1.6.0
