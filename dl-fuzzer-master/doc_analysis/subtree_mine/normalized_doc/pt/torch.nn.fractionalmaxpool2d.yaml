constraints:
  _random_samples:
    default: None
    descp: ''
    normalized_default: DEFAULT None
    normalized_descp: []
  kernel_size:
    descp: the size of the window to take a max over. Can be a single number k (for
      a square kernel of k x k) or a tuple (kh, kw)
    normalized_descp:
    - the size of the window to take a max over
    - Can be a single number k BSTR
  output_ratio:
    default: None
    descp: If one wants to have an output size as a ratio of the input size, this
      option can be given. This has to be a number or tuple in the range (0, 1)
    normalized_default: DEFAULT None
    normalized_descp:
    - If one wants to have an output size as a ratio of the input size, this option
      can be given
    - This has to be a number or D_STRUCTURE in the range BSTR
  output_size:
    default: None
    descp: the target output size of the image of the form oH x oW. Can be a tuple
      (oH, oW) or a single number oH for a square image oH x oH
    normalized_default: DEFAULT None
    normalized_descp:
    - the target output size of the image of the form oH x oW
    - Can be a D_STRUCTURE BSTR or a single number oH for a square image oH x oH
  return_indices:
    default: 'False'
    descp: 'if `True`, will return the indices along with the outputs. Useful to pass
      to `nn.MaxUnpool2d()`. Default: `False`'
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - if CONSTANT_BOOL, will return the indices along with the outputs
    - Useful to pass to nn MaxUnpool2d
    - Default CONSTANT_BOOL
inputs:
  optional:
  - output_size
  - output_ratio
  - return_indices
  - _random_samples
  required:
  - kernel_size
link: https://pytorch.org/docs/stable/nn.html#torch.nn.FractionalMaxPool2d
package: torch
target: FractionalMaxPool2d
title: torch.nn.FractionalMaxPool2d
version: 1.5.0
