aliases:
- tf.compat.v1.keras.backend.rnn
constraints:
  constants:
    default: None
    descp: List of constant values passed at each step.
    normalized_default: DEFAULT None
    normalized_descp:
    - D_STRUCTURE of constant values passed at each step
  go_backwards:
    default: 'False'
    descp: Boolean. If True, do the iteration over the time dimension in reverse order
      and return the reversed sequence.
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - ONE_WORD D_TYPE
    - If CONSTANT_BOOL do the iteration over the time dimension in reverse order and
      return the reversed D_STRUCTURE
  initial_states:
    descp: Tensor with shape `(samples, state_size)`(no time dimension), containing
      the initial values for the states used in the step function. In the case that
      state_size is in a nested shape, the shape of initial_states will also follow
      the nested structure.
    normalized_descp:
    - D_STRUCTURE with shape BSTR BSTR containing the initial values for the states
      used in the step function
    - In the case that state_size is in a nested shape the shape of initial_states
      will also follow the nested structure
  input_length:
    default: None
    descp: An integer or a 1-D Tensor, depending on whether the time dimension is
      fixed-length or not. In case of variable length input, it is used for masking
      in case there's no mask specified.
    normalized_default: DEFAULT None
    normalized_descp:
    - An D_TYPE or a CONSTANT_NUM D D_STRUCTURE depending on whether the time dimension
      is fixed length or not
    - In case of variable length input it is used for masking in case there no PARAM
      specified
  inputs:
    descp: Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or
      nested tensors, and each of which has shape`(samples, time, ...)`.
    normalized_descp:
    - D_STRUCTURE of temporal data of shape BSTR BSTR or nested D_STRUCTURE and each
      of which has shape BSTR
  mask:
    default: None
    descp: Binary tensor with shape `(samples, time, 1)`, with a zero for every element
      that is masked.
    normalized_default: DEFAULT None
    normalized_descp:
    - Binary D_STRUCTURE with shape BSTR with a zero for every element that is masked
  step_function:
    descp: RNN step function. Args;     input; Tensor with shape `(samples, ...)`
      (no time dimension),         representing input for the batch of samples at
      a certain         time step.     states; List of tensors. Returns;     output;
      Tensor with shape `(samples, output_dim)`        (no time dimension).     new_states;
      List of tensors, same length and shapes         as 'states'. The first state
      in the list must be the         output tensor at the previous timestep.
    normalized_descp:
    - RNN step function
    - Args input D_STRUCTURE with shape BSTR BSTR representing input for the batch
      of samples at a certain time step
    - states D_STRUCTURE of D_STRUCTURE
    - Returns output D_STRUCTURE with shape BSTR BSTR
    - new_states D_STRUCTURE of D_STRUCTURE same length and shapes as QSTR
    - The first state in the D_STRUCTURE must be the output D_STRUCTURE at the previous
      timestep
  time_major:
    default: 'False'
    descp: Boolean. If true, the inputs and outputs will be in shape`(timesteps, batch,
      ...)`, whereas in the False case, it will be`(batch, timesteps, ...)`. Using
      `time_major = True` is a bit more efficient because it avoids transposes at
      the beginning and end of the RNN calculation. However, most TensorFlow data
      is batch-major, so by default this function accepts input and emits output in
      batch-major form.
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - ONE_WORD D_TYPE
    - If CONSTANT_BOOL the PARAM and outputs will be in shape BSTR whereas in the
      CONSTANT_BOOL case it will be BSTR
    - Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes
      at the beginning and end of the RNN calculation
    - However most TensorFlow data is batch major so by default this function accepts
      input and emits output in batch major form
  unroll:
    default: 'False'
    descp: Whether to unroll the RNN or to use a symbolic `while_loop`.
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - Whether to unroll the RNN or to use a symbolic QSTR
  zero_output_for_mask:
    default: 'False'
    descp: Boolean. If True, the output for masked timestep will be zeros, whereas
      in the False case, output from previous timestep is returned.
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - ONE_WORD D_TYPE
    - If CONSTANT_BOOL the output for masked timestep will be zeros whereas in the
      CONSTANT_BOOL case output from previous timestep is returned
exceptions:
- ValueError: if input dimension is less than 3.
- ValueError: if `unroll` is `True` but input timestep is not a fixed number.
- ValueError: if `mask` is provided (not `None`) but states is not provided (`len(states)`
    == 0).
inputs:
  optional:
  - go_backwards
  - mask
  - constants
  - unroll
  - input_length
  - time_major
  - zero_output_for_mask
  required:
  - step_function
  - inputs
  - initial_states
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/keras/backend/rnn
outputs: 'A tuple, `(last_output, outputs, new_states)`.     last_output: the latest
  output of the rnn, of shape `(samples, ...)`    outputs: tensor with shape `(samples,
  time, ...)` where each         entry `outputs[s, t]` is the output of the step function         at
  time `t` for sample `s`.     new_states: list of tensors, latest states returned
  by         the step function, of shape `(samples, ...)`.'
package: tensorflow
target: rnn
title: tf.keras.backend.rnn
version: 2.1.0
