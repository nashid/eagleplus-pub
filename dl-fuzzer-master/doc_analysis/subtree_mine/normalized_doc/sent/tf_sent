Zero or more D_STRUCTURE to group
--------------------------------
A name for this operation BSTR
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR , the data is stored in the order of BSTR
--------------------------------
The QSTR format stores data as BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM which defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
Dilations in the batch and depth dimensions must be CONSTANT_NUM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Must be of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD QSTR
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The number of entries by which the filter is moved right at each step
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name scope for the associated operations BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of D_TYPE values these are the axes along which to compute mean and variance
--------------------------------
A D_STRUCTURE of positive weights which can be broadcast with x
--------------------------------
Produce moments with the same dimensionality as the input
--------------------------------
Name used to scope the operation
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of D_TYPE type
--------------------------------
D_TYPE, dtype of returned Keras variable
--------------------------------
None uses the dtype of x
--------------------------------
D_TYPE, name for the variable to create
--------------------------------
Keras variable or D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
A variable
--------------------------------
A D_STRUCTURE
--------------------------------
Rank QSTR D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Number of subdiagonals to keep
--------------------------------
If negative, keep entire lower triangle
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Number of superdiagonals to keep
--------------------------------
If negative, keep entire upper triangle
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
An QSTR instance
--------------------------------
Indices of elements to mask
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operations BSTR
--------------------------------
A file pattern BSTR, or CONSTANT_NUM-D D_STRUCTURE of file patterns
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_TYPE, path to a potential directory
--------------------------------
A python object to check
--------------------------------
A RNN cell instance or a D_STRUCTURE of RNN cell instances
--------------------------------
A RNN cell is a class that has A call BSTR method, returning BSTR
--------------------------------
The call method of the cell can also take the optional argument QSTR , see section QSTR below A QSTR attribute
--------------------------------
This can be a single D_TYPE BSTR in which case it is the size of the recurrent state
--------------------------------
This can also be a D_STRUCTURE of D_TYPE BSTR
--------------------------------
The QSTR can also be TensorShape or D_STRUCTURE of TensorShape, to represent high dimension state A QSTR attribute
--------------------------------
This can be a single D_TYPE or a TensorShape, which represent the shape of the output
--------------------------------
For backward compatible reason, if this attribute is not available for the cell, the value will be inferred by the first element of the QSTR A get_initial_state inputs None, batch_size None, dtype None QSTR call as the initial state, if the user didn t specify any initial state via other means
--------------------------------
The returned initial state should have a shape of BSTR
--------------------------------
The cell might choose to create a D_STRUCTURE full of zeros, or full of other values based on the cell implementation QSTR is the input D_STRUCTURE to the RNN layer, which should contain the batch size as its shape BSTR, and also dtype
--------------------------------
Note that the shape BSTR might be QSTR during the graph construction
--------------------------------
Either the QSTR or the pair of QSTR are provided QSTR is a scalar D_STRUCTURE that represents the batch size of the inputs
--------------------------------
QSTR is D_TYPE that represents the dtype of the inputs
--------------------------------
For backward compatible reason, if this method is not implemented by the cell, the RNN layer will create a zero filled D_STRUCTURE with the size of BSTR
--------------------------------
In the case that QSTR is a D_STRUCTURE of RNN cell instances, the cells will be stacked on top of each other in the RNN, resulting in an efficient stacked RNN
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
Whether to return the last output in the output D_STRUCTURE, or the full D_STRUCTURE
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
Whether to return the last state in addition to the output
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch
--------------------------------
The shape format of the QSTR D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the inputs and outputs will be in shape BSTR, whereas in the CONSTANT_BOOL case, it will be BSTR
--------------------------------
Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation
--------------------------------
However, most TensorFlow data is batch major, so by default this function accepts input and emits output in batch major form
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, the network will be unrolled, else a symbolic loop will be used
--------------------------------
Unrolling can speed up a RNN, although it tends to be more memory intensive
--------------------------------
Unrolling is only suitable for short sequences
--------------------------------
Optimizer identifier, one of D_TYPE name of an optimizerDictionary configuration D_STRUCTURE
--------------------------------
Keras Optimizer instance BSTR
--------------------------------
TensorFlow Optimizer instance BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
An D_TYPE representing the number of records to combine in a single batch
--------------------------------
A optional D_STRUCTURE of default values for the CSV fields
--------------------------------
One item per selected column of the input record
--------------------------------
Each item in the D_STRUCTURE is either a valid CSV dtype BSTR, or aD_STRUCTURE with one of the aforementioned types
--------------------------------
The D_STRUCTURE can either be a scalar default value BSTR
--------------------------------
If a dtype is provided instead of a D_STRUCTURE, the column is also treated as required
--------------------------------
If this D_STRUCTURE is not provided, tries to infer types based on reading the first PARAM rows of files specified, and assumes all columns are optional, defaulting to CONSTANT_NUMfor D_TYPE values and for D_TYPE values
--------------------------------
If both this and PARAM are specified, these must have the same lengths, and QSTR is assumed to be sorted in order of increasing column index
--------------------------------
An optional D_STRUCTURE of D_TYPE that corresponds to the CSV columns, in order
--------------------------------
One per column of the input record
--------------------------------
If this is not provided, infers the column names from the first row of the records
--------------------------------
These names will be the keys of the features D_STRUCTURE of each dataset element
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE scalar evaluating to one of BSTR, QSTR
--------------------------------
Defaults to no compression
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to ,
--------------------------------
Char delimiter to separate fields in a record
--------------------------------
D_STRUCTURE of files or patterns of file paths containing CSV records
--------------------------------
See tf io gfile glob for pattern rules
--------------------------------
A D_TYPE that indicates whether the first rows of provided CSV files correspond to header lines with column names, and should not be included in the data
--------------------------------
ONE_WORD BSTR
--------------------------------
If CONSTANT_BOOL, ignores errors with CSV file parsing, such as malformed data or empty lines, and moves on to the next valid CSV record
--------------------------------
Otherwise, the dataset raises an error and stops processing when encountering any invalid records
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A optional D_TYPE corresponding to the label column
--------------------------------
If provided, the data for this column is returned as a separate D_STRUCTURE from the features D_STRUCTURE, so that the dataset complies with the format expected by a tf Estimator train QSTR tf Estimator evaluate input function
--------------------------------
Additional D_TYPE to recognize as NA NaN
--------------------------------
An D_TYPE specifying the number of times this dataset is repeated
--------------------------------
If None, cycles through the dataset forever
--------------------------------
Number of threads used to read CSV records from files
--------------------------------
If REXPR, the results will be interleaved
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of rows of a file to use for type inference if record_defaults is not provided
--------------------------------
If None, reads all the rows of all the files
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
An D_TYPE specifying the number of feature batches to prefetch for performance improvement
--------------------------------
Recommended value is the number of batches consumed per training step
--------------------------------
Defaults to auto tune
--------------------------------
An optional D_STRUCTURE of D_TYPE indices or D_TYPE column names, that specifies a subset of columns of CSV data to select
--------------------------------
If column names are provided, these must correspond to names provided in PARAM or inferred from the file PARAM lines
--------------------------------
When this argument is specified, only a subset of CSV columns will be parsed and returned, corresponding to the columns specified
--------------------------------
Using this results in faster parsing and lower memory usage
--------------------------------
If both this and PARAM are specified, these must have the same lengths, and PARAM is assumed to be sorted in order of increasing column index
--------------------------------
A D_TYPE that indicates whether the input should be shuffled
--------------------------------
Buffer size to use for shuffling
--------------------------------
A large buffer size ensures better shuffling, but increases memory usage and startup time
--------------------------------
Randomization seed to use for shuffling
--------------------------------
If CONSTANT_BOOL, reading performance will be improved at the cost of non deterministic ordering
--------------------------------
If CONSTANT_BOOL, the order of elements produced is deterministic prior to shuffling elements are still randomized if PARAM CONSTANT_BOOL
--------------------------------
Note that if the seed is set, then order of elements after shuffling is deterministic
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, treats D_TYPE quotation marks as regular characters inside of the D_TYPE fields
--------------------------------
A QSTR proto containing operations to be imported into the default graph
--------------------------------
A D_STRUCTURE mapping input names BSTR in PARAMto D_STRUCTURE objects
--------------------------------
The values of the named input D_STRUCTURE in the imported graph will be re mapped to the respective D_STRUCTURE values
--------------------------------
ONE_WORD BSTR
--------------------------------
A prefix that will be prepended to the names in PARAM
--------------------------------
Note that this does not apply to imported function names
--------------------------------
Defaults to QSTR
--------------------------------
ONE_WORD BSTR
--------------------------------
Deprecated, do not use
--------------------------------
ONE_WORD BSTR
--------------------------------
An QSTR proto with the BSTR D_STRUCTURE of QSTR used by the producer of the graph
--------------------------------
If provided, unrecognized attrs for ops in PARAM that have their default value according to QSTR will be removed
--------------------------------
This will allow some more QSTR produced by later binaries to be accepted by earlier binaries
--------------------------------
A D_STRUCTURE of D_TYPE containing operation names in PARAM that will be returned as QSTR objects and or D_STRUCTURE names in PARAM that will be returned as D_STRUCTURE objects
--------------------------------
An D_TYPE, the axis to compute the product
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
D_TYPE, path to a file
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The size of the spatial block
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE, dtype of returned Keras variable
--------------------------------
D_TYPE, upper boundary of the output interval
--------------------------------
D_TYPE, lower boundary of the output interval
--------------------------------
D_TYPE, name of returned Keras variable
--------------------------------
D_TYPE, random seed
--------------------------------
D_STRUCTURE of D_TYPE, shape of returned Keras variable
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Compression level
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing the number of consecutive elements of this dataset to combine in a single batch
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing whether the last batch should be dropped in the case it has fewer than PARAM elements the default behavior is not to drop the smaller batch
--------------------------------
The dtype that should be used for the QSTR of any new ragged D_STRUCTURE
--------------------------------
Existing tf RaggedTensor elements do not have their row_splits dtype changed
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have real D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions if a CONSTANT_NUM-D D_STRUCTURE must be CONSTANT_NUM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with the same type as PARAM and shape BSTR
--------------------------------
QSTR dimension must match that of PARAM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE and shape BSTR for QSTR data format or BSTR for QSTR data format
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE representing the output shape of the deconvolution op
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
The dimension order is determined by the value of PARAM, see below for details
--------------------------------
The directory of checkpoints
--------------------------------
Optional name of the checkpoint file
--------------------------------
Default to QSTR
--------------------------------
Position where to add a new axis
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A single value compatible with PARAM that is used for padding the sparse data into a dense D_STRUCTURE
--------------------------------
The type of values
--------------------------------
A unique D_TYPE identifying the input features
--------------------------------
If not QSTR , a function that can be used to normalize the value of the D_STRUCTURE after PARAM is applied for parsing
--------------------------------
Normalizer function takes the input D_STRUCTURE as its argument, and returns the output D_STRUCTURE
--------------------------------
e g
--------------------------------
lambda x BSTR
--------------------------------
Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations
--------------------------------
The shape of the input data per D_STRUCTURE id
--------------------------------
E g
--------------------------------
if shape BSTR, each example must contain CONSTANT_NUM sequence_length values
--------------------------------
The type of element in the resulting D_STRUCTURE
--------------------------------
A name for this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Optional non negative D_TYPE scalar D_STRUCTURE giving the number of columns in the resulting matrix
--------------------------------
Defaults to PARAM
--------------------------------
Non negative D_TYPE scalar D_STRUCTURE giving the number of rows in the resulting matrix
--------------------------------
D_TYPE, name of the directory to be created
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the PARAM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The minimum scalar value possibly produced for the PARAM
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An D_TYPE or scalar D_TYPE D_STRUCTURE
--------------------------------
The dimension along which to split
--------------------------------
Must be in the range BSTR
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
Optional, used to specify the number of outputs when it can not be inferred from the shape of QSTR
--------------------------------
Either an D_TYPE indicating the number of splits along PARAM or a CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE containing the sizes of each output D_STRUCTURE along PARAM
--------------------------------
If a scalar, then it must evenly divide PARAM shape BSTR otherwise the sum of sizes along the split PARAM must match that of the PARAM
--------------------------------
The D_STRUCTURE to split
--------------------------------
Used for backwards compatibility
--------------------------------
index actual words with this index and higher
--------------------------------
sequences longer than this will be filtered out
--------------------------------
max number of words to include
--------------------------------
Words are ranked by how often they occur BSTR and only the most frequent words are kept
--------------------------------
words that were cut out because of the PARAMor PARAM limit will be replaced with this character
--------------------------------
where to cache the data relative to keras dataset
--------------------------------
random seed for sample shuffling
--------------------------------
skip the top N most frequently occurring words BSTR
--------------------------------
The start of a D_STRUCTURE will be marked with this character
--------------------------------
Set to CONSTANT_NUM because CONSTANT_NUM is usually the padding character
--------------------------------
Time BSTR to wait for process cleanup to propagate
--------------------------------
D_TYPE of whether or not to perform a cleanup pass using SIGKILL
--------------------------------
The dimension softmax would be performed on
--------------------------------
The default is CONSTANT_NUM which indicates the last dimension
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Scalar D_TYPE D_STRUCTURE
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A scale factor, usually positive
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_FLOAT
--------------------------------
An exponent
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
An offset BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
CONSTANT_NUM-D D_TYPE width of the CONSTANT_NUM-D normalization window
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Index D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
D_STRUCTURE to copy update
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as D_STRUCTURE
--------------------------------
Updates to scatter into output
--------------------------------
An D_TYPE, number of top elements to consider
--------------------------------
A D_STRUCTURE of shape BSTR and type D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of length QSTR and type D_TYPE
--------------------------------
The type of the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The mean of the truncated normal distribution
--------------------------------
A name for the operation BSTR
--------------------------------
A PARAM BSTR D_TYPE D_STRUCTURE of seeds to the random number generator
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The standard deviation of the normal distribution, before truncation
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the depth, height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
one of QSTR BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along each spatial dimension
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE from D_TYPE
--------------------------------
D_STRUCTURE of additional ops to finish before returning
--------------------------------
BSTR A name to use as a QSTR for the operation
--------------------------------
A D_STRUCTURE of D_STRUCTUREs or QSTR , some entries can be QSTR
--------------------------------
An image or images to adjust
--------------------------------
D_TYPE, must be non negative
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
Axis along which to determine similarity
--------------------------------
D_STRUCTURE of predicted targets
--------------------------------
D_STRUCTURE of CONSTANT_BOOL targets
--------------------------------
Archive format to try for extracting the file
--------------------------------
Options are QSTR , and None
--------------------------------
QSTR includes tar, tar gz, and tar bz files
--------------------------------
The default QSTR is QSTR
--------------------------------
None or an empty D_STRUCTURE will return no matches found
--------------------------------
Location to store cached files, when None it defaults to the Keras Directory
--------------------------------
Subdirectory under the Keras cache dir where the file is saved
--------------------------------
If an absolute path path to folder is specified the file will be saved at that location
--------------------------------
CONSTANT_BOOL tries extracting the file as an Archive, like tar or zip
--------------------------------
The expected hash D_TYPE of the file after download
--------------------------------
The sha256 and md5 hash algorithms are both supported
--------------------------------
Name of the file
--------------------------------
If an absolute path path to file txt is specified the file will be saved at that location
--------------------------------
Select the hash algorithm to verify the file
--------------------------------
options are QSTR
--------------------------------
The default QSTR detects the hash algorithm in use
--------------------------------
Deprecated in favor of PARAM
--------------------------------
md5 hash of the file for verification
--------------------------------
Original URL of the file
--------------------------------
Deprecated in favor of PARAM
--------------------------------
D_TYPE, whether the file should be decompressed
--------------------------------
Directory with checkpoints file or path to checkpoint
--------------------------------
A D_STRUCTURE with rank k REXPR
--------------------------------
Diagonal offset BSTR
--------------------------------
Positive value means superdiagonal, CONSTANT_NUM refers to the main diagonal, and negative value means subdiagonals
--------------------------------
QSTR can be a single D_TYPE BSTR or a pair of D_TYPE specifying the low and high ends of a matrix band
--------------------------------
QSTR k BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
The value to fill the area outside the specified diagonal band with
--------------------------------
Default is CONSTANT_NUM
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
Dimension along which to concatenate
--------------------------------
Must be in the range BSTR
--------------------------------
As in Python, indexing for axis is CONSTANT_NUM based
--------------------------------
Positive axis in the rage of BSTR refers to QSTR th dimension
--------------------------------
And negative axis refers to axis rank BSTR th dimension
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects or a single D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
Index of axis for channels in the input image
--------------------------------
Index of axis for columns in the input image
--------------------------------
Value used for points outside the boundaries of the input if mode QSTR
--------------------------------
Points outside the boundaries of the input are filled according to the given mode one of QSTR
--------------------------------
D_TYPE, order of interpolation
--------------------------------
Index of axis for rows in the input image
--------------------------------
Shear angle in degrees
--------------------------------
Rotation angle in degrees
--------------------------------
Width shift
--------------------------------
Heigh shift
--------------------------------
CONSTANT_NUM-D numpy D_STRUCTURE, single image
--------------------------------
Zoom in x direction
--------------------------------
Zoom in y direction
--------------------------------
The distortion is used to skew the unigram probability distribution
--------------------------------
Each weight is first raised to the distortion power before adding to the internal unigram distribution
--------------------------------
As a result, distortion CONSTANT_FLOAT gives regular unigram sampling BSTR, and distortion CONSTANT_FLOAT gives a uniform distribution
--------------------------------
A name for the operation BSTR
--------------------------------
Optionally some reserved IDs can be added in the range BSTR by the users
--------------------------------
One use case is that a special unknown word token is used as ID CONSTANT_NUM
--------------------------------
These IDs will have a sampling probability of CONSTANT_NUM
--------------------------------
An D_TYPE
--------------------------------
The number of classes to randomly sample
--------------------------------
A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism
--------------------------------
This parameter BSTR indicates the number of partitions that are being used in the overall computation
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism
--------------------------------
This parameter BSTR indicates the particular partition number of the operation, when partitioning is being used
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_STRUCTURE of unigram counts or probabilities, one per ID in sequential order
--------------------------------
Exactly one of PARAM and QSTR should be passed to this operation
--------------------------------
A D_TYPE
--------------------------------
Determines whether all sampled classes in a batch are unique
--------------------------------
Each valid line in this file BSTR corresponds to a valid word ID
--------------------------------
IDs are in sequential order, starting from PARAM
--------------------------------
The last entry in each line is expected to be a value corresponding to the count or relative probability
--------------------------------
Exactly one of QSTR and PARAM needs to be passed to this operation
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, factors by which to downscale BSTR BSTR will halve the input in both spatial dimension
--------------------------------
If only one D_TYPE is specified, the same window length will be used for both dimensions
--------------------------------
D_TYPE, D_STRUCTURE of CONSTANT_NUM D_TYPE, or None
--------------------------------
Strides values
--------------------------------
If None, it will default to PARAM
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
An D_TYPE REXPR
--------------------------------
The number of buckets
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
It is used as the column name and the D_STRUCTURE key for feature parsing configs, featureD_STRUCTURE objects, and feature columns
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
an D_TYPE or D_STRUCTURE of a single D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of a single D_TYPE, specifying the length of the CONSTANT_NUM-D convolution window
--------------------------------
One of QSTR BSTR QSTR results in causal BSTR convolutions, e g
--------------------------------
output BSTR does not depend on input t CONSTANT_NUM
--------------------------------
Useful when modeling temporal data where the model should not violate the temporal order
--------------------------------
See WaveNet A Generative Model for Raw Audio, section CONSTANT_FLOAT
--------------------------------
An D_TYPE or D_STRUCTURE of a single D_TYPE, specifying the stride length of the convolution
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A D_TYPE or None
--------------------------------
Specifies whether the channel dimension of the PARAM and output is the last dimension default, or if QSTR does not start with QSTR , or the second dimension if QSTR starts with QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
D_TYPE D_STRUCTURE of known shape BSTR
--------------------------------
If PARAM QSTR , specifies the shape of the convolution kernel pooling window as an D_TYPE D_STRUCTURE of shape REXPR
--------------------------------
If PARAM QSTR , filter_shape is ignored and need not be specified
--------------------------------
D_STRUCTURE of rank REXPR BSTR
--------------------------------
Function that maps BSTR REXPR
--------------------------------
D_TYPE constant equal to QSTR
--------------------------------
Monotonically increasing D_STRUCTURE of num_spatial_dimsD_TYPE which are REXPR specifying the spatial dimensions of PARAMand output
--------------------------------
Defaults to range BSTR
--------------------------------
An D_STRUCTURE of D_STRUCTURE
--------------------------------
Optional name for the op
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE, how many zeros to add at the start and end of dim CONSTANT_NUM
--------------------------------
D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be D_TYPE with shape BSTR
--------------------------------
A name to give this QSTR BSTR
--------------------------------
D_TYPE, name of the directory to be created
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
D_TYPE indicating whether to solve with PARAM or its BSTR adjoint
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
Shape is BSTR
--------------------------------
The input D_STRUCTURE with QSTR non empty elements
--------------------------------
A D_TYPE D_STRUCTURE of length QSTR with QSTR CONSTANT_BOOL values
--------------------------------
An optional D_TYPE, must be set to QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Specify the data format of the PARAM and output data
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Whether to include batch dimension in flattened index of QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
Input to pool over
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
The dtype of the returned argmax D_STRUCTURE
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Axis along which to repeat
--------------------------------
Python D_TYPE, number of times to repeat
--------------------------------
D_STRUCTURE or variable
--------------------------------
The job name under which the new server will be accessible
--------------------------------
a single or a D_STRUCTURE the remote server addr in host port format
--------------------------------
Number of parallel threads
--------------------------------
Constraint function applied to the QSTR matrix
--------------------------------
Initializer for the QSTR matrix
--------------------------------
Regularizer function applied to the QSTR matrix
--------------------------------
D_TYPE REXPR
--------------------------------
Size of the vocabulary, i e
--------------------------------
maximum D_TYPE index CONSTANT_NUM
--------------------------------
Length of input sequences, when it is constant
--------------------------------
This argument is required if you are going to connect QSTR then QSTR layers upstream BSTR
--------------------------------
Whether or not the input value CONSTANT_NUM is a special QSTR value that should be masked out
--------------------------------
This is useful when using recurrent layers which may take variable length input
--------------------------------
If this is CONSTANT_BOOL then all subsequent layers in the model need to support masking or an exception will be raised
--------------------------------
If mask_zero is set to CONSTANT_BOOL, as a consequence, index CONSTANT_NUM can not be used in the vocabulary BSTR
--------------------------------
D_TYPE REXPR
--------------------------------
Dimension of the dense embedding
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A scalar D_TYPE D_STRUCTURE representing the maximum number of boxes to be selected by non max suppression
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
A D_TYPE representing the threshold for deciding when to remove boxes based on score
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR
--------------------------------
Number of parallel threads
--------------------------------
A D_STRUCTURE of shape BSTR
--------------------------------
The class biases
--------------------------------
A D_STRUCTURE of shape BSTR
--------------------------------
The forward activations of the input network
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
The number of negative classes to randomly sample per batch
--------------------------------
This single sample of negative classes is evaluated for each element in the batch
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
A D_TYPE
--------------------------------
Whether to remove QSTR where a sampled class equals one of the target classes
--------------------------------
If set to CONSTANT_BOOL, this is a QSTR loss instead of NCE, and we are learning to generate log odds instead of log probabilities
--------------------------------
See our Candidate Sampling Algorithms Reference
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
a D_STRUCTURE of QSTR returned by a candidate_sampler function
--------------------------------
if None, we default to QSTR
--------------------------------
A D_STRUCTURE of shape BSTR, or a D_STRUCTURE of D_STRUCTUREobjects whose concatenation along dimension CONSTANT_NUM has shape BSTR
--------------------------------
The BSTR class embeddings
--------------------------------
D_STRUCTURE BSTR of characters to filter out, such as punctuation
--------------------------------
Default ,
--------------------------------
t n , includes basic punctuation, tabs, and newlines
--------------------------------
defaults to python QSTR function, can be QSTR or any function that takes in input a D_TYPE and returns a D_TYPE
--------------------------------
Note that QSTR is not a stable hashing function, so it is not consistent across different runs, while QSTR is a stable hashing function
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to set the PARAM to lowercase
--------------------------------
Dimension of the hashing space
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Separator for word splitting
--------------------------------
Input text BSTR
--------------------------------
A scalar, slope of negative section
--------------------------------
Input D_STRUCTURE
--------------------------------
An D_TYPE or scalar D_STRUCTURE denoting overlap offsets
--------------------------------
Must be less than or equal to QSTR
--------------------------------
An optional name for the operation
--------------------------------
A BSTR D_STRUCTURE
--------------------------------
All dimensions may be unknown, and rank must be at least CONSTANT_NUM
--------------------------------
A D_STRUCTURE of tf data Dataset objects with compatible structure
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing the random seed that will be used to create the distribution
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_STRUCTURE of QSTR weights BSTR represents the probability with which an element should be sampled from PARAM BSTR, or a tf data Dataset object where each element is such a D_STRUCTURE
--------------------------------
Defaults to a uniform distribution across PARAM
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR and typeD_TYPE
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Optional name for the operation
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
D_STRUCTURE of ops to run
--------------------------------
An D_TYPE castable default step value, or None to unset
--------------------------------
A name for the operation BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distribution
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A D_STRUCTURE to be shuffled
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be D_TYPE, shape is BSTR
--------------------------------
Cholesky factorization of QSTR , e g
--------------------------------
chol tf linalg cholesky BSTR
--------------------------------
For that reason, only the lower triangular parts BSTR of the last two dimensions of QSTR are used
--------------------------------
The strictly upper part is assumed to be zero and not accessed
--------------------------------
A name to give this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE, same type as PARAM, shape is BSTR
--------------------------------
A tf estimator Estimator instance
--------------------------------
If set, directory containing summary files with eval metrics
--------------------------------
By default, PARAM eval_dir will be used
--------------------------------
D_TYPE, maximum number of training steps with no increase in the given metric
--------------------------------
D_TYPE, metric to track
--------------------------------
QSTR , etc
--------------------------------
D_TYPE, stop is never requested if global step is less than this value
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If specified, calls QSTR at an interval of QSTR seconds
--------------------------------
Defaults to CONSTANT_NUM seconds
--------------------------------
Either this or PARAM must be set
--------------------------------
If specified, calls QSTR every QSTR steps
--------------------------------
Either this or PARAM must be set
--------------------------------
The directory in which checkpoints are saved
--------------------------------
The minimum number of seconds between yielding checkpoints
--------------------------------
The maximum number of seconds to wait between checkpoints
--------------------------------
If left as QSTR , then the process will wait indefinitely
--------------------------------
Optional function to call after a PARAM
--------------------------------
If the function returns CONSTANT_BOOL, then it means that no new checkpoints will be generated and the iterator will exit
--------------------------------
The function is called with no arguments
--------------------------------
A name for the operation BSTR
--------------------------------
A rank n CONSTANT_NUM D_STRUCTURE, n REXPR with type D_TYPE
--------------------------------
For future expansion
--------------------------------
The axis to compute the DCT along
--------------------------------
Must be CONSTANT_NUM
--------------------------------
A BSTR D_TYPE D_STRUCTURE containing the signals to take the DCT of
--------------------------------
For future expansion
--------------------------------
The length of the transform
--------------------------------
Must be QSTR
--------------------------------
An optional name for the operation
--------------------------------
The normalization to apply
--------------------------------
QSTR for no normalization or QSTR for orthonormal normalization
--------------------------------
The IDCT type to perform
--------------------------------
Must be CONSTANT_NUM
--------------------------------
If QSTR is QSTR BSTR, the input is considered a D_STRUCTURE and a single D_STRUCTURE norm is computed over the entire set of values in the D_STRUCTURE, i e
--------------------------------
norm D_STRUCTURE, PARAM PARAM QSTR norm reshape D_STRUCTURE, BSTR , PARAM PARAM
--------------------------------
If QSTR is a Python D_TYPE, the input is considered a batch of D_STRUCTURE, and QSTR determines the axis inD_STRUCTURE over which to compute D_STRUCTURE norms
--------------------------------
If QSTR is a CONSTANT_NUM D_STRUCTURE of Python D_TYPE it is considered a batch of matrices and QSTR determines the axes in D_STRUCTURE over which to compute a matrix norm
--------------------------------
Negative indices are supported
--------------------------------
Example If you are passing a D_STRUCTURE that can be either a matrix or a batch of matrices at runtime, pass axis BSTR instead of axis None to make sure that matrix norms are computed
--------------------------------
The name of the op
--------------------------------
Order of the norm
--------------------------------
Supported values are QSTR , CONSTANT_NUM, np inf and any positive real number yielding the corresponding p norm
--------------------------------
Default is QSTR which is equivalent to Frobenius norm ifD_STRUCTURE is a matrix and equivalent to CONSTANT_NUM norm for D_STRUCTURE
--------------------------------
Some restrictions apply a The Frobenius norm QSTR is not defined for D_STRUCTURE, b If PARAM is a CONSTANT_NUM D_STRUCTURE BSTR, only QSTR , CONSTANT_NUM, np inf are supported
--------------------------------
See the description of PARAMon how to compute norms for a batch of D_STRUCTURE or matrices stored in a D_STRUCTURE
--------------------------------
D_STRUCTURE of types D_TYPE
--------------------------------
A D_STRUCTURE of D_STRUCTURE representing the coefficients of the polynomial
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE representing the variable of the polynomial
--------------------------------
A D_STRUCTURE with type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
The type of the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The mean of the normal distribution
--------------------------------
A name for the operation BSTR
--------------------------------
A PARAM BSTR D_TYPE D_STRUCTURE of seeds to the random number generator
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The standard deviation of the normal distribution
--------------------------------
D_STRUCTURE of shape BSTR padded with CONSTANT_NUM
--------------------------------
A name for this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A CONSTANT_NUM-D scalar D_STRUCTURE
--------------------------------
Must have known shape
--------------------------------
A D_STRUCTURE or QSTR to be scaled
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
The length must be the same as the number of dimensions in QSTR
--------------------------------
A D_STRUCTURE or variable
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass QSTR , no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Default QSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE
--------------------------------
Implementation mode, either CONSTANT_NUM
--------------------------------
Mode CONSTANT_NUM will structure its operations as a larger number of smaller dot products and additions, whereas mode CONSTANT_NUM will batch them into fewer, larger operations
--------------------------------
These modes will have different performance profiles on different hardware and for different applications
--------------------------------
Default CONSTANT_NUM
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
PARAM function to use for the recurrent step
--------------------------------
Default sigmoid QSTR
--------------------------------
If you pass QSTR , no PARAM is applied ie
--------------------------------
QSTR PARAM a BSTR x
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last output
--------------------------------
in the output D_STRUCTURE, or the full D_STRUCTURE
--------------------------------
Default CONSTANT_BOOL
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last state in addition to the output
--------------------------------
Default CONSTANT_BOOL
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch
--------------------------------
The shape format of the QSTR D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the inputs and outputs will be in shape BSTR, whereas in the CONSTANT_BOOL case, it will be BSTR
--------------------------------
Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation
--------------------------------
However, most TensorFlow data is batch major, so by default this function accepts input and emits output in batch major form
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, add CONSTANT_NUM to the bias of the forget gate at initialization
--------------------------------
Setting it to CONSTANT_BOOL will also force PARAM QSTR
--------------------------------
This is recommended in Jozefowicz et al
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, the network will be unrolled, else a symbolic loop will be used
--------------------------------
Unrolling can speed up a RNN, although it tends to be more memory intensive
--------------------------------
Unrolling is only suitable for short sequences
--------------------------------
D_TYPE default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
D_STRUCTURE, with indices sorted in row major order
--------------------------------
Whether to validate the order and range of sparse indices in QSTR
--------------------------------
D_TYPE, the axis that should be normalized
--------------------------------
ONE_WORD BSTR
--------------------------------
D_STRUCTURE with which to center the input
--------------------------------
Fuzz factor
--------------------------------
D_STRUCTURE by which to scale the input
--------------------------------
Mean of batch
--------------------------------
Variance of batch
--------------------------------
Input D_STRUCTURE or variable
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE, the axis or axes that should be normalized BSTR
--------------------------------
We will normalize each element in the specified axis
--------------------------------
The default is CONSTANT_NUM BSTR CONSTANT_NUM BSTR is not allowed
--------------------------------
The data to train on
--------------------------------
It can be passed either as a tf data Dataset, or as a numpy D_STRUCTURE
--------------------------------
Optional argument specifying whether to clear the state of the layer at the start of the call to QSTR , or whether to start from the existing state
--------------------------------
Subclasses may choose to throw if reset_state is set to CONSTANT_BOOL
--------------------------------
Whether to use an anti aliasing filter when downsampling an image
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
ONE_WORD ResizeMethod
--------------------------------
Defaults to QSTR
--------------------------------
A name for this operation BSTR
--------------------------------
Whether to preserve the aspect ratio
--------------------------------
If this is set, then PARAM will be resized to a PARAM that fits in PARAM while preserving the aspect ratio of the original image
--------------------------------
Scales up the image if PARAM is bigger than the current PARAM of the QSTR
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of CONSTANT_NUM elements new_height, new_width
--------------------------------
The new size for the PARAM
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
The input D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose dtype is compatible with QSTR
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
Only the lower triangular part of each inner inner matrix is referenced
--------------------------------
If CONSTANT_BOOL, PARAM is conjugated before solving
--------------------------------
A D_STRUCTURE of D_STRUCTUREs describing left hand sides
--------------------------------
The shape depends of PARAM, see description above
--------------------------------
Must beD_TYPE
--------------------------------
one of QSTR , D_STRUCTURE, or QSTR
--------------------------------
Default is QSTR
--------------------------------
A name to give this QSTR BSTR
--------------------------------
whether to perform partial pivoting
--------------------------------
CONSTANT_BOOL by default
--------------------------------
Partial pivoting makes the procedure more stable, but slower
--------------------------------
Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices see e g
--------------------------------
theorem CONSTANT_FLOAT in BSTR
--------------------------------
A D_STRUCTURE of shape BSTR or BSTR and with the same dtype as PARAM
--------------------------------
Note that if the shape of QSTR isn t known statically, QSTR will be treated as a matrix rather than a D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, PARAM is transposed before solving has no effect if the shape of PARAM is BSTR
--------------------------------
D_TYPE hash_key that will be used by the QSTR function
--------------------------------
If not given, will use a default key
--------------------------------
An D_STRUCTURE of D_STRUCTURE
--------------------------------
Optional name for the op
--------------------------------
An D_TYPE that is REXPR
--------------------------------
output hashed_value num_buckets if num_buckets REXPR else hashed_value
--------------------------------
A function mapping an element of the input dataset to a scalarD_TYPE D_STRUCTURE
--------------------------------
Values should be in BSTR
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE type D_STRUCTURE, shaped BSTR
--------------------------------
If not provided, the CONSTANT_BOOL class distribution is estimated live in a streaming fashion
--------------------------------
ONE_WORD BSTR
--------------------------------
Python D_TYPE seed for the resampler
--------------------------------
A D_TYPE type D_STRUCTURE, shaped BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE of type QSTR
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
The data format of the PARAM and output data
--------------------------------
With the default format QSTR , the data is stored in the order of BSTR
--------------------------------
Alternatively, the format could be QSTR , the data storage order is BSTR
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions must be CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
Shape BSTR
--------------------------------
QSTR must match between PARAM and QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
Must have strides BSTR strides BSTR CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
Scalar defining the number of characters to include in each substring
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Scalar defining the position of first character in each substring
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
The unit that is used to create the substring
--------------------------------
One of QSTR BSTR or QSTR BSTR
--------------------------------
The default is QSTR
--------------------------------
Results are undefined if unit UTF8_CHAR and the PARAM D_TYPE do not contain structurally valid UTF CONSTANT_NUM
--------------------------------
A scalar, slope of negative section default CONSTANT_FLOAT
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Saturation PARAM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Threshold value for thresholded activation
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A tf data Dataset
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
The dimension along which to split
--------------------------------
A name for the operation BSTR
--------------------------------
A Python D_TYPE
--------------------------------
The number of ways to split
--------------------------------
The D_STRUCTURE to split
--------------------------------
The destination type
--------------------------------
The D_STRUCTURE of supported dtypes is the same as QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE or QSTR of D_TYPE type
--------------------------------
It could be D_TYPE
--------------------------------
A potentially ragged D_STRUCTURE
--------------------------------
A potentially ragged D_TYPE D_STRUCTURE
--------------------------------
QSTR shape must be a prefix of PARAMs shape
--------------------------------
rank BSTR must be known statically
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
When set to CONSTANT_BOOL, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells
--------------------------------
For example index CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM PARAM CONSTANT_NUM0 CONSTANT_NUM CONSTANT_NUM6 CONSTANT_NUM CONSTANT_NUMIf the pooling D_STRUCTURE is BSTR, then CONSTANT_NUM6, at index CONSTANT_NUM will be used twice
--------------------------------
The result would be BSTR for fractional avg pooling
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
Pooling ratio for each dimension of PARAM, currently only supports row and col dimension and should be REXPR
--------------------------------
For example, a valid pooling ratio looks like BSTR
--------------------------------
The first and last elements must be CONSTANT_FLOAT because we don t allow pooling on batch and channels dimensions
--------------------------------
CONSTANT_FLOAT and CONSTANT_FLOAT are pooling ratio on height and width dimensions respectively
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
When set to CONSTANT_BOOL, generates the pooling D_STRUCTURE in a pseudorandom fashion, otherwise, in a random fashion
--------------------------------
Check paper Benjamin Graham, Fractional Max Pooling for difference between pseudorandom and random
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If set to be non zero, the random number generator is seeded by the given seed
--------------------------------
Otherwise it is seeded by a random seed
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
D_STRUCTURE of RNN cell instances
--------------------------------
Activation function
--------------------------------
Set it to None to maintain a linear activation
--------------------------------
Optional regularizer function for the output
--------------------------------
Optional projection function to be applied to the bias after being updated by an QSTR
--------------------------------
An initializer for the bias D_STRUCTURE
--------------------------------
If None, the default initializer will be used
--------------------------------
Optional regularizer for the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
The number of depthwise convolution output channels for each input channel
--------------------------------
The total number of depthwise convolution output channels will be equal to num_filters_in depth_multiplier
--------------------------------
Optional projection function to be applied to the depthwise kernel after being updated by an QSTR e g
--------------------------------
used for norm constraints or value constraints for layer weights
--------------------------------
The function must take as input the unprojected variable and must return the projected variable BSTR
--------------------------------
Constraints are not safe to use when doing asynchronous distributed training
--------------------------------
An initializer for the depthwise convolution kernel
--------------------------------
Optional regularizer for the depthwise convolution kernel
--------------------------------
A single D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of filters in the convolution
--------------------------------
A single D_TYPE specifying the spatial dimensions of the PARAM
--------------------------------
A D_TYPE, the name of the layer
--------------------------------
One of QSTR BSTR
--------------------------------
Optional projection function to be applied to the pointwise kernel after being updated by an QSTR
--------------------------------
An initializer for the pointwise convolution kernel
--------------------------------
Optional regularizer for the pointwise convolution kernel
--------------------------------
A single D_TYPE specifying the strides of the convolution
--------------------------------
Specifying any QSTR value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, if CONSTANT_BOOL the weights of this layer will be marked as trainable and listed in layer trainable_weights
--------------------------------
D_TYPE, whether the layer uses a bias
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE to broadcast
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
An CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
The shape of the desired output
--------------------------------
Path to the plugin or the folder of plugins
--------------------------------
Relative or absolute filesystem path to a dynamic library file or folder
--------------------------------
A D_STRUCTURE or RaggedTensor containing the source data for the ngrams
--------------------------------
The op name
--------------------------------
The width BSTR of the ngrams to create
--------------------------------
If this is a D_STRUCTURE, the op will return ngrams of all specified arities in D_STRUCTURE order
--------------------------------
Values must be non D_STRUCTURE D_TYPE greater than CONSTANT_NUM
--------------------------------
A D_STRUCTURE of BSTR, a single D_TYPE, or None
--------------------------------
If None, no padding will be added if a single D_TYPE, then that D_TYPE will be used for both left and right padding
--------------------------------
Values must be Python D_TYPE
--------------------------------
If set, QSTR pad values will be added to both sides of each D_STRUCTURE
--------------------------------
Defaults to PARAM CONSTANT_NUM
--------------------------------
Must be greater than BSTR
--------------------------------
If CONSTANT_BOOL, then ensure that at least one ngram is generated for each input D_STRUCTURE
--------------------------------
In particular, if an input D_STRUCTURE is shorter than min BSTR CONSTANT_NUM pad_width , then generate a single ngram containing the entire D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, then no ngrams are generated for these short input sequences
--------------------------------
The separator D_TYPE used between ngram elements
--------------------------------
Must be a D_TYPE constant, not a D_STRUCTURE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE
--------------------------------
The glob pattern BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE with type D_TYPE
--------------------------------
A function that maps a nested structure of D_STRUCTURE having shapes and types defined by self output_shapes QSTR self output_types to a scalar D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
The dtype for the return value
--------------------------------
Defaults to PARAM dtype , or D_TYPE if PARAM does not have a dtype
--------------------------------
A sorted CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
splits BSTR must be zero
--------------------------------
An D_TYPE, the axis to compute the product
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A CONSTANT_NUM-D BSTR D_STRUCTURE with the same shape as QSTR
--------------------------------
The maximum value to clip by
--------------------------------
A CONSTANT_NUM-D BSTR D_STRUCTURE with the same shape as QSTR
--------------------------------
The minimum value to clip by
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE or QSTR
--------------------------------
Directory with checkpoints file or path to checkpoint file
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
Axes to compute the mean
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM for each entry in PARAM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimensions are retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A tf estimator Estimator instance
--------------------------------
If set, directory containing summary files with eval metrics
--------------------------------
By default, PARAM eval_dir will be used
--------------------------------
D_TYPE, maximum number of training steps with no decrease in the given metric
--------------------------------
D_TYPE, metric to track
--------------------------------
QSTR , etc
--------------------------------
D_TYPE, stop is never requested if global step is less than this value
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If specified, calls QSTR at an interval of QSTR seconds
--------------------------------
Defaults to CONSTANT_NUM seconds
--------------------------------
Either this or PARAM must be set
--------------------------------
If specified, calls QSTR every QSTR steps
--------------------------------
Either this or PARAM must be set
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The D_TYPE to assign a hash bucket
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
The key used to seed the hash function, passed as a D_STRUCTURE of two D_TYPE elements
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The number of buckets
--------------------------------
An D_TYPE D_STRUCTURE of indices
--------------------------------
A D_STRUCTURE
--------------------------------
A QSTR
--------------------------------
A QSTR
--------------------------------
An D_TYPE, the axis to compute the sum
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Whether to use anti aliasing when resizing
--------------------------------
See PARAM resize
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
Method to use for resizing PARAM
--------------------------------
See PARAM resize
--------------------------------
Target height
--------------------------------
Target width
--------------------------------
The D_TYPE ID value to return for out of vocabulary feature values, defaults to CONSTANT_NUM
--------------------------------
This can not be specified with a positive PARAM
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
Non negative D_TYPE, the number of out of vocabulary buckets
--------------------------------
All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value
--------------------------------
A positive QSTR can not be specified with PARAM
--------------------------------
The vocabulary file name
--------------------------------
Number of the elements in the vocabulary
--------------------------------
This must be no greater than length of PARAM, if less than length, later values are ignored
--------------------------------
If None, it is set to the length of PARAM
--------------------------------
A D_TYPE or None
--------------------------------
Specifies whether the channel dimension of the PARAM and output is the last dimension default, or if QSTR does not start with QSTR , or the second dimension if QSTR starts with QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM, defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the spatial dimensions
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
An N CONSTANT_NUM dimensional D_STRUCTURE with the same type as PARAM and shape spatial_filter_shape BSTR
--------------------------------
An N CONSTANT_NUM dimensional D_STRUCTURE of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR, or BSTR input_spatial_shape QSTR NC
--------------------------------
It must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
If not specified QSTR is used
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE representing the output shape of the deconvolution op
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the spatial dimensions
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
The dimension order is determined by the value of PARAM, see below for details
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Scalar D_TYPE D_STRUCTURE
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
A QSTR to convert PARAM to
--------------------------------
An image
--------------------------------
A name for this operation BSTR
--------------------------------
If CONSTANT_BOOL, clip the input before casting BSTR
--------------------------------
RGB image or images
--------------------------------
Size of the last dimension must be CONSTANT_NUM
--------------------------------
A name for this operation BSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Factor to multiply the saturation by
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE
--------------------------------
Specifies the channel dimension
--------------------------------
For N CONSTANT_NUM it can be either QSTR BSTR or QSTR , for N CONSTANT_NUM it can be either QSTR BSTR or QSTR and for N CONSTANT_NUM either QSTR BSTR or QSTR
--------------------------------
D_STRUCTURE of rank N CONSTANT_NUM, of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR, or BSTR input_spatial_shape QSTR NC
--------------------------------
Pooling happens over the spatial dimensions only
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Optional name for the operation
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A python D_TYPE, indicating the dimension along which to stack
--------------------------------
Note Unlike tf stack , the QSTR parameter must be statically known
--------------------------------
Negative PARAM are supported only if the rank of at least one PARAM value is statically known
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE or tf RaggedTensor
--------------------------------
May not be empty
--------------------------------
All QSTR must have the same rank and the same dtype but unlike tf stack , they can have arbitrary dimension sizes
--------------------------------
A scalar or D_STRUCTURE
--------------------------------
The constant multiplier
--------------------------------
A scalar or D_STRUCTURE
--------------------------------
Non negative real number
--------------------------------
RGB image or images to adjust
--------------------------------
Bias D_STRUCTURE to add
--------------------------------
D_TYPE, QSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
BSTR Set the class index to use for the blank label
--------------------------------
Negative values will start from num_classes, ie, CONSTANT_NUM will reproduce the ctc_loss behavior of using num_classes CONSTANT_NUM for the blank symbol
--------------------------------
There is some memory performance overhead to switching from the default of CONSTANT_NUM as an additional shifted copy of the PARAM may be created
--------------------------------
D_STRUCTURE of shape BSTR, None if PARAM is D_STRUCTURE Length of reference label D_STRUCTURE in PARAM
--------------------------------
D_STRUCTURE of shape BSTR or D_STRUCTURE
--------------------------------
D_STRUCTURE of shape BSTR Length of input D_STRUCTURE in PARAM
--------------------------------
D_STRUCTURE of shape BSTR, if PARAM CONSTANT_BOOL, shape is BSTR
--------------------------------
BSTR, PARAM is shaped BSTR
--------------------------------
If CONSTANT_BOOL, shape is BSTR
--------------------------------
A name for this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
ONE_WORD BSTR
--------------------------------
If supplied, enable a faster, memory efficient implementation on TPU
--------------------------------
A D_STRUCTURE of D_STRUCTURE or tf IndexedSlices objects, each with same shape and type
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
D_TYPE that enables allowing scalars and CONSTANT_NUM length D_STRUCTURE broadcasting
--------------------------------
can not be CONSTANT_BOOL when PARAM is CONSTANT_BOOL
--------------------------------
Optional tensor_pb2 DataType value
--------------------------------
D_STRUCTURE of D_TYPE representing the dimensions of D_STRUCTURE
--------------------------------
Values to put in the TensorProto
--------------------------------
D_TYPE that enables verification of a PARAM of PARAM
--------------------------------
Dots per inch
--------------------------------
whether to expand nested models into clusters
--------------------------------
A Keras model instance
--------------------------------
QSTR argument passed to PyDot, a D_TYPE specifying the format of the plot QSTR creates a vertical plot QSTR creates a horizontal plot
--------------------------------
whether to display layer names
--------------------------------
whether to display shape information
--------------------------------
whether to return a pydot Cluster instance
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The number of buckets
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
An D_TYPE
--------------------------------
The axis to unstack along
--------------------------------
Defaults to the first dimension
--------------------------------
Negative values wrap around, so the valid range is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The length of the dimension PARAM
--------------------------------
Automatically inferred if QSTR BSTR
--------------------------------
A rank R REXPR D_STRUCTURE to be unstacked
--------------------------------
A value that can be converted to a D_TYPE object
--------------------------------
This may currently be a D_TYPE object, a QSTR enum, a D_TYPE type name, or a numpy dtype
--------------------------------
whether to compute the full loss
--------------------------------
If CONSTANT_BOOL, a constant term is dropped in favor of more efficient optimization
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of the same type and shape as PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
RGB data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE type to use for the output
--------------------------------
Defaults to D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
Each slice i, represents the unnormalized log probabilities for all classes
--------------------------------
Optional name for the operation
--------------------------------
CONSTANT_NUM D
--------------------------------
Number of independent samples to draw for each row slice
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distribution
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
The QSTR to use for serialization
--------------------------------
The input rank QSTR D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Either an D_TYPE, the D_TYPE QSTR , or an instance of a tf mixed_precision experimental LossScale
--------------------------------
The loss scale to use
--------------------------------
It is recommended to keep this as its default value of QSTR , which will adjust the scaling automatically to prevent QSTR values
--------------------------------
An instance of a tf keras optimizers Optimizer
--------------------------------
D_TYPE, repetition factor
--------------------------------
The type of the elements of the resulting D_STRUCTURE
--------------------------------
Optional name for the D_STRUCTURE
--------------------------------
Optional dimensions of resulting D_STRUCTURE
--------------------------------
A constant value BSTR
--------------------------------
D_STRUCTURE of D_TYPE with target dimensions, or single D_TYPE
--------------------------------
The sizes of x shape axes BSTR QSTR y shape axes BSTR should be equal
--------------------------------
Keras D_STRUCTURE or variable with ndim REXPR
--------------------------------
Keras D_STRUCTURE or variable with ndim REXPR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects, each with same PARAM and type
--------------------------------
A name for the operation BSTR
--------------------------------
Expected shape of elements of PARAM BSTR
--------------------------------
Also controls the output shape of this op, which may affect type inference in other ops
--------------------------------
A value of QSTR means infer the input shape from the shapes in PARAM
--------------------------------
Expected data type of PARAM BSTR
--------------------------------
A value of QSTR means infer the input dtype from PARAM BSTR
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE sized BSTR
--------------------------------
The logits
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Default CONSTANT_BOOL
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE containing D_STRUCTURE lengths, having size BSTR
--------------------------------
The type of the output D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The upper bound on the range of random values to generate
--------------------------------
Defaults to CONSTANT_NUM if PARAM is D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The lower bound on the range of random values to generate
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A PARAM BSTR D_TYPE D_STRUCTURE of seeds to the random number generator
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
D_TYPE, axis along which the softmax normalization is applied
--------------------------------
Input D_STRUCTURE
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
A name for this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
D_STRUCTURE of shape BSTR, D_STRUCTURE length of each batch element
--------------------------------
optional name of the operation
--------------------------------
a D_STRUCTURE operand whose dtype is real, and indices lexicographically ordered
--------------------------------
the other D_STRUCTURE operand with the same requirements BSTR
--------------------------------
The data to train on
--------------------------------
It can be passed either as a tf data Dataset, or as a numpy D_STRUCTURE
--------------------------------
Optional argument specifying whether to clear the state of the layer at the start of the call to QSTR , or whether to start from the existing state
--------------------------------
This argument may not be relevant to all preprocessing layers a subclass of PreprocessingLayer may choose to throw if QSTR is set to CONSTANT_BOOL
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE with type D_TYPE
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
Whether to validate the order and range of sparse indices in QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE numerator of real D_TYPE type
--------------------------------
D_STRUCTURE denominator of real D_TYPE type
--------------------------------
A tf data experimental Structure object representing the structure of each element in the dataset
--------------------------------
A scalar tf variant D_STRUCTURE representing a dataset
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Rank k D_STRUCTURE where k is even and not zero
--------------------------------
A name for the operation BSTR
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have real D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A object that can be converted to D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
D_TYPE to be encoded
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
D_TYPE whether padding is applied at the ends
--------------------------------
A tf compat v1 data Iterator object
--------------------------------
Image data format
--------------------------------
either QSTR
--------------------------------
Dtype to use
--------------------------------
Whether to rescale image values to be within BSTR
--------------------------------
Input Numpy D_STRUCTURE
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass QSTR , no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Default QSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE
--------------------------------
Implementation mode, either CONSTANT_NUM
--------------------------------
Mode CONSTANT_NUM will structure its operations as a larger number of smaller dot products and additions, whereas mode CONSTANT_NUM will batch them into fewer, larger operations
--------------------------------
These modes will have different performance profiles on different hardware and for different applications
--------------------------------
Default CONSTANT_NUM
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
PARAM function to use for the recurrent step
--------------------------------
Default sigmoid QSTR
--------------------------------
If you pass QSTR , no PARAM is applied ie
--------------------------------
QSTR PARAM a BSTR x
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
GRU convention BSTR
--------------------------------
CONSTANT_BOOL QSTR , CONSTANT_BOOL QSTR BSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last output in the output D_STRUCTURE, or the full D_STRUCTURE
--------------------------------
Default CONSTANT_BOOL
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last state in addition to the output
--------------------------------
Default CONSTANT_BOOL
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch
--------------------------------
The shape format of the QSTR D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the inputs and outputs will be in shape BSTR, whereas in the CONSTANT_BOOL case, it will be BSTR
--------------------------------
Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation
--------------------------------
However, most TensorFlow data is batch major, so by default this function accepts input and emits output in batch major form
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, the network will be unrolled, else a symbolic loop will be used
--------------------------------
Unrolling can speed up a RNN, although it tends to be more memory intensive
--------------------------------
Unrolling is only suitable for short sequences
--------------------------------
D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
nD D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
D_TYPE, number of classes to consider
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A tensorflow type dtypes D_TYPE, dtypes D_TYPE, etc
--------------------------------
Limit to the file path included in the printed stack trace
--------------------------------
Applicable only to ops in tf function BSTR
--------------------------------
Limit to the height of the printed stack trace
--------------------------------
Applicable only to ops in tf function BSTR
--------------------------------
One of the following D_TYPE, path where to save the PARAMh5py File object where to save the PARAM
--------------------------------
If CONSTANT_BOOL, save optimizer state together
--------------------------------
Keras model instance to be saved
--------------------------------
Optional tf saved_model SaveOptions object that specifies options for saving to SavedModel
--------------------------------
Whether we should overwrite any existing PARAM at the target location, or instead ask the user with a manual prompt
--------------------------------
Either QSTR , indicating whether to save the PARAM to Tensorflow SavedModel or HDF5
--------------------------------
Defaults to QSTR in TF CONSTANT_FLOATX, and QSTR in TF CONSTANT_FLOATX
--------------------------------
Signatures to save with the SavedModel
--------------------------------
Applicable to the QSTR format only
--------------------------------
Please see the QSTR argument in tf saved_model save for details
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Index D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
D_STRUCTURE to copy update
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as D_STRUCTURE
--------------------------------
Updates to scatter into output
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR containing bounding boxes
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D A D_STRUCTURE of RGBA colors to cycle through for the PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A batch of images
--------------------------------
A name for the operation BSTR
--------------------------------
Standard layer keyword arguments
--------------------------------
Concatenation axis
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
ONE_WORD Function
--------------------------------
The predicted values
--------------------------------
The ground truth values
--------------------------------
QSTR values are expected to be CONSTANT_NUM
--------------------------------
If binary BSTR labels are provided we will convert them to CONSTANT_NUM
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
Directory with checkpoints file or path to checkpoint
--------------------------------
Name of the variable to return
--------------------------------
The QSTR of the result matrix
--------------------------------
Must be a D_TYPE type
--------------------------------
Python D_TYPE
--------------------------------
Lower bound on the frequencies to be included in the mel spectrum
--------------------------------
This corresponds to the lower edge of the lowest triangular band
--------------------------------
An optional name for the operation
--------------------------------
Python D_TYPE
--------------------------------
How many bands in the resulting mel spectrum
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
How many bins there are in the source spectrogram data, which is understood to be fft_size CONSTANT_NUM CONSTANT_NUM, i e
--------------------------------
the spectrogram only contains the nonredundant FFT bins
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
Samples per second of the input signal used to create the spectrogram
--------------------------------
Used to figure out the frequencies corresponding to each spectrogram bin, which dictates how they are mapped into the mel scale
--------------------------------
Python D_TYPE
--------------------------------
The desired top edge of the highest frequency band
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
implementation mode, either CONSTANT_NUM CONSTANT_NUM loops over input spatial locations to perform the forward pass
--------------------------------
It is memory efficient but performs a lot of BSTR ops CONSTANT_NUM stores layer weights in a dense but sparsely populated CONSTANT_NUM-D matrix and implements the forward pass as a single matrix multiply
--------------------------------
It uses a lot of RAM but performs few BSTR ops CONSTANT_NUM stores layer weights in a sparse D_STRUCTURE and implements the forward pass as a single sparse matrix multiply How to choose CONSTANT_NUM large, dense models, CONSTANT_NUM small models, CONSTANT_NUM large, sparse models,where QSTR stands for large input output activations i e
--------------------------------
many PARAM, QSTR , large QSTR , and QSTR stands for few connections between inputs and outputs, i e
--------------------------------
small ratio PARAM input_filters PARAM BSTR, where inputs to and outputs of the layer are assumed to have shapes BSTR, BSTRrespectively It is recommended to benchmark each in the setting of interest to pick the most efficient one BSTR
--------------------------------
Correct choice of implementation can lead to dramatic speed improvements e g
--------------------------------
50X , potentially at the expense of RAM Also, only PARAM QSTR is supported by implementation CONSTANT_NUM
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of a single D_TYPE, specifying the length of the CONSTANT_NUM-D convolution window
--------------------------------
Currently only supports QSTR BSTR QSTR may be supported in the future
--------------------------------
An D_TYPE or D_STRUCTURE of a single D_TYPE, specifying the stride length of the convolution
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any QSTR value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
indicates if the offset coordinates are centered relative to the image, in which case the BSTR offset is relative to the center of the PARAM images
--------------------------------
If CONSTANT_BOOL, the BSTR offset corresponds to the upper left corner of the PARAM images
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to QSTR
--------------------------------
indicates if the noise should be QSTR BSTR, QSTR BSTR, or QSTR BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
indicates if the offset coordinates are normalized
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR containing the y, x locations of the center of each window
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of CONSTANT_NUM elements containing the size of the glimpses to extract
--------------------------------
The glimpse height must be specified first, following by the glimpse width
--------------------------------
Path to the plugin
--------------------------------
Relative or absolute filesystem path to a dynamic library file
--------------------------------
A day CONSTANT_NUM REXPR REXPR, or CONSTANT_NUM in PARAM
--------------------------------
Must be anD_TYPE
--------------------------------
A month CONSTANT_NUM REXPR REXPR in PARAM
--------------------------------
Must be an D_TYPE
--------------------------------
A year BSTR
--------------------------------
Must be an D_TYPE
--------------------------------
An D_STRUCTURE containing all feature columns
--------------------------------
All items should be instances of classes derived from QSTR
--------------------------------
used as label if PARAM does not exist in given tf Example
--------------------------------
By default default_value is none, which means tf parse_example will error out if there is any missing label
--------------------------------
Number of regression targets per example
--------------------------------
This is the size of the last dimension of the labels and logits D_STRUCTURE objects typically, these have shape BSTR
--------------------------------
A D_TYPE identifies the type of labels
--------------------------------
By default it isD_TYPE
--------------------------------
A D_TYPE identifying the label
--------------------------------
It means tf Example stores labels with this key
--------------------------------
A D_TYPE or a QSTR created by tf feature_column numeric_column defining feature column representing weights
--------------------------------
It is used to down weight or boost examples during training
--------------------------------
It will be multiplied by the loss of the example
--------------------------------
If it is a D_TYPE, it is used as a key to fetch weight D_STRUCTURE from the QSTR
--------------------------------
If it is a QSTR , raw D_STRUCTURE is fetched by key weight_column key , then weight_column normalizer_fn is applied on it to get weight D_STRUCTURE
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of the format specified by PARAM
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Optional name for the operation
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
D_TYPE, data type of returned Keras variable
--------------------------------
D_TYPE, name of returned Keras variable
--------------------------------
D_STRUCTURE of D_TYPE, shape of returned Keras variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_TYPE REXPR
--------------------------------
Maximum activation value
--------------------------------
D_TYPE REXPR
--------------------------------
Negative slope coefficient
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Threshold value for thresholded activation
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
Variable or D_STRUCTURE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
See http en wikipedia org wiki Chroma_subsampling
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Unit used to specify PARAM and PARAM pixels per inch QSTR or centimeter QSTR
--------------------------------
An optional D_TYPE from , QSTR
--------------------------------
Defaults to
--------------------------------
Per pixel PARAM format
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, spend CPU RAM to reduce size with no PARAM change
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, create a JPEG that loads progressively BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Quality of the compression from CONSTANT_NUM to CONSTANT_NUM BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Horizontal pixels per density unit
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
If not empty, embed this XMP metadata in the PARAM header
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Vertical pixels per density unit
--------------------------------
Additional keyword arguments passed to PIL Image save
--------------------------------
Image data format, either QSTR
--------------------------------
Optional file format override
--------------------------------
If omitted, the format to use is determined from the filename extension
--------------------------------
If a file object was used instead of a filename, this parameter should always be used
--------------------------------
Path or file object
--------------------------------
Whether to rescale image values to be within BSTR
--------------------------------
Numpy D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD QSTR
--------------------------------
In QSTR mode, the channels dimension BSTR is at index CONSTANT_NUM, in QSTR mode is it at index CONSTANT_NUM
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the input units to drop
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If specified, refers to a dimension of the PARAM D_STRUCTURE, such that quantization will be per slice along that dimension
--------------------------------
A D_STRUCTURE to quantize and dequantize
--------------------------------
If PARAM CONSTANT_BOOL, the maximum PARAM value that needs to be represented in the quantized representation
--------------------------------
If PARAM is specified, this should be a D_STRUCTURE of maximum values for each slice along PARAM
--------------------------------
If PARAM CONSTANT_BOOL, the minimum PARAM value, that needs to be represented in the quantized representation
--------------------------------
If PARAM is specified, this should be a D_STRUCTURE of minimum values for each slice along PARAM
--------------------------------
Optional name for the operation
--------------------------------
If CONSTANT_BOOL, then the absolute value of the quantized minimum value is the same as the quantized maximum value, instead of CONSTANT_NUM greater
--------------------------------
i e
--------------------------------
for CONSTANT_NUM bit quantization, the minimum value is CONSTANT_NUM instead of CONSTANT_NUM
--------------------------------
The bitwidth of the quantization
--------------------------------
If CONSTANT_BOOL use PARAM and PARAM for the range of the PARAM, otherwise determine min and max from the PARAM D_STRUCTURE
--------------------------------
Rounding mode when rounding from D_TYPE values to quantized ones
--------------------------------
one of QSTR
--------------------------------
CONSTANT_BOOL if the quantization is signed or unsigned
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM D
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
D_TYPE or D_STRUCTURE
--------------------------------
The axis that should be normalized BSTR
--------------------------------
Optional constraint for the beta weight
--------------------------------
Initializer for the beta weight
--------------------------------
Optional regularizer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of QSTR to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, QSTR is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Optional constraint for the gamma weight
--------------------------------
Initializer for the gamma weight
--------------------------------
Optional regularizer for the gamma weight
--------------------------------
If CONSTANT_BOOL, multiply by QSTR
--------------------------------
If CONSTANT_BOOL, QSTR is not used
--------------------------------
When the next layer is linear also e g
--------------------------------
nn relu , this can be disabled since the scaling will be done by the next layer
--------------------------------
D_TYPE, if CONSTANT_BOOL the variables will be marked as trainable
--------------------------------
where to cache the data relative to keras dataset
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE, a path
--------------------------------
D_TYPE L1 regularization factor
--------------------------------
D_TYPE L2 regularization factor
--------------------------------
A D_STRUCTURE
--------------------------------
Must be D_TYPE with shape BSTR
--------------------------------
A name to give this QSTR BSTR
--------------------------------
D_STRUCTURE BSTR of characters to filter out, such as punctuation
--------------------------------
Default ,
--------------------------------
t n , includes basic punctuation, tabs, and newlines
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to convert the input to lowercase
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Separator for word splitting
--------------------------------
Input text BSTR
--------------------------------
Dimension along which to normalize
--------------------------------
A scalar or a D_STRUCTURE of D_TYPE
--------------------------------
A lower bound value for the norm
--------------------------------
Will use QSTR norm REXPR BSTR
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The number of PARAM to output
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Any shape
--------------------------------
Indices in the range BSTR
--------------------------------
Placeholder type
--------------------------------
Optional name D_TYPE for the placeholder
--------------------------------
Number of axes of the D_STRUCTURE
--------------------------------
At least one of PARAM, QSTR must be specified
--------------------------------
If both are specified, PARAM is used
--------------------------------
D_TYPE, whether the placeholder should have a ragged type
--------------------------------
In this case, values of QSTR in the PARAM argument represent ragged dimensions
--------------------------------
For more information about RaggedTensors, see thisguide
--------------------------------
Shape of the placeholder D_TYPE D_STRUCTURE, may include QSTR entries
--------------------------------
D_TYPE, whether the placeholder should have a sparse type
--------------------------------
Image data format, either QSTR
--------------------------------
Dtype to use for the returned D_STRUCTURE
--------------------------------
PIL Image instance
--------------------------------
input variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE
--------------------------------
Axes to reverse
--------------------------------
D_STRUCTURE to reverse
--------------------------------
A day CONSTANT_NUM REXPR REXPR, or CONSTANT_NUM in PARAM
--------------------------------
Must be anD_TYPE
--------------------------------
A month CONSTANT_NUM REXPR REXPR in PARAM
--------------------------------
Must be an D_TYPE
--------------------------------
A year BSTR
--------------------------------
Must be an D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE or tf IndexedSlices
--------------------------------
A D_STRUCTURE or tf IndexedSlices
--------------------------------
Numpy D_STRUCTURE or TensorFlow D_STRUCTURE
--------------------------------
D_STRUCTURE of shape d CONSTANT_NUM, d CONSTANT_NUM, , d r CONSTANT_NUM where QSTR is rank of QSTR and result and dtype D_TYPE
--------------------------------
Each entry in QSTR must be an index in BSTR
--------------------------------
Other values will raise an exception when this op is run on CPU, and return QSTR for corresponding loss and gradient rows on GPU
--------------------------------
Unscaled log probabilities of shape d CONSTANT_NUM, d CONSTANT_NUM, , d r CONSTANT_NUM , num_classes and dtype D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
Scalar D_STRUCTURE to minimize
--------------------------------
D_STRUCTURE of variables
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
ONE_WORD scalar
--------------------------------
The content to be written to the output file
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
ONE_WORD scalar
--------------------------------
The PARAM of the file to which we write the PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A tf distribute cluster_resolver TPUClusterResolver, which provides information about the TPU cluster
--------------------------------
A type for the returned D_STRUCTURE
--------------------------------
Must be D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Keyword arguments to construct a layer
--------------------------------
An D_STRUCTURE containing the FeatureColumns to use as inputs to your model
--------------------------------
All items should be instances of classes derived from QSTR such as QSTR
--------------------------------
If you have categorical features, you can wrap them with an QSTR
--------------------------------
Name to give to the DenseFeatures
--------------------------------
D_TYPE, whether the layer variables will be updated via gradient descent during training
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The WAV encoded audio, usually from a file
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of sample channels wanted
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Length of audio requested
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of color channels for the decoded image
--------------------------------
CONSTANT_NUM-D D_TYPE
--------------------------------
The encoded image bytes
--------------------------------
The desired DType of the returned D_STRUCTURE
--------------------------------
Controls the shape of the returned op output
--------------------------------
If CONSTANT_BOOL, the returned op will produce a CONSTANT_NUM-D D_STRUCTURE for PNG, JPEG, and BMP files and a CONSTANT_NUM-D D_STRUCTURE for all GIFs, whether animated or not
--------------------------------
If, CONSTANT_BOOL, the returned op will produce a CONSTANT_NUM-D D_STRUCTURE for all file types and will truncate animated GIFs to the first frame
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE index
--------------------------------
A TensorShape instance
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR and typeD_TYPE
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Optional name for the operation
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
JSON D_TYPE encoding a tokenizer configuration
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The dimension along which to concatenate
--------------------------------
Must be in the range BSTR
--------------------------------
A D_STRUCTURE with the same length as PARAM of D_STRUCTURE objects with type D_TYPE
--------------------------------
The maximum scalar PARAM for each of the input D_STRUCTURE
--------------------------------
A D_STRUCTURE with the same length as PARAM of D_STRUCTURE objects with type D_TYPE
--------------------------------
The minimum scalar PARAM for each of the input D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of at least CONSTANT_NUM D_STRUCTURE objects with the same type
--------------------------------
The QSTR D_STRUCTURE to concatenate
--------------------------------
Their ranks and types must match, and their sizes must match in all dimensions except PARAM
--------------------------------
D_STRUCTURE BSTR containing the D_STRUCTURE length for each batch item in PARAM
--------------------------------
D_STRUCTURE BSTR containing the D_STRUCTURE length for each batch item in PARAM
--------------------------------
D_STRUCTURE BSTRcontaining the prediction, or output of the softmax
--------------------------------
D_STRUCTURE BSTRcontaining the truth labels
--------------------------------
optional name of the operation
--------------------------------
N D D_STRUCTURE, where N REXPR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
axis along which to perform normalization
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Transformation intensity
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Each D_TYPE is a JSON object serialized according to the JSON mapping of the Example proto
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE numerator of D_TYPE type
--------------------------------
D_STRUCTURE denominator of D_TYPE type
--------------------------------
ONE_WORD Iterator
--------------------------------
the passed creator
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass QSTR , no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The BMP encoded image
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
Message to log on failure
--------------------------------
A name for this operation BSTR
--------------------------------
D_STRUCTURE to check
--------------------------------
An D_TYPE, the axis to find maximum values
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
Learning phase value, either CONSTANT_NUM BSTR
--------------------------------
CONSTANT_NUM test, CONSTANT_NUM train
--------------------------------
Optional SummaryMetadata, as a proto or serialized bytes
--------------------------------
Optional D_TYPE name for this op
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
D_TYPE tag used to identify the summary e g
--------------------------------
in TensorBoard , usually generated with tf summary summary_scope
--------------------------------
the D_STRUCTURE holding the summary data to write or a callable that returns this D_STRUCTURE
--------------------------------
If a callable is passed, it will only be called when a default SummaryWriter exists and the recording condition specified by record_if is met
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE, factors by which to downscale BSTR BSTR will halve the size of the CONSTANT_NUM-D input in each dimension
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE, or None
--------------------------------
Strides values
--------------------------------
D_STRUCTURE or variable
--------------------------------
Variable length D_STRUCTURE of dictionaries of name, class pairs to add to custom objects
--------------------------------
A D_TYPE
--------------------------------
Prefix of the error message
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
The value to pad if PARAM CONSTANT_NUM
--------------------------------
If empty, pads with spaces
--------------------------------
Another typical value is CONSTANT_NUM
--------------------------------
D_TYPE can not be longer than CONSTANT_NUM character
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The post decimal precision to use for D_TYPE numbers
--------------------------------
Only used if precision CONSTANT_NUM
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Use scientific notation for D_TYPE numbers
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Use shortest representation BSTR for D_TYPE numbers
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Pad pre decimal numbers to this width
--------------------------------
Applies to both D_TYPE numbers
--------------------------------
Only used if width CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
How much to add to the hue channel
--------------------------------
RGB image or images
--------------------------------
Size of the last dimension must be CONSTANT_NUM
--------------------------------
A name for this operation BSTR
--------------------------------
The axis that the output values are concatenated along
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE with type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE whose size is equal to the size of PARAMs first dimension
--------------------------------
Values should be sorted and can be repeated
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A D_STRUCTURE of dimension indices, e g
--------------------------------
ONE_WORD BSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Specify the data format of the PARAM and output data
--------------------------------
With the default format QSTR , the data is stored in the order of BSTR
--------------------------------
Alternatively, the format could be QSTR , the data storage order of BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions if a CONSTANT_NUM-D D_STRUCTURE must be CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE
--------------------------------
The dimension order is interpreted according to the value of PARAM, see below for details
--------------------------------
A name for the operation BSTR
--------------------------------
Either the D_TYPE QSTR indicating the type of padding algorithm to use, or a D_STRUCTURE indicating the explicit paddings at the start and end of each dimension
--------------------------------
When explicit padding is used and PARAM is QSTR , this should be in the form BSTR, BSTR, BSTR, BSTR
--------------------------------
When explicit padding used and PARAM is QSTR , this should be in the form BSTR, BSTR, BSTR, BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
The dimension order is determined by the value of PARAM, see below for details
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
D_TYPE indicating whether to solve with PARAM or its BSTR adjoint
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
D_TYPE indicating whether the innermost matrices in PARAM are lower or upper triangular
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
Shape is BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to seed the random generator
--------------------------------
A type for the returned D_STRUCTURE
--------------------------------
Must be D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A candidate D_STRUCTURE
--------------------------------
One of PARAM, QSTR
--------------------------------
Default QSTR
--------------------------------
The desired image format
--------------------------------
DEPRECATED use PARAM QSTR
--------------------------------
Interpolation method used to resample the image if the target size is different from that of the loaded image
--------------------------------
Supported methods are QSTR
--------------------------------
If PIL version CONSTANT_FLOAT CONSTANT_NUM or newer is installed, QSTR is also supported
--------------------------------
If PIL version CONSTANT_FLOAT CONSTANT_NUM or newer is installed, QSTR are also supported
--------------------------------
By default, QSTR is used
--------------------------------
Path to image file
--------------------------------
Either QSTR BSTR or D_STRUCTURE of D_TYPE BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE with type D_TYPE
--------------------------------
D_TYPE, a path
--------------------------------
A D_STRUCTURE with data that will be assembled in the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with indices into PARAM
--------------------------------
Has same rank as PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE scalar
--------------------------------
Indicates the size of the outputD_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with PARAM into the output D_STRUCTURE
--------------------------------
Values should be sorted and can be repeated
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
An CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
The shape of the D_STRUCTURE to use for unraveling PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
An CONSTANT_NUM-D or CONSTANT_NUM-D D_TYPE D_STRUCTURE whose elements are indices into the flattened version of an D_STRUCTURE of dimensions PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A Python function that builds a computation to apply to the input
--------------------------------
If the function takes n PARAM, PARAM should be a D_STRUCTURE of n D_STRUCTURE QSTR may return a D_STRUCTURE of operations and D_STRUCTURE
--------------------------------
D_STRUCTURE must come before operations in the returned D_STRUCTURE
--------------------------------
The return value of QSTR is a D_STRUCTURE of D_STRUCTURE corresponding to the D_STRUCTURE from the output of QSTR All QSTR returned from QSTR will be executed when evaluating any of the returned output D_STRUCTURE
--------------------------------
A D_STRUCTURE of inputs or QSTR BSTR
--------------------------------
Each input can be a nested structure containing values that are convertible to D_STRUCTURE
--------------------------------
Note that passing an N dimension D_STRUCTURE of compatible values will result in a N dimension D_STRUCTURE of scalar D_STRUCTURE rather than a single Rank N D_STRUCTURE
--------------------------------
If you need different behavior, convert part of inputs to D_STRUCTURE with tf convert_to_tensor
--------------------------------
D_STRUCTURE of keyword arguments for base layer
--------------------------------
An instance of QSTR
--------------------------------
A device D_TYPE or function, for passing to tf device
--------------------------------
None or a D_STRUCTURE representing the new shape for the returnedD_STRUCTURE
--------------------------------
The input D_STRUCTURE
--------------------------------
D_TYPE BSTR, fraction of size to crop Usage Example python REXPR tensorflow as tf REXPR tf random normal shape BSTR REXPR PARAM central_crop BSTR
--------------------------------
Either a CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR, or a CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
D_STRUCTURE of experimental optimizer options to configure
--------------------------------
Valid keys layout_optimizer Optimize D_STRUCTURE layouts e g
--------------------------------
This will try to use NCHW layout on GPU which is faster constant_folding Fold constants Statically infer the value of D_STRUCTURE when possible, and materialize the result using constants shape_optimization Simplify computations made on shapes remapping Remap subgraphs onto more efficient implementations arithmetic_optimization Simplify arithmetic ops with common sub expression elimination and arithmetic simplification dependency_optimization Control dependency optimizations
--------------------------------
Remove redundant control dependencies, which may enable other optimization
--------------------------------
This optimizer is also essential for pruning Identity and NoOp nodes loop_optimization Loop optimizations function_optimization Function optimizations and inlining debug_stripper Strips debug related nodes from the graph disable_model_pruning Disable removal of unnecessary ops from the graphscoped_allocator_optimization Try to allocate some independent Op outputs contiguously in order to merge or eliminate downstream Ops pin_to_host_optimization Force small ops onto the CPU implementation_selector Enable the swap of kernel implementations based on the device placement auto_mixed_precision Change certain D_TYPE ops to D_TYPE on Volta GPUs and above
--------------------------------
Without the use of loss scaling, this can cause numerical underflow see keras mixed_precision experimental LossScaleOptimizer disable_meta_optimizer Disable the entire meta optimizer min_graph_nodes The minimum number of nodes in a graph to optimizer
--------------------------------
For smaller graphs, optimization is skipped
--------------------------------
An D_TYPE, the axis to compute the standard deviation
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
an D_TYPE representing the RNG algorithm
--------------------------------
an D_TYPE or CONSTANT_NUM-D D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE
--------------------------------
The type of the PARAM D_STRUCTURE
--------------------------------
The provided type must match the type of the PARAM D_STRUCTURE and no implicit conversion will take place
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A scalar D_TYPE containing a serialized TensorProto proto
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Rank k D_STRUCTURE where k is at most CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing the number of parsing processes to call in parallel
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
a D_STRUCTURE of tuples BSTR QSTR should be a Numpy D_STRUCTURE
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
Axis to drop
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE with type D_TYPE
--------------------------------
The condition to evaluate
--------------------------------
The D_STRUCTURE to print out when PARAM is CONSTANT_BOOL
--------------------------------
A name for this operation BSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
Default value CONSTANT_FLOAT BSTR
--------------------------------
Default value CONSTANT_NUM BSTR
--------------------------------
First image batch
--------------------------------
Second image batch
--------------------------------
Must have the same rank as PARAM
--------------------------------
Default value CONSTANT_FLOAT
--------------------------------
Default value CONSTANT_FLOAT SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of CONSTANT_NUM REXPR REXPR
--------------------------------
The dynamic range of the images BSTR
--------------------------------
D_STRUCTURE of weights for each of the scales
--------------------------------
The number of scales used is the length of the D_STRUCTURE
--------------------------------
Index CONSTANT_NUM is the unscaled resolution weight and each increasing scale corresponds to the image being downsampled by CONSTANT_NUM
--------------------------------
Defaults to BSTR, which are the values obtained in the original paper
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
The number of depthwise convolution output channels for each input channel
--------------------------------
The total number of depthwise convolution output channels will be equal to filters_in depth_multiplier
--------------------------------
Constraint function applied to the depthwise kernel matrix
--------------------------------
Initializer for the depthwise kernel matrix
--------------------------------
Regularizer function applied to the depthwise kernel matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
one of QSTR BSTR
--------------------------------
Constraint function applied to the pointwise kernel matrix
--------------------------------
Initializer for the pointwise kernel matrix
--------------------------------
Regularizer function applied to the pointwise kernel matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the height and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
One of QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM tuples, padding pattern
--------------------------------
D_STRUCTURE or variable
--------------------------------
Target shape
--------------------------------
D_STRUCTURE of D_TYPE, does not include the samples dimension BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
The data type to produce
--------------------------------
Must be a D_TYPE type
--------------------------------
An optional name for the operation
--------------------------------
A D_TYPE D_STRUCTURE indicating whether to generate a periodic or symmetric window
--------------------------------
Periodic windows are typically used for spectral analysis while symmetric windows are typically used for digital filter design
--------------------------------
A scalar D_STRUCTURE indicating the window length to generate
--------------------------------
A Python D_TYPE
--------------------------------
Used to seed the random generator
--------------------------------
BSTR Only configure PARAM matching this device type
--------------------------------
For example QSTR
--------------------------------
Other PARAM will be left unaltered
--------------------------------
D_STRUCTURE of QSTR to make visible
--------------------------------
If QSTR , this column graph operations will fail for out of range inputs
--------------------------------
Otherwise, this value must be in the range BSTR, and will replace out of range inputs
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
Range of inputs
--------------------------------
Namely, inputs are expected to be in the range BSTR
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU
--------------------------------
A scalar D_TYPE D_STRUCTURE representing the maximum number of PARAM to be selected by non max suppression
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE representing the threshold for deciding when to remove PARAM based on score
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR
--------------------------------
A scalar D_TYPE representing the Soft NMS sigma parameter See Bodla et al, https arxiv org abs CONSTANT_FLOAT
--------------------------------
When soft_nms_sigma CONSTANT_FLOAT BSTR NMS
--------------------------------
The dimensions to reduce D_STRUCTURE or scalar
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
If CONSTANT_BOOL, retain reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, returns a D_STRUCTURE instead of a denseD_STRUCTURE BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
Positional arguments that are the inputs to print
--------------------------------
Inputs in the printed output will be separated by spaces
--------------------------------
Inputs may be python primitives, D_STRUCTURE, data structures such as dicts and D_STRUCTURE that may contain D_STRUCTURE BSTR, and printable python objects
--------------------------------
End character that is appended at the end the printed D_TYPE
--------------------------------
Defaults to the newline character
--------------------------------
A name for the operation BSTR
--------------------------------
The output stream, logging level, or file to print to
--------------------------------
Defaults to sys stderr, but sys stdout, tf compat v1 logging info, tf compat v1 logging warning, tf compat v1 logging error, absl logging info, absl logging warning and absl loogging,error are also supported
--------------------------------
To print to a file, pass a D_TYPE started with file followed by the file path, e g , file tmp foo out
--------------------------------
The D_TYPE to use to separate the inputs
--------------------------------
Defaults to QSTR
--------------------------------
The first and last QSTR elements within each dimension are recursively printed per D_STRUCTURE
--------------------------------
If None, then the first CONSTANT_NUM and last CONSTANT_NUM elements of each dimension are printed for each D_STRUCTURE
--------------------------------
If set to CONSTANT_NUM, it will print all elements of every D_STRUCTURE
--------------------------------
optional name of the operation
--------------------------------
a D_STRUCTURE operand whose dtype is real, and indices lexicographically ordered
--------------------------------
the other D_STRUCTURE operand with the same requirements BSTR
--------------------------------
D_TYPE, pathname to which the file needs to be moved
--------------------------------
D_TYPE, if CONSTANT_BOOL it an error for PARAM to be occupied by an existing file
--------------------------------
D_TYPE, pathname for a file
--------------------------------
axis along which to perform the reduction
--------------------------------
D_STRUCTURE or variable
--------------------------------
The D_STRUCTURE to print out if the condition is CONSTANT_BOOL
--------------------------------
Defaults to error PARAM and first few entries of the violating D_STRUCTURE
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
D_STRUCTURE with BSTR items
--------------------------------
A shape must be an D_STRUCTURE
--------------------------------
Print this many entries of the D_STRUCTURE
--------------------------------
A Python D_TYPE
--------------------------------
Used to seed the random generator
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE of the text to be processed
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A scalar D_TYPE D_STRUCTURE containing the regular expression to match the PARAM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR with D_TYPE values in BSTR
--------------------------------
The value of QSTR i th box refers to
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
The QSTR th row of the D_STRUCTURE specifies the coordinates of a box in the box_ind BSTR PARAM and is specified in normalized coordinates BSTR
--------------------------------
A normalized coordinate value of QSTR is mapped to the PARAM coordinate at y BSTR, so as the BSTR interval of normalized PARAM height is mapped to BSTR in PARAM height coordinates
--------------------------------
We do allow QSTR QSTR , in which case the sampled crop is an up down flipped version of the original PARAM
--------------------------------
The width dimension is treated similarly
--------------------------------
Normalized coordinates outside the BSTR range are allowed, in which case we use PARAM to extrapolate the input PARAM values
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of CONSTANT_NUM elements, size BSTR
--------------------------------
All cropped PARAM patches are resized to this size
--------------------------------
The aspect ratio of the PARAM content is not preserved
--------------------------------
Both QSTR need to be positive
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Value used for extrapolation, when applicable
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
Both QSTR need to be positive
--------------------------------
An optional D_TYPE specifying the sampling method for resizing
--------------------------------
It can be either QSTR and default to QSTR
--------------------------------
Currently two sampling methods are supported Bilinear and Nearest Neighbor
--------------------------------
A name for the operation BSTR
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
one of QSTR BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the height and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The sampled_candidates output of CandidateSampler
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The JPEG encoded image
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
ONE_WORD BSTR
--------------------------------
Defaults to D_TYPE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_TYPE, size of the max pooling windows
--------------------------------
D_TYPE, or None
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input
--------------------------------
If None, it will default to PARAM
--------------------------------
A tf distribute Strategy object or None
--------------------------------
The moving average momentum
--------------------------------
A D_STRUCTURE with the same shape as QSTR
--------------------------------
A Variable
--------------------------------
the number of query examples expected per batch
--------------------------------
Leave unset for variable batch size BSTR
--------------------------------
a D_STRUCTURE of D_TYPE to D_STRUCTURE
--------------------------------
a D_STRUCTURE of D_TYPE to D_STRUCTURE
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of the format specified by PARAM
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A D_STRUCTURE of Python D_TYPE or a CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
If provided, the returned D_STRUCTURE will have leading batch dimensions of this shape
--------------------------------
The type of an element in the resulting D_STRUCTURE
--------------------------------
A name for this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Optional non negative D_TYPE scalar D_STRUCTURE giving the number of columns in each batch matrix
--------------------------------
Defaults to PARAM
--------------------------------
Non negative D_TYPE scalar D_STRUCTURE giving the number of rows in each batch matrix
--------------------------------
L1 regularization factor BSTR
--------------------------------
L2 regularization factor BSTR
--------------------------------
Optional name for the op
--------------------------------
A dense D_STRUCTURE to be converted to a D_STRUCTURE
--------------------------------
Type of the output PARAM
--------------------------------
To pad PARAM with variable length D_TYPE, you can use QSTR
--------------------------------
D_TYPE, maximum length of all PARAM
--------------------------------
D_TYPE, QSTR pad either before or after each D_STRUCTURE
--------------------------------
D_STRUCTURE of D_STRUCTURE, where each element is a D_STRUCTURE
--------------------------------
D_TYPE, QSTR remove values from PARAM larger than PARAM, either at the beginning or at the end of the PARAM
--------------------------------
D_TYPE, PARAM value
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR of same shape
--------------------------------
A D_STRUCTURE of same shape as QSTR
--------------------------------
A Variable
--------------------------------
Whether autograph should be applied on PARAM before tracing a graph
--------------------------------
Data dependent control flow requires autograph CONSTANT_BOOL
--------------------------------
For more information, see the tf function and AutoGraph guide
--------------------------------
Optional D_STRUCTURE of tf PARAM experimental Feature values
--------------------------------
If CONSTANT_BOOL, the function is always compiled byXLA
--------------------------------
XLA may be more efficient in some cases e g
--------------------------------
TPU, XLA_GPU, dense D_STRUCTURE computations
--------------------------------
If provided, contains a name of a QSTR function this implements
--------------------------------
For example mycompany my_recurrent_cell
--------------------------------
This is stored as an attribute in inference function, which can then be detected when processing serialized function
--------------------------------
Seehttps github com tensorflow community blob master rfcs CONSTANT_NUM standardizing composite_ops mdfor details
--------------------------------
For an example of utilizing this attribute see https github com tensorflow tensorflow blob master tensorflow compiler mlir lite transforms prepare_composite_functions_tf ccThe code above automatically detects and substitutes function that implements QSTR and allows TFLite to substitute its own implementations
--------------------------------
For instance, a tensorflow user can use this attribute to mark that their function also implements QSTR perhaps more efficiently
--------------------------------
by specifying it using this flag
--------------------------------
When CONSTANT_BOOL, tf function may generate fewer, graphs that are less specialized on input shapes
--------------------------------
the function to be compiled
--------------------------------
If QSTR is None, tf function QSTR func
--------------------------------
In other words, tf function PARAM BSTR is equivalent to tf function func, PARAM
--------------------------------
The former can be used as decorator
--------------------------------
A possibly nested D_STRUCTURE of tf TensorSpec objects specifying the shapes and dtypes of the D_STRUCTURE that will be supplied to this function
--------------------------------
If QSTR , a separate function is instantiated for each inferred input signature
--------------------------------
If input_signature is specified, every input to PARAM must be a D_STRUCTURE, and PARAM can not accept kwargs
--------------------------------
If CONSTANT_BOOL, enables collection of executed graphs
--------------------------------
It includes ones from tf function invocation and ones from the legacy graph mode
--------------------------------
The default is CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, enables the advanced profiler
--------------------------------
Enabling profiler implicitly enables the PARAM collection
--------------------------------
The profiler may incur a high memory overhead
--------------------------------
The default is CONSTANT_BOOL
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
axis along which to normalize
--------------------------------
Normalization order e g
--------------------------------
CONSTANT_NUM for L CONSTANT_NUM norm
--------------------------------
Numpy D_STRUCTURE to normalize
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
RGB image or images
--------------------------------
Size of the last dimension must be CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Maximum value for the random delta
--------------------------------
An operation specific seed
--------------------------------
It will be used in conjunction with the graph level seed to determine the real seeds that will be used in this operation
--------------------------------
Please see the documentation of set_random_seed for its interaction with the graph level random seed
--------------------------------
D_STRUCTURE REXPR , batch size per bucket
--------------------------------
Length should be len BSTR CONSTANT_NUM
--------------------------------
D_STRUCTURE REXPR , upper length boundaries of the buckets
--------------------------------
ONE_WORD BSTR
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing whether the last batch should be dropped in the case it has fewer than QSTR elements the default behavior is not to drop the smaller batch
--------------------------------
function from element in QSTR to D_TYPE, determines the length of the element, which will determine the bucket it goes into
--------------------------------
D_TYPE, indicates whether to pad the batch features BSTR
--------------------------------
D_TYPE, if CONSTANT_BOOL, will pad dimensions with unknown size to maximum length in batch
--------------------------------
If CONSTANT_BOOL, will pad dimensions with unknown size to bucket boundary minus CONSTANT_NUM BSTR, and caller must ensure that the source QSTR does not contain any elements with length longer than max BSTR
--------------------------------
Nested structure of tf TensorShape QSTR tf data Dataset padded_batch
--------------------------------
If not provided, will use dataset output_shapes , which will result in variable length dimensions being padded out to the maximum length in each batch
--------------------------------
Values to pad with, passed to tf data Dataset padded_batch
--------------------------------
Defaults to padding with CONSTANT_NUM
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
The dimension softmax would be performed on
--------------------------------
The default is CONSTANT_NUM which indicates the last dimension
--------------------------------
A non empty D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
The device name to use in the context
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
Whether to validate the order and range of sparse indices in QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
QSTR as returned by tf linalg lu , i e , if matmul BSTR X QSTR lower_upper L U eye
--------------------------------
Python D_TYPE name given to ops managed by this object
--------------------------------
Default value QSTR i e , QSTR
--------------------------------
QSTR as returned by tf linag lu , i e , if matmul BSTR X QSTR perm argmax BSTR
--------------------------------
Matrix shaped D_TYPE D_STRUCTURE representing targets for which to solve A X RHS
--------------------------------
To handle D_STRUCTURE cases, use lu_solve , rhs BSTR BSTR
--------------------------------
Python D_TYPE indicating whether arguments should be checked for correctness
--------------------------------
Note this function does not verify the implied matrix is actually invertible, even when validate_args CONSTANT_BOOL
--------------------------------
Default value CONSTANT_BOOL i e , don t validate arguments
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
The D_TYPE ID value to return for out of vocabulary feature values, defaults to CONSTANT_NUM
--------------------------------
This can not be specified with a positive PARAM
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
If QSTR , it will be inferred from PARAM
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
It is used as the column name and the D_STRUCTURE key for feature parsing configs, feature D_STRUCTUREobjects, and feature columns
--------------------------------
Non negative D_TYPE, the number of out of vocabulary buckets
--------------------------------
All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value
--------------------------------
A positive QSTR can not be specified with PARAM
--------------------------------
An ordered D_STRUCTURE defining the vocabulary
--------------------------------
Each feature is mapped to the index of its value BSTR in QSTR
--------------------------------
Must be castable to PARAM
--------------------------------
The SavedModel directory to load from
--------------------------------
A tag or D_STRUCTURE of tags identifying the MetaGraph to load
--------------------------------
Optional if the SavedModel contains a single MetaGraph, as for those exported from tf saved_model load
--------------------------------
axis along which to perform the reduction
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name of the operation BSTR
--------------------------------
A D_STRUCTURE which is of the same type as QSTR , and may be broadcastable with PARAM and QSTR
--------------------------------
A D_STRUCTURE which is of the same type as QSTR , and may be broadcastable with PARAM and QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_STRUCTURE or scalar D_STRUCTURE
--------------------------------
Specifies the increment for each range
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The type of the elements of the resulting D_STRUCTURE
--------------------------------
If not specified, then a value is chosen based on the other args
--------------------------------
D_STRUCTURE or scalar D_STRUCTURE
--------------------------------
Specifies the exclusive upper limits for each range
--------------------------------
A name for the operation
--------------------------------
PARAM for the returned QSTR row_splitsD_STRUCTURE
--------------------------------
One of D_TYPE
--------------------------------
D_STRUCTURE or scalar D_STRUCTURE
--------------------------------
Specifies the first entry for each range if PARAM is not QSTR otherwise, specifies the range PARAM, and the first entries default to CONSTANT_NUM
--------------------------------
Optimizer configuration D_STRUCTURE
--------------------------------
Optional D_STRUCTURE mapping names BSTR to be considered during deserialization
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE representing the shape of the binary dropout mask that will be multiplied with the input
--------------------------------
For instance, if your inputs have shape BSTR and you want the dropout mask to be the same for all timesteps, you can use noise_shape BSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the input units to drop
--------------------------------
A Python D_TYPE to use as random seed
--------------------------------
window_fn used in the forward transform, QSTR
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The number of samples to step
--------------------------------
An optional name for the operation
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
The QSTR in PARAM to gather PARAM from
--------------------------------
Must be greater than or equal to PARAM
--------------------------------
Defaults to the first non batch dimension
--------------------------------
Supports negative indexes
--------------------------------
An D_TYPE
--------------------------------
The number of batch dimensions
--------------------------------
Must be less than rank BSTR
--------------------------------
The index D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Must be in range CONSTANT_NUM, PARAM shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
The D_STRUCTURE from which to gather values
--------------------------------
Must be at least rank PARAM CONSTANT_NUM
--------------------------------
Deprecated, does nothing
--------------------------------
A D_STRUCTURE with the same length as PARAM of D_STRUCTURE objects with the same type
--------------------------------
A D_STRUCTURE of at least CONSTANT_NUM D_STRUCTURE objects with type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
If CONSTANT_BOOL then left and right singular D_STRUCTURE will be computed and returned in QSTR , respectively
--------------------------------
Otherwise, only the singular values will be computed, which can be significantly faster
--------------------------------
If CONSTANT_BOOL, compute full sized QSTR
--------------------------------
If CONSTANT_BOOL BSTR, compute only the leading QSTR singular D_STRUCTURE
--------------------------------
Ignored if PARAM is CONSTANT_BOOL
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
Let QSTR be the minimum of QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Optional D_TYPE
--------------------------------
A name for the operation
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Defines the shape of the output D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Backpropagated gradients above the FakeQuantWithMinMaxVars operation, shape one of BSTR, BSTR, BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape same as PARAM
--------------------------------
PARAM, PARAM Quantization interval, D_TYPE of shape BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Whether to quantize into CONSTANT_NUM PARAM CONSTANT_NUM distinct values
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The bitwidth of the quantization between CONSTANT_NUM, inclusive
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
D_TYPE D_STRUCTURE, the source D_TYPE to process
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE or scalar D_TYPE D_STRUCTURE, regular expression to use, see more details at https github com google re2 wiki Syntax
--------------------------------
D_TYPE, if CONSTANT_BOOL replace all non overlapping matches, else replace only the first match
--------------------------------
D_TYPE or scalar D_TYPE D_STRUCTURE, value to use in match replacement, supports backslash escaped digits CONSTANT_NUM to CONSTANT_NUM can be to insert text matching corresponding parenthesized group
--------------------------------
A function taking the D_STRUCTURE containing the BSTR, only during training
--------------------------------
For example, if PARAM CONSTANT_NUM, adjustment lambda shape tf random uniform shape CONSTANT_NUM , CONSTANT_FLOAT, CONSTANT_FLOAT , tf random uniform shape CONSTANT_NUM , CONSTANT_FLOAT, CONSTANT_FLOAT will PARAM the normalized value by up to CONSTANT_NUM up or down, then shift the result by up to CONSTANT_FLOAT BSTR, and finally apply gamma and or beta
--------------------------------
If QSTR , no adjustment is applied
--------------------------------
can not be specified if PARAM is specified
--------------------------------
D_TYPE, the axis that should be normalized BSTR
--------------------------------
For instance, after a QSTR layer with data_format QSTR , set QSTR BatchNormalization
--------------------------------
Optional constraint for the beta weight
--------------------------------
Initializer for the beta weight
--------------------------------
Optional regularizer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of QSTR to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, QSTR is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
if CONSTANT_BOOL, use a faster, fused implementation, or raise a ValueError if the fused implementation can not be used
--------------------------------
If QSTR , use the faster implementation if possible
--------------------------------
If CONSTANT_BOOL, do not used the fused implementation
--------------------------------
Optional constraint for the gamma weight
--------------------------------
Initializer for the gamma weight
--------------------------------
Optional regularizer for the gamma weight
--------------------------------
Momentum for the moving average
--------------------------------
Initializer for the moving mean
--------------------------------
Initializer for the moving variance
--------------------------------
Whether to use Batch Renormalization https arxiv org abs CONSTANT_FLOAT
--------------------------------
This adds extra variables during training
--------------------------------
The inference is the same for either value of this parameter
--------------------------------
A D_STRUCTURE that may map keys QSTR to scalar D_STRUCTURE used to clip the PARAM correction
--------------------------------
The correction BSTR is used as corrected_value normalized_value r d , with QSTR clipped to BSTR, and QSTR to BSTR
--------------------------------
Missing rmax, rmin, dmax are set to inf, CONSTANT_NUM, inf, respectively
--------------------------------
PARAM used to update the moving means and standard deviations with PARAM
--------------------------------
Unlike PARAM, this affects training and should be neither too small BSTR
--------------------------------
Note that PARAM is still applied to get the means and variances for inference
--------------------------------
If CONSTANT_BOOL, multiply by QSTR
--------------------------------
If CONSTANT_BOOL, QSTR is not used
--------------------------------
When the next layer is linear also e g
--------------------------------
nn relu , this can be disabled since the scaling will be done by the next layer
--------------------------------
D_TYPE, if CONSTANT_BOOL the variables will be marked as trainable
--------------------------------
An D_TYPE
--------------------------------
By default, QSTR is QSTR , which means batch normalization is performed across the whole batch
--------------------------------
When QSTR is not QSTR , instead perform QSTR , which creates virtual sub batches which are each normalized separately BSTR
--------------------------------
Must divide the actual batch size during execution
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A CONSTANT_NUM-D BSTR D_STRUCTURE REXPR
--------------------------------
The clipping ratio
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of mixed D_STRUCTURE, QSTR , or None
--------------------------------
A CONSTANT_NUM-D BSTR
--------------------------------
The global norm to use
--------------------------------
If not provided, global_norm is used to compute the norm
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to BSTR
--------------------------------
The cropped area of the image must contain a fraction of the supplied image within this range
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to BSTR
--------------------------------
The cropped area of the image must have an aspect ratio width height within this range
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTRdescribing the N bounding boxes associated with the image
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D, containing BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of attempts at generating a cropped region of the image of the specified constraints
--------------------------------
After QSTR failures, return the entire image
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Defaults to CONSTANT_FLOAT
--------------------------------
The cropped area of the image must contain at least this fraction of any bounding box supplied
--------------------------------
The value of this parameter should be non negative
--------------------------------
In the case of CONSTANT_NUM, the cropped area does not need to overlap any of the bounding boxes supplied
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If QSTR is set to non zero, the random number generator is seeded by the given QSTR
--------------------------------
Otherwise, it is seeded by a random seed
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Controls behavior if no bounding boxes supplied
--------------------------------
If CONSTANT_BOOL, assume an implicit bounding box covering the whole input
--------------------------------
If CONSTANT_BOOL, raise an error
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE of categorical columns created by a categorical_column_with function
--------------------------------
These columns produce the sparse IDs that are inputs to the embedding lookup
--------------------------------
All columns must be of the same type and have the same arguments except QSTR
--------------------------------
E g
--------------------------------
they can be categorical_column_with_vocabulary_file with the same vocabulary_file
--------------------------------
Some or all columns could also be weighted_categorical_column
--------------------------------
D_TYPE representing checkpoint name pattern from which to restore column weights
--------------------------------
Required if PARAM is not QSTR
--------------------------------
A D_TYPE specifying how to reduce if there are multiple entries in a single row
--------------------------------
Currently QSTR are supported, with QSTR the default
--------------------------------
QSTR often achieves good accuracy, in particular with bag of words columns
--------------------------------
Each of this can be thought as example level normalizations on the column
--------------------------------
For more information, see tf embedding_lookup_sparse
--------------------------------
An D_TYPE specifying dimension of the embedding, must be REXPR
--------------------------------
A variable initializer function to be used in embedding variable initialization
--------------------------------
If not specified, defaults to QSTR with mean CONSTANT_FLOAT and standard deviation CONSTANT_NUM sqrt BSTR
--------------------------------
If not QSTR , each embedding is clipped if its l2 norm is larger than this value, before combining
--------------------------------
Optional collective name of these columns
--------------------------------
If not given, a reasonable name will be chosen based on the names of PARAM
--------------------------------
Name of the D_STRUCTURE in PARAM from which to restore the column weights
--------------------------------
Required if PARAM is not QSTR
--------------------------------
Whether or not the embedding is trainable
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
Ignored if PARAM CONSTANT_BOOL
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
D_STRUCTURE of scalar D_STRUCTURE objects
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A D_STRUCTURE with QSTR property of type D_TYPE
--------------------------------
A scalar D_TYPE D_STRUCTURE BSTR containing the new size of the last dimension, all CONSTANT_NUM REXPR REXPR
--------------------------------
Optional name for the operation
--------------------------------
The output type BSTR
--------------------------------
Default is D_TYPE
--------------------------------
QSTR QSTR corresponds to lower_bound and QSTR to upper_bound
--------------------------------
N D D_STRUCTURE containing a sorted D_STRUCTURE
--------------------------------
N D D_STRUCTURE containing the search values
--------------------------------
ONE_WORD QSTR
--------------------------------
In QSTR mode, the channels dimension BSTR is at index CONSTANT_NUM, in QSTR mode is it at index CONSTANT_NUM
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the input units to drop
--------------------------------
D_STRUCTURE of type D_TYPE and rank REXPR
--------------------------------
If CONSTANT_BOOL, QSTR is treated as a sparse matrix
--------------------------------
If CONSTANT_BOOL, QSTR is conjugated and transposed before multiplication
--------------------------------
D_STRUCTURE with same type as QSTR and compatible dimensions
--------------------------------
If CONSTANT_BOOL, QSTR is treated as a sparse matrix
--------------------------------
Name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, QSTR is transposed before multiplication
--------------------------------
A D_STRUCTURE with rank k REXPR
--------------------------------
PARAM offset BSTR
--------------------------------
Positive value means superdiagonal, CONSTANT_NUM refers to the main PARAM, and negative value means subdiagonals
--------------------------------
QSTR can be a single D_TYPE BSTR or a pair of D_TYPE specifying the low and high ends of a matrix band
--------------------------------
QSTR k BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
The number of columns of the output matrix
--------------------------------
If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from QSTR , and the innermost dimension of PARAM
--------------------------------
The number of rows of the output matrix
--------------------------------
If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from QSTR , and the innermost dimension of PARAM
--------------------------------
The value to fill the area outside the specified PARAM band with
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose dtype is compatible with QSTR
--------------------------------
Activation function, such as tf nn relu , or D_TYPE name of built in activation function, such as QSTR
--------------------------------
Arguments to print to sys stdout
--------------------------------
Scale for the negative factor
--------------------------------
If set, values outside of range BSTR will be replaced with this value
--------------------------------
If not set, values REXPR will cause a failure while values REXPR will be dropped
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
It is used as the column name and the D_STRUCTURE key for feature parsing configs, featureD_STRUCTURE objects, and feature columns
--------------------------------
Range of inputs and outputs is BSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
kernel D_STRUCTURE
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE for the output shape
--------------------------------
D_TYPE, QSTR
--------------------------------
strides D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of mixed D_STRUCTURE, QSTR , or None
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Optional D_STRUCTURE of keyword arguments to be passed to the PARAM
--------------------------------
Input shape Arbitrary
--------------------------------
Use the keyword argument input_shape BSTR when using this layer as the first layer in a model
--------------------------------
Output shape Specified by PARAM argument
--------------------------------
The function to be evaluated
--------------------------------
Takes input D_STRUCTURE as first argument
--------------------------------
Either None BSTR or a callable with the same signature as the QSTR layer method, or a D_STRUCTURE that will be returned as output mask regardless what the input is
--------------------------------
Expected output shape from PARAM
--------------------------------
This argument can be inferred if not explicitly provided
--------------------------------
Can be a D_STRUCTURE or PARAM
--------------------------------
If a D_STRUCTURE, it only specifies the first dimension onward sample dimension is assumed either the same as the input output_shape input_shape BSTR, output_shape or, the input is QSTR and the sample dimension is also QSTR output_shape BSTR output_shape If a PARAM, it specifies the entire shape as a PARAM of the input shape output_shape f BSTR
--------------------------------
A nested structure of D_STRUCTURE, representing the initial state of the accumulator
--------------------------------
A function that maps BSTR to BSTR
--------------------------------
It must take two arguments and return a pair of nested structures of D_STRUCTURE
--------------------------------
The QSTR must match the structure of PARAM
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
Keyword arguments for PARAM
--------------------------------
Arguments for PARAM
--------------------------------
The operation that should be applied to the RaggedTensor QSTR QSTR is typically an element wise operation BSTR, but any operation that preserves the size of the outermost dimension can be used
--------------------------------
I e , QSTR op QSTR shape BSTR of the QSTR s QSTR flat_values D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
What to return otherwise BSTR
--------------------------------
Optional scalar D_STRUCTURE BSTR specifying the learning phase
--------------------------------
What to return in test phase BSTR
--------------------------------
One of QSTR
--------------------------------
Positive D_TYPE
--------------------------------
A D_TYPE, one of QSTR
--------------------------------
Positive D_TYPE
--------------------------------
D_STRUCTURE or variable to resize
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions if a CONSTANT_NUM-D D_STRUCTURE must be CONSTANT_NUM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with the same type as QSTR and shape BSTR
--------------------------------
QSTR dimension must match that of QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE and shape BSTR for QSTR data format or BSTR for QSTR data format
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE representing the output shape of the deconvolution op
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
If a single value is given it is replicated in the QSTR dimension
--------------------------------
By default the QSTR dimensions are set to CONSTANT_NUM
--------------------------------
The dimension order is determined by the value of PARAM, see below for details
--------------------------------
A CONSTANT_NUM-D BSTR D_STRUCTURE of type D_TYPE containing the dimensions to use for computing the L2 norm
--------------------------------
If QSTR BSTR, uses all dimensions
--------------------------------
A CONSTANT_NUM-D BSTR D_STRUCTURE REXPR
--------------------------------
A maximum clipping value
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE or QSTR
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
ONE_WORD D_TYPE
--------------------------------
if CONSTANT_BOOL, labels will be D_TYPE eg
--------------------------------
BSTR , if CONSTANT_BOOL, labels will be categorical, e g
--------------------------------
BSTR, BSTR, BSTR
--------------------------------
D_TYPE REXPR
--------------------------------
CONSTANT_NUM for no negative i e
--------------------------------
random samples
--------------------------------
CONSTANT_NUM for same number as positive samples
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of size PARAM where the entry i encodes the probability to sample a word of rank i
--------------------------------
Random seed
--------------------------------
A word D_STRUCTURE BSTR
--------------------------------
If using a PARAM, word indices are expected to match the rank of the words in a reference dataset e g
--------------------------------
CONSTANT_NUM would encode the CONSTANT_NUM th most frequently occurring token
--------------------------------
Note that index CONSTANT_NUM is expected to be a non word and will be skipped
--------------------------------
Whether to shuffle the word couples before returning them
--------------------------------
D_TYPE, maximum possible word index CONSTANT_NUM
--------------------------------
D_TYPE, size of sampling windows BSTR
--------------------------------
The window of a word QSTR will be BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE whose size is equal to the size of PARAMs first dimension
--------------------------------
Values should be sorted and can be repeated
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The size of the spatial block, same as in Space2Depth
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE with type D_TYPE containing the ids to be looked up in PARAM
--------------------------------
If not QSTR , each embedding is clipped if its l2 norm is larger than this value
--------------------------------
A name for the operation BSTR
--------------------------------
A single D_STRUCTURE representing the complete embedding D_STRUCTURE of P D_STRUCTURE all of same shape except for the first dimension, representing sharded embedding D_STRUCTURE
--------------------------------
Alternatively, a QSTR , created by partitioning along dimension CONSTANT_NUM
--------------------------------
Each element must be appropriately sized for the QSTR
--------------------------------
A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE, each of which will be unpacked along their first dimension
--------------------------------
The nested D_STRUCTURE of the resulting slices will be mapped over by PARAM
--------------------------------
The callable to be performed
--------------------------------
It accepts one argument, which will have the same BSTR structure as PARAM, and returns a possibly nested structure of D_STRUCTURE and Operations, which may be different than the structure of PARAM
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
The data format of the PARAM and output data
--------------------------------
With the default format QSTR , the data is stored in the order of BSTR
--------------------------------
Alternatively, the format could be QSTR , the data storage order is BSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of the format specified by PARAM
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
dtype for returned histogram
--------------------------------
A name for this operation defaults to QSTR
--------------------------------
Scalar D_TYPE D_STRUCTURE
--------------------------------
Number of histogram bins
--------------------------------
Shape BSTR D_STRUCTURE of same PARAM as PARAM
--------------------------------
PARAM REXPR BSTR will be mapped to hist BSTR, PARAM REXPR BSTR will be mapped to hist BSTR
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE L1 regularization factor
--------------------------------
Data type of the confusion matrix
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of real labels for the classification task
--------------------------------
Scope name
--------------------------------
The possible number of PARAM the classification task can have
--------------------------------
If this value is not provided, it will be calculated using both PARAM and PARAM D_STRUCTURE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of predictions for a given classification
--------------------------------
An optional D_STRUCTURE whose shape matches PARAM
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
Vertical coordinate of the top left corner of the result in the input
--------------------------------
Horizontal coordinate of the top left corner of the result in the input
--------------------------------
Height of the result
--------------------------------
Width of the result
--------------------------------
D_STRUCTURE with shape BSTR
--------------------------------
where to cache the data relative to keras dataset
--------------------------------
A mean D_STRUCTURE
--------------------------------
A name for this operation BSTR
--------------------------------
An offset D_STRUCTURE, often denoted beta in equations, or None
--------------------------------
If present, will be added to the normalized D_STRUCTURE
--------------------------------
A scale D_STRUCTURE, often denoted gamma in equations, or QSTR
--------------------------------
If present, the scale is applied to the normalized D_STRUCTURE
--------------------------------
A variance D_STRUCTURE
--------------------------------
A small D_TYPE number to avoid dividing by CONSTANT_NUM
--------------------------------
Input D_STRUCTURE of arbitrary dimensionality
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_TYPE or shape D_STRUCTURE Axes over which to calculate
--------------------------------
Defaults to None, which shifts all axes
--------------------------------
An optional name for the operation
--------------------------------
D_STRUCTURE, input D_STRUCTURE
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of the format specified by PARAM
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A D_TYPE or None
--------------------------------
Specifies whether the channel dimension of the PARAM and output is the last dimension default, or if QSTR does not start with QSTR , or the second dimension if QSTR starts with QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
Alias of dilation_rate
--------------------------------
Alias of filter
--------------------------------
An BSTR D D_STRUCTURE of type QSTR , of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR, or BSTR input_spatial_shape QSTR NC
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
ONE_WORD Optional
--------------------------------
D_STRUCTURE of N D_TYPE REXPR
--------------------------------
Specifies the output stride
--------------------------------
Defaults to BSTR N If any value of strides is REXPR, then all values of dilation_rate must be CONSTANT_NUM
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects
--------------------------------
A name for the operation BSTR
--------------------------------
One of QSTR
--------------------------------
Positive D_TYPE
--------------------------------
Positive D_TYPE
--------------------------------
Positive D_TYPE
--------------------------------
D_STRUCTURE or variable to resize
--------------------------------
A D_STRUCTURE
--------------------------------
Must have rank CONSTANT_NUM or higher
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Fingerprint method used by this op
--------------------------------
Currently available method is QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
implementation mode, either CONSTANT_NUM CONSTANT_NUM loops over input spatial locations to perform the forward pass
--------------------------------
It is memory efficient but performs a lot of BSTR ops CONSTANT_NUM stores layer weights in a dense but sparsely populated CONSTANT_NUM-D matrix and implements the forward pass as a single matrix multiply
--------------------------------
It uses a lot of RAM but performs few BSTR ops CONSTANT_NUM stores layer weights in a sparse D_STRUCTURE and implements the forward pass as a single sparse matrix multiply How to choose CONSTANT_NUM large, dense models, CONSTANT_NUM small models, CONSTANT_NUM large, sparse models,where QSTR stands for large input output activations i e
--------------------------------
many PARAM, QSTR , large np prod BSTR, np prod BSTR , and QSTR stands for few connections between inputs and outputs, i e
--------------------------------
small ratio PARAM input_filters np prod BSTR, where inputs to and outputs of the layer are assumed to have shapes input_size BSTR, output_size BSTR respectively
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the width and height of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Currently only support QSTR BSTR QSTR will be supported in future
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the width and height
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
Origin layer of the D_STRUCTURE
--------------------------------
Will be determined via D_STRUCTURE keras_history if not provided
--------------------------------
Origin node index of the D_STRUCTURE
--------------------------------
The D_STRUCTURE to start from
--------------------------------
A tf data Dataset QSTR tf data Iterator
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The GIF encoded image
--------------------------------
A name for the operation BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A name for this operation BSTR
--------------------------------
target model for the conversion
--------------------------------
D_STRUCTURE or variable
--------------------------------
Slope of the activation function at x REXPR
--------------------------------
A D_STRUCTURE representing preactivation values
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Python callable or class to convert
--------------------------------
QSTR , a D_STRUCTURE of, or a single tf autograph experimental Feature value
--------------------------------
Whether to recursively convert any functions that the converted function may call
--------------------------------
D_STRUCTURE or variable
--------------------------------
Python callable or class to convert
--------------------------------
QSTR , a D_STRUCTURE of, or a single tf autograph experimental Feature value
--------------------------------
Whether to recursively convert any functions that the converted function may call
--------------------------------
Specifies the method used to combine gradient terms
--------------------------------
Accepted values are constants defined in the class QSTR
--------------------------------
If CONSTANT_BOOL, add a D_STRUCTURE around the gradients returned for an operations
--------------------------------
This avoids some race conditions
--------------------------------
ONE_WORD Optional
--------------------------------
A D_STRUCTURE of D_STRUCTURE the same size as PARAM and holding the gradients computed for each y in PARAM
--------------------------------
Optional name to use for grouping all the gradient ops together
--------------------------------
defaults to QSTR
--------------------------------
ONE_WORD Optional
--------------------------------
A D_STRUCTURE of D_STRUCTURE not to differentiate through
--------------------------------
ONE_WORD Optional
--------------------------------
Specifies the gradient value returned when the given input D_STRUCTURE are unconnected
--------------------------------
Accepted values are constants defined in the class tf UnconnectedGradients QSTR none
--------------------------------
A D_STRUCTURE of D_STRUCTURE to be used for differentiation
--------------------------------
A D_STRUCTURE of D_STRUCTURE to be differentiated
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to run functions eagerly
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE mapping D_TYPE axes to a specific dimension value
--------------------------------
Expected DataType of the input
--------------------------------
D_TYPE, maximum rank of the input
--------------------------------
D_TYPE, minimum rank of the input
--------------------------------
D_TYPE, expected rank of the input
--------------------------------
Shape D_STRUCTURE, expected shape of the input BSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the input units to drop
--------------------------------
function f BSTR that returns a D_STRUCTURE of D_STRUCTURE outputs
--------------------------------
an input D_STRUCTURE
--------------------------------
Used for backwards compatibility
--------------------------------
index actual words with this index and higher
--------------------------------
truncate sequences after this length
--------------------------------
max number of words to include
--------------------------------
Words are ranked by how often they occur BSTR and only the most frequent words are kept
--------------------------------
words that were cut out because of the PARAMor PARAM limit will be replaced with this character
--------------------------------
where to cache the data relative to keras dataset
--------------------------------
random seed for sample shuffling
--------------------------------
skip the top N most frequently occurring words BSTR
--------------------------------
The start of a D_STRUCTURE will be marked with this character
--------------------------------
Set to CONSTANT_NUM because CONSTANT_NUM is usually the padding character
--------------------------------
Fraction of the dataset to be used as test data
--------------------------------
Value to set the D_STRUCTURE to, as a Numpy D_STRUCTURE BSTR
--------------------------------
D_STRUCTURE to set to a new PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
A rank CONSTANT_NUM D_TYPE D_STRUCTURE, representing the shape of x
--------------------------------
A rank CONSTANT_NUM D_TYPE D_STRUCTURE, representing the shape of y
--------------------------------
BSTR which are to be pseudo inverted
--------------------------------
Python D_TYPE prefixed to ops created by this function
--------------------------------
Default value QSTR
--------------------------------
D_STRUCTURE of small singular value cutoffs
--------------------------------
Singular values smaller BSTR than QSTR largest_singular_value BSTR are set to zero
--------------------------------
Must broadcast against tf shape BSTR CONSTANT_NUM
--------------------------------
Default value CONSTANT_NUM
--------------------------------
max BSTR eps
--------------------------------
When CONSTANT_BOOL, additional assertions might be embedded in the graph
--------------------------------
Default value CONSTANT_BOOL BSTR
--------------------------------
D_TYPE, drop probability as with QSTR
--------------------------------
The multiplicative noise will have standard deviation sqrt BSTR
--------------------------------
A Python D_TYPE to use as random seed
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
These features are associated with a QSTR as a whole
--------------------------------
A scalar BSTR, the PARAM of the PARAM proto
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
These features are associated with data within the QSTR section of the QSTR proto
--------------------------------
A scalar BSTR of type D_TYPE, a single binary serialized QSTR proto
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE BSTR
--------------------------------
either a D_STRUCTURE, or a callable that returns a D_STRUCTURE
--------------------------------
either a D_STRUCTURE, or a callable that returns a D_STRUCTURE
--------------------------------
The data type to produce
--------------------------------
Must be a D_TYPE type
--------------------------------
An optional name for the operation
--------------------------------
A D_TYPE D_STRUCTURE indicating whether to generate a periodic or symmetric window
--------------------------------
Periodic windows are typically used for spectral analysis while symmetric windows are typically used for digital filter design
--------------------------------
A scalar D_STRUCTURE indicating the window length to generate
--------------------------------
Dots per inch
--------------------------------
Whether to expand nested models into clusters
--------------------------------
A Keras model instance
--------------------------------
QSTR argument passed to PyDot, a D_TYPE specifying the format of the plot QSTR creates a vertical plot QSTR creates a horizontal plot
--------------------------------
whether to display layer names
--------------------------------
whether to display shape information
--------------------------------
File name of the plot image
--------------------------------
A D_TYPE, only QSTR is currently supported
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
CONSTANT_NUM-D of length CONSTANT_NUM
--------------------------------
The input stride for atrous morphological dilation
--------------------------------
Must be BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
If not specified QSTR is used
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
CONSTANT_NUM-D of length CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the input D_STRUCTURE
--------------------------------
Must be BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
Additional keyword arguments
--------------------------------
The dtype of the layer computations and weights default of QSTR means use tf keras backend floatx in TensorFlow CONSTANT_NUM, or the type of the first input in TensorFlow CONSTANT_NUM
--------------------------------
Set this to CONSTANT_BOOL if your layer should only be run eagerly, and should not be used to generate a static computation graph
--------------------------------
This would be the case for a Tree RNN or a recursive network, for example, or generally for any layer that manipulates D_STRUCTURE using Python control flow
--------------------------------
If CONSTANT_BOOL, we assume that the layer can safely be used to generate a static computation graph
--------------------------------
D_TYPE name of the layer
--------------------------------
D_TYPE, whether the layer variables should be trainable
--------------------------------
the new QSTR object
--------------------------------
D_TYPE, path to a directory
--------------------------------
The type of the output D_TYPE
--------------------------------
A D_STRUCTURE or Python value of type PARAM, broadcastable with PARAM
--------------------------------
The upper bound on the range of random values to generate BSTR
--------------------------------
Defaults to CONSTANT_NUM if PARAM is D_TYPE
--------------------------------
A D_STRUCTURE or Python value of type PARAM, broadcastable with PARAM
--------------------------------
The lower bound on the range of random values to generate BSTR
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used in combination with tf random set_seed to create a reproducible D_STRUCTURE of D_STRUCTURE across multiple calls
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
D_TYPE, a path
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE whose size is equal to the size of PARAMs first dimension
--------------------------------
Values should be sorted and can be repeated
--------------------------------
The first operand D_STRUCTURE
--------------------------------
The second operand D_STRUCTURE
--------------------------------
At least one operand must be sparse
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE
--------------------------------
The magnitude threshold that determines if an output value index pair takes space
--------------------------------
Its dtype should match that of the values if they are real if the latter are D_TYPE, then the dtype should be D_TYPE, correspondingly
--------------------------------
Optional D_STRUCTURE of allowed batch sizes
--------------------------------
If left empty, does nothing
--------------------------------
Otherwise, supplies a D_STRUCTURE of batch sizes, causing the op to pad batches up to one of those sizes
--------------------------------
The entries must increase monotonically, and the final entry must equal PARAM
--------------------------------
Whether to use autograph to compile python and eager style code for efficient graph mode execution
--------------------------------
Maximum number of microseconds to wait before outputting an incomplete batch
--------------------------------
Batch sizes will never be bigger than this
--------------------------------
The maximum depth of the batch queue
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of scheduling threads for processing batches of work
--------------------------------
Determines the number of batches processed in parallel
--------------------------------
An D_TYPE, the axis to find minimum values
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
Configuration D_STRUCTURE
--------------------------------
Optional D_STRUCTURE mapping names BSTR to custom classes or functions to be considered during deserialization
--------------------------------
A tf estimator Estimator instance
--------------------------------
If set, directory containing summary files with eval metrics
--------------------------------
By default, PARAM eval_dir will be used
--------------------------------
D_TYPE, metric to track
--------------------------------
QSTR , etc
--------------------------------
D_TYPE, stop is never requested if global step is less than this value
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If specified, calls QSTR at an interval of QSTR seconds
--------------------------------
Defaults to CONSTANT_NUM seconds
--------------------------------
Either this or PARAM must be set
--------------------------------
If specified, calls QSTR every QSTR steps
--------------------------------
Either this or PARAM must be set
--------------------------------
D_TYPE threshold for the given metric
--------------------------------
function to decorate
--------------------------------
D_STRUCTURE of type D_TYPE
--------------------------------
Either a scalar QSTR , or a D_STRUCTURE or an D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
If axes is a scalar, sum over the last N axes of a and the first N axes of b in order
--------------------------------
If axes is a D_STRUCTURE the first and second row contain the set of unique D_TYPE specifying axes along which the contraction is computed, for QSTR , respectively
--------------------------------
The number of axes for QSTR must be equal
--------------------------------
If axes CONSTANT_NUM, computes the outer product between QSTR
--------------------------------
D_STRUCTURE with the same type as QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Optional element type for the returned D_STRUCTURE
--------------------------------
If missing, the type is inferred from the type of PARAM
--------------------------------
Optional element type for the returned D_STRUCTURE, used when PARAM is None
--------------------------------
In some cases, a caller may not have a PARAM in mind when converting to a D_STRUCTURE, so dtype_hint can be used as a soft preference
--------------------------------
If the conversion to QSTR is not possible, this argument has no effect
--------------------------------
Optional name to use if a new D_STRUCTURE is created
--------------------------------
An object whose type has a registered D_STRUCTURE conversion function
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Index of axis for columns in the input D_STRUCTURE
--------------------------------
Value used for points outside the boundaries of the input if mode QSTR
--------------------------------
Points outside the boundaries of the input are filled according to the given mode one of QSTR
--------------------------------
D_TYPE, order of spline interpolation
--------------------------------
see ndimage interpolation affine_transform
--------------------------------
Rotation range, in degrees
--------------------------------
Index of axis for rows in the input D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
Whether to enable or disable compilation in the scope
--------------------------------
Either a Python D_TYPE, or a callable that accepts the parameter QSTR and returns a python D_TYPE
--------------------------------
If CONSTANT_BOOL put each gradient subgraph into a separate compilation scope
--------------------------------
This gives fine grained control over which portions of the graph will be compiled as a single unit
--------------------------------
Compiling gradients separately may yield better performance for some graphs
--------------------------------
The scope is named based on the scope of the forward computation as well as the name of the gradients
--------------------------------
As a result, the gradients will be compiled in a scope that is separate from both the forward computation, and from other gradients
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE BSTR
--------------------------------
Number that increments PARAM
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The type of the elements of the resulting D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE BSTR
--------------------------------
Upper limit of D_STRUCTURE, exclusive
--------------------------------
If None, defaults to the value of PARAM while the first entry of the range defaults to CONSTANT_NUM
--------------------------------
A name for the operation
--------------------------------
Defaults to QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE BSTR
--------------------------------
Acts as first entry in the range if PARAMis not None otherwise, acts as range PARAM and first entry defaults to CONSTANT_NUM
--------------------------------
the number of query examples expected per batch
--------------------------------
Leave unset for variable batch size BSTR
--------------------------------
a D_STRUCTURE of D_TYPE to QSTR
--------------------------------
The QSTR we have
--------------------------------
The QSTR we expected
--------------------------------
D_TYPE L2 regularization factor
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with the same type as PARAM and shape BSTR
--------------------------------
QSTR in_channels dimension must match that of PARAM
--------------------------------
Atrous convolution is equivalent to standard convolution with upsampled filters with effective height QSTR filter_width BSTR, produced by inserting PARAM CONSTANT_NUM zeros along consecutive elements across the QSTR spatial dimensions
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of shape representing the output shape of the deconvolution op
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
A positive D_TYPE
--------------------------------
The stride with which we sample input values across the QSTR dimensions
--------------------------------
Equivalently, the rate by which we upsample the filter values by inserting zeros across the QSTR dimensions
--------------------------------
In the literature, the same parameter is sometimes called QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE
--------------------------------
It needs to be in the default QSTR format
--------------------------------
Its shape is BSTR
--------------------------------
An D_TYPE
--------------------------------
The axis along which to repeat values
--------------------------------
By default axis None , use the flattened PARAM D_STRUCTURE, and return a flat output D_STRUCTURE
--------------------------------
An QSTR dimensional D_STRUCTURE
--------------------------------
A name for the operation
--------------------------------
An CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
The number of repetitions for each element
--------------------------------
repeats is broadcasted to fit the shape of the given PARAM
--------------------------------
len BSTRmust equal PARAM shape BSTR if PARAM is not None
--------------------------------
A D_TYPE multiplier for adjusting contrast
--------------------------------
Images to adjust
--------------------------------
At least CONSTANT_NUM D
--------------------------------
A device policy
--------------------------------
Valid values None Switch to a system default
--------------------------------
QSTR Copies the D_STRUCTURE which are not on the right device and logs a warning
--------------------------------
QSTR Raises an error if the placement is not as required
--------------------------------
QSTR Silently copies the D_STRUCTURE
--------------------------------
Note that this may hide performance problems as there is no notification provided when operations are blocked on the D_STRUCTURE being copied between devices
--------------------------------
QSTR silently copies D_TYPE D_STRUCTURE, raising errors on the other ones
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
What to return otherwise BSTR
--------------------------------
Optional scalar D_STRUCTURE BSTR specifying the learning phase
--------------------------------
What to return in train phase BSTR
--------------------------------
fraction of the entries in the D_STRUCTURE that will be set to CONSTANT_NUM
--------------------------------
shape for randomly generated keep drop flags, must be broadcastable to the shape of QSTR
--------------------------------
random seed to ensure determinism
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Scalar value to set for indices not specified in PARAM
--------------------------------
Defaults to zero
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
The input D_STRUCTURE
--------------------------------
A D_TYPE value
--------------------------------
If CONSTANT_BOOL, indices are checked to make sure they are sorted in lexicographic order and that there are no repeats
--------------------------------
A D_STRUCTURE of the same type and shape as PARAM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
QSTR to configure
--------------------------------
BSTR Whether to enable or disable memory growth
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the amount of PARAM along the height and width of the output D_STRUCTURE
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
The amount of output PARAM along a given dimension must be lower than the stride along that same dimension
--------------------------------
If set to QSTR BSTR, the output shape is inferred
--------------------------------
one of QSTR BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the height and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
D_TYPE type to use for the output
--------------------------------
Defaults to D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
Each slice i, represents the unnormalized log probabilities for all classes
--------------------------------
Optional name for the operation
--------------------------------
CONSTANT_NUM D
--------------------------------
Number of independent samples to draw for each row slice
--------------------------------
A shape BSTR D_TYPE D_STRUCTURE of seeds to the random number generator
--------------------------------
one of QSTR
--------------------------------
Python D_TYPE
--------------------------------
Optional input batch size BSTR
--------------------------------
Datatype of the input
--------------------------------
Shape D_STRUCTURE BSTR, or QSTR instance BSTR
--------------------------------
Optional D_STRUCTURE to use as layer input instead of creating a placeholder
--------------------------------
Name of the layer BSTR
--------------------------------
D_TYPE, whether the placeholder created is meant to be ragged
--------------------------------
In this case, values of QSTR in the QSTR argument represent ragged dimensions
--------------------------------
For more information about RaggedTensors, seehttps www tensorflow org guide ragged_tensors
--------------------------------
D_TYPE, whether the placeholder created is meant to be sparse
--------------------------------
Standard layer keyword arguments
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE, axis or axes along which to take the dot product
--------------------------------
Whether to L2 normalize samples along the dot product axis before taking the dot product
--------------------------------
If set to CONSTANT_BOOL, then the output of the dot product is the cosine proximity between the two samples
--------------------------------
D_TYPE specifying the channels axis
--------------------------------
QSTR channels_last , and QSTR channels_first
--------------------------------
D_TYPE, whether PARAM is the result of a softmax, or is a D_STRUCTURE of logits
--------------------------------
A D_STRUCTURE resulting from a softmax unless PARAM is CONSTANT_BOOL, in which case QSTR is expected to be the logits
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
The type of the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The mean of the truncated normal distribution
--------------------------------
A name for the operation BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distribution
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE or Python value of type PARAM
--------------------------------
The standard deviation of the normal distribution, before truncation
--------------------------------
Whether PARAM is expected to be a logits D_STRUCTURE
--------------------------------
By default, we consider that PARAMencodes a probability distribution
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE with the same shape as PARAM
--------------------------------
If CONSTANT_BOOL, then composite D_STRUCTURE such as D_STRUCTURE and tf RaggedTensor are expanded into their component D_STRUCTURE
--------------------------------
an arbitrarily nested structure or a scalar object
--------------------------------
Note, numpy D_STRUCTURE are considered scalars
--------------------------------
The sampling factor in the word2vec formula
--------------------------------
D_TYPE, number of possible words to sample
--------------------------------
QSTR as returned by tf linalg lu , i e , if matmul BSTR X QSTR lower_upper L U eye
--------------------------------
Python D_TYPE name given to ops managed by this object
--------------------------------
Default value QSTR i e , QSTR
--------------------------------
QSTR as returned by tf linag lu , i e , if matmul BSTR X QSTR perm argmax BSTR
--------------------------------
Python D_TYPE indicating whether arguments should be checked for correctness
--------------------------------
Default value CONSTANT_BOOL i e , don t validate arguments
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
Axes along which to compute mean and variance
--------------------------------
produce moments with the same dimensionality as the input
--------------------------------
Name used to scope the operations that compute the moments
--------------------------------
Not used in the current implementation
--------------------------------
A D_STRUCTURE
--------------------------------
The axis along which to sort
--------------------------------
The default is CONSTANT_NUM, which sorts the last axis
--------------------------------
The direction in which to sort the PARAM QSTR
--------------------------------
Optional name for the operation
--------------------------------
CONSTANT_NUM-D or higher D_TYPE D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
A D_TYPE, one of QSTR
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
The upsampling factors for rows and columns
--------------------------------
A D_STRUCTURE of same shape as QSTR
--------------------------------
A Variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_TYPE, drop probability as with QSTR
--------------------------------
The multiplicative noise will have standard deviation sqrt BSTR
--------------------------------
A D_STRUCTURE or variable
--------------------------------
The original device on which QSTR will be placed
--------------------------------
The name of a device to which elements will be copied
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to
--------------------------------
If specified, only squeezes the dimensions listed
--------------------------------
The dimension index starts at CONSTANT_NUM
--------------------------------
It is an error to squeeze a dimension that is not CONSTANT_NUM
--------------------------------
Must be in the range BSTR
--------------------------------
Must be specified if PARAM is a QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
The QSTR to squeeze
--------------------------------
A name for the operation BSTR
--------------------------------
Specifies the response when an PARAM D_TYPE can t be converted using the indicated encoding
--------------------------------
One of QSTR Raise an exception for any illegal substrings QSTR Replace illegal substrings with PARAM QSTR Skip illegal substrings
--------------------------------
An QSTR dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR
--------------------------------
QSTR must be statically known
--------------------------------
D_TYPE PARAM for the unicode encoding that should be used to decode each D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
The replacement codepoint to be used in place of invalid substrings in PARAM when PARAM QSTR
--------------------------------
Valid keyword args are QSTR If set to CONSTANT_BOOL BSTR the types of iterables within the structures have to be same e g map_structure PARAM, BSTR, BSTR raises a QSTR exception
--------------------------------
To allow this set this argument to CONSTANT_BOOL
--------------------------------
Note that namedtuples with identical name and fields are always considered to have the same shallow structure QSTR If set to CONSTANT_BOOL, then composite D_STRUCTURE such as D_STRUCTURE and tf RaggedTensor are expanded into their component D_STRUCTURE
--------------------------------
If CONSTANT_BOOL BSTR, then composite D_STRUCTURE are not expanded
--------------------------------
scalar, or D_STRUCTURE of constructed scalars and or other tuples D_STRUCTURE, or scalars
--------------------------------
Note numpy D_STRUCTURE are considered as scalars
--------------------------------
A callable that accepts as many arguments as there are structures
--------------------------------
A D_STRUCTURE of type D_TYPE default CONSTANT_NUM
--------------------------------
Must be in the range BSTR
--------------------------------
If CONSTANT_BOOL, perform exclusive cumprod
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE default CONSTANT_BOOL
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
These features are associated with a QSTR as a whole
--------------------------------
A D_STRUCTURE BSTR, the PARAM of the PARAM protos
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
These features are associated with data within the QSTR section of the QSTR proto
--------------------------------
A D_STRUCTURE BSTR of type D_TYPE containing binary serialized QSTR protos
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_TYPE D_STRUCTURE to reduce
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Index of axis for columns in the input D_STRUCTURE
--------------------------------
Value used for points outside the boundaries of the input if mode QSTR
--------------------------------
Points outside the boundaries of the input are filled according to the given mode one of QSTR
--------------------------------
D_TYPE, order of spline interpolation
--------------------------------
see ndimage interpolation affine_transform
--------------------------------
Index of axis for rows in the input D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
D_STRUCTURE of D_TYPE zoom range for width and height
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
a D_TYPE for the name of the executor to be used to execute functions defined by tf contrib eager defun
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The size of the FFT that produced PARAM
--------------------------------
If not provided, uses the smallest power of CONSTANT_NUM enclosing PARAM
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The window length in samples
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The number of samples to step
--------------------------------
An optional name for the operation
--------------------------------
A D_TYPE BSTRD_STRUCTURE of STFT bins representing a batch of PARAM point STFTs where QSTR is PARAM CONSTANT_NUM CONSTANT_NUM
--------------------------------
A callable that takes a window length and a QSTR keyword argument and returns a BSTR D_STRUCTURE of samples in the provided datatype
--------------------------------
If set to QSTR , no windowing is used
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Image D_STRUCTURE with shape BSTR and type D_TYPE
--------------------------------
The image BSTR must be 2x2 or larger
--------------------------------
The configuration object
--------------------------------
The features D_STRUCTURE
--------------------------------
A logit_fn as defined above
--------------------------------
TRAIN EVAL PREDICT ModeKeys
--------------------------------
The hyperparameter D_STRUCTURE
--------------------------------
Use the adjoint of A in the matrix multiply
--------------------------------
If A is D_TYPE, this is transpose BSTR
--------------------------------
Otherwise it transpose BSTR
--------------------------------
Use the adjoint of B in the matrix multiply
--------------------------------
If B is D_TYPE, this is transpose BSTR
--------------------------------
Otherwise it transpose BSTR
--------------------------------
A dense Matrix with the same dtype as PARAM
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
D_STRUCTURE A, of rank CONSTANT_NUM
--------------------------------
The D_TYPE ID value to return for out of vocabulary feature values, defaults to CONSTANT_NUM
--------------------------------
This can not be specified with a positive PARAM
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
It is used as the column name and the D_STRUCTURE key for feature parsing configs, featureD_STRUCTURE objects, and feature columns
--------------------------------
Non negative D_TYPE, the number of out of vocabulary buckets
--------------------------------
All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value
--------------------------------
A positive QSTR can not be specified with PARAM
--------------------------------
The vocabulary file name
--------------------------------
Number of the elements in the vocabulary
--------------------------------
This must be no greater than length of PARAM, if less than length, later values are ignored
--------------------------------
If None, it is set to the length of PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
HSV data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
Optional global batch size value
--------------------------------
Defaults to size of first dimension of QSTR BSTR
--------------------------------
Per example loss
--------------------------------
Optional weighting for each example
--------------------------------
Specifies the response when an PARAM D_TYPE can t be converted using the indicated encoding
--------------------------------
One of QSTR Raise an exception for any illegal substrings QSTR Replace illegal substrings with PARAM QSTR Skip illegal substrings
--------------------------------
An QSTR dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR
--------------------------------
QSTR must be statically known
--------------------------------
D_TYPE PARAM for the unicode encoding that should be used to decode each D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
Whether to replace the C0 control characters BSTR with the PARAM
--------------------------------
The replacement codepoint to be used in place of invalid substrings in PARAM when PARAM QSTR and in place of C0 control characters in PARAM when PARAM CONSTANT_BOOL
--------------------------------
Axis along which to perform stacking
--------------------------------
D_STRUCTURE of D_STRUCTURE
--------------------------------
D_TYPE REXPR
--------------------------------
Threshold location of activation
--------------------------------
The type of the output
--------------------------------
A D_STRUCTURE or Python value of type PARAM, broadcastable with PARAM
--------------------------------
The mean of the normal distribution
--------------------------------
A name for the operation BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distribution
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output D_STRUCTURE
--------------------------------
A D_STRUCTURE or Python value of type PARAM, broadcastable with PARAM
--------------------------------
The standard deviation of the normal distribution
--------------------------------
Keyword arguments to construct a layer
--------------------------------
An D_STRUCTURE of dense D_STRUCTURE columns
--------------------------------
Valid columns are QSTR that wraps a sequence_categorical_column_with QSTR
--------------------------------
Name to give to the SequenceFeatures
--------------------------------
D_TYPE, whether the layer variables will be updated via gradient descent during training
--------------------------------
The class dimension
--------------------------------
Defaulted to CONSTANT_NUM which is the last dimension
--------------------------------
Each D_STRUCTURE along the class dimension should hold a valid probability distribution e g
--------------------------------
for the case in which labels are of shape BSTR, each row of labels BSTR must be a valid probability distribution
--------------------------------
Per label activations, typically a linear output
--------------------------------
These activation energies are interpreted as unnormalized log probabilities
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
Whether to subtract QSTR from QSTR , vs vice versa
--------------------------------
D_STRUCTURE of the same type as QSTR
--------------------------------
If sparse, indices must be sorted in row major order
--------------------------------
Whether to validate the order and range of sparse indices in QSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE to conjugate
--------------------------------
Must have D_TYPE or variant type
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A scalar D_TYPE indicating the number of segments
--------------------------------
Defaults to max BSTR CONSTANT_NUM BSTR
--------------------------------
The dtype for the return value
--------------------------------
Defaults to PARAM dtype , or D_TYPE if PARAM does not have a dtype
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
Optional callable that returns a D_STRUCTURE of D_STRUCTURE
--------------------------------
CONSTANT_BOOL iff at most one predicate is allowed to evaluate to CONSTANT_BOOL
--------------------------------
A name for this operation BSTR
--------------------------------
D_STRUCTURE of pairs of a D_TYPE scalar D_STRUCTURE and a callable which returns a D_STRUCTURE of D_STRUCTURE
--------------------------------
A D_TYPE that enables disables QSTR mode see above
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Transformation intensity
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_TYPE
--------------------------------
ONE_WORD Ignored
--------------------------------
ONE_WORD unique
--------------------------------
A D_STRUCTURE of D_STRUCTUREs describing left hand sides
--------------------------------
The shape depends of PARAM, see description above
--------------------------------
Must beD_TYPE
--------------------------------
one of D_STRUCTURE, or QSTR
--------------------------------
Default is QSTR
--------------------------------
A name to give this QSTR BSTR
--------------------------------
A D_STRUCTURE of shape BSTR and with the same dtype as PARAM
--------------------------------
Function or D_TYPE
--------------------------------
D_TYPE, dtype of returned D_STRUCTURE
--------------------------------
A D_TYPE, CONSTANT_NUM
--------------------------------
REXPR REXPR, probability of binomial distribution
--------------------------------
D_TYPE, random seed
--------------------------------
A D_STRUCTURE of D_TYPE, the shape of D_STRUCTURE to create
--------------------------------
A D_STRUCTURE BSTR, the names of the PARAM protos in the batch
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE BSTR of D_TYPE, a batch of binary serialized QSTR protos
--------------------------------
A D_STRUCTURE with data that will be assembled in the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with indices into PARAM
--------------------------------
Has same rank as PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE scalar
--------------------------------
Indicates the size of the outputD_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with PARAM into the output D_STRUCTURE
--------------------------------
Values should be sorted and can be repeated
--------------------------------
Whether to enable JIT compilation
--------------------------------
ONE_WORD QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
kernel D_STRUCTURE
--------------------------------
D_TYPE, QSTR
--------------------------------
strides D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The data format for PARAM
--------------------------------
Either QSTR BSTR or QSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
Contains QSTR convolutional filters of depth CONSTANT_NUM
--------------------------------
CONSTANT_NUM-D of size CONSTANT_NUM
--------------------------------
The dilation rate in which we sample PARAM values across the QSTR dimensions in atrous convolution
--------------------------------
If it is greater than CONSTANT_NUM, then all values of PARAM must be CONSTANT_NUM
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape according to PARAM
--------------------------------
A name for this operation BSTR
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
Pointwise filter to mix channels after PARAM has convolved spatially
--------------------------------
CONSTANT_NUM-D of size CONSTANT_NUM
--------------------------------
The strides for the depthwise convolution for each dimension of PARAM
--------------------------------
D_TYPE, dtype of returned D_STRUCTURE
--------------------------------
Mean of the values
--------------------------------
D_TYPE, random seed
--------------------------------
A D_STRUCTURE of D_TYPE, the shape of D_STRUCTURE to create
--------------------------------
Standard deviation of the values
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM D
--------------------------------
If CONSTANT_BOOL, the returned numpy D_STRUCTURE is allowed to have partially evaluated values
--------------------------------
Values that can t be evaluated will be None
--------------------------------
The D_STRUCTURE to be evaluated
--------------------------------
A D_STRUCTURE containing the total count of the data BSTR
--------------------------------
A D_STRUCTURE containing the mean sufficient statistics the BSTR sum of the elements to average over
--------------------------------
Name used to scope the operations that compute the moments
--------------------------------
A D_STRUCTURE containing the value by which the data is shifted for numerical stability, or QSTR if no shift was performed
--------------------------------
A D_STRUCTURE containing the variance sufficient statistics the BSTR squared sum of the data to compute the variance over
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE whose size is equal to the size of PARAMs first dimension
--------------------------------
Values should be sorted and can be repeated
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Typically CONSTANT_NUM D, but may have any dimensions
--------------------------------
If CONSTANT_BOOL, writes the graph as an ASCII proto
--------------------------------
A QSTR protocol buffer
--------------------------------
Directory where to write the graph
--------------------------------
This can refer to remote filesystems, such as Google Cloud Storage BSTR
--------------------------------
Filename for the graph
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A sorted D_STRUCTURE of D_TYPE specifying the boundaries
--------------------------------
A one dimensional dense column which is generated with QSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A QSTR created by categorical_column_with functions
--------------------------------
Type of weights, such as D_TYPE
--------------------------------
Only D_TYPE weights are supported
--------------------------------
D_TYPE key for weight values
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The minimum required fraction of lines before a truncated input is accepted
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of color channels for the decoded image
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The JPEG encoded image
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
D_TYPE specifying a hint about the algorithm used for decompression
--------------------------------
Defaults to which maps to a system specific default
--------------------------------
Currently valid values are QSTR
--------------------------------
The hint may be ignored BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL use a slower but nicer upscaling of the chroma planes BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Downscaling ratio
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL try to recover an image from truncated input
--------------------------------
A real D_TYPE scalar value, convertible to a D_TYPE D_STRUCTURE
--------------------------------
Optional long form description for this summary, as a constant D_TYPE
--------------------------------
Markdown is supported
--------------------------------
Defaults to empty
--------------------------------
A name for this summary
--------------------------------
The summary tag used for TensorBoard will be this name prefixed by any active name scopes
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
A D_STRUCTURE with D_TYPE dtype
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The number of distinct segment IDs
--------------------------------
An D_TYPE D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_TYPE, only QSTR is currently supported
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
The PARAM stride for atrous morphological dilation
--------------------------------
Must be BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Must be BSTR
--------------------------------
the number of query examples expected per batch
--------------------------------
Leave unset for variable batch size BSTR
--------------------------------
a D_STRUCTURE of D_TYPE to D_STRUCTURE
--------------------------------
A D_STRUCTURE representing pixel data with shape BSTR, where QSTR is the number of images, QSTR are the height and width of the images, and QSTR is the number of channels, which should be CONSTANT_NUM BSTR
--------------------------------
Any of the dimensions may be statically unknown i e , QSTR
--------------------------------
D_TYPE data will be clipped to the range BSTR
--------------------------------
Optional long form description for this summary, as a constant D_TYPE
--------------------------------
Markdown is supported
--------------------------------
Defaults to empty
--------------------------------
Optional D_TYPE or rank CONSTANT_NUM D_TYPE D_STRUCTURE
--------------------------------
At most this many images will be emitted at each PARAM
--------------------------------
When more than QSTR many images are provided, the first QSTR many images will be used and the rest silently discarded
--------------------------------
A name for this summary
--------------------------------
The summary tag used for TensorBoard will be this name prefixed by any active name scopes
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
Represents the shape of the output D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM-D BSTR
--------------------------------
Value to fill the returned D_STRUCTURE
--------------------------------
compatibility BSTR Equivalent to np full end_compatibility
--------------------------------
optimize Optimization strategy to use to find contraction path using opt_einsum
--------------------------------
Must be QSTR , branch CONSTANT_NUM, QSTR
--------------------------------
optional, default QSTR
--------------------------------
name A name for the operation BSTR
--------------------------------
the inputs to contract BSTR, whose shapes should be consistent with PARAM
--------------------------------
a D_TYPE describing the contraction, in the same format as numpy einsum
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
A tf data Dataset for which to determine cardinality
--------------------------------
D_STRUCTURE of the form QSTR D_TYPE, QSTR D_STRUCTURE
--------------------------------
D_STRUCTURE mapping class names BSTR objects to class functions
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with size matching the channel dimension of PARAM
--------------------------------
Must be the same type as PARAM unless PARAM is a quantized type, in which case a different quantized type may be used
--------------------------------
A D_TYPE
--------------------------------
N C QSTR NC are supported
--------------------------------
If QSTR BSTR is specified then N C is assumed
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE with type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
function f BSTR that returns a D_STRUCTURE or nested structure of D_STRUCTUREoutputs
--------------------------------
BSTR CONSTANT_BOOL enables support for back propagation
--------------------------------
A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE, each of which will be unpacked along their first dimension
--------------------------------
The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM
--------------------------------
The callable to be performed
--------------------------------
BSTR D_STRUCTURE of D_STRUCTURE, as the initial value for the accumulator
--------------------------------
BSTR Name prefix for the returned D_STRUCTURE
--------------------------------
BSTR The number of iterations allowed to run in parallel
--------------------------------
BSTR CONSTANT_BOOL enables GPU CPU memory swapping
--------------------------------
D_TYPE, QSTR
--------------------------------
convolution kernel for the depthwise convolution
--------------------------------
D_STRUCTURE of D_TYPE, dilation rates for the separable convolution
--------------------------------
D_TYPE, QSTR
--------------------------------
strides D_STRUCTURE BSTR
--------------------------------
input D_STRUCTURE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
Target height
--------------------------------
Target width
--------------------------------
An D_TYPE REXPR
--------------------------------
The number of buckets
--------------------------------
Specify the hash_key that will be used by the QSTR function to combine the crosses fingerprints on SparseCrossOp BSTR
--------------------------------
An D_STRUCTURE identifying the features to be crossed
--------------------------------
Each element can be either D_TYPE Will use the corresponding feature which must be of D_TYPE type QSTR Will use the transformed D_STRUCTURE produced by this column
--------------------------------
Does not support hashed categorical column
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Error handling policy when there is invalid formatting found in the PARAM
--------------------------------
The value of QSTR will cause the operation to produce a InvalidArgument error on any invalid PARAM formatting
--------------------------------
A value of QSTR BSTR will cause the operation to replace any invalid formatting in the PARAM with the PARAM codepoint
--------------------------------
A value of QSTR will cause the operation to skip any invalid formatting in the PARAM and produce no corresponding output character
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The text to be processed
--------------------------------
Can have any shape
--------------------------------
A D_TYPE
--------------------------------
Text encoding of the PARAM D_TYPE
--------------------------------
This is any of the encodings supported by ICU ucnv algorithmic converters
--------------------------------
Examples UTF CONSTANT_NUM, QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE from UTF CONSTANT_NUM, QSTR
--------------------------------
The unicode encoding to use in the output
--------------------------------
Must be one of UTF CONSTANT_NUM, QSTR
--------------------------------
Multi byte encodings will be big endian
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Whether to replace the C0 control characters BSTR with the PARAM
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The replacement character codepoint to be used in place of any invalid formatting in the PARAM when PARAM QSTR
--------------------------------
Any valid unicode codepoint may be used
--------------------------------
The default value is the default unicode replacement character is 0xFFFD or U CONSTANT_NUM
--------------------------------
Note that for UTF CONSTANT_NUM, passing a replacement character expressible in CONSTANT_NUM byte, such as QSTR , will preserve D_TYPE alignment to the source since invalid bytes will be replaced with a CONSTANT_NUM byte replacement
--------------------------------
For UTF CONSTANT_NUM BE and UTF CONSTANT_NUM LE, any CONSTANT_NUM byte replacement character will preserve byte alignment to the source
--------------------------------
Optional D_STRUCTURE mapping names BSTR to custom classes or functions to be considered during deserialization
--------------------------------
YAML D_TYPE encoding a model configuration
--------------------------------
ONE_WORD D_TYPE
--------------------------------
All statistics recorded by the returned transformation will be associated with the given QSTR
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
Image data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
Whether PARAM is expected to be a logits D_STRUCTURE
--------------------------------
By default, we assume that PARAM encodes a probability distribution
--------------------------------
D_TYPE in BSTR
--------------------------------
If CONSTANT_NUM then smooth the labels
--------------------------------
D_STRUCTURE of predicted targets
--------------------------------
D_STRUCTURE of CONSTANT_BOOL targets
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of classes to randomly sample
--------------------------------
The QSTR return value will have shape BSTR
--------------------------------
If PARAM CONSTANT_BOOL, QSTR must be less than or equal to PARAM
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_TYPE
--------------------------------
Determines whether all sampled classes in a batch are unique
--------------------------------
A function mapping a nested structure of D_STRUCTURE having shapes and types defined by self output_shapes QSTR self output_types to a scalar D_TYPE D_STRUCTURE
--------------------------------
A function mapping a key and a dataset of up to PARAMconsecutive elements matching that key to another dataset
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to PARAM
--------------------------------
Mutually exclusive with PARAM
--------------------------------
A function mapping a key to a D_TYPE scalarD_STRUCTURE, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to PARAM
--------------------------------
Mutually exclusive with PARAM
--------------------------------
Optional D_TYPE name for this op
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
the D_TYPE D_STRUCTURE holding one or more serialized QSTR protobufs
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A QSTR created by a categorical_column_with function
--------------------------------
This column produces the sparse IDs that are inputs to the embedding lookup
--------------------------------
D_TYPE representing checkpoint name pattern from which to restore column weights
--------------------------------
Required if PARAM is not QSTR
--------------------------------
A D_TYPE specifying how to reduce if there are multiple entries in a single row
--------------------------------
Currently QSTR are supported, with QSTR the default
--------------------------------
QSTR often achieves good accuracy, in particular with bag of words columns
--------------------------------
Each of this can be thought as example level normalizations on the column
--------------------------------
For more information, see tf embedding_lookup_sparse
--------------------------------
An D_TYPE specifying dimension of the embedding, must be REXPR
--------------------------------
A variable initializer function to be used in embedding variable initialization
--------------------------------
If not specified, defaults to QSTR with mean CONSTANT_FLOAT and standard deviation CONSTANT_NUM sqrt BSTR
--------------------------------
If not QSTR , embedding values are l2 normalized to this value
--------------------------------
Name of the D_STRUCTURE in PARAM from which to restore the column weights
--------------------------------
Required if PARAM is not QSTR
--------------------------------
Whether or not the embedding is trainable
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
Activation function to use
--------------------------------
By default hyperbolic tangent activation function is applied tanh BSTR
--------------------------------
Regularizer function applied to
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
An D_TYPE or D_STRUCTURE of n D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the units to drop for the linear transformation of the inputs
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, process the input D_STRUCTURE backwards
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of n D_TYPE, specifying the dimensions of the convolution window
--------------------------------
One of QSTR BSTR
--------------------------------
PARAM function to use for the recurrent step
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the units to drop for the linear transformation of the recurrent state
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last output in the output D_STRUCTURE, or the full D_STRUCTURE
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch
--------------------------------
An D_TYPE or D_STRUCTURE of n D_TYPE, specifying the strides of the convolution
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL, add CONSTANT_NUM to the bias of the forget gate at initialization
--------------------------------
Use in combination with PARAM QSTR
--------------------------------
This is recommended in Jozefowicz et al
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Index D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM D
--------------------------------
The shape of the resulting D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Updates to scatter into output
--------------------------------
A tf estimator Estimator object
--------------------------------
A function which should obey the following signature Args can only have following four arguments in any order predictions Predictions D_STRUCTURE of D_STRUCTURE created by given PARAM features Input D_STRUCTURE of D_STRUCTURE objects created by QSTR which is given to PARAM evaluate as an argument labels Labels D_STRUCTURE of D_STRUCTURE created by QSTR which is given to PARAM evaluate as an argument config config attribute of the PARAM Returns D_STRUCTURE of metric results keyed by name
--------------------------------
Final metrics are a union of this and PARAMs existing metrics
--------------------------------
If there is a name conflict between this and PARAMs existing metrics, this will override the existing one
--------------------------------
The values of the D_STRUCTURE are the results of calling a metric function, namely a BSTR D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, factors by which to downscale BSTR BSTR will halve the input in both spatial dimension
--------------------------------
If only one D_TYPE is specified, the same window length will be used for both dimensions
--------------------------------
D_TYPE, D_STRUCTURE of CONSTANT_NUM D_TYPE, or None
--------------------------------
Strides values
--------------------------------
If None, it will default to PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of color channels for the decoded image
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The PNG encoded image
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
D_STRUCTURE of D_STRUCTURE to consider constant with respect to any other variable
--------------------------------
A D_STRUCTURE instance
--------------------------------
Optional DType of an element in the resulting D_STRUCTURE
--------------------------------
Default isD_TYPE
--------------------------------
Optional D_TYPE
--------------------------------
A name for the operation
--------------------------------
A D_STRUCTURE of D_TYPE, a D_STRUCTURE of D_TYPE, or a CONSTANT_NUM-D D_STRUCTURE of type D_TYPE
--------------------------------
A Python D_TYPE
--------------------------------
Used to seed the random generator
--------------------------------
path where to cache the dataset locally relative to keras datasets
--------------------------------
Number of PS servers to start
--------------------------------
Number of worker servers to start
--------------------------------
Communication protocol
--------------------------------
Allowed values are documented in the documentation of tf distribute Server
--------------------------------
BSTR tf ConfigProto to initialize PS servers
--------------------------------
BSTR tf ConfigProto to initialize workers
--------------------------------
Can be used to instantiate multiple devices etc
--------------------------------
standard layer keyword arguments
--------------------------------
Axis along which to concatenate
--------------------------------
D_TYPE REXPR
--------------------------------
Negative slope coefficient
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
Only the lower triangular part of each inner inner matrix is referenced
--------------------------------
BSTR perturbation used to compute D_TYPE Jacobian
--------------------------------
the function
--------------------------------
a D_STRUCTURE arguments for the function
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_TYPE, must be in the range rank BSTR
--------------------------------
Describes which axis of the PARAM D_STRUCTURE to reduce across
--------------------------------
For D_STRUCTURE, use axis CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults toD_TYPE
--------------------------------
The Grayscale D_STRUCTURE to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE prefix to index
--------------------------------
Input D_STRUCTURE
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
A QSTR representing the shape of this D_STRUCTURE, a QSTR , a D_STRUCTURE, or None
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
Regularization loss
--------------------------------
The QSTR to configure
--------------------------------
BSTR D_STRUCTURE of tf config LogicalDeviceConfiguration QSTR PhysicalDevice
--------------------------------
If None, the default configuration will be used
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
An D_TYPE mask
--------------------------------
An D_TYPE mask
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
An D_TYPE mask
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE mask
--------------------------------
An D_TYPE mask
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
The variable corresponding to PARAM or None
--------------------------------
An D_TYPE representing the number of records to combine in a single batch
--------------------------------
If CONSTANT_BOOL, and the batch size does not evenly divide the input dataset size, the final smaller batch will be dropped
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
See tf io parse_example
--------------------------------
D_STRUCTURE of files or patterns of file paths containing QSTR records
--------------------------------
See tf io gfile glob for pattern rules
--------------------------------
BSTR A D_TYPE corresponding to the key labels are stored in tf Examples
--------------------------------
If provided, it must be one of the PARAM key, otherwise results in QSTR
--------------------------------
D_TYPE specifying the number of times to read through the dataset
--------------------------------
If None, cycles through the dataset forever
--------------------------------
Defaults to QSTR
--------------------------------
Number of threads to use for parsing QSTR D_STRUCTURE into a D_STRUCTURE of QSTR D_STRUCTURE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of feature batches to prefetch in order to improve performance
--------------------------------
Recommended value is the number of batches consumed per training step
--------------------------------
Defaults to auto tune
--------------------------------
A function or class that can be called with a QSTR D_STRUCTURE and BSTR PARAM and returns a QSTR of QSTR D_STRUCTURE
--------------------------------
Defaults to tf data TFRecordDataset
--------------------------------
Additional arguments to pass to the PARAM class
--------------------------------
Number of threads used to read QSTR records
--------------------------------
If REXPR, the results will be interleaved
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A D_TYPE, indicates whether the input should be shuffled
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Buffer size of the ShuffleDataset
--------------------------------
A large capacity ensures better shuffling but would increase memory usage and startup time
--------------------------------
Randomization seed to use for shuffling
--------------------------------
If CONSTANT_BOOL, reading performance will be improved at the cost of non deterministic ordering
--------------------------------
If CONSTANT_BOOL, the order of elements produced is deterministic prior to shuffling elements are still randomized if PARAM CONSTANT_BOOL
--------------------------------
Note that if the seed is set, then order of elements after shuffling is deterministic
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A D_TYPE specifying the reduction op
--------------------------------
Currently QSTR are supported
--------------------------------
QSTR computes the weighted sum of the embedding results for each row
--------------------------------
QSTR is the weighted sum divided by the total weight
--------------------------------
QSTR is the weighted sum divided by the square root of the sum of the squares of the weights
--------------------------------
If not QSTR , each embedding is clipped if its l2 norm is larger than this value, before combining
--------------------------------
Optional name for the op
--------------------------------
A single D_STRUCTURE representing the complete embedding D_STRUCTURE of P D_STRUCTURE all of same shape except for the first dimension, representing sharded embedding D_STRUCTURE
--------------------------------
Alternatively, a QSTR , created by partitioning along dimension CONSTANT_NUM
--------------------------------
Each element must be appropriately sized for QSTR
--------------------------------
N x M D_STRUCTURE of D_TYPE ids where N is typically batch size and M is arbitrary
--------------------------------
either a D_STRUCTURE of D_TYPE weights, or QSTR to indicate all weights should be taken to be CONSTANT_NUM
--------------------------------
If specified, QSTR must have exactly the same shape and indices as PARAM
--------------------------------
can be CONSTANT_BOOL, a D_TYPE D_STRUCTURE, or a callable providing such
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Backpropagated gradients above the FakeQuantWithMinMaxArgs operation
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Values passed as inputs to the FakeQuantWithMinMaxArgs operation
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A tf data Dataset QSTR len BSTR CONSTANT_NUM
--------------------------------
A D_STRUCTURE of tf data Dataset objects with compatible structure
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
D_STRUCTURE of type D_TYPE and rank REXPR
--------------------------------
If CONSTANT_BOOL, QSTR is treated as a sparse matrix
--------------------------------
If CONSTANT_BOOL, QSTR is conjugated and transposed before multiplication
--------------------------------
If CONSTANT_BOOL, QSTR is conjugated and transposed before multiplication
--------------------------------
D_STRUCTURE with same type and rank as QSTR
--------------------------------
If CONSTANT_BOOL, QSTR is treated as a sparse matrix
--------------------------------
Name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, QSTR is transposed before multiplication
--------------------------------
If CONSTANT_BOOL, QSTR is transposed before multiplication
--------------------------------
Default value CONSTANT_FLOAT BSTR
--------------------------------
Default value CONSTANT_NUM BSTR
--------------------------------
First image batch
--------------------------------
Second image batch
--------------------------------
Default value CONSTANT_FLOAT
--------------------------------
Default value CONSTANT_FLOAT SSIM is less sensitivity to K2 for lower values, so it would be better if we taken the values in range of CONSTANT_NUM REXPR REXPR
--------------------------------
The dynamic range of the images BSTR
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE D_STRUCTURE
--------------------------------
For future expansion
--------------------------------
The axis to compute the DCT along
--------------------------------
Must be CONSTANT_NUM
--------------------------------
A BSTR D_TYPE D_STRUCTURE containing the signals to take the DCT of
--------------------------------
The length of the transform
--------------------------------
If length is less than D_STRUCTURE length, only the first n elements of the D_STRUCTURE are considered for the DCT
--------------------------------
If n is greater than the D_STRUCTURE length, zeros are padded and then the DCT is computed as usual
--------------------------------
An optional name for the operation
--------------------------------
The normalization to apply
--------------------------------
QSTR for no normalization or QSTR for orthonormal normalization
--------------------------------
The DCT type to perform
--------------------------------
Must be CONSTANT_NUM
--------------------------------
optional suffix for the event file PARAM
--------------------------------
Defaults to v2
--------------------------------
the largest interval between flushes
--------------------------------
Defaults to CONSTANT_NUM CONSTANT_NUM
--------------------------------
a D_TYPE specifying the directory in which to write an event file
--------------------------------
the largest number of summaries to keep in a queue will flush once the queue gets bigger than this
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
a name for the op that creates the writer
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE
--------------------------------
QSTR are supported
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM which defaults to CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
Dilations in the batch and depth dimensions must be CONSTANT_NUM
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with the same type as QSTR and shape BSTR
--------------------------------
QSTR s QSTR dimension must match that of QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE and shape BSTR for QSTR data format or BSTR for QSTR data format
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE, containing three elements, representing the output shape of the deconvolution op
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
The number of entries by which the filter is moved right at each step
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
D_TYPE, must be in the range rank BSTR
--------------------------------
Describes which axis of the PARAM D_STRUCTURE to reduce across
--------------------------------
For D_STRUCTURE, use axis CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults toD_TYPE
--------------------------------
ONE_WORD D_TYPE
--------------------------------
All statistics recorded by the returned transformation will be associated with the given QSTR
--------------------------------
D_TYPE or shape D_STRUCTURE, optional Axes over which to shift
--------------------------------
Default is None, which shifts all axes
--------------------------------
An optional name for the operation
--------------------------------
D_STRUCTURE, input D_STRUCTURE
--------------------------------
The D_TYPE type of an operation
--------------------------------
This corresponds to the OpDef name field for the proto that defines the operation
--------------------------------
The callable to be performed if PARAM is CONSTANT_BOOL
--------------------------------
Optional name prefix for the returned D_STRUCTURE
--------------------------------
A scalar determining whether to return the result of PARAM or PARAM
--------------------------------
The callable to be performed if PARAM is CONSTANT_BOOL
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
A D_STRUCTURE of tensorflow data types or a single tensorflow data type if there is only one, indicating what PARAM returns an empty D_STRUCTURE if no value is returned i e , if the return value is QSTR
--------------------------------
A Python function which accepts a D_STRUCTURE of D_STRUCTURE objects having element types that match the corresponding D_STRUCTURE objects in PARAMand returns a D_STRUCTURE of D_STRUCTURE objects or a single D_STRUCTURE, or QSTR having element types that match the corresponding values in PARAM
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE, the axis to compute the variance
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A UTF CONSTANT_NUM D_TYPE D_STRUCTURE value
--------------------------------
Optional long form description for this summary, as a constant D_TYPE
--------------------------------
Markdown is supported
--------------------------------
Defaults to empty
--------------------------------
A name for this summary
--------------------------------
The summary tag used for TensorBoard will be this name prefixed by any active name scopes
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
A D_TYPE D_STRUCTURE or QSTR the D_TYPE to split
--------------------------------
Must have a statically known rank QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A BSTR D_TYPE D_STRUCTUREof log magnitude mel scale spectrograms
--------------------------------
An optional name for the operation
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
An D_TYPE, the axis to sum over
--------------------------------
A D_TYPE, whether to keep the dimensions or not
--------------------------------
If QSTR is CONSTANT_BOOL, the rank of the D_STRUCTURE is reduced by CONSTANT_NUM
--------------------------------
If QSTR is CONSTANT_BOOL, the reduced dimension is retained with length CONSTANT_NUM
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE whose size is equal to the size of PARAMs first dimension
--------------------------------
Values should be sorted and can be repeated
--------------------------------
A scalar, slope of negative section
--------------------------------
A D_STRUCTURE or variable to compute the activation function for
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass None, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
Implementation mode, either CONSTANT_NUM
--------------------------------
Mode CONSTANT_NUM will structure its operations as a larger number of smaller dot products and additions, whereas mode CONSTANT_NUM BSTR will batch them into fewer, larger operations
--------------------------------
These modes will have different performance profiles on different hardware and for different applications
--------------------------------
Default CONSTANT_NUM
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
PARAM function to use for the recurrent step
--------------------------------
Default sigmoid QSTR
--------------------------------
If you pass QSTR , no PARAM is applied ie
--------------------------------
QSTR PARAM a BSTR x
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
GRU convention BSTR
--------------------------------
CONSTANT_BOOL QSTR , CONSTANT_BOOL QSTR BSTR
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
The layer to be wrapped
--------------------------------
Passed to tf Session run
--------------------------------
D_STRUCTURE of placeholder D_STRUCTURE
--------------------------------
D_TYPE, name of function
--------------------------------
D_STRUCTURE of output D_STRUCTURE
--------------------------------
D_STRUCTURE of update ops
--------------------------------
An object that can be converted to path representation
--------------------------------
BSTR CONSTANT_BOOL enables support for back propagation
--------------------------------
A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE, each of which will be unpacked along their first dimension
--------------------------------
The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM
--------------------------------
The callable to be performed
--------------------------------
It accepts two arguments
--------------------------------
The first will have the same structure as PARAM if one is provided, otherwise it will have the same structure as PARAM
--------------------------------
The second will have the same BSTR structure as PARAM
--------------------------------
Its output must have the same structure as PARAM if one is provided, otherwise it must have the same structure as PARAM
--------------------------------
BSTR CONSTANT_BOOL disables tests for consistent output shapes
--------------------------------
BSTR D_STRUCTURE of D_STRUCTURE, initial value for the accumulator, and the expected output type of PARAM
--------------------------------
BSTR Name prefix for the returned D_STRUCTURE
--------------------------------
BSTR The number of iterations allowed to run in parallel
--------------------------------
ONE_WORD BSTR
--------------------------------
BSTR CONSTANT_BOOL enables GPU CPU memory swapping
--------------------------------
D_TYPE, dtype of returned Keras variable
--------------------------------
D_TYPE, mean of the normal distribution
--------------------------------
D_TYPE, name of returned Keras variable
--------------------------------
D_TYPE, standard deviation of the normal distribution
--------------------------------
D_TYPE, random seed
--------------------------------
D_STRUCTURE of D_TYPE, shape of returned Keras variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Number of values to generate
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE
--------------------------------
First entry in the range
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Last entry in the range
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Optional QSTR instance to be used to handle backwards input processing
--------------------------------
If QSTR is not provided, the PARAM instance passed as the PARAM argument will be used to generate the backward PARAM automatically
--------------------------------
Note that the provided QSTR PARAM should have properties matching those of the PARAM argument, in particular it should have the same values for QSTR , etc
--------------------------------
In addition, QSTR and PARAM should have different QSTR argument values
--------------------------------
A QSTR will be raised if these requirements are not met
--------------------------------
QSTR instance
--------------------------------
Mode by which outputs of the forward and backward RNNs will be combined
--------------------------------
One of QSTR , None
--------------------------------
If None, the outputs will not be combined, they will be returned as a D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
The size of the sliding window for each dimension of PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use We specify the size related attributes as
--------------------------------
A D_STRUCTURE of D_TYPE that has length REXPR
--------------------------------
CONSTANT_NUM-D of length CONSTANT_NUM
--------------------------------
How far the centers of two consecutive patches are in PARAM
--------------------------------
Must be BSTR
--------------------------------
D_TYPE specifying the dimension index at which to expand the shape of PARAM
--------------------------------
Given an PARAM of D dimensions, QSTR must be in range BSTR BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Optional D_TYPE
--------------------------------
The name of the output D_STRUCTURE
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Callable that will be called upon each element in PARAM and an accumulator, for instance lambda acc, x acc x
--------------------------------
The first value used PARAM BSTR in case of None
--------------------------------
A D_TYPE name for the foldl node in the graph
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The size of the FFT to apply
--------------------------------
If not provided, uses the smallest power of CONSTANT_NUM enclosing PARAM
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The window length in samples
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The number of samples to step
--------------------------------
An optional name for the operation
--------------------------------
Whether to pad the end of PARAM with zeros when the provided frame length and step produces a frame that lies partially past its end
--------------------------------
A BSTR D_TYPE D_STRUCTURE of real valued signals
--------------------------------
A callable that takes a window length and a QSTR keyword argument and returns a BSTR D_STRUCTURE of samples in the provided datatype
--------------------------------
If set to QSTR , no windowing is used
--------------------------------
D_TYPE, name of the file to which to copy to
--------------------------------
D_TYPE, if CONSTANT_BOOL it an error for PARAM to be occupied by an existing file
--------------------------------
D_TYPE, name of the file whose contents need to be copied
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
The D_TYPE type to interpret each D_TYPE in QSTR as
--------------------------------
Sets the format of the checkpoint saved by the estimator when training
--------------------------------
May be QSTR , depending on whether to save checkpoints from tf compat v1 train Saver QSTR tf train Checkpoint
--------------------------------
The default is QSTR
--------------------------------
Estimators use name based tf train Saver checkpoints, while Keras models use object based checkpoints from tf train Checkpoint
--------------------------------
Currently, saving object based checkpoints from QSTR is only supported by Functional and Sequential models
--------------------------------
QSTR to config QSTR
--------------------------------
D_STRUCTURE for custom objects
--------------------------------
A compiled Keras model object
--------------------------------
This argument is mutually exclusive with PARAM
--------------------------------
Path to a compiled Keras model saved on disk, in HDF5 format, which can be generated with the save method of a Keras model
--------------------------------
This argument is mutually exclusive with PARAM
--------------------------------
Directory to save QSTR model parameters, graph, summary files for TensorBoard, etc
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
Object to be checked
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of D_TYPE Unicode code points
--------------------------------
A name for the operation BSTR
--------------------------------
Specifies the response when an invalid codepoint is encountered BSTR
--------------------------------
One of QSTR Replace invalid codepoint with the PARAM
--------------------------------
BSTR QSTR Skip invalid codepoints
--------------------------------
QSTR Raise an exception for any invalid codepoint
--------------------------------
An N CONSTANT_NUM dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Unicode encoding that should be used to encode each codepoint D_STRUCTURE
--------------------------------
Can be QSTR
--------------------------------
The replacement character codepoint to be used in place of any invalid PARAM when PARAM QSTR
--------------------------------
Any valid unicode codepoint may be used
--------------------------------
The default value is the default unicode replacement character which is 0xFFFD BSTR
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Specify the data format of the PARAM and output data
--------------------------------
With the default format QSTR , the data is stored in the order of BSTR
--------------------------------
Alternatively, the format could be QSTR , the data storage order of BSTR
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of PARAM
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each filter element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions must be CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
An D_TYPE D_STRUCTURE representing the D_STRUCTURE shape of QSTR , where QSTR is a CONSTANT_NUM-D BSTR D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape based on PARAM
--------------------------------
For example, if PARAM is QSTR then QSTR is a CONSTANT_NUM-D BSTR D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D with shape based on PARAM
--------------------------------
For example, if PARAM is QSTR then out_backprop shape is BSTR
--------------------------------
Gradients w r t
--------------------------------
the output of the convolution
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
The stride of the sliding window for each dimension of the PARAM of the convolution
--------------------------------
Input D_STRUCTURE
--------------------------------
QSTR to query
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_STRUCTURE of keyword arguments for base layer
--------------------------------
an RNNCell, a projection to output_size is added to it
--------------------------------
BSTR, default BSTR
--------------------------------
Function that takes any hierarchical level of the state and returns a scalar or depth CONSTANT_NUM structure of Python booleans describing which terms in the state should be dropped out
--------------------------------
In addition, if the function returns CONSTANT_BOOL, dropout is applied across this sublevel
--------------------------------
If the function returns CONSTANT_BOOL, dropout is not applied across this entire sublevel
--------------------------------
Default behavior perform dropout on all terms except the memory QSTR state of QSTR objects, and don QSTR TensorArray objects def dropout_state_filter_visitor BSTR if isinstance BSTR Never perform dropout on the c state
--------------------------------
return LSTMCellState c CONSTANT_BOOL, h CONSTANT_BOOL elif isinstance BSTR return CONSTANT_BOOL return CONSTANT_BOOL
--------------------------------
BSTR The QSTR of the input, state, and output D_STRUCTURE
--------------------------------
Required and used REXPR REXPR strong REXPR CONSTANT_BOOL
--------------------------------
unit D_STRUCTURE or D_TYPE between CONSTANT_NUM, input keep probability if it is constant and CONSTANT_NUM, no input dropout will be added
--------------------------------
BSTR QSTR objects containing the depth BSTR of the input D_STRUCTURE expected to be passed in to the QSTR
--------------------------------
Required and used REXPR REXPR strong REXPR CONSTANT_BOOL and PARAM REXPR
--------------------------------
unit D_STRUCTURE or D_TYPE between CONSTANT_NUM, output keep probability if it is constant and CONSTANT_NUM, no output dropout will be added
--------------------------------
BSTR D_TYPE, the randomness seed
--------------------------------
unit D_STRUCTURE or D_TYPE between CONSTANT_NUM, output keep probability if it is constant and CONSTANT_NUM, no output dropout will be added
--------------------------------
State dropout is performed on the outgoing states of the PARAM
--------------------------------
REXPR REXPR strong REXPR state components to which dropout is applied when QSTR is in BSTR are also determined by the argument PARAM e g
--------------------------------
by default dropout is never applied to the QSTR component of an QSTR
--------------------------------
Python D_TYPE
--------------------------------
If CONSTANT_BOOL, then the same dropout pattern is applied across all time steps per run call
--------------------------------
If this parameter is set, PARAM REXPR REXPR strong REXPR provided
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE, or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE
--------------------------------
If D_TYPE the same symmetric padding is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric padding values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
If set, the first QSTR bytes of each element will be converted
--------------------------------
Data will be zero padded or truncated to the specified length QSTR must be a multiple of the size of PARAM QSTR must be specified if the elements of PARAM are of variable length
--------------------------------
Each element of the input D_STRUCTURE is converted to an D_STRUCTURE of bytes
--------------------------------
Whether the PARAM data is in little endian format
--------------------------------
Data will be converted into host byte order if necessary
--------------------------------
A name for the operation BSTR
--------------------------------
QSTR of the output
--------------------------------
Acceptable types are D_TYPE
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
A D_STRUCTURE of shape BSTR
--------------------------------
The class biases
--------------------------------
A D_STRUCTURE of shape BSTR
--------------------------------
The forward activations of the input network
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
Note that this format differs from the QSTR argument of nn softmax_cross_entropy_with_logits
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
The number of classes to randomly sample per batch
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
A D_TYPE
--------------------------------
whether to remove QSTR where a sampled class equals one of the target classes
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
a D_STRUCTURE of QSTR returned by a candidate_sampler function
--------------------------------
if None, we default to QSTR
--------------------------------
random seed for candidate sampling
--------------------------------
Default to None, which doesn t set the op level random seed for candidate sampling
--------------------------------
A D_STRUCTURE of shape BSTR, or a D_STRUCTURE of D_STRUCTUREobjects whose concatenation along dimension CONSTANT_NUM has shape BSTR
--------------------------------
The BSTR class embeddings
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
Image data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
a layer instance
--------------------------------
the data format, channels_first or channels_last
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR if PARAM is QSTR or BSTR if PARAM is QSTR
--------------------------------
the unshared weight for convolution, with shape BSTR
--------------------------------
a D_STRUCTURE of a single D_TYPE, specifying the length of the CONSTANT_NUM-D convolution window
--------------------------------
a D_STRUCTURE of a single D_TYPE, specifying the stride length of the convolution
--------------------------------
BSTR which are to be pseudo inverted
--------------------------------
Python D_TYPE prefixed to ops created by this function
--------------------------------
Default value QSTR
--------------------------------
Threshold below which the singular value is counted as QSTR
--------------------------------
Default value QSTR i e , eps max BSTR
--------------------------------
When CONSTANT_BOOL, additional assertions might be embedded in the graph
--------------------------------
Default value CONSTANT_BOOL BSTR
--------------------------------
Target shape D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_TYPE, or D_STRUCTURE of D_TYPE BSTR, or D_STRUCTURE
--------------------------------
If D_TYPE How many zeros to add at the beginning and end of the padding dimension BSTR How many zeros to add at the beginning and at the end of the padding dimension BSTR
--------------------------------
A D_STRUCTURE instance BSTR
--------------------------------
Optional D_STRUCTURE mapping names BSTR to custom classes or functions to be considered during deserialization
--------------------------------
JSON D_TYPE encoding a model configuration
--------------------------------
A name for the operation BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE represents the size of the slice
--------------------------------
The D_STRUCTURE to split
--------------------------------
CONSTANT_NUM-D D_STRUCTURE represents the start of the slice
--------------------------------
A tf estimator Estimator instance
--------------------------------
If specified, calls PARAM at an interval of QSTR seconds
--------------------------------
Defaults to CONSTANT_NUM seconds
--------------------------------
Either this or PARAM must be set
--------------------------------
If specified, calls PARAM every QSTR steps
--------------------------------
Either this or PARAM must be set
--------------------------------
QSTR , function that takes no arguments and returns aD_TYPE
--------------------------------
If the function returns CONSTANT_BOOL, stopping will be initiated by the chief
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A single value compatible with PARAM or an D_STRUCTURE of values compatible with PARAM which the column takes on during tf Example parsing if data is missing
--------------------------------
A default value of QSTR will cause tf io parse_example to fail if an example does not contain this column
--------------------------------
If a single value is provided, the same value will be applied as the default value for every item
--------------------------------
If an D_STRUCTURE of values is provided, the PARAM of the QSTR should be equal to the given PARAM
--------------------------------
defines the type of values
--------------------------------
Default value is D_TYPE
--------------------------------
Must be a non quantized, real D_TYPE type
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
It is used as the column name and the D_STRUCTURE key for feature parsing configs, featureD_STRUCTURE objects, and feature columns
--------------------------------
If not QSTR , a function that can be used to normalize the value of the D_STRUCTURE after PARAM is applied for parsing
--------------------------------
Normalizer function takes the input D_STRUCTURE as its argument, and returns the output D_STRUCTURE
--------------------------------
e g
--------------------------------
lambda x BSTR
--------------------------------
Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations
--------------------------------
An D_STRUCTURE of D_TYPE specifies the shape of the D_STRUCTURE
--------------------------------
An D_TYPE can be given which means a single dimension D_STRUCTURE with given width
--------------------------------
The D_STRUCTURE representing the column will have the shape of BSTR QSTR
--------------------------------
A D_TYPE specifying how to combine embedding results for each entry
--------------------------------
Currently QSTR are supported, with QSTR the default
--------------------------------
The id to use for an entry with no features
--------------------------------
A D_STRUCTURE of QSTR D_TYPE D_STRUCTUREs or values representing partitioned embedding D_STRUCTUREs
--------------------------------
Alternatively, a QSTR created by partitioning along dimension CONSTANT_NUM
--------------------------------
The total unpartitioned shape should be BSTR, where QSTR e CONSTANT_NUM, , e_m are the embedding dimensions
--------------------------------
If not QSTR , all embeddings are l2 normalized to max_norm before combining
--------------------------------
A name for this operation BSTR
--------------------------------
D_STRUCTURE of shape BSTR containing the ids
--------------------------------
d CONSTANT_NUM is typically batch size
--------------------------------
D_STRUCTURE of same shape as PARAM, containing D_TYPE weights corresponding to PARAM, or QSTR if all weights are be assumed to be CONSTANT_FLOAT
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Optional D_TYPE
--------------------------------
Setting it to CONSTANT_BOOL is mathematically equivalent to tf math conj BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A permutation of the dimensions of QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, compute full sized QSTR
--------------------------------
If CONSTANT_BOOL BSTR, compute only the leading QSTR columns of QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE of shape BSTR whose inner most CONSTANT_NUM dimensions form matrices of size BSTR
--------------------------------
Let QSTR be the minimum of QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE with which to center the input
--------------------------------
Fuzz factor
--------------------------------
D_STRUCTURE by which to scale the input
--------------------------------
D_STRUCTURE of D_TYPE, axes over which to normalize
--------------------------------
Input D_STRUCTURE or variable
--------------------------------
The DType of an element in the resulting D_STRUCTURE
--------------------------------
Optional D_TYPE
--------------------------------
A name for the operation
--------------------------------
A D_STRUCTURE of D_TYPE, a D_STRUCTURE of D_TYPE, or a CONSTANT_NUM-D D_STRUCTURE of type D_TYPE
--------------------------------
The predicted values
--------------------------------
The ground truth values
--------------------------------
QSTR values are expected to be CONSTANT_NUM
--------------------------------
If binary BSTR labels are provided they will be converted to CONSTANT_NUM
--------------------------------
A D_STRUCTURE containing hypothesis sequences
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE
--------------------------------
If CONSTANT_BOOL, normalizes the Levenshtein distance by length of PARAM
--------------------------------
A D_STRUCTURE containing truth sequences
--------------------------------
D_STRUCTURE of predicted targets
--------------------------------
D_STRUCTURE of CONSTANT_BOOL targets
--------------------------------
Whether backprop is enabled for this while loop
--------------------------------
A callable that represents the loop body
--------------------------------
A callable that represents the termination condition of the loop
--------------------------------
A BSTR D_STRUCTURE, namedtuple or D_STRUCTURE of numpy D_STRUCTURE, and QSTR objects
--------------------------------
Optional maximum number of iterations of the while loop to run
--------------------------------
If provided, the PARAM output is AND ed with an additional condition ensuring the number of iterations executed is no greater than QSTR
--------------------------------
Optional name prefix for the returned D_STRUCTURE
--------------------------------
The number of iterations allowed to run in parallel
--------------------------------
It must be a positive D_TYPE
--------------------------------
The shape invariants for the loop variables
--------------------------------
Whether GPU CPU memory swap is enabled for this loop
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
an D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the dilation rate to use for dilated convolution
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Currently, specifying any QSTR value CONSTANT_NUM is incompatible with specifying any stride value CONSTANT_NUM
--------------------------------
D_TYPE, the dimensionality of the output space i e
--------------------------------
the number of output filters in the convolution
--------------------------------
Constraint function applied to the kernel matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the depth, height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the amount of PARAM along the depth, height, and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
The amount of output PARAM along a given dimension must be lower than the stride along that same dimension
--------------------------------
If set to QSTR BSTR, the output shape is inferred
--------------------------------
one of QSTR BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the depth, height and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any PARAM value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
The dimensions to reduce D_STRUCTURE or scalar
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
If CONSTANT_BOOL, retain reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, returns a D_STRUCTURE instead of a denseD_STRUCTURE BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
Standard layer keyword arguments
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_TYPE, either QSTR
--------------------------------
Keras D_STRUCTURE BSTR
--------------------------------
an input generator that can be used to generate input samples for the model
--------------------------------
This must be a callable object that returns an object that supports the iter protocol e g
--------------------------------
a generator function
--------------------------------
The elements generated must have same type and shape as inputs to the model
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
Specify the data format of the input and output data
--------------------------------
With the default format QSTR , the data is stored in the order of BSTR
--------------------------------
Alternatively, the format could be QSTR , the data storage order of BSTR
--------------------------------
An optional D_STRUCTURE of D_TYPE
--------------------------------
Defaults to BSTR
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
The dilation factor for each dimension of QSTR
--------------------------------
If set to k REXPR, there will be k CONSTANT_NUM skipped cells between each PARAM element on that dimension
--------------------------------
The dimension order is determined by the value of PARAM, see above for details
--------------------------------
Dilations in the batch and depth dimensions must be CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
An D_TYPE D_STRUCTURE representing the shape of QSTR , based on PARAM
--------------------------------
For example, if PARAM is QSTR then QSTR is a CONSTANT_NUM-D BSTR D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as PARAM
--------------------------------
CONSTANT_NUM-D with shape based on PARAM
--------------------------------
For example, if PARAM is QSTR then out_backprop shape is BSTR
--------------------------------
Gradients w r t
--------------------------------
the output of the convolution
--------------------------------
A D_TYPE from QSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
The stride of the sliding window for each dimension of the input of the convolution
--------------------------------
If QSTR is QSTR BSTR, the input is considered a D_STRUCTURE and a single D_STRUCTURE norm is computed over the entire set of values in the D_STRUCTURE, i e
--------------------------------
norm D_STRUCTURE, PARAM PARAM QSTR norm reshape D_STRUCTURE, BSTR , PARAM PARAM
--------------------------------
If QSTR is a Python D_TYPE, the input is considered a batch of D_STRUCTURE, and QSTR determines the axis in D_STRUCTURE over which to compute D_STRUCTURE norms
--------------------------------
If QSTR is a CONSTANT_NUM D_STRUCTURE of Python D_TYPE it is considered a batch of matrices and QSTR determines the axes in D_STRUCTURE over which to compute a matrix norm
--------------------------------
Negative indices are supported
--------------------------------
Example If you are passing a D_STRUCTURE that can be either a matrix or a batch of matrices at runtime, pass axis BSTR instead of axis None to make sure that matrix norms are computed
--------------------------------
If CONSTANT_BOOL, the PARAM indicated in PARAM are kept with size CONSTANT_NUM
--------------------------------
Otherwise, the dimensions in PARAM are removed from the output shape
--------------------------------
The name of the op
--------------------------------
Order of the norm
--------------------------------
Supported values are QSTR , CONSTANT_NUM, np inf and any positive real number yielding the corresponding p norm
--------------------------------
Default is QSTR which is equivalent to Frobenius norm ifD_STRUCTURE is a matrix and equivalent to CONSTANT_NUM norm for D_STRUCTURE
--------------------------------
Some restrictions apply a The Frobenius norm QSTR is not defined for D_STRUCTURE, b If PARAM is a CONSTANT_NUM D_STRUCTURE BSTR, only QSTR , CONSTANT_NUM, np inf are supported
--------------------------------
See the description of PARAM on how to compute norms for a batch of D_STRUCTURE or matrices stored in a D_STRUCTURE
--------------------------------
D_STRUCTURE of types D_TYPE
--------------------------------
Whether to enable soft placement
--------------------------------
One of QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM tuples, padding pattern
--------------------------------
D_STRUCTURE or variable
--------------------------------
An D_TYPE scalar REXPR BSTR
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE, size BSTR
--------------------------------
The logits
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE containing D_STRUCTURE lengths, having size BSTR
--------------------------------
An D_TYPE scalar REXPR, REXPR BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
Output data type
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Callable that will be called upon each element in PARAM
--------------------------------
A D_TYPE name for the map node in the graph
--------------------------------
An D_STRUCTURE containing all feature columns
--------------------------------
All items should be instances of classes derived from QSTR
--------------------------------
used as label if PARAM does not exist in given tf Example
--------------------------------
An example usage let say PARAM is QSTR and tf Example contains clicked data only for positive examples in following format key clicked, value CONSTANT_NUM
--------------------------------
This means that if there is no data with key QSTR it should count as negative example by setting label_deafault CONSTANT_NUM
--------------------------------
Type of this value should be compatible with PARAM
--------------------------------
A D_TYPE identifies the type of labels
--------------------------------
By default it isD_TYPE
--------------------------------
If user defines a QSTR , this should be set asD_TYPE
--------------------------------
D_TYPE labels are only supported for binary classification
--------------------------------
A D_TYPE identifying the label
--------------------------------
It means tf Example stores labels with this key
--------------------------------
A D_TYPE or a QSTR created by tf feature_column numeric_column defining feature column representing weights
--------------------------------
It is used to down weight or boost examples during training
--------------------------------
It will be multiplied by the loss of the example
--------------------------------
If it is a D_TYPE, it is used as a key to fetch weight D_STRUCTURE from the QSTR
--------------------------------
If it is a QSTR , raw D_STRUCTURE is fetched by key weight_column key , then weight_column normalizer_fn is applied on it to get weight D_STRUCTURE
--------------------------------
In QSTR PARAM, the scalar pad value to use
--------------------------------
Must be same type as D_STRUCTURE
--------------------------------
One of QSTR BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Directory where the variables were saved
--------------------------------
Optional name for the protocol buffer file that contains the D_STRUCTURE of most recent checkpoint filenames
--------------------------------
See the corresponding argument to Saver save
--------------------------------
The desired output QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
optional handler for errors
--------------------------------
Should be a function, it will be called with the error as argument
--------------------------------
Rethrowing the error aborts the walk
--------------------------------
Errors that happen while listing directories are ignored
--------------------------------
D_TYPE, a Directory name
--------------------------------
D_TYPE, Traverse pre order if CONSTANT_BOOL, post order if CONSTANT_BOOL
--------------------------------
D_TYPE, standard deviation of the noise distribution
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPR
--------------------------------
A D_STRUCTURE
--------------------------------
N D with shape input_shape BSTR spatial_shape remaining_shape , where spatial_shape has QSTR dimensions
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPRpaddings BSTR BSTR specifies the padding for PARAM dimension i CONSTANT_NUM, which corresponds to spatial dimension QSTR
--------------------------------
It is required that PARAM BSTR divides QSTR This operation is equivalent to the following steps Zero pad the start and end of dimensions BSTR of the PARAM according to QSTR to produce QSTR of shape QSTR Reshape QSTR to QSTR of shape BSTR padded_shape BSTR PARAM BSTR, PARAM BSTR, , padded_shape BSTR PARAM BSTR, PARAM BSTR remaining_shapePermute dimensions of QSTR to produce QSTR of shape PARAM BSTR padded_shape BSTR PARAM BSTR, , padded_shape BSTR PARAM BSTR remaining_shapeReshape QSTR to flatten PARAM into the batch dimension, producing an output D_STRUCTURE of shape BSTR padded_shape BSTR PARAM BSTR, , padded_shape BSTR PARAM BSTR remaining_shape Some examples BSTR For the following PARAM of shape BSTR, PARAM BSTR, and paddings BSTR, BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Shell wildcard pattern BSTR
--------------------------------
Scalar or D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE representing audio data with shape BSTR, where QSTR is the number of audio clips, QSTR is the number of frames, and QSTR is the number of channels
--------------------------------
Elements should be D_TYPE values in BSTR
--------------------------------
Any of the dimensions may be statically unknown i e , QSTR
--------------------------------
Optional long form description for this summary, as a constant D_TYPE
--------------------------------
Markdown is supported
--------------------------------
Defaults to empty
--------------------------------
Optional constant D_TYPE for the desired encoding
--------------------------------
Only QSTR is currently supported, but this is not guaranteed to remain the default, so if you want QSTR in particular, set this explicitly
--------------------------------
Optional D_TYPE or rank CONSTANT_NUM D_TYPE D_STRUCTURE
--------------------------------
At most this many audio clips will be emitted at each PARAM
--------------------------------
When more than QSTR many clips are provided, the first QSTR many clips will be used and the rest silently discarded
--------------------------------
A name for this summary
--------------------------------
The summary tag used for TensorBoard will be this name prefixed by any active name scopes
--------------------------------
An D_TYPE or rank CONSTANT_NUM D_TYPE D_STRUCTURE that represents the sample rate, in Hz
--------------------------------
Must be positive
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
The type of the output D_TYPE
--------------------------------
A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM QSTR provides the rate parameter BSTR to sample
--------------------------------
Optional name for the operation
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distributions
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output samples to be drawn per QSTR parameterized distribution
--------------------------------
The RGB D_STRUCTURE to convert
--------------------------------
Last dimension must have size CONSTANT_NUM and should contain RGB values
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Set to CONSTANT_BOOL for decoder self attention
--------------------------------
Adds a mask such that position QSTR can not attend to positions j REXPR
--------------------------------
This prevents the flow of information from the future towards the past
--------------------------------
If CONSTANT_BOOL, will create a scalar variable to scale the attention scores
--------------------------------
Python D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM-D or higher
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
Length must be the same as the number of dimensions in PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE, or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE
--------------------------------
If D_TYPE the same symmetric cropping is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric cropping values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
Input D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE or tf IndexedSlices
--------------------------------
A D_STRUCTURE or tf IndexedSlices
--------------------------------
CONSTANT_NUM-D D_TYPE
--------------------------------
The encoded image bytes
--------------------------------
A name for the operation BSTR
--------------------------------
A tf data Dataset object containing a single element
--------------------------------
The type of elements for the returned QSTR
--------------------------------
If not specified, then a default is chosen based on the scalar values in PARAM
--------------------------------
A D_STRUCTURE of D_TYPE specifying the shape for individual inner values in the returned QSTR
--------------------------------
Defaults to if PARAMis not specified
--------------------------------
If PARAM is specified, then a default is chosen based on the contents of PARAM
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A nested D_STRUCTURE or np D_STRUCTURE
--------------------------------
Any nested element that is not a D_STRUCTURE or np D_STRUCTURE must be a scalar value compatible with PARAM
--------------------------------
An D_TYPE specifying the ragged rank of the returned QSTR
--------------------------------
Must be nonnegative and less than QSTR
--------------------------------
Defaults to max BSTR if PARAM is not specified
--------------------------------
Defaults to max BSTRif PARAM is specified
--------------------------------
data type for the constructed QSTR row_splits
--------------------------------
One of D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD BSTR
--------------------------------
Defaults to D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of D_TYPE which is compressed
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
A scalar containing either BSTR QSTR , or BSTR QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE of constant values passed at each step
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL, do the iteration over the time dimension in reverse order and return the reversed D_STRUCTURE
--------------------------------
D_STRUCTURE with shape BSTR BSTR, containing the initial values for the states used in the step function
--------------------------------
In the case that state_size is in a nested shape, the shape of initial_states will also follow the nested structure
--------------------------------
An D_TYPE or a CONSTANT_NUM-D D_STRUCTURE, depending on whether the time dimension is fixed length or not
--------------------------------
In case of variable length input, it is used for masking in case there no PARAM specified
--------------------------------
D_STRUCTURE of temporal data of shape BSTR BSTR, or nested D_STRUCTURE, and each of which has shape BSTR
--------------------------------
Binary D_STRUCTURE with shape BSTR, with a zero for every element that is masked
--------------------------------
RNN step function
--------------------------------
Args input D_STRUCTURE with shape BSTR BSTR, representing input for the batch of samples at a certain time step
--------------------------------
states D_STRUCTURE of D_STRUCTURE
--------------------------------
Returns output D_STRUCTURE with shape BSTR BSTR
--------------------------------
new_states D_STRUCTURE of D_STRUCTURE, same length and shapes as QSTR
--------------------------------
The first state in the D_STRUCTURE must be the output D_STRUCTURE at the previous timestep
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL, the PARAM and outputs will be in shape BSTR, whereas in the CONSTANT_BOOL case, it will be BSTR
--------------------------------
Using time_major CONSTANT_BOOL is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation
--------------------------------
However, most TensorFlow data is batch major, so by default this function accepts input and emits output in batch major form
--------------------------------
Whether to unroll the RNN or to use a symbolic QSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL, the output for masked timestep will be zeros, whereas in the CONSTANT_BOOL case, output from previous timestep is returned
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
Number of rows of zeros to add on top
--------------------------------
Number of columns of zeros to add on the left
--------------------------------
Height of output PARAM
--------------------------------
Width of output PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Shape is BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
Standard layer keyword arguments
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE, axis or axes along which to take the dot product
--------------------------------
A D_STRUCTURE of input D_STRUCTURE BSTR
--------------------------------
Whether to L2 normalize samples along the dot product axis before taking the dot product
--------------------------------
If set to CONSTANT_BOOL, then the output of the dot product is the cosine proximity between the two samples
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
The predicted values
--------------------------------
The ground truth values
--------------------------------
QSTR values are expected to be CONSTANT_NUM
--------------------------------
If binary BSTR labels are provided they will be converted to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE or variable to compute the activation function for
--------------------------------
D_TYPE, whether to also output log messages to sys stdout
--------------------------------
D_TYPE, the verbosity level larger values specify increased verbosity CONSTANT_NUM means no logging
--------------------------------
When reporting bugs, it is recommended to set this value to a larger number, like CONSTANT_NUM
--------------------------------
if CONSTANT_BOOL BSTR types of sequences are checked as well, including the keys of dictionaries
--------------------------------
If set to CONSTANT_BOOL, for example a D_STRUCTURE of objects will look the same if they have the same size
--------------------------------
Note that namedtuples with identical name and fields are always considered to have the same shallow structure
--------------------------------
Two types will also be considered the same if they are both D_STRUCTURE subtypes which allows QSTR from trackable dependency tracking to compare equal
--------------------------------
If CONSTANT_BOOL, then composite D_STRUCTURE such as D_STRUCTUREand tf RaggedTensor are expanded into their component D_STRUCTURE
--------------------------------
an arbitrarily nested structure
--------------------------------
an arbitrarily nested structure
--------------------------------
ONE_WORD D_TYPE
--------------------------------
ONE_WORD QSTR
--------------------------------
Example python from keras import backend as K K image_data_format QSTR K set_image_data_format QSTR K image_data_format QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with the same type as PARAM and shape BSTR
--------------------------------
QSTR in_channels dimension must match that of PARAM
--------------------------------
Atrous convolution is equivalent to standard convolution with upsampled filters with effective height QSTR filter_width BSTR, produced by inserting PARAM CONSTANT_NUM zeros along consecutive elements across the QSTR spatial dimensions
--------------------------------
Optional name for the returned D_STRUCTURE
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
A positive D_TYPE
--------------------------------
The stride with which we sample input values across the QSTR dimensions
--------------------------------
Equivalently, the rate by which we upsample the filter values by inserting zeros across the QSTR dimensions
--------------------------------
In the literature, the same parameter is sometimes called QSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE
--------------------------------
It needs to be in the default QSTR format
--------------------------------
Its shape is BSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
When set to CONSTANT_BOOL, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells
--------------------------------
For example index CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM PARAM CONSTANT_NUM0 CONSTANT_NUM CONSTANT_NUM6 CONSTANT_NUM CONSTANT_NUMIf the pooling D_STRUCTURE is BSTR, then CONSTANT_NUM6, at index CONSTANT_NUM will be used twice
--------------------------------
The result would be BSTR for fractional max pooling
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM
--------------------------------
Pooling ratio for each dimension of PARAM, currently only supports row and col dimension and should be REXPR
--------------------------------
For example, a valid pooling ratio looks like BSTR
--------------------------------
The first and last elements must be CONSTANT_FLOAT because we don t allow pooling on batch and channels dimensions
--------------------------------
CONSTANT_FLOAT and CONSTANT_FLOAT are pooling ratio on height and width dimensions respectively
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
When set to CONSTANT_BOOL, generates the pooling D_STRUCTURE in a pseudorandom fashion, otherwise, in a random fashion
--------------------------------
Check paper Benjamin Graham, Fractional Max Pooling for difference between pseudorandom and random
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If set to be non zero, the random number generator is seeded by the given seed
--------------------------------
Otherwise it is seeded by a random seed
--------------------------------
A D_STRUCTURE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The minimum required fraction of lines before a truncated input is accepted
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Number of color channels for the decoded image
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The JPEG encoded image
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The crop window BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
D_TYPE specifying a hint about the algorithm used for decompression
--------------------------------
Defaults to which maps to a system specific default
--------------------------------
Currently valid values are QSTR
--------------------------------
The hint may be ignored BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL use a slower but nicer upscaling of the chroma planes BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Downscaling ratio
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL try to recover an image from truncated input
--------------------------------
Optional projection function to be applied to the variable after an optimizer update
--------------------------------
D_STRUCTURE type
--------------------------------
Optional name D_TYPE for the D_STRUCTURE
--------------------------------
Numpy D_STRUCTURE, initial value of the D_STRUCTURE
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE dtype to use
--------------------------------
Start value
--------------------------------
Difference between two successive values
--------------------------------
Stop value
--------------------------------
concatenation axis
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
Constraint for the weights
--------------------------------
Initializer function for the weights
--------------------------------
Regularizer for the weights
--------------------------------
The axes along which to share learnable parameters for the activation function
--------------------------------
For example, if the incoming feature maps are from a CONSTANT_NUM-D convolution with output shape BSTR, and you wish to share parameters across space so that each filter only has one set of parameters, set shared_axes BSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
kernel D_STRUCTURE
--------------------------------
D_TYPE, QSTR
--------------------------------
strides D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
Optional if provided, used as default PARAM of the summary
--------------------------------
D_TYPE name for the summary
--------------------------------
Optional passed as QSTR parameter to name_scope
--------------------------------
Python D_TYPE, number of times to repeat
--------------------------------
D_STRUCTURE or variable
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass QSTR , no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
Implementation mode, either CONSTANT_NUM
--------------------------------
Mode CONSTANT_NUM will structure its operations as a larger number of smaller dot products and additions, whereas mode CONSTANT_NUM BSTR will batch them into fewer, larger operations
--------------------------------
These modes will have different performance profiles on different hardware and for different applications
--------------------------------
Default CONSTANT_NUM
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
PARAM function to use for the recurrent step
--------------------------------
Default sigmoid QSTR
--------------------------------
If you pass QSTR , no PARAM is applied ie
--------------------------------
QSTR PARAM a BSTR x
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE default CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, add CONSTANT_NUM to the bias of the forget gate at initialization
--------------------------------
Setting it to CONSTANT_BOOL will also force PARAM QSTR
--------------------------------
This is recommended in Jozefowicz et al
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of shape BSTR or CONSTANT_NUM-D D_STRUCTURE of shape BSTR
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
If QSTR is CONSTANT_NUM then same boxes are used for all classes otherwise, if QSTR is equal to number of classes, class specific boxes are used
--------------------------------
If CONSTANT_BOOL, the coordinates of output nmsed PARAM will be clipped to BSTR
--------------------------------
If CONSTANT_BOOL, output the box coordinates as it is
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU
--------------------------------
A scalar D_TYPE D_STRUCTURE representing the maximum number of PARAM to be selected by non max suppression per class
--------------------------------
A scalar representing maximum number of PARAM retained over all classes
--------------------------------
A name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, the output nmsed PARAM, PARAM and classes are padded clipped to PARAM
--------------------------------
If CONSTANT_BOOL, the output nmsed PARAM, PARAM and classes are padded to be of length QSTR QSTR , unless it exceeds PARAM in which case it is clipped to PARAM
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
A D_TYPE representing the threshold for deciding when to remove PARAM based on score
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTRrepresenting a single score corresponding to each box BSTR
--------------------------------
A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM
--------------------------------
QSTR provides the PARAM parameter BSTR to sample
--------------------------------
Must be broadcastable with PARAM
--------------------------------
A D_STRUCTURE or Python value or N D D_STRUCTURE of type PARAM
--------------------------------
Defaults to CONSTANT_FLOATbeta provides the inverse scale parameter BSTR to sample
--------------------------------
Must be broadcastable with PARAM
--------------------------------
The type of PARAM, PARAM, and the output D_TYPE
--------------------------------
Optional name for the operation
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed for the distributions
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE or Python D_STRUCTURE
--------------------------------
The shape of the output samples to be drawn per PARAM PARAM parameterized distribution
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A permutation of the dimensions of PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE or variable
--------------------------------
Input D_STRUCTURE
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Index of axis for columns in the input D_STRUCTURE
--------------------------------
Value used for points outside the boundaries of the input if mode QSTR
--------------------------------
Points outside the boundaries of the input are filled according to the given mode one of QSTR
--------------------------------
Transformation intensity in degrees
--------------------------------
D_TYPE, order of spline interpolation
--------------------------------
see ndimage interpolation affine_transform
--------------------------------
Index of axis for rows in the input D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
axis along which to perform the reduction
--------------------------------
whether the drop or broadcast the reduction axes
--------------------------------
D_STRUCTURE or variable
--------------------------------
The value to fill for empty rows, with the same type as PARAM
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A D_STRUCTURE with shape BSTR
--------------------------------
A D_STRUCTURE of at least CONSTANT_NUM D_STRUCTURE objects with type D_TYPE
--------------------------------
A D_STRUCTURE of D_TYPE D_STRUCTURE
--------------------------------
The D_STRUCTURE must all have the same shape, or be scalars
--------------------------------
Scalars may be mixed in these will be broadcast to the shape of non scalar inputs
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
D_TYPE, an optional join separator
--------------------------------
A QSTR describing the cluster
--------------------------------
The name of the local job
--------------------------------
If CONSTANT_BOOL and a cluster resolver is passed, will automatically enter the master task device scope, which indicates the master becomes the default device to run ops
--------------------------------
It won t do anything if a cluster spec is passed
--------------------------------
Will throw an error if the caller is currently already in some device scope
--------------------------------
The communication protocol, such as QSTR
--------------------------------
If unspecified, will use the default from python platform remote_utils py
--------------------------------
The local task index
--------------------------------
Whether operations should be dispatched synchronously
--------------------------------
Valid values None sets the system default CONSTANT_BOOL executes each operation synchronously CONSTANT_BOOL executes each operation asynchronously
--------------------------------
A QSTR , D_TYPE, or QSTR object
--------------------------------
A D_TYPE indicating the charset for decoding unicode
--------------------------------
D_TYPE QSTR
--------------------------------
Example python from keras import backend as K K floatx QSTR K set_floatx QSTR K floatx QSTR
--------------------------------
Callable to be used to clone each layer in the target PARAM except QSTR instances
--------------------------------
It takes as argument the layer instance to be cloned, and returns the corresponding layer instance to be used in the PARAM copy
--------------------------------
If unspecified, this callable defaults to the following serialization deserialization function lambda layer layer class from_config BSTR
--------------------------------
By passing a custom callable, you can customize your copy of the PARAM, e g
--------------------------------
by wrapping certain layers of interest you might want to replace all QSTR instances with equivalent Bidirectional BSTR instances, for example
--------------------------------
optional D_STRUCTURE of input D_STRUCTURE or InputLayer objects to build the PARAM upon
--------------------------------
If not provided, placeholders will be created
--------------------------------
Instance of Model BSTR
--------------------------------
An object of type graph_pb2 GraphDef or a textual proto representation of a valid GraphDef
--------------------------------
A textual description of an MLIR Pass Pipeline to run on the module, see MLIR documentation for thetextual pass pipeline syntax
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE, factors by which to downscale BSTR BSTR will halve the size of the CONSTANT_NUM-D input in each dimension
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE, or None
--------------------------------
Strides values
--------------------------------
An D_TYPE
--------------------------------
The axis to stack along
--------------------------------
Defaults to the first dimension
--------------------------------
Negative PARAM wrap around, so the valid range is BSTR
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects with the same shape and type
--------------------------------
if PARAM is CONSTANT_BOOL a beam search decoder will be used with a beam of this width
--------------------------------
perform much faster best path search if CONSTANT_BOOL
--------------------------------
This does not use a D_STRUCTURE
--------------------------------
D_STRUCTURE BSTR containing the D_STRUCTURE length for each batch item in PARAM
--------------------------------
if PARAM is CONSTANT_BOOL, how many of the most probable paths will be returned
--------------------------------
D_STRUCTURE BSTRcontaining the prediction, or output of the softmax
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU
--------------------------------
A scalar D_TYPE D_STRUCTURE representing the maximum number of PARAM to be selected by non max suppression
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE representing the threshold for deciding when to remove PARAM based on score
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
The QSTR to use for serialization
--------------------------------
The input D_STRUCTURE
--------------------------------
A D_TYPE from D_TYPE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_FLOAT
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The maximum value of the quantization range
--------------------------------
This value may be adjusted by the op depending on other parameters
--------------------------------
The adjusted value is written to QSTR
--------------------------------
If the PARAM attribute is specified, this must be a CONSTANT_NUM-D D_STRUCTURE whose size matches the PARAM dimension of the PARAM and output D_STRUCTURE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The minimum value of the quantization range
--------------------------------
This value may be adjusted by the op depending on other parameters
--------------------------------
The adjusted value is written to QSTR
--------------------------------
If the PARAM attribute is specified, this must be a CONSTANT_NUM-D D_STRUCTURE whose size matches the PARAM dimension of the PARAM and output D_STRUCTURE
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE from QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The input to be joined
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A scalar
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose shape is a prefix of data shape
--------------------------------
Negative segment ids are not supported
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
The separator to use when joining
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The output dtype defaults to D_TYPE
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should be of D_TYPE type, D_TYPE
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
The D_TYPE ID value to return for out of vocabulary feature values, defaults to CONSTANT_NUM
--------------------------------
This can not be specified with a positive PARAM
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
If QSTR , it will be inferred from PARAM
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
Non negative D_TYPE, the number of out of vocabulary buckets
--------------------------------
All out of vocabulary inputs will be assigned IDs in the range BSTR based on a hash of the input value
--------------------------------
A positive QSTR can not be specified with PARAM
--------------------------------
An ordered D_STRUCTURE defining the vocabulary
--------------------------------
Each feature is mapped to the index of its value BSTR in QSTR
--------------------------------
Must be castable to PARAM
--------------------------------
A D_STRUCTURE mapping D_TYPEs to callables, or a D_STRUCTURE of BSTR
--------------------------------
Each callable must return a matching structure of D_STRUCTURE
--------------------------------
An D_TYPE D_STRUCTURE specifying which of PARAM should be executed
--------------------------------
Optional callable that returns a structure of D_STRUCTURE
--------------------------------
A name for this operation BSTR
--------------------------------
An D_TYPE or a scalar QSTR
--------------------------------
The number of batch dimensions
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Index D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
The D_STRUCTURE from which to gather values
--------------------------------
D_STRUCTURE of predicted targets
--------------------------------
D_STRUCTURE of CONSTANT_BOOL targets
--------------------------------
First set of images
--------------------------------
Second set of images
--------------------------------
The dynamic range of the images BSTR
--------------------------------
Namespace to embed the computation in
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to local
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
D_STRUCTURE of D_TYPE containing proto field names
--------------------------------
A D_TYPE
--------------------------------
PARAM of the proto message type to decode
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
D_STRUCTURE of D_TYPE with shape BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects
--------------------------------
D_STRUCTURE of D_STRUCTURE containing values for the corresponding field
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Upsampling factor
--------------------------------
D_STRUCTURE of predicted targets
--------------------------------
D_STRUCTURE of CONSTANT_BOOL targets
--------------------------------
dtype for returned histogram
--------------------------------
A name for this operation defaults to QSTR
--------------------------------
Scalar D_TYPE D_STRUCTURE
--------------------------------
Number of histogram bins
--------------------------------
Shape BSTR D_STRUCTURE of same PARAM as PARAM
--------------------------------
PARAM REXPR BSTR will be mapped to hist BSTR, PARAM REXPR BSTR will be mapped to hist BSTR
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
A D_STRUCTURE with D_TYPE dtype
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE scalar D_STRUCTURE
--------------------------------
The number of distinct segment IDs
--------------------------------
An D_TYPE D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
The data type expected by the input
--------------------------------
Default QSTR
--------------------------------
total number of classes
--------------------------------
class D_STRUCTURE to be converted into a matrix BSTR
--------------------------------
The base type or D_STRUCTURE of base types for all objects that PARAM accepts
--------------------------------
A function that converts instances of PARAM toD_STRUCTURE
--------------------------------
Optional D_TYPE that indicates the priority for applying this conversion function
--------------------------------
Conversion functions with smaller priority values run earlier than conversion functions with larger priority values
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Set to CONSTANT_BOOL for decoder self attention
--------------------------------
Adds a mask such that position QSTR can not attend to positions j REXPR
--------------------------------
This prevents the flow of information from the future towards the past
--------------------------------
If CONSTANT_BOOL, will create a variable to scale the attention scores
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
The upsampling factors for dim1, dim2 and dim3
--------------------------------
A D_STRUCTURE
--------------------------------
Must be D_TYPE with shape BSTR
--------------------------------
A name to give this QSTR
--------------------------------
Defaults to QSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Index D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
D_STRUCTURE to copy update
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as D_STRUCTURE
--------------------------------
Updates to scatter into output
--------------------------------
A D_STRUCTURE or variable
--------------------------------
Optional positive D_TYPE
--------------------------------
The output will have this many buckets, except in two edge cases
--------------------------------
If there is no PARAM, then there are no buckets
--------------------------------
If there is PARAM but all points have the same value, then there is one bucket whose left and right endpoints are the same
--------------------------------
A D_STRUCTURE of any shape
--------------------------------
Must be castable to D_TYPE
--------------------------------
Optional long form description for this summary, as a constant D_TYPE
--------------------------------
Markdown is supported
--------------------------------
Defaults to empty
--------------------------------
A name for this summary
--------------------------------
The summary tag used for TensorBoard will be this name prefixed by any active name scopes
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A directory in which to write the SavedModel
--------------------------------
A trackable object to export
--------------------------------
Optional, tf saved_model SaveOptions object that specifies options for saving
--------------------------------
Optional, either a tf function QSTR f get_concrete_function QSTR tf function QSTR f , in which case QSTR will be used to generate a signature for the SavedModel under the default serving signature key
--------------------------------
QSTR may also be a D_STRUCTURE, in which case it maps from signature keys to either tf function instances with input signatures or concrete functions
--------------------------------
The keys of such a D_STRUCTURE may be arbitrary D_TYPE, but will typically be from the tf saved_model signature_constants module
--------------------------------
A D_TYPE or None
--------------------------------
Specifies whether the channel dimension of the PARAM and output is the last dimension default, or if QSTR does not start with QSTR , or the second dimension if QSTR starts with QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
For N CONSTANT_NUM, the valid values are QSTR BSTR and QSTR
--------------------------------
ONE_WORD Optional
--------------------------------
Dilation rate
--------------------------------
D_STRUCTURE of N D_TYPE REXPR
--------------------------------
Defaults to BSTR N If any value of dilation_rate is REXPR, then all values of PARAM must be CONSTANT_NUM
--------------------------------
D_STRUCTURE of rank N CONSTANT_NUM, of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR, or BSTR input_spatial_shape QSTR NC
--------------------------------
Pooling happens over the spatial dimensions only
--------------------------------
ONE_WORD Optional
--------------------------------
Name of the op
--------------------------------
The padding algorithm, must be QSTR
--------------------------------
Defaults to QSTR
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
Specifies pooling operation, must be QSTR
--------------------------------
ONE_WORD Optional
--------------------------------
D_STRUCTURE of N D_TYPE REXPR
--------------------------------
Defaults to BSTR N If any value of strides is REXPR, then all values of dilation_rate must be CONSTANT_NUM
--------------------------------
D_STRUCTURE of N D_TYPE REXPR
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
Permutation pattern, does not include the samples dimension
--------------------------------
Indexing starts at CONSTANT_NUM
--------------------------------
For instance, BSTR permutes the first and second dimensions of the input
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_TYPE D_STRUCTURE to reduce
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of tensorflow data types or a single tensorflow data type if there is only one, indicating what PARAM returns
--------------------------------
stateful BSTR If CONSTANT_BOOL, the function should be considered stateful
--------------------------------
If a function is stateless, when given the same input it will return the same output and have no observable side effects
--------------------------------
Optimizations such as common subexpression elimination are only performed on stateless operations
--------------------------------
A Python function, which accepts numpy D_STRUCTURE objects as arguments and returns a D_STRUCTURE of numpy D_STRUCTURE objects or a single numpy D_STRUCTURE
--------------------------------
This function must accept as many arguments as there are D_STRUCTURE in PARAM, and these argument types will match the correspondingD_STRUCTURE objects in PARAM
--------------------------------
The returns numpy D_STRUCTUREs must match the number and types defined PARAM
--------------------------------
Important Note Input and output numpy D_STRUCTUREs of QSTR are not guaranteed to be copies
--------------------------------
In some cases their underlying memory will be shared with the corresponding TensorFlow D_STRUCTURE
--------------------------------
In place modification or storing QSTR input or return values in python datastructures without explicit np
--------------------------------
copy can have non deterministic consequences
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects
--------------------------------
BSTR A name for the operation
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
An QSTR instance to train and evaluate
--------------------------------
A QSTR instance to specify the evaluation and export specification
--------------------------------
A QSTR instance to specify the training specification
--------------------------------
ONE_WORD BSTR
--------------------------------
The number of elements to buffer on PARAM
--------------------------------
Defaults to an automatically chosen value
--------------------------------
A D_TYPE
--------------------------------
The name of a device to which elements will be prefetched
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
One of QSTR BSTR
--------------------------------
D_TYPE, size of the average pooling windows
--------------------------------
D_TYPE, or None
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input
--------------------------------
If None, it will default to PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of classes to randomly sample
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_TYPE
--------------------------------
Determines whether all sampled classes in a batch are unique
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Absolute D_TYPE path to possible export location
--------------------------------
For example, my foo model
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPR
--------------------------------
For backwards compatibility with TF CONSTANT_FLOAT, this parameter may be an D_TYPE, in which case it is converted to numpy D_STRUCTURE BSTR, dtype numpy D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPR
--------------------------------
crops BSTR BSTR specifies the amount to crop from PARAM dimension i CONSTANT_NUM, which corresponds to spatial dimension QSTR
--------------------------------
It is required that crop_start BSTR crop_end BSTR REXPR BSTR input_shape BSTR
--------------------------------
This operation is equivalent to the following steps Reshape PARAM to QSTR of shape PARAM BSTR, , PARAM BSTR, batch prod BSTR, input_shape BSTR, , input_shape BSTR Permute dimensions of QSTR to produce QSTR of shape BSTR, input_shape BSTR, PARAM BSTR, , input_shape BSTR, PARAM BSTR, input_shape BSTR, , input_shape BSTR Reshape QSTR to produce QSTR of shape BSTR, input_shape BSTR PARAM BSTR, , input_shape BSTR PARAM BSTR, input_shape BSTR, , input_shape BSTR Crop the start and end of dimensions BSTR of QSTR according to QSTR to produce the output of shape BSTR, input_shape BSTR PARAM BSTR crops BSTR crops BSTR, , input_shape BSTR PARAM BSTR crops BSTR crops BSTR, input_shape BSTR, , input_shape BSTR Some examples BSTR For the following PARAM of shape BSTR, PARAM BSTR, and crops BSTR, BSTR BSTR , BSTR , BSTR , BSTR The output D_STRUCTURE has shape BSTR and value x BSTR, BSTR , BSTR, BSTR BSTR For the following PARAM of shape BSTR, PARAM BSTR, and crops BSTR, BSTR BSTR , BSTR , BSTR , BSTR The output D_STRUCTURE has shape BSTR and value x BSTR, BSTR , BSTR, BSTR BSTR For the following PARAM of shape BSTR, PARAM BSTR, and crops BSTR, BSTR x BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR The output D_STRUCTURE has shape BSTR and value x BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR BSTR For the following PARAM of shape BSTR, PARAM BSTR, and crops BSTR, BSTR x BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR The output D_STRUCTURE has shape BSTR and value x BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
N D with shape input_shape BSTR spatial_shape remaining_shape , where spatial_shape has M dimensions
--------------------------------
A name for the operation BSTR
--------------------------------
A Policy, or a D_TYPE that will be converted to a Policy
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Callable that will be called upon each element in PARAM and an accumulator, for instance lambda acc, x acc x
--------------------------------
The first value used PARAM BSTR in case of None
--------------------------------
A D_TYPE name for the foldr node in the graph
--------------------------------
The type of the elements of the resulting D_STRUCTURE
--------------------------------
Optional name for the D_STRUCTURE
--------------------------------
Optional dimensions of resulting D_STRUCTURE
--------------------------------
A constant value BSTR of output type PARAM
--------------------------------
axis along which to perform the reduction
--------------------------------
whether the drop or broadcast the reduction axes
--------------------------------
D_STRUCTURE or variable
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
deprecated arguments support
--------------------------------
Supports QSTR
--------------------------------
optional static batch size BSTR
--------------------------------
The data type expected by the input, as a D_TYPE BSTR
--------------------------------
An optional name D_TYPE for the layer
--------------------------------
Should be unique in a model BSTR
--------------------------------
It will be autogenerated if it isn t provided
--------------------------------
A D_TYPE specifying whether the placeholder to be created is ragged
--------------------------------
Only one of QSTR and PARAM can be CONSTANT_BOOL
--------------------------------
In this case, values of QSTR in the PARAM argument represent ragged dimensions
--------------------------------
For more information about RaggedTensors, seehttps www tensorflow org guide ragged_tensors
--------------------------------
A shape D_STRUCTURE BSTR, not including the batch size
--------------------------------
For instance, shape BSTR indicates that the expected input will be batches of CONSTANT_NUM dimensional D_STRUCTURE
--------------------------------
Elements of this D_STRUCTURE can be None QSTR elements represent dimensions where the shape is not known
--------------------------------
A D_TYPE specifying whether the placeholder to be created is sparse
--------------------------------
Only one of PARAM and QSTR can be CONSTANT_BOOL
--------------------------------
Optional existing D_STRUCTURE to wrap into the QSTR layer
--------------------------------
If set, the layer will not create a placeholder D_STRUCTURE
--------------------------------
D_TYPE specifying the channels axis
--------------------------------
QSTR channels_last , and QSTR channels_first
--------------------------------
D_TYPE, whether PARAM is the result of a softmax, or is a D_STRUCTURE of logits
--------------------------------
A D_STRUCTURE resulting from a softmax unless PARAM is CONSTANT_BOOL, in which case QSTR is expected to be the logits
--------------------------------
A D_STRUCTURE of the same shape as PARAM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The D_TYPE to assign a hash bucket
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE that is REXPR
--------------------------------
The number of buckets
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Initializer for the QSTR weights matrix
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE representing the axis in D_STRUCTURE to PARAM from
--------------------------------
By default, axis is CONSTANT_NUM which will PARAM from the first dimension
--------------------------------
Otherwise K axis REXPR
--------------------------------
K D D_TYPE D_STRUCTURE, K REXPR and K must be known statically
--------------------------------
A name for this operation BSTR
--------------------------------
N D D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
Either a QSTR instance, an D_TYPE, or None
--------------------------------
ONE_WORD BSTR
--------------------------------
The data type for counter elements
--------------------------------
Defaults toD_TYPE
--------------------------------
ONE_WORD BSTR
--------------------------------
The starting value for the counter
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
ONE_WORD BSTR
--------------------------------
The step size for the counter
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Name of shared library containing theTfLiteDelegate
--------------------------------
D_STRUCTURE of options that are required to load the delegate
--------------------------------
All keys and values in the D_STRUCTURE should be convertible to D_TYPE
--------------------------------
Consult the documentation of the specific delegate for required and legal options
--------------------------------
ONE_WORD BSTR
--------------------------------
An D_TYPE D_STRUCTURE of non negative values
--------------------------------
If PARAM is None, determines the type of the output bins
--------------------------------
If given, skips values in PARAM that are equal or greater than QSTR , ensuring that the output has length at most QSTR
--------------------------------
If given, ensures the output has length at least QSTR , padding with zeros at the end if necessary
--------------------------------
A name scope for the associated operations BSTR
--------------------------------
If non None, must be the same shape as PARAM
--------------------------------
For each value in PARAM, the bin will be incremented by the corresponding weight instead of CONSTANT_NUM
--------------------------------
D_TYPE, one of QSTR
--------------------------------
D_TYPE dilate rate
--------------------------------
kernel D_STRUCTURE
--------------------------------
D_TYPE, QSTR
--------------------------------
stride D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
D_STRUCTURE of keyword arguments for base layer
--------------------------------
An instance of QSTR
--------------------------------
BSTR The function to map raw PARAM inputs and raw PARAM outputs to the actual PARAM outputs of the residual network
--------------------------------
Defaults to calling nest map_structure on lambda i, o i o , inputs and outputs
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
RGB image or images
--------------------------------
Size of the last dimension must be CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Lower bound for the random saturation factor
--------------------------------
An operation specific seed
--------------------------------
It will be used in conjunction with the graph level seed to determine the real seeds that will be used in this operation
--------------------------------
Please see the documentation of set_random_seed for its interaction with the graph level random seed
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Upper bound for the random saturation factor
--------------------------------
CONSTANT_NUM-D or higher D_STRUCTURE with last dimension at least QSTR
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE
--------------------------------
Number of top elements to look for along the last dimension BSTR
--------------------------------
Optional name for the operation
--------------------------------
If CONSTANT_BOOL the resulting QSTR elements will be sorted by the values in descending order
--------------------------------
A D_STRUCTURE of QSTR or D_STRUCTURE objects which must be executed or computed before running the operations defined in the context
--------------------------------
Can also be QSTR to clear the control dependencies
--------------------------------
If eager execution is enabled, any callable object in the QSTR D_STRUCTURE will be called
--------------------------------
BSTR Only include devices matching this device type
--------------------------------
For example QSTR
--------------------------------
Learning phase value, either CONSTANT_NUM BSTR
--------------------------------
CONSTANT_NUM test, CONSTANT_NUM train
--------------------------------
A CONSTANT_NUM-D beta D_STRUCTURE with size matching the last dimension of t An offset to be added to the normalized D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D gamma D_STRUCTURE with size matching the last dimension of t If PARAM is CONSTANT_BOOL, this D_STRUCTURE will be multiplied with the normalized D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D input D_STRUCTURE
--------------------------------
A CONSTANT_NUM-D mean D_STRUCTURE with size matching the last dimension of t This is the first output from tf nn moments, or a saved moving average thereof
--------------------------------
A name for this operation BSTR
--------------------------------
A D_TYPE indicating whether the resulted D_STRUCTURE needs to be multiplied with PARAM
--------------------------------
A CONSTANT_NUM-D variance D_STRUCTURE with size matching the last dimension of t This is the second output from tf nn moments, or a saved moving average thereof
--------------------------------
A small D_TYPE number to avoid dividing by CONSTANT_NUM
--------------------------------
output type of the resulting D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, all its values REXPR
--------------------------------
scalar D_TYPE D_STRUCTURE, size of last dimension of returned D_STRUCTURE
--------------------------------
Default is the maximum value in PARAM
--------------------------------
name of the op
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
The dimension softmax would be performed on
--------------------------------
The default is CONSTANT_NUM which indicates the last dimension
--------------------------------
A non empty D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An image D_STRUCTURE with CONSTANT_NUM or more dimensions
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Lower bound for the random contrast factor
--------------------------------
A Python D_TYPE
--------------------------------
Used to create a random seed
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Upper bound for the random contrast factor
--------------------------------
A name for the operation BSTR
--------------------------------
An D_TYPE
--------------------------------
The number of classes to randomly sample
--------------------------------
An D_TYPE
--------------------------------
The number of target classes per training example
--------------------------------
An D_TYPE
--------------------------------
The number of possible classes
--------------------------------
An D_TYPE
--------------------------------
An operation specific seed
--------------------------------
Default is CONSTANT_NUM
--------------------------------
A D_STRUCTURE of type D_TYPE and shape BSTR
--------------------------------
The target classes
--------------------------------
A D_TYPE
--------------------------------
Determines whether all sampled classes in a batch are unique
--------------------------------
The prefix to use on all names created within the name scope
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to ,
--------------------------------
char delimiter to separate fields in a record
--------------------------------
Additional D_TYPE to recognize as NA NaN
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects with specific types
--------------------------------
Acceptable types are D_TYPE
--------------------------------
One D_STRUCTURE per column of the input record, with either a scalar default value for that column or an empty D_STRUCTURE if the column is required
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Each D_TYPE is a record row in the csv and all records should have the same format
--------------------------------
Optional sorted D_STRUCTURE of column indices to select
--------------------------------
If specified, only this subset of columns will be parsed and returned
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
If CONSTANT_BOOL, treats D_TYPE quotation marks as regular characters inside of the D_TYPE fields BSTR
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name scope for the associated operations BSTR
--------------------------------
The axis to fill default CONSTANT_NUM, a new inner most axis
--------------------------------
A scalar defining the depth of the one hot dimension
--------------------------------
The data type of the output D_STRUCTURE
--------------------------------
A D_STRUCTURE of indices
--------------------------------
A name for the operation BSTR
--------------------------------
A scalar defining the value to fill in output when PARAM BSTR i
--------------------------------
default CONSTANT_NUM
--------------------------------
A scalar defining the value to fill in output when PARAM BSTR i
--------------------------------
default CONSTANT_NUM
--------------------------------
function f BSTR that returns a D_STRUCTURE BSTR where QSTR is a D_STRUCTURE of D_STRUCTURE inputs to the function QSTR is a D_STRUCTURE of D_STRUCTURE outputs of applying TensorFlow operations in QSTR to QSTR QSTR is a function with the signature QSTR y QSTR x
--------------------------------
QSTR is a D_STRUCTURE ofD_STRUCTUREs the same size as QSTR holding the initial value gradients for each D_STRUCTURE in QSTR
--------------------------------
In a pure mathematical sense, a D_STRUCTURE argument D_STRUCTURE valued function QSTR derivatives should be its Jacobian matrix QSTR
--------------------------------
Here we are expressing the Jacobian QSTR as a function QSTR which defines how QSTR will transform a D_STRUCTURE QSTR when left multiplied with it grad_ys J
--------------------------------
This functional representation of a matrix is convenient to use for chain rule calculation in e g
--------------------------------
the back propagation algorithm If QSTR uses QSTR BSTR, i e
--------------------------------
through QSTR , then QSTR should have signature g grad_ys, variables None , where QSTR is a D_STRUCTURE of the QSTR s, and return a CONSTANT_NUM D_STRUCTURE BSTR, where QSTR is the same as above, and QSTR is a D_STRUCTURE REXPR QSTR y with respect to the variables BSTR
--------------------------------
Whether to enabled device placement logging
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPR
--------------------------------
A D_STRUCTURE
--------------------------------
N D with shape input_shape BSTR spatial_shape remaining_shape , where spatial_shape has QSTR dimensions
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR, all values must be REXPRpaddings BSTR BSTR specifies the padding for PARAM dimension i CONSTANT_NUM, which corresponds to spatial dimension QSTR
--------------------------------
It is required that PARAM BSTR divides QSTR This operation is equivalent to the following steps Zero pad the start and end of dimensions BSTR of the PARAM according to QSTR to produce QSTR of shape QSTR Reshape QSTR to QSTR of shape BSTR padded_shape BSTR PARAM BSTR, PARAM BSTR, , padded_shape BSTR PARAM BSTR, PARAM BSTR remaining_shapePermute dimensions of QSTR to produce QSTR of shape PARAM BSTR padded_shape BSTR PARAM BSTR, , padded_shape BSTR PARAM BSTR remaining_shapeReshape QSTR to flatten PARAM into the batch dimension, producing an output D_STRUCTURE of shape BSTR padded_shape BSTR PARAM BSTR, , padded_shape BSTR PARAM BSTR remaining_shape Some examples BSTR For the following PARAM of shape BSTR, PARAM BSTR, and paddings BSTR, BSTR
--------------------------------
The axis along which to sort
--------------------------------
The default is CONSTANT_NUM, which sorts the last axis
--------------------------------
The direction in which to sort the PARAM QSTR
--------------------------------
Optional name for the operation
--------------------------------
If CONSTANT_BOOL, equal elements in the original D_STRUCTURE will not be re ordered in the returned order
--------------------------------
Unstable sort is not yet implemented, but will eventually be the default for performance reasons
--------------------------------
If you require a stable order, pass stable CONSTANT_BOOL for forwards compatibility
--------------------------------
CONSTANT_NUM-D or higher D_TYPE D_STRUCTURE
--------------------------------
A name for the summary to be written
--------------------------------
Output directory for profiler
--------------------------------
It is required when profiler is enabled when trace was started
--------------------------------
Otherwise, it is ignored
--------------------------------
Explicit D_TYPE castable monotonic step value for this summary
--------------------------------
If omitted, this defaults to tf summary experimental get_step , which must not be None
--------------------------------
A function mapping a nested structure of D_STRUCTURE having shapes and types defined by self output_shapes QSTR self output_types to a scalar D_TYPE D_STRUCTURE
--------------------------------
An instance of QSTR , which captures the reduction logic using the QSTR functions
--------------------------------
A D_STRUCTURE of type D_TYPE default CONSTANT_NUM
--------------------------------
Must be in the range BSTR
--------------------------------
If CONSTANT_BOOL, perform exclusive cumsum
--------------------------------
A name for the operation BSTR
--------------------------------
A D_TYPE default CONSTANT_BOOL
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects with the same shape and type
--------------------------------
An D_TYPE
--------------------------------
Number of top elements to look at for computing precision
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A QSTR x QSTR D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A QSTR D_STRUCTURE of class ids
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
D_TYPE, dtype of returned D_STRUCTURE
--------------------------------
A D_TYPE, mean of the normal distribution to draw samples
--------------------------------
D_TYPE, random seed
--------------------------------
A D_STRUCTURE of D_TYPE, the shape of D_STRUCTURE to create
--------------------------------
A D_TYPE, standard deviation of the normal distribution to draw samples
--------------------------------
D_TYPE, whether to compile the model after loading
--------------------------------
Optional D_STRUCTURE mapping names BSTR to custom classes or functions to be considered during deserialization
--------------------------------
One of the following D_TYPE, path to the saved model h5py File object from which to load the model
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A scalar D_TYPE D_STRUCTURE indicating the axis to frame
--------------------------------
Defaults to the last axis
--------------------------------
Supports negative values for indexing from the end
--------------------------------
The frame length in samples
--------------------------------
An D_TYPE or scalar D_STRUCTURE
--------------------------------
The frame hop size in samples
--------------------------------
An D_TYPE or scalar D_STRUCTURE
--------------------------------
An optional name for the operation
--------------------------------
Whether to pad the end of PARAM with PARAM
--------------------------------
An optional scalar D_STRUCTURE to use where the input PARAM does not exist when PARAM is CONSTANT_BOOL
--------------------------------
A BSTR D_STRUCTURE
--------------------------------
The rank and dimensions may be unknown
--------------------------------
Rank must be at least CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
New value of epsilon
--------------------------------
Example python from keras import backend as K K epsilon REXPR CONSTANT_NUM K set_epsilon BSTR REXPR CONSTANT_NUM
--------------------------------
A D_STRUCTURE with rank REXPR
--------------------------------
Optional D_TYPE
--------------------------------
Setting it to CONSTANT_BOOL is mathematically equivalent to tf math conj BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of D_STRUCTURE objects, or a single D_STRUCTURE
--------------------------------
The D_STRUCTURE of D_STRUCTURE to format into the PARAM D_TYPE
--------------------------------
If a solitary D_STRUCTURE is passed in, the input D_STRUCTURE will automatically be wrapped as a D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to
--------------------------------
At each placeholder occurring in the PARAM, a subsequent D_STRUCTURE will be inserted
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
When formatting the D_STRUCTURE, show the first and last QSTR entries of each D_STRUCTURE dimension BSTR
--------------------------------
If set to CONSTANT_NUM, all elements of the D_STRUCTURE will be shown
--------------------------------
A D_TYPE template to format D_STRUCTURE values into
--------------------------------
An D_STRUCTURE containing all feature columns
--------------------------------
All items should be instances of classes derived from QSTR
--------------------------------
D_TYPE, data type of returned Keras variable
--------------------------------
D_TYPE, name of returned Keras variable
--------------------------------
D_TYPE, number of rows columns
--------------------------------
If CONSTANT_BOOL, then composite D_STRUCTURE such as D_STRUCTUREand tf RaggedTensor are expanded into their component D_STRUCTURE
--------------------------------
flat D_STRUCTURE to pack
--------------------------------
Nested structure, whose structure is given by nested D_STRUCTURE, tuples, and dicts
--------------------------------
Note numpy D_STRUCTURE and D_TYPE are considered scalars
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
D_TYPE, dtype of returned D_STRUCTURE
--------------------------------
A D_TYPE, upper boundary of the uniform distribution to draw samples
--------------------------------
A D_TYPE, lower boundary of the uniform distribution to draw samples
--------------------------------
D_TYPE, random seed
--------------------------------
A D_STRUCTURE of D_TYPE, the shape of D_STRUCTURE to create
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
Expected type
--------------------------------
D_STRUCTURE of input values
--------------------------------
Can include QSTR elements, which will be ignored
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE, or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE
--------------------------------
If D_TYPE the same symmetric cropping is applied to depth, height, and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric cropping values for depth, height, and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
A name for this operation BSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of type D_TYPE, representing the shape for randomly generated keep drop flags
--------------------------------
A scalar D_STRUCTURE with the same type as x
--------------------------------
The probability that each element is dropped
--------------------------------
For example, setting rate CONSTANT_FLOAT would drop CONSTANT_NUM of input elements
--------------------------------
A Python D_TYPE
--------------------------------
Used to create random seeds
--------------------------------
See tf random set_seed for behavior
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
dtype of returned Keras variable
--------------------------------
QSTR uses the dtype of QSTR
--------------------------------
name for the variable to create
--------------------------------
Keras variable or Keras D_STRUCTURE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
D_STRUCTURE of serialized protos with shape QSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to local
--------------------------------
Either the special value local QSTR FileDescriptorSet
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
D_STRUCTURE of D_TYPE containing proto field names
--------------------------------
An extension field can be decoded by using its full PARAM, e g
--------------------------------
EXT_PACKAGE EXT_FIELD_NAME
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to QSTR
--------------------------------
Either QSTR
--------------------------------
A D_TYPE
--------------------------------
PARAM of the proto message type to decode
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of D_TYPE
--------------------------------
D_STRUCTURE of TF types to use for the respective field in PARAM
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Whether to sanitize the result or not
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
A D_TYPE representing the threshold for deciding whether PARAM overlap too much with respect to IOU
--------------------------------
A scalar D_TYPE D_STRUCTURE representing the maximum number of PARAM to be selected by non max suppression
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL, size of QSTR output is padded to PARAM
--------------------------------
A D_TYPE representing the threshold for deciding when to remove PARAM based on score
--------------------------------
A CONSTANT_NUM-D D_TYPE D_STRUCTURE of shape BSTR representing a single score corresponding to each box BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE whose shape is a prefix of PARAM shape
--------------------------------
D_STRUCTURE or variable
--------------------------------
Message to print jointly with the D_STRUCTURE
--------------------------------
D_STRUCTURE to print
--------------------------------
BSTR CONSTANT_BOOL enables support for back propagation
--------------------------------
A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE, each of which will be unpacked along their first dimension
--------------------------------
The nested D_STRUCTURE of the resulting slices will be the first argument to PARAM
--------------------------------
The callable to be performed
--------------------------------
BSTR D_STRUCTURE of D_STRUCTURE, as the initial value for the accumulator
--------------------------------
BSTR Name prefix for the returned D_STRUCTURE
--------------------------------
BSTR The number of iterations allowed to run in parallel
--------------------------------
BSTR CONSTANT_BOOL enables GPU CPU memory swapping
--------------------------------
QSTR to query
--------------------------------
BSTR Only include devices matching this device type
--------------------------------
For example QSTR
--------------------------------
length of the PARAM
--------------------------------
dense CTC labels
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
CONSTANT_NUM D
--------------------------------
The indices of the dimensions to reverse
--------------------------------
Must be in the range BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Up to CONSTANT_NUM D
--------------------------------
CONSTANT_NUM-D image
--------------------------------
Size of the last dimension must be None, CONSTANT_NUM
--------------------------------
Python D_TYPE or D_STRUCTURE of type D_TYPE
--------------------------------
jpeg encoding quality
--------------------------------
A name for this operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Backpropagated gradients above the FakeQuantWithMinMaxVars operation
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Values passed as inputs to the FakeQuantWithMinMaxVars operation
--------------------------------
PARAM, PARAM Quantization interval, scalar D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Whether to quantize into CONSTANT_NUM PARAM CONSTANT_NUM distinct values
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The bitwidth of the quantization between CONSTANT_NUM, inclusive
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A TensorProto
--------------------------------
D_TYPE, axis along which the softmax normalization is applied
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
Image data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Python D_TYPE, or D_STRUCTURE
--------------------------------
Python D_TYPE, or D_STRUCTURE
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
An optional D_TYPE
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
Index of axis for channels in the input D_STRUCTURE
--------------------------------
Index of axis for columns in the input D_STRUCTURE
--------------------------------
Value used for points outside the boundaries of the input if mode QSTR
--------------------------------
Points outside the boundaries of the input are filled according to the given mode one of QSTR
--------------------------------
Height shift range, as a D_TYPE fraction of the height
--------------------------------
D_TYPE, order of spline interpolation
--------------------------------
see ndimage interpolation affine_transform
--------------------------------
Index of axis for rows in the input D_STRUCTURE
--------------------------------
Width shift range, as a D_TYPE fraction of the width
--------------------------------
Input D_STRUCTURE
--------------------------------
Must be CONSTANT_NUM D
--------------------------------
Specifies the response when an PARAM D_TYPE can t be converted using the indicated encoding
--------------------------------
One of QSTR Raise an exception for any illegal substrings QSTR Replace illegal substrings with PARAM QSTR Skip illegal substrings
--------------------------------
An QSTR dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR
--------------------------------
QSTR must be statically known
--------------------------------
D_TYPE PARAM for the unicode encoding that should be used to decode each D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
The replacement codepoint to be used in place of invalid substrings in PARAM when PARAM QSTR
--------------------------------
D_TYPE, optional name of the operation
--------------------------------
D_STRUCTURE of shape BSTR
--------------------------------
Activation function to use
--------------------------------
Default hyperbolic tangent QSTR
--------------------------------
If you pass None, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Default QSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the inputs
--------------------------------
Default CONSTANT_NUM
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, process the input D_STRUCTURE backwards and return the reversed D_STRUCTURE
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the inputs
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
Constraint function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
D_TYPE between CONSTANT_NUM
--------------------------------
Fraction of the PARAM to drop for the linear transformation of the recurrent state
--------------------------------
Default CONSTANT_NUM
--------------------------------
Initializer for the QSTR weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Default QSTR
--------------------------------
Regularizer function applied to the QSTR weights matrix
--------------------------------
Default QSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last output in the output D_STRUCTURE, or the full D_STRUCTURE
--------------------------------
Default CONSTANT_BOOL
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to return the last state in addition to the output
--------------------------------
Default CONSTANT_BOOL
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch
--------------------------------
Positive D_TYPE, dimensionality of the output space
--------------------------------
D_TYPE BSTR
--------------------------------
If CONSTANT_BOOL, the network will be unrolled, else a symbolic loop will be used
--------------------------------
Unrolling can speed up a RNN, although it tends to be more memory intensive
--------------------------------
Unrolling is only suitable for short sequences
--------------------------------
D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
--------------------------------
D_TYPE, QSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_TYPE, QSTR
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
D_STRUCTURE of CONSTANT_NUM D_TYPE
--------------------------------
D_STRUCTURE or variable
--------------------------------
A QSTR which is created by categorical_column_with QSTR crossed_column functions
--------------------------------
CONSTANT_NUM-D or higher rank
--------------------------------
Image data to convert
--------------------------------
Last dimension must be size CONSTANT_NUM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE containing CONSTANT_NUM element D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have the same type as QSTR
--------------------------------
Another D_STRUCTURE, of same type and shape as QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Same QSTR as, and broadcastable to, QSTR
--------------------------------
The absolute tolerance
--------------------------------
Default is CONSTANT_NUM eps
--------------------------------
A D_TYPE to prefix to the default message
--------------------------------
A name for this operation BSTR
--------------------------------
Defaults to QSTR
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Same QSTR as, and broadcastable to, QSTR
--------------------------------
The relative tolerance
--------------------------------
Default is CONSTANT_NUM eps
--------------------------------
Print this many entries of each D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE
--------------------------------
D_TYPE D_STRUCTURE, same dtype as and broadcastable to QSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE or QSTR containing the values to stack
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
An D_TYPE scalar specifying the number of PARAM to output
--------------------------------
This determines the number of rows in QSTR
--------------------------------
An D_TYPE D_STRUCTURE or QSTR specifying the partition that each slice of PARAM should be added to partitions shape must be a prefix of PARAM shape
--------------------------------
Values must be greater than or equal to zero, and less than PARAM QSTR is not required to be sorted
--------------------------------
A D_TYPE that governs the slope for values lower than the PARAM
--------------------------------
A D_TYPE that sets the saturation PARAM BSTR
--------------------------------
A D_TYPE giving the threshold value of the activation function below which values will be damped or set to zero
--------------------------------
Input D_STRUCTURE or QSTR
--------------------------------
QSTR as returned by tf linalg lu , i e , if matmul BSTR X QSTR lower_upper L U eye
--------------------------------
Python D_TYPE name given to ops managed by this object
--------------------------------
Default value QSTR i e , QSTR
--------------------------------
QSTR as returned by tf linag lu , i e , if matmul BSTR X QSTR perm argmax BSTR
--------------------------------
Python D_TYPE indicating whether arguments should be checked for correctness
--------------------------------
Note this function does not verify the implied matrix is actually invertible, even when validate_args CONSTANT_BOOL
--------------------------------
Default value CONSTANT_BOOL i e , don t validate arguments
--------------------------------
A name for the operation BSTR
--------------------------------
The tf summary SummaryWriter resource to flush
--------------------------------
The thread default will be used if this parameter is None
--------------------------------
Otherwise a tf no_op is returned
--------------------------------
The dimensions to reduce
--------------------------------
If QSTR BSTR, reduces all dimensions
--------------------------------
Must be in the range BSTR
--------------------------------
The D_STRUCTURE to reduce
--------------------------------
Should have D_TYPE type
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A tf distribute cluster_resolver TPUClusterResolver, which provides information about the TPU cluster
--------------------------------
A D_TYPE
--------------------------------
Specifies the channel dimension
--------------------------------
For N CONSTANT_NUM it can be either QSTR BSTR or QSTR , for N CONSTANT_NUM it can be either QSTR BSTR or QSTR and for N CONSTANT_NUM either QSTR BSTR or QSTR
--------------------------------
D_STRUCTURE of rank N CONSTANT_NUM, of shape BSTR input_spatial_shape BSTR if PARAM does not start with QSTR BSTR, or BSTR input_spatial_shape QSTR NC
--------------------------------
Pooling happens over the spatial dimensions only
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM
--------------------------------
The size of the window for each dimension of the PARAM D_STRUCTURE
--------------------------------
Optional name for the operation
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
An D_TYPE or D_STRUCTURE of D_TYPE that has length CONSTANT_NUM, QSTR or N CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of the PARAM D_STRUCTURE
--------------------------------
A tf estimator Estimator instance
--------------------------------
If set, directory containing summary files with eval metrics
--------------------------------
By default, PARAM eval_dir will be used
--------------------------------
D_TYPE, metric to track
--------------------------------
QSTR , etc
--------------------------------
D_TYPE, stop is never requested if global step is less than this value
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
If specified, calls QSTR at an interval of QSTR seconds
--------------------------------
Defaults to CONSTANT_NUM seconds
--------------------------------
Either this or PARAM must be set
--------------------------------
If specified, calls QSTR every QSTR steps
--------------------------------
Either this or PARAM must be set
--------------------------------
D_TYPE threshold for the given metric
--------------------------------
An n D D_STRUCTURE with at least CONSTANT_NUM dimensions, the last CONSTANT_NUM of which are the dimensions of each image
--------------------------------
A D_STRUCTURE with data that will be assembled in the output
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with indices into PARAM
--------------------------------
Has same rank as PARAM
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE scalar
--------------------------------
Indicates the size of the outputD_STRUCTURE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with PARAM into the output D_STRUCTURE
--------------------------------
Values should be sorted and can be repeated
--------------------------------
D_STRUCTURE BSTR of characters to filter out, such as punctuation
--------------------------------
Default ,
--------------------------------
t n , includes basic punctuation, tabs, and newlines
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Whether to set the PARAM to lowercase
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Size of vocabulary
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Separator for word splitting
--------------------------------
Input text BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE default CONSTANT_NUM
--------------------------------
Must be in the range BSTR
--------------------------------
If CONSTANT_BOOL, perform exclusive cumulative log sum exp
--------------------------------
A name for the operation BSTR
--------------------------------
If CONSTANT_BOOL, performs the cumulative log sum exp in the reverse direction
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Base64 D_TYPE to decode
--------------------------------
A name for the operation BSTR
--------------------------------
A QSTR , D_TYPE, or QSTR object
--------------------------------
A D_TYPE indicating the charset for encoding unicode
--------------------------------
D_TYPE or D_STRUCTURE of D_TYPE BSTR
--------------------------------
If a single D_TYPE is provided, the same value will be used for both
--------------------------------
A scalar
--------------------------------
Amount to add to the pixel values
--------------------------------
RGB image or images to adjust
--------------------------------
BSTR A scalar D_TYPE D_STRUCTURE, the associated PARAM
--------------------------------
A D_STRUCTURE mapping feature keys to QSTR values
--------------------------------
A name for this operation BSTR
--------------------------------
A scalar D_TYPE D_STRUCTURE, a single serialized Example
--------------------------------
D_TYPE, QSTR
--------------------------------
convolution kernel for the depthwise convolution
--------------------------------
D_STRUCTURE of D_TYPE, dilation rates for the separable convolution
--------------------------------
D_TYPE, QSTR
--------------------------------
kernel for the 1x1 convolution
--------------------------------
strides D_STRUCTURE BSTR
--------------------------------
input D_STRUCTURE
--------------------------------
Optional D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
Specifies the minimum amount of padding to use
--------------------------------
All elements must be REXPR
--------------------------------
If not specified, defaults to CONSTANT_NUM
--------------------------------
D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
D_TYPE D_STRUCTURE of shape BSTR
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Optional name prefix
--------------------------------
Size of the circular buffers for execution events
--------------------------------
These circular buffers are designed to reduce the overhead of debugging dumping
--------------------------------
They hold the most recent debug events concerning eager execution of ops and tf function QSTR tf function s
--------------------------------
They are written to the file system only when the proper flushing method is called BSTR
--------------------------------
Expected to be an D_TYPE
--------------------------------
If REXPR, the circular buffer behavior will be disabled, i e , the execution debug events will be written to the file writers in the same way as non execution events such as op creations and source file snapshots
--------------------------------
The directory path where the dumping information will be written
--------------------------------
Dump data from only the D_STRUCTURE from op types that matches to the regular expression through Python re match
--------------------------------
QSTR refers to the names of the TensorFlow operations e g , QSTR , which may repeat in a TensorFlow function
--------------------------------
It does not refer to the names of nodes e g , dense MatMul , dense CONSTANT_NUM MatMul CONSTANT_NUM which are unique within a function REXPR REXPR REXPR CONSTANT_NUM Dump D_STRUCTURE data from only MatMul and Relu ops op_regex MatMul Relu
--------------------------------
Debug mode for D_STRUCTURE values, as a D_TYPE
--------------------------------
The currently supported options are QSTR BSTR Only traces the execution of ops output D_STRUCTURE, while not dumping the value of the ops output D_STRUCTURE or any form of concise summary of them
--------------------------------
Dump data from only the D_STRUCTURE of which the specified dtypes
--------------------------------
This optional argument can be in any of the following format REXPR REXPR REXPR D_STRUCTURE of QSTR objects or D_TYPE that can be converted to QSTR objects via tf as_dtype
--------------------------------
ONE_WORD Examples
--------------------------------
A D_STRUCTURE of the same type and shape as PARAM
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
A coefficient to use on the positive examples
--------------------------------
A D_STRUCTURE with rank QSTR , when d_lower d_upper , or k CONSTANT_NUM, otherwise
--------------------------------
k REXPR
--------------------------------
A D_STRUCTURE with rank k CONSTANT_NUM, where k REXPR
--------------------------------
PARAM offset BSTR
--------------------------------
Positive value means superdiagonal, CONSTANT_NUM refers to the main PARAM, and negative value means subdiagonals
--------------------------------
QSTR can be a single D_TYPE BSTR or a pair of D_TYPE specifying the low and high ends of a matrix band
--------------------------------
QSTR k BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
data type of returned Keras variable
--------------------------------
name of returned Keras variable
--------------------------------
D_STRUCTURE of D_TYPE, shape of returned Keras variable
--------------------------------
The type of features
--------------------------------
Only D_TYPE types are supported
--------------------------------
An D_TYPE REXPR
--------------------------------
The number of buckets
--------------------------------
A unique D_TYPE identifying the input feature
--------------------------------
Activation function to use
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Regularizer function applied to the output of the layer BSTR
--------------------------------
Constraint function applied to the bias D_STRUCTURE
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Regularizer function applied to the bias D_STRUCTURE
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
The number of depthwise convolution output channels for each input channel
--------------------------------
The total number of depthwise convolution output channels will be equal to filters_in depth_multiplier
--------------------------------
Constraint function applied to the depthwise kernel matrix
--------------------------------
Initializer for the depthwise kernel matrix
--------------------------------
Regularizer function applied to the depthwise kernel matrix
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the height and width of the CONSTANT_NUM-D convolution window
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
one of QSTR BSTR
--------------------------------
An D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the height and width
--------------------------------
Can be a single D_TYPE to specify the same value for all spatial dimensions
--------------------------------
Specifying any stride value CONSTANT_NUM is incompatible with specifying any QSTR value CONSTANT_NUM
--------------------------------
D_TYPE, whether the layer uses a bias D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
Must have D_TYPE type
--------------------------------
A name for the operation BSTR
--------------------------------
BSTR Only include devices matching this device type
--------------------------------
For example QSTR
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTR while QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
D_TYPE, or D_STRUCTURE of CONSTANT_NUM D_TYPE, or D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE
--------------------------------
If D_TYPE the same symmetric padding is applied to height and width If D_STRUCTURE of CONSTANT_NUM D_TYPE interpreted as two different symmetric padding values for height and width BSTR If D_STRUCTURE of CONSTANT_NUM tuples of CONSTANT_NUM D_TYPE interpreted as BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Dimension must be CONSTANT_NUM-D or CONSTANT_NUM-D axis BSTR specifies the dimension that the PARAM PARAM BSTR should occur
--------------------------------
If the same axis is referenced more than once, the total PARAM for that axis will be the sum of all the shifts that belong to that axis
--------------------------------
A D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
Dimension must be CONSTANT_NUM-D or CONSTANT_NUM-D shift BSTR specifies the number of places by which elements are shifted positively BSTR along the dimension specified by PARAM BSTR
--------------------------------
Negative shifts will roll the elements in the opposite direction
--------------------------------
A D_TYPE, one of QSTR BSTR or QSTR
--------------------------------
The ordering of the dimensions in the inputs QSTR corresponds to inputs with shape BSTRwhile QSTR corresponds to inputs with shape BSTR
--------------------------------
It defaults to the QSTR value found in your Keras config file at keras keras json
--------------------------------
If you never set it, then it will be QSTR
--------------------------------
the data format, channels_first or channels_last
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with shape BSTR if PARAM QSTR or CONSTANT_NUM-D D_STRUCTURE with shape BSTR if PARAM QSTR
--------------------------------
the unshared weight for convolution, with shape BSTR
--------------------------------
a D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the width and height of the CONSTANT_NUM-D convolution window
--------------------------------
a D_STRUCTURE with BSTR
--------------------------------
a D_STRUCTURE of CONSTANT_NUM D_TYPE, specifying the strides of the convolution along the width and height
--------------------------------
indexing Either QSTR optional, default QSTR
--------------------------------
name A name for the operation BSTR
--------------------------------
D_STRUCTUREs with rank CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
The type of padding algorithm to use
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
Must be BSTR
--------------------------------
This is the input stride, specifying how far two consecutive patch samples are in the input
--------------------------------
Equivalent to extracting patches with patch_sizes_eff patch_sizes BSTR, followed by subsampling them spatially by a factor of QSTR
--------------------------------
This is equivalent to QSTR in dilated a k a
--------------------------------
Atrous convolutions
--------------------------------
The size of the extracted patches
--------------------------------
Must be BSTR
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of length CONSTANT_NUM
--------------------------------
How far the centers of two consecutive patches are in the PARAM
--------------------------------
Must be BSTR
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
A CONSTANT_NUM-D BSTR D_TYPE D_STRUCTURE specifying the new dense shape of the represented D_STRUCTURE
--------------------------------
The input D_STRUCTURE
--------------------------------
The data to train on
--------------------------------
It can be passed either as a tf data Dataset, or as a numpy D_STRUCTURE
--------------------------------
The maximum size of the vocabulary for this layer
--------------------------------
If None, there is no cap on the size of the vocabulary
--------------------------------
Optional specification for ngrams to create from the possibly PARAM input text
--------------------------------
Values can be None, an D_TYPE or D_STRUCTURE of D_TYPE passing an D_TYPE will create ngrams up to that D_TYPE, and passing a D_STRUCTURE of D_TYPE will create ngrams for the specified values in the D_STRUCTURE
--------------------------------
Passing None means that no ngrams will be created
--------------------------------
Optional specification for the output of the layer
--------------------------------
Values can be QSTR , configuring the layer as follows QSTR Outputs D_TYPE indices, one D_TYPE index per PARAM D_TYPE token
--------------------------------
QSTR Outputs a single D_TYPE D_STRUCTURE per batch, of either vocab_size or PARAM size, containing 1s in all elements where the token mapped to that index exists at least once in the batch item
--------------------------------
QSTR As QSTR , but the D_TYPE D_STRUCTURE contains a count of the number of times the token at that index appeared in the batch item
--------------------------------
QSTR As QSTR , but the TF IDF algorithm is applied to find the value in each token slot
--------------------------------
Only valid in D_TYPE mode
--------------------------------
If set, the output will have its time dimension padded or truncated to exactly QSTR values, resulting in a D_STRUCTURE of shape BSTR regardless of how many tokens resulted from the splitting step
--------------------------------
Defaults to None
--------------------------------
Only valid in QSTR modes
--------------------------------
If CONSTANT_BOOL, the output will have its feature axis padded to PARAM even if the number of unique tokens in the vocabulary is less than PARAM, resulting in a D_STRUCTURE of shape BSTR regardless of vocabulary size
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Optional argument specifying whether to clear the state of the layer at the start of the call to QSTR
--------------------------------
This must be CONSTANT_BOOL for this layer, which does not support repeated calls to QSTR
--------------------------------
Optional specification for splitting the input text
--------------------------------
Values can be None BSTR, QSTR BSTR, or a Callable
--------------------------------
The default is QSTR
--------------------------------
Optional specification for standardization to apply to the input text
--------------------------------
Values can be None BSTR, QSTR BSTR or a Callable
--------------------------------
Default is QSTR
--------------------------------
D_STRUCTURE or variable
--------------------------------
A D_TYPE scalar D_STRUCTURE, representing the number of consecutive elements of this dataset to combine in a single batch
--------------------------------
A tf TensorShape or D_TYPE D_STRUCTURE like object representing the equivalent dense shape of a row in the resultingD_STRUCTURE
--------------------------------
Each element of this dataset must have the same rank as QSTR , and must have size less than or equal to QSTR in each dimension
--------------------------------
The name to serialize this class under in this PARAM
--------------------------------
If None, the class name will be used
--------------------------------
The package that this class belongs to
--------------------------------
The data format for PARAM
--------------------------------
Either QSTR BSTR or QSTR
--------------------------------
CONSTANT_NUM-D of size CONSTANT_NUM
--------------------------------
The dilation rate in which we sample PARAM values across the QSTR dimensions in atrous convolution
--------------------------------
If it is greater than CONSTANT_NUM, then all values of PARAM must be CONSTANT_NUM
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
CONSTANT_NUM-D with shape according to PARAM
--------------------------------
A name for this operation BSTR
--------------------------------
A D_TYPE, either QSTR
--------------------------------
The padding algorithm
--------------------------------
See the QSTR section of tf nn convolution for details
--------------------------------
CONSTANT_NUM-D of size CONSTANT_NUM
--------------------------------
The stride of the sliding window for each dimension of PARAM
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_STRUCTURE of shape BSTR whose inner most CONSTANT_NUM dimensions form matrices of size BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
An optional D_TYPE from D_TYPE
--------------------------------
Defaults to D_TYPE
--------------------------------
BSTR CONSTANT_BOOL enables support for back propagation
--------------------------------
BSTR of PARAM
--------------------------------
If PARAM returns a structure of D_STRUCTURE differing from the structure of PARAM, then QSTR is not optional and must have the same structure as the output of PARAM
--------------------------------
A D_STRUCTURE or BSTR D_STRUCTURE of D_STRUCTURE, each of which will be unpacked along their first dimension
--------------------------------
The nested D_STRUCTURE of the resulting slices will be applied to PARAM
--------------------------------
The callable to be performed
--------------------------------
It accepts one argument, which will have the same BSTR structure as PARAM
--------------------------------
Its output must have the same structure as PARAM if one is provided, otherwise it must have the same structure as PARAM
--------------------------------
BSTR CONSTANT_BOOL disables tests for consistent output shapes
--------------------------------
BSTR Name prefix for the returned D_STRUCTURE
--------------------------------
BSTR The number of iterations allowed to run in parallel
--------------------------------
When graph building, the default value is CONSTANT_NUM
--------------------------------
While executing eagerly, the default value is set to CONSTANT_NUM
--------------------------------
BSTR CONSTANT_BOOL enables GPU CPU memory swapping
--------------------------------
CONSTANT_NUM-D BSTR
--------------------------------
Specifies the dimension index at which to expand the shape of QSTR
--------------------------------
Must be in the range BSTR
--------------------------------
The name of the output D_STRUCTURE
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE of any shape
--------------------------------
A name for the operation BSTR
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
Axes along which to compute mean and variance
--------------------------------
produce statistics with the same dimensionality as the input
--------------------------------
Name used to scope the operations that compute the sufficient stats
--------------------------------
A D_STRUCTURE containing the value by which to shift the data for numerical stability, or QSTR if no shift is to be performed
--------------------------------
A shift close to the CONSTANT_BOOL mean provides the most numerically stable results
--------------------------------
A D_STRUCTURE
--------------------------------
A D_STRUCTURE type D_TYPE
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
The QSTR of the serialized D_STRUCTURE objects
--------------------------------
A name prefix for the returned D_STRUCTURE BSTR
--------------------------------
BSTR Python D_TYPE, the rank of the D_STRUCTURE objects
--------------------------------
CONSTANT_NUM-D D_STRUCTURE of type D_TYPE of shape BSTR
--------------------------------
The serialized and packed D_STRUCTURE objects
--------------------------------
path where to cache the dataset locally relative to keras datasets
--------------------------------
Random seed for shuffling the data before computing the test split
--------------------------------
fraction of the data to reserve as test set
--------------------------------
Which axis to join along
--------------------------------
The default behavior is to join all elements, producing a scalar
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, retains reduced dimensions with length CONSTANT_NUM
--------------------------------
A name for the operation BSTR
--------------------------------
a D_TYPE added between each D_TYPE being joined
--------------------------------
A D_STRUCTURE of at least CONSTANT_NUM D_STRUCTURE object with the same type
--------------------------------
A name for the operation BSTR
--------------------------------
The specified output type of the operation BSTR
--------------------------------
Defaults to D_TYPE BSTR
--------------------------------
A D_STRUCTURE or variable
--------------------------------
A D_STRUCTURE
--------------------------------
Must be one of the following types D_TYPE
--------------------------------
A D_TYPE D_STRUCTURE
--------------------------------
A name for the operation BSTR
--------------------------------
Specifies the response when an PARAM D_TYPE can t be converted using the indicated encoding
--------------------------------
One of QSTR Raise an exception for any illegal substrings QSTR Replace illegal substrings with PARAM QSTR Skip illegal substrings
--------------------------------
An QSTR dimensional potentially ragged D_TYPE D_STRUCTURE with shape BSTR
--------------------------------
QSTR must be statically known
--------------------------------
D_TYPE PARAM for the unicode encoding that should be used to decode each D_TYPE
--------------------------------
A name for the operation BSTR
--------------------------------
Whether to replace the C0 control characters BSTR with the PARAM
--------------------------------
The replacement codepoint to be used in place of invalid substrings in PARAM when PARAM QSTR and in place of C0 control characters in PARAM when PARAM CONSTANT_BOOL
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
CONSTANT_NUM-D with shape BSTR
--------------------------------
A name for the operation BSTR
--------------------------------
A D_STRUCTURE of type D_TYPE
--------------------------------
Scalar containing the sample frequency
--------------------------------
A name for this operation BSTR
--------------------------------
Python D_TYPE
--------------------------------
Used to create a random seed
--------------------------------
See tf compat v1 set_random_seed for behavior
--------------------------------
CONSTANT_NUM-D D_STRUCTURE with size the rank of PARAM
--------------------------------
Input D_STRUCTURE to crop
--------------------------------
A D_TYPE D_STRUCTURE of rank QSTR , the D_TYPE to split
--------------------------------
If rank BSTR is not known statically, then it is assumed to be CONSTANT_NUM
--------------------------------
An D_TYPE
--------------------------------
If maxsplit REXPR, limit of the split of the result
--------------------------------
A name for the operation BSTR
--------------------------------
CONSTANT_NUM-D D_TYPE D_STRUCTURE, the delimiter D_TYPE
--------------------------------
CONSTANT_NUM-D image
--------------------------------
Size of the last dimension must be CONSTANT_NUM
--------------------------------
Maximum jpeg encoding quality to use
--------------------------------
Minimum jpeg encoding quality to use
--------------------------------
An operation specific seed
--------------------------------
It will be used in conjunction with the graph level seed to determine the real seeds that will be used in this operation
--------------------------------
Please see the documentation of set_random_seed for its interaction with the graph level random seed
--------------------------------
