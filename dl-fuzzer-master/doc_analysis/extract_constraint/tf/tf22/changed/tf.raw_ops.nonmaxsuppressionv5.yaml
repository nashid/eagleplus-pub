constraints:
  boxes:
    descp: 'A Tensor. Must be one of the following types: half, float32. A 2-D float
      tensor of shape [num_boxes, 4].'
    dtype:
    - float
    ndim:
    - '2'
    shape:
    - '[num_boxes,4]'
    tensor_t:
    - tf.tensor
  iou_threshold:
    descp: A Tensor. Must have the same type as boxes. A 0-D float tensor representing
      the threshold for deciding whether boxes overlap too much with respect to IOU.
    dtype:
    - dtype:&boxes
    - float
    - tf.bool
    ndim:
    - '0'
    tensor_t:
    - tf.tensor
  max_output_size:
    descp: A Tensor of type int32. A scalar integer tensor representing the maximum
      number of boxes to be selected by non max suppression.
    dtype:
    - int
    - tf.int32
    ndim:
    - '0'
    range:
    - '[0,inf)'
    tensor_t:
    - tf.tensor
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - tf.string
    ndim:
    - '0'
  pad_to_max_output_size:
    default: 'False'
    descp: An optional bool. Defaults to False. If true, the output selected_indices
      is padded to be of length max_output_size. Defaults to false.
    dtype:
    - tf.bool
    ndim:
    - '0'
    range:
    - '[0,inf)'
  score_threshold:
    descp: A Tensor. Must have the same type as boxes. A 0-D float tensor representing
      the threshold for deciding when to remove boxes based on score.
    dtype:
    - dtype:&boxes
    - float
    ndim:
    - '0'
    tensor_t:
    - tf.tensor
  scores:
    descp: A Tensor. Must have the same type as boxes. A 1-D float tensor of shape
      [num_boxes] representing a single score corresponding to each box (each row
      of boxes).
    dtype:
    - dtype:&boxes
    - float
    ndim:
    - '1'
    shape:
    - '[num_boxes]'
    tensor_t:
    - tf.tensor
  soft_nms_sigma:
    descp: A Tensor. Must have the same type as boxes. A 0-D float tensor representing
      the sigma parameter for Soft NMS; see Bodla et al (c.f. https://arxiv.org/abs/1704.04503).
      When soft_nms_sigma=0.0 (which is default), we fall back to standard (hard)
      NMS.
    dtype:
    - dtype:&boxes
    - float
    ndim:
    - '0'
    tensor_t:
    - tf.tensor
dependency:
- num_boxes
inputs:
  optional:
  - pad_to_max_output_size
  - name
  required:
  - boxes
  - scores
  - max_output_size
  - iou_threshold
  - score_threshold
  - soft_nms_sigma
link: https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/raw_ops/NonMaxSuppressionV5
outputs:
- A tuple of Tensor objects (selected_indices, selected_scores, valid_outputs).
- selected_indices: A Tensor of type int32.
- selected_scores: A Tensor. Has the same type as boxes.
- valid_outputs: A Tensor of type int32.
package: tensorflow
target: NonMaxSuppressionV5
title: tf.raw_ops.NonMaxSuppressionV5
version: 2.2.0
