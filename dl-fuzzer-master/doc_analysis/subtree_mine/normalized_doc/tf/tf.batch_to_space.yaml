constraints:
  block_shape:
    descp: 'A `Tensor`. Must be one of the following types: `int32`,`int64`. 1-D with
      shape `[M]`, all values must be >= 1. For backwards compatibility with TF 1.0,
      this parameter may be an int, in which case it is converted to `numpy.array([block_shape,
      block_shape], dtype=numpy.int64)`.'
    normalized_descp:
    - A D_STRUCTURE
    - Must be one of the following types D_TYPE
    - CONSTANT_NUM-D with shape BSTR, all values must be REXPR
    - For backwards compatibility with TF CONSTANT_FLOAT, this parameter may be an
      D_TYPE, in which case it is converted to numpy D_STRUCTURE BSTR, dtype numpy
      D_TYPE
  crops:
    descp: 'A `Tensor`. Must be one of the following types: `int32`, `int64`. 2-D
      with shape `[M, 2]`, all values must be >= 0. `crops[i] = [crop_start, crop_end]`
      specifies the amount to crop from input dimension `i + 1`, which corresponds
      to spatial dimension `i`.  It is required that`crop_start[i] + crop_end[i] <=
      block_shape[i] * input_shape[i + 1]`. This operation is equivalent to the following
      steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1],
      batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions
      of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1],
      block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ...,
      input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch
      / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] *
      block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start
      and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops`
      to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1]
      * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1]
      - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some
      examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape
      = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The
      output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3],
      [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape =
      [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8,
      9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x
      = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following
      input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0],
      [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5],
      [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape
      `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]],
      [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following
      input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0],
      [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0],
      [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0],
      [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1],
      [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13],
      [14], [15],  [16]]]]` '
    normalized_descp:
    - A D_STRUCTURE
    - Must be one of the following types D_TYPE
    - CONSTANT_NUM-D with shape BSTR, all values must be REXPR
    - crops BSTR BSTR specifies the amount to crop from PARAM dimension i CONSTANT_NUM,
      which corresponds to spatial dimension QSTR
    - It is required that crop_start BSTR crop_end BSTR REXPR BSTR input_shape BSTR
    - This operation is equivalent to the following steps Reshape PARAM to QSTR of
      shape PARAM BSTR, , PARAM BSTR, batch prod BSTR, input_shape BSTR, , input_shape
      BSTR Permute dimensions of QSTR to produce QSTR of shape BSTR, input_shape BSTR,
      PARAM BSTR, , input_shape BSTR, PARAM BSTR, input_shape BSTR, , input_shape
      BSTR Reshape QSTR to produce QSTR of shape BSTR, input_shape BSTR PARAM BSTR,
      , input_shape BSTR PARAM BSTR, input_shape BSTR, , input_shape BSTR Crop the
      start and end of dimensions BSTR of QSTR according to QSTR to produce the output
      of shape BSTR, input_shape BSTR PARAM BSTR crops BSTR crops BSTR, , input_shape
      BSTR PARAM BSTR crops BSTR crops BSTR, input_shape BSTR, , input_shape BSTR
      Some examples BSTR For the following PARAM of shape BSTR, PARAM BSTR, and crops
      BSTR, BSTR BSTR , BSTR , BSTR , BSTR The output D_STRUCTURE has shape BSTR and
      value x BSTR, BSTR , BSTR, BSTR BSTR For the following PARAM of shape BSTR,
      PARAM BSTR, and crops BSTR, BSTR BSTR , BSTR , BSTR , BSTR The output D_STRUCTURE
      has shape BSTR and value x BSTR, BSTR , BSTR, BSTR BSTR For the following PARAM
      of shape BSTR, PARAM BSTR, and crops BSTR, BSTR x BSTR, BSTR , BSTR, BSTR ,
      BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR , BSTR, BSTR
      The output D_STRUCTURE has shape BSTR and value x BSTR, BSTR, BSTR, BSTR , BSTR,
      BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR BSTR For
      the following PARAM of shape BSTR, PARAM BSTR, and crops BSTR, BSTR x BSTR,
      BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR,
      BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR , BSTR, BSTR, BSTR The output
      D_STRUCTURE has shape BSTR and value x BSTR, BSTR, BSTR, BSTR , BSTR, BSTR,
      BSTR, BSTR , BSTR, BSTR, BSTR, BSTR , BSTR, BSTR, BSTR, BSTR
  input:
    descp: A `Tensor`. N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`,
      where spatial_shape has M dimensions.
    normalized_descp:
    - A D_STRUCTURE
    - N D with shape input_shape BSTR spatial_shape remaining_shape , where spatial_shape
      has M dimensions
  name:
    default: None
    descp: A name for the operation (optional).
    normalized_default: DEFAULT None
    normalized_descp:
    - A name for the operation BSTR
inputs:
  optional:
  - name
  required:
  - input
  - block_shape
  - crops
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/batch_to_space
outputs: A `Tensor`. Has the same type as `input`.
package: tensorflow
target: batch_to_space
title: tf.batch_to_space
version: 2.1.0
