API,Arg,Descp,Normalized_descp,dtype,structure,shape,ndim,range,enum
mxnet.contrib.ndarray.hawkesll,max_time,the length of the interval where the processes were sampled,the length of the interval where the processes were sampled,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,max_time,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,max_time,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Convolution,weight,Weight matrix.,Weight matrix,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.Convolution,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.Convolution,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.nn.LayerNorm,epsilon,Small float added to variance to avoid dividing by zero.,Small D_TYPE added to variance to avoid dividing by zero,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.LayerNorm,epsilon,"DD: float, default 1e-5",D_TYPE default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.LayerNorm,epsilon,DF: 1e-05,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,num_parts,partition the data into multiple parts,partition the data into multiple parts,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.io.ImageDetRecordIter,num_parts,"DD: int, optional, default='1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.io.ImageDetRecordIter,num_parts,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.random_pdf_generalized_negative_binomial,is_log,"If set, compute the density of the log-probability instead of the probability.",If set compute the density of the log probability instead of the probability,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_pdf_generalized_negative_binomial,is_log,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_pdf_generalized_negative_binomial,is_log,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.where,condition,condition array,condition D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.where,condition,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.where,condition,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.negative_binomial_like,p,Failure probability in each experiment.,Failure probability in each experiment,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.negative_binomial_like,p,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.negative_binomial_like,p,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.signsgd_update,rescale_grad,Rescale gradient to grad = rescale_grad*grad.,Rescale gradient to PARAM rescale_grad PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.signsgd_update,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.signsgd_update,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.Activation,act_type,Activation function to be applied.,Activation function to be applied,,,,,QSTR
mxnet.ndarray.Activation,act_type,"DD: {'relu', 'sigmoid', 'softrelu', 'softsign', 'tanh'}, required",QSTR required,,,,,QSTR
mxnet.ndarray.Activation,act_type,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.ndarray.linalg_inverse,A,Tensor of square matrix,D_STRUCTURE of square matrix,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.linalg_inverse,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.linalg_inverse,A,DF: None,DEFAULT None,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.reshape_like,lhs,First input.,First input,,D_STRUCTURE,,,,
mxnet.ndarray.op.reshape_like,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.reshape_like,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.Convolution,cudnn_off,Turn off cudnn for this layer.,Turn off cudnn for this layer,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.Convolution,cudnn_off,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.Convolution,cudnn_off,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rmsprop_update,rescale_grad,Rescale gradient to grad = rescale_grad*grad.,Rescale gradient to PARAM rescale_grad PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rmsprop_update,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rmsprop_update,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.elemwise_sub,lhs,first input,first input,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_sub,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_sub,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase2,r1,r1,ONE_WORD r1,,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase2,r1,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase2,r1,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.hawkesll,valid_length,The number of valid points in the process,The number of valid points in the process,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,valid_length,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,valid_length,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.mp_lamb_update_phase2,r2,r2,ONE_WORD r2,,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_lamb_update_phase2,r2,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_lamb_update_phase2,r2,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_greater_equal,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_greater_equal,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_greater_equal,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.zeros,dtype,An optional value type (default is float32),An optional value type BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.zeros,dtype,"DD: str or numpy.dtype, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.zeros,dtype,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.arccos,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.arccos,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.arccos,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sgd_mom_update,lr,Learning rate,Learning rate,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sgd_mom_update,lr,"DD: float, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sgd_mom_update,lr,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.gluon.nn.Conv2DTranspose,use_bias,Whether the layer uses a bias vector.,Whether the layer uses a bias vector,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv2DTranspose,use_bias,DD: bool,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv2DTranspose,use_bias,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.image.CreateAugmenter,data_shape,Shape for output data,Shape for output data,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.image.CreateAugmenter,data_shape,DD: tuple of int,D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.context.cpu,device_id,The device id of the device. device_id is not needed for CPU. This is included to make interface compatible with GPU.,The device id of the device,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.context.cpu,device_id,The device id of the device. device_id is not needed for CPU. This is included to make interface compatible with GPU.,device_id is not needed for CPU,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.context.cpu,device_id,The device id of the device. device_id is not needed for CPU. This is included to make interface compatible with GPU.,This is included to make interface compatible with GPU,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.context.cpu,device_id,"DD: int, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.context.cpu,device_id,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.linalg_trsm,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.add_n,*args,Positional input arguments,Positional input arguments,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.add_n,*args,DD: NDArray[],ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.softmin,use_length,Whether to use the length input as a mask over the data input.,Whether to use the length input as a mask over the PARAM input,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.softmin,use_length,"DD: boolean or None, optional, default=0",D_TYPE or None optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.softmin,use_length,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.SoftmaxOutput,data,Input array.,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.SoftmaxOutput,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.SoftmaxOutput,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.bipartite_matching,topk,"Limit the number of matches to topk, set -1 for no limit",Limit the number of matches to topk set CONSTANT_NUM for no limit,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.bipartite_matching,topk,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.bipartite_matching,topk,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.MultiBoxDetection,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiBoxDetection,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiBoxDetection,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_to,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_to,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_to,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.fft,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.fft,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.fft,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.UpSampling,sample_type,upsampling method,upsampling method,,,,,QSTR
mxnet.ndarray.UpSampling,sample_type,"DD: {'bilinear', 'nearest'}, required",QSTR required,,,,,QSTR
mxnet.ndarray.split,num_outputs,Number of splits. Note that this should evenly divide the length of the axis.,Number of splits,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.split,num_outputs,Number of splits. Note that this should evenly divide the length of the axis.,Note that this should evenly divide the length of the PARAM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.split,num_outputs,"DD: int, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.split,num_outputs,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.sign,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sign,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sign,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.utils.save,fname,The filename.,The filename,D_TYPE,,,,
mxnet.ndarray.utils.save,fname,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.ndarray.op.linalg_trmm,transpose,Use transposed of the triangular matrix,Use transposed of the triangular matrix,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trmm,transpose,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trmm,transpose,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.subtract,rhs,"Second array to be subtracted. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.__spec__",Second D_STRUCTURE to be subtracted,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.subtract,rhs,"Second array to be subtracted. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.__spec__",If PARAM shape rhs shape they must be broadcastable to a common shape spec,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.subtract,rhs,DD: scalar or mxnet.ndarray.sparse.array,scalar or mxnet D_STRUCTURE sparse D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.test_utils.check_symbolic_forward,sym,output symbol,output symbol,,,,,
mxnet.test_utils.check_symbolic_forward,sym,DD: Symbol,ONE_WORD Symbol,,,,,
mxnet.ndarray.linalg_trsm,B,Tensor of matrices,D_STRUCTURE of matrices,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,B,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,B,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv2DGRUCell,i2h_bias_initializer,Initializer for the input convolution bias vectors.,Initializer for the input convolution bias vectors,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv2DGRUCell,i2h_bias_initializer,"DD: str or Initializer, default zeros",D_TYPE or Initializer default zeros,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv2DGRUCell,i2h_bias_initializer,DF: zeros,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.arctanh,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.arctanh,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.arctanh,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.test_utils.verify_generator,success_rate,The desired success rate,The desired success rate,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.verify_generator,success_rate,DD: float,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.verify_generator,success_rate,DF: 0.2,DEFAULT CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.sgd_mom_update,lazy_update,"If true, lazy updates are applied if gradient's stype is row_sparse and both weight and momentum have the same stype",If CONSTANT_BOOL lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.sgd_mom_update,lazy_update,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.sgd_mom_update,lazy_update,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.profiler.dumps,sort_by,"can take 'total', 'avg', 'min', 'max', or 'count' by which stat to sort the entries in each category defaults to 'total'",can take QSTR by which stat to sort the entries in each category defaults to QSTR,D_TYPE,,,,
mxnet.profiler.dumps,sort_by,DD: string,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.profiler.dumps,sort_by,DF: total,DEFAULT DF_STR,D_TYPE,,,,
mxnet.gluon.nn.LeakyReLU,alpha,slope coefficient for the negative half axis. Must be >= 0.,slope coefficient for the negative half axis,D_TYPE,,,,
mxnet.gluon.nn.LeakyReLU,alpha,slope coefficient for the negative half axis. Must be >= 0.,Must be REXPR,D_TYPE,,,,
mxnet.gluon.nn.LeakyReLU,alpha,DD: float,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.ndarray.Dropout,mode,Whether to only turn on dropout during training or to also turn on for inference.,Whether to only turn on dropout during training or to also turn on for inference,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.Dropout,mode,"DD: {'always', 'training'},optional, default='training'",QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.Dropout,mode,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.ftrl_update,wd,Weight decay augments the objective function with a regularization term that penalizes large weights. The penalty scales with the square of the magnitude of each weight.,PARAM decay augments the objective function with a regularization term that penalizes large weights,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.ftrl_update,wd,Weight decay augments the objective function with a regularization term that penalizes large weights. The penalty scales with the square of the magnitude of each weight.,The penalty scales with the square of the magnitude of each PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.ftrl_update,wd,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.ftrl_update,wd,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.normal_like,loc,Mean of the distribution.,Mean of the distribution,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.normal_like,loc,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.normal_like,loc,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.ROIAlign,pooled_size,"ROI Align output roi feature map height and width: (h, w)",ROI Align output roi feature map height and width BSTR,D_TYPE,D_STRUCTURE,BSTR,,"[0,inf)",
mxnet.contrib.ndarray.ROIAlign,pooled_size,"DD: Shape(tuple), required",Shape BSTR required,D_TYPE,D_STRUCTURE,BSTR,,"[0,inf)",
mxnet.contrib.ndarray.ROIAlign,pooled_size,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,BSTR,,"[0,inf)",
mxnet.ndarray.broadcast_greater,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_greater,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_greater,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,rightside,Multiply triangular matrix from the right to non-triangular one.,Multiply triangular matrix from the right to non triangular one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_trsm,rightside,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_trsm,rightside,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SoftmaxOutput,ignore_label,"The instances whose labels == ignore_label will be ignored during backward, if use_ignore is set to `true`).",The instances whose labels ignore_label will be ignored during backward if PARAM is set to CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SoftmaxOutput,ignore_label,"DD: float, optional, default=-1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SoftmaxOutput,ignore_label,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.onnx.export_model,onnx_file_path,Path where to save the generated onnx file,Path where to save the generated onnx file,D_TYPE,,,,
mxnet.contrib.onnx.export_model,onnx_file_path,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.contrib.onnx.export_model,onnx_file_path,DF: model.onnx,model onnx,D_TYPE,,,,
mxnet.io.MNISTIter,image,Dataset Param: Mnist image path.,Dataset Param Mnist image path,D_TYPE,,CONSTANT_VAL,,
mxnet.io.MNISTIter,image,"DD: string, optional, default='./train-images-idx3-ubyte'",D_TYPE optional default train images idx3 ubyte,D_TYPE,,CONSTANT_VAL,,
mxnet.io.MNISTIter,image,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.MAERegressionOutput,label,Input label to the function.,Input label to the function,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.MAERegressionOutput,label,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.MAERegressionOutput,label,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.multi_mp_sgd_mom_update,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.multi_mp_sgd_mom_update,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.multi_mp_sgd_mom_update,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.box_nms,topk,"Apply nms to topk boxes with descending scores, -1 to no restriction.",Apply nms to topk boxes with descending scores CONSTANT_NUM to no restriction,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.box_nms,topk,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.box_nms,topk,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.max_axis,keepdims,"If this is set to True, the reduced axes are left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced axes are left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.max_axis,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.max_axis,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.hawkesll,beta,"Shape (K,) The decay parameter for each process",Shape BSTR The decay parameter for each process,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.hawkesll,beta,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.hawkesll,beta,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.mp_lamb_update_phase1,grad,Gradient,ONE_WORD Gradient,,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase1,grad,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase1,grad,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.model_zoo.vision.alexnet,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.alexnet,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.alexnet,pretrained,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,resize_mode,"Augmentation Param: How image data fit in data_shape. force: force reshape to data_shape regardless of aspect ratio; shrink: ensure each side fit in data_shape, preserve aspect ratio; fit: fit image to data_shape, preserve ratio, will upscale if applicable.",Augmentation Param How image data fit in PARAM,,,,,QSTR
mxnet.io.ImageDetRecordIter,resize_mode,"Augmentation Param: How image data fit in data_shape. force: force reshape to data_shape regardless of aspect ratio; shrink: ensure each side fit in data_shape, preserve aspect ratio; fit: fit image to data_shape, preserve ratio, will upscale if applicable.",force force reshape to PARAM regardless of aspect ratio shrink ensure each side fit in PARAM preserve aspect ratio fit fit image to PARAM preserve ratio will upscale if applicable,,,,,QSTR
mxnet.io.ImageDetRecordIter,resize_mode,"DD: {'fit', 'force', 'shrink'},optional, default='force'",QSTR optional default QSTR,,,,,QSTR
mxnet.io.ImageDetRecordIter,resize_mode,DF: None,DEFAULT None,,,,,QSTR
mxnet.ndarray.ones_like,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.ones_like,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.ones_like,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.arccos,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.arccos,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.arccos,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.SyncBatchNorm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,Whether use global moving statistics instead of local batch norm,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.SyncBatchNorm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,This will force change batch norm into a scale shift operator,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.SyncBatchNorm,use_global_stats,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.SyncBatchNorm,use_global_stats,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.Dropout,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.Dropout,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.Dropout,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,h2h_dilate,Recurrent convolution dilate.,Recurrent convolution dilate,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,h2h_dilate,"DD: int or tuple of int, default (1,",D_TYPE or D_STRUCTURE of D_TYPE default CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,h2h_dilate,"DF: (1,)",DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.autograd.grad,argnum,The index of argument to calculate gradient for.,The index of argument to calculate gradient for,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.autograd.grad,argnum,DD: an int or a list of int,an D_TYPE or a D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.autograd.grad,argnum,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,Whether use global moving statistics instead of local batch norm,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,This will force change batch norm into a scale shift operator,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,use_global_stats,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,use_global_stats,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.bipartite_matching,data,The input,The input,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.bipartite_matching,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.bipartite_matching,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.onnx.import_to_gluon,ctx,Loads the model into one or many context(s).,Loads the model into one or many context BSTR,,D_STRUCTURE,,,,
mxnet.contrib.onnx.import_to_gluon,ctx,DD: Context or list of Context,Context or D_STRUCTURE of Context,,D_STRUCTURE,,,,
mxnet.test_utils.np_reduce,numpy_reduce_func,A NumPy reducing function like `np.sum` or `np.max`.,A NumPy reducing function like np sum QSTR np max,,,,,
mxnet.test_utils.np_reduce,numpy_reduce_func,DD: function,ONE_WORD function,,,,,
mxnet.ndarray.op.max,keepdims,"If this is set to True, the reduced axes are left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced axes are left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.max,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.max,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_gemm2,A,Tensor of input matrices,D_STRUCTURE of input matrices,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_gemm2,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_gemm2,A,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.nansum,exclude,Whether to perform reduction on axis that are NOT in axis instead.,Whether to perform reduction on PARAM that are NOT in PARAM instead,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.nansum,exclude,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.nansum,exclude,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.diag,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.diag,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.diag,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_sgd_mom_update,weight,Weight,ONE_WORD Weight,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_sgd_mom_update,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_sgd_mom_update,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_trsm,rightside,Multiply triangular matrix from the right to non-triangular one.,Multiply triangular matrix from the right to non triangular one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trsm,rightside,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trsm,rightside,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_sgd_update,clip_gradient,"Clip gradient to the range of [-clip_gradient, clip_gradient] If clip_gradient <= 0, gradient clipping is turned off. grad = max(min(grad, clip_gradient), -clip_gradient).",Clip gradient to the range of BSTR If clip_gradient REXPR gradient clipping is turned off,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_sgd_update,clip_gradient,"Clip gradient to the range of [-clip_gradient, clip_gradient] If clip_gradient <= 0, gradient clipping is turned off. grad = max(min(grad, clip_gradient), -clip_gradient).",grad max BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_sgd_update,clip_gradient,"DD: float, optional, default=-1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_sgd_update,clip_gradient,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.add,lhs,First array to be added.,First D_STRUCTURE to be added,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.add,lhs,DD: scalar or mxnet.ndarray.sparse.array,scalar or mxnet D_STRUCTURE sparse D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.generalized_negative_binomial,ctx,Device context of output. Default is current context. Overridden by mu.context when mu is an NDArray.,Device context of output,,,,,
mxnet.ndarray.random.generalized_negative_binomial,ctx,Device context of output. Default is current context. Overridden by mu.context when mu is an NDArray.,Default is current context,,,,,
mxnet.ndarray.random.generalized_negative_binomial,ctx,Device context of output. Default is current context. Overridden by mu.context when mu is an NDArray.,Overridden by PARAM context when PARAM is an D_STRUCTURE,,,,,
mxnet.ndarray.random.generalized_negative_binomial,ctx,"DD: Context, optional",Context optional,,,,,
mxnet.ndarray.random.generalized_negative_binomial,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.sample_multinomial,get_prob,"Whether to also return the log probability of sampled result. This is usually used for differentiating through stochastic variables, e.g. in reinforcement learning.",Whether to also return the log probability of sampled result,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sample_multinomial,get_prob,"Whether to also return the log probability of sampled result. This is usually used for differentiating through stochastic variables, e.g. in reinforcement learning.",This is usually used for differentiating through stochastic variables e g,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sample_multinomial,get_prob,"Whether to also return the log probability of sampled result. This is usually used for differentiating through stochastic variables, e.g. in reinforcement learning.",in reinforcement learning,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sample_multinomial,get_prob,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sample_multinomial,get_prob,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.sparse.arcsinh,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.arcsinh,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.arcsinh,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.subtract,lhs,First array to be subtracted.,First D_STRUCTURE to be subtracted,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.subtract,lhs,DD: scalar or mxnet.ndarray.array,scalar or mxnet D_STRUCTURE D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.adam_update,rescale_grad,Rescale gradient to grad = rescale_grad*grad.,Rescale gradient to PARAM rescale_grad PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.adam_update,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.adam_update,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_lars,rescale_grad,Gradient rescaling factor,Gradient rescaling factor,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_lars,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.multi_lars,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.Pooling,pooling_convention,Pooling convention to be applied.,Pooling convention to be applied,,,,,QSTR
mxnet.ndarray.op.Pooling,pooling_convention,"DD: {'full', 'same', 'valid'},optional, default='valid'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.op.Pooling,pooling_convention,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.ndarray.sparse.cosh,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.cosh,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.cosh,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.SoftmaxOutput,data,Input array.,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.SoftmaxOutput,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.SoftmaxOutput,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.row_sparse_array,ctx,Device context (default is the current default context).,Device context BSTR,,,,,
mxnet.ndarray.sparse.row_sparse_array,ctx,"DD: Context, optional",Context optional,,,,,
mxnet.ndarray.sparse.row_sparse_array,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.space_to_depth,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.space_to_depth,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.space_to_depth,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.randn,ctx,Device context of output. Default is current context. Overridden by loc.context when loc is an NDArray.,Device context of output,,,,,
mxnet.ndarray.random.randn,ctx,Device context of output. Default is current context. Overridden by loc.context when loc is an NDArray.,Default is current context,,,,,
mxnet.ndarray.random.randn,ctx,Device context of output. Default is current context. Overridden by loc.context when loc is an NDArray.,Overridden by PARAM context when PARAM is an D_STRUCTURE,,,,,
mxnet.ndarray.random.randn,ctx,DD: Context,ONE_WORD Context,,,,,
mxnet.ndarray.random.randn,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.op.random_pdf_uniform,sample,Samples from the distributions.,Samples from the distributions,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_pdf_uniform,sample,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_pdf_uniform,sample,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.ROIAlign,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.ROIAlign,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.ROIAlign,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.ftml_update,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.ftml_update,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.ftml_update,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.pick,index,The index array,The index D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.pick,index,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.pick,index,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.to_dlpack_for_write,data,input data.,input data,,D_STRUCTURE,,,,
mxnet.ndarray.to_dlpack_for_write,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.gluon.model_zoo.vision.vgg19,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg19,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg19,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sum,data,The input,The input,,D_STRUCTURE,,,,
mxnet.ndarray.sum,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sum,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.quantization.quantize_graph,arg_params,Dictionary of name to NDArray.,D_STRUCTURE of name to D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.quantization.quantize_graph,arg_params,DD: dict,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.rmsprop_update,weight,Weight,ONE_WORD Weight,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.rmsprop_update,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.rmsprop_update,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.multi_sgd_mom_update,lrs,Learning rates.,Learning rates,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.multi_sgd_mom_update,lrs,"DD: tuple of <float>, required",D_STRUCTURE of REXPR required,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,1]",
mxnet.io.MNISTIter,batch_size,Batch Param: Batch Size.,Batch Param Batch Size,D_TYPE,,CONSTANT_VAL,,
mxnet.io.MNISTIter,batch_size,"DD: int, optional, default='128'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.MNISTIter,batch_size,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rcbrt,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.rcbrt,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.rcbrt,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.diag,axis2,The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.,The second axis of the sub D_STRUCTURE of interest,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.diag,axis2,The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.,Ignored when the input is a CONSTANT_NUM D D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.diag,axis2,"DD: int, optional, default='1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.diag,axis2,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.check_symbolic_backward,grad_req,"Gradient requirements. 'write', 'add' or 'null'.",Gradient requirements,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.test_utils.check_symbolic_backward,grad_req,"Gradient requirements. 'write', 'add' or 'null'.",ONE_WORD QSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.test_utils.check_symbolic_backward,grad_req,"DD: str or list of str or dict of str to str, optional",D_TYPE or D_STRUCTURE of D_TYPE or D_STRUCTURE of D_TYPE to D_TYPE optional,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.test_utils.check_symbolic_backward,grad_req,DF: write,DEFAULT DF_STR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,max_calib_range,"The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to by quantized batch norm op to calculate primitive scale.Note: this calib_range is to calib bn output.",The maximum scalar value in the form of D_TYPE obtained through calibration,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,max_calib_range,"The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to by quantized batch norm op to calculate primitive scale.Note: this calib_range is to calib bn output.",If present it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,max_calib_range,"DD: float or None, optional, default=None",D_TYPE or None optional default None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,max_calib_range,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.floor,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.floor,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.floor,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.model_zoo.vision.vgg16_bn,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.vgg16_bn,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.vgg16_bn,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.contrib.quantized_conv,max_weight,Maximum value of weight.,Maximum value of PARAM,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,max_weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,max_weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.io.ImageRecordIter,saturation,"Add a random value in `[-saturation, saturation]` to the saturation of image.",Add a random value in BSTR to the saturation of image,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,saturation,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,saturation,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.BilinearResize2D,like,Resize data to it's shape,Resize PARAM to it shape,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.BilinearResize2D,like,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.BilinearResize2D,like,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,beta,beta array,beta D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,beta,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,beta,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.box_nms,id_index,"Optional, index of the class categories, -1 to disable.",Optional index of the class categories CONSTANT_NUM to disable,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.box_nms,id_index,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.box_nms,id_index,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.diag,axis2,The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.,The second axis of the sub D_STRUCTURE of interest,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.diag,axis2,The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.,Ignored when the input is a CONSTANT_NUM D D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.diag,axis2,"DD: int, optional, default='1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.diag,axis2,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.repeat,repeats,The number of repetitions for each element.,The number of repetitions for each element,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.repeat,repeats,"DD: int, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.repeat,repeats,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.model_zoo.vision.get_model,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.get_model,pretrained,DD: bool,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.get_model,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_pdf_gamma,is_log,"If set, compute the density of the log-probability instead of the probability.",If set compute the density of the log probability instead of the probability,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_pdf_gamma,is_log,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_pdf_gamma,is_log,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_pdf_gamma,alpha,Alpha (shape) parameters of the distributions.,Alpha BSTR parameters of the distributions,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_gamma,alpha,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_gamma,alpha,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,Lengths of labels for each of the samples,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,Only required when PARAM is CONSTANT_BOOL,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.CTCLoss,label_lengths,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.CTCLoss,label_lengths,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.contrib.rnn.Conv1DRNNCell,i2h_dilate,Input convolution dilate.,Input convolution dilate,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv1DRNNCell,i2h_dilate,"DD: int or tuple of int, default (1,",D_TYPE or D_STRUCTURE of D_TYPE default CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv1DRNNCell,i2h_dilate,"DF: (1,)",DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.callback.log_train_metric,period,The number of batch to log the training evaluation metric.,The number of batch to log the training evaluation metric,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.callback.log_train_metric,period,DD: int,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.linalg_gemm,transpose_a,Multiply with transposed of first input (A).,Multiply with transposed of first input BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_gemm,transpose_a,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_gemm,transpose_a,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.round_ste,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.round_ste,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.round_ste,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.box_encode,matches,"(B, N) value range [0, M)",BSTR value range BSTR,,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,m)",
mxnet.contrib.ndarray.box_encode,matches,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,m)",
mxnet.contrib.ndarray.box_encode,matches,DF: None,DEFAULT None,,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,m)",
mxnet.ndarray.sparse.mean,exclude,Whether to perform reduction on axis that are NOT in axis instead.,Whether to perform reduction on PARAM that are NOT in PARAM instead,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.mean,exclude,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.mean,exclude,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.rmspropalex_update,g,g,ONE_WORD g,,D_STRUCTURE,,,,
mxnet.ndarray.rmspropalex_update,g,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.rmspropalex_update,g,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_plus,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_plus,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_plus,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,moving_mean,running mean of input,running mean of input,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,moving_mean,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,moving_mean,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_nag_mom_update,weight32,Weight32,ONE_WORD Weight32,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_nag_mom_update,weight32,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_nag_mom_update,weight32,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.dequantize,out_type,Output data type.,Output PARAM type,D_TYPE,,,,QSTR
mxnet.contrib.ndarray.dequantize,out_type,"DD: {'float32'},optional, default='float32'",QSTR optional default QSTR,D_TYPE,,,,QSTR
mxnet.contrib.ndarray.dequantize,out_type,DF: _Null,DEFAULT Null,D_TYPE,,,,QSTR
mxnet.ndarray.signsgd_update,rescale_grad,Rescale gradient to grad = rescale_grad*grad.,Rescale gradient to PARAM rescale_grad PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.signsgd_update,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.signsgd_update,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.PSROIPooling,group_size,fix group size,fix group size,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.PSROIPooling,group_size,"DD: int, optional, default='0'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.PSROIPooling,group_size,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.calibrate_entropy,hist_edges,A ndarray/symbol of type float32,A D_STRUCTURE symbol of type D_TYPE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.calibrate_entropy,hist_edges,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.calibrate_entropy,hist_edges,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_dirichlet,sample,Samples from the distributions.,Samples from the distributions,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_dirichlet,sample,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_dirichlet,sample,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.arctan,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.arctan,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.arctan,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.CTCLoss,data,Input ndarray,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.CTCLoss,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.CTCLoss,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.Conv3DTranspose,padding,"If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points",If padding is non zero then the input is implicitly zero padded on both sides for padding number of points,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3DTranspose,padding,"DD: int or a tuple/list of 3 int,",D_TYPE or a D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3DTranspose,padding,"DF: (0,0,0)",CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.interleaved_matmul_encdec_qk,heads,Set number of heads,Set number of heads,D_TYPE,,,,
mxnet.contrib.ndarray.interleaved_matmul_encdec_qk,heads,"DD: int, required",D_TYPE required,D_TYPE,,,,
mxnet.contrib.ndarray.interleaved_matmul_encdec_qk,heads,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.ftrl_update,beta,Per-Coordinate Learning Rate beta.,Per Coordinate Learning Rate beta,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.ftrl_update,beta,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.ftrl_update,beta,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.Pooling,kernel,"Pooling kernel size: (y, x) or (d, y, x)",Pooling kernel size BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.Pooling,kernel,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.Pooling,kernel,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.broadcast_mul,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_mul,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_mul,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.transpose,axes,Target axis order. By default the axes will be inverted.,Target axis order,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.transpose,axes,Target axis order. By default the axes will be inverted.,By default the axes will be inverted,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.transpose,axes,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.transpose,axes,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.mp_lamb_update_phase1,weight32,Weight32,ONE_WORD Weight32,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase1,weight32,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_lamb_update_phase1,weight32,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.sample_generalized_negative_binomial,mu,Means of the distributions.,Means of the distributions,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.sample_generalized_negative_binomial,mu,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.sample_generalized_negative_binomial,mu,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,prefix,Prefix for name of layers (and name of weight if params is None).,Prefix for name of layers BSTR,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,prefix,"DD: str, default `'conv_lstm_`’",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,prefix,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.ftml_update,rescale_grad,Rescale gradient to grad = rescale_grad*grad.,Rescale gradient to PARAM rescale_grad PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.ftml_update,rescale_grad,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.ftml_update,rescale_grad,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.argmin,data,The input,The input,,D_STRUCTURE,,,,
mxnet.ndarray.argmin,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.argmin,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.MaxPool3D,layout,"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension.",Dimension ordering of data and out QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool3D,layout,"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension.",QSTR stands for batch channel height width and depth dimensions respectively,D_TYPE,,,,
mxnet.gluon.nn.MaxPool3D,layout,"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension.",PARAM is applied on QSTR dimension,D_TYPE,,,,
mxnet.gluon.nn.MaxPool3D,layout,"DD: str, default 'NCDHW'",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool3D,layout,DF: NCDHW,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.sparse.elemwise_add,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_add,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_add,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.VariationalDropoutCell,base_cell,The cell on which to perform variational dropout.,The cell on which to perform variational dropout,,,,,
mxnet.gluon.contrib.rnn.VariationalDropoutCell,base_cell,DD: RecurrentCell,ONE_WORD RecurrentCell,,,,,
mxnet.ndarray.random_uniform,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,DType of the output in case this can t be inferred,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random_uniform,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,Defaults to D_TYPE if not defined dtype None,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random_uniform,dtype,"DD: {'None', 'float16', 'float32', 'float64'},optional, default='None'",QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random_uniform,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",Specify how PARAM of bound PARAM bahave,,,,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",Default is QSTR,,,,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",QSTR means clip to the range,,,,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",So if all PARAM mentioned are too large they are replaced by the index that addresses the last element along an PARAM,,,,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",QSTR means to wrap around,,,,,QSTR
mxnet.ndarray.take,mode,"Specify how out-of-bound indices bahave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis. ""wrap"" means to wrap around. ""raise"" means to raise an error when index out of range.",QSTR means to raise an error when index PARAM of range,,,,,QSTR
mxnet.ndarray.take,mode,"DD: {'clip', 'raise', 'wrap'},optional, default='clip'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.take,mode,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.contrib.ndarray.MultiBoxPrior,ratios,List of aspect ratios of generated MultiBoxPriores.,D_STRUCTURE of aspect ratios of generated MultiBoxPriores,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.MultiBoxPrior,ratios,"DD: tuple of <float>, optional, default=[1]",D_STRUCTURE of REXPR optional default BSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.MultiBoxPrior,ratios,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.min_axis,keepdims,"If this is set to True, the reduced axes are left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced axes are left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.min_axis,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.min_axis,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,low,Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.,Lower boundary of the output interval,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,low,Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.,All values generated will be greater than or equal to low,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,low,Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.,The default value is CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,low,"DD: float or NDArray, optional",D_TYPE or D_STRUCTURE optional,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,low,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantized_conv,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.utils.split_data,even_split,"Whether to force all slices to have the same number of elements. If True, an error will be raised when num_slice does not evenly divide data.shape[batch_axis].",Whether to force all slices to have the same number of elements,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.utils.split_data,even_split,"Whether to force all slices to have the same number of elements. If True, an error will be raised when num_slice does not evenly divide data.shape[batch_axis].",If CONSTANT_BOOL an error will be raised when PARAM does not evenly divide PARAM shape BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.utils.split_data,even_split,"DD: bool, default True",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.utils.split_data,even_split,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.group_adagrad_update,grad,Gradient,ONE_WORD Gradient,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.group_adagrad_update,grad,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.group_adagrad_update,grad,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.amp_cast,data,The input.,The input,,D_STRUCTURE,,,,
mxnet.ndarray.op.amp_cast,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.amp_cast,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.image.imresize,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.image.imresize,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.image.imresize,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.rnn.RNN,layout,"The format of input and output tensors. T, N and C stand for sequence length, batch size, and feature dimensions respectively.",The format of input and output D_STRUCTURE,D_TYPE,,,,
mxnet.gluon.rnn.RNN,layout,"The format of input and output tensors. T, N and C stand for sequence length, batch size, and feature dimensions respectively.",T N and C stand for D_STRUCTURE length batch size and feature dimensions respectively,D_TYPE,,,,
mxnet.gluon.rnn.RNN,layout,"DD: str, default 'TNC'",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.rnn.RNN,layout,DF: TNC,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.zeros,dtype,An optional value type (default is float32),An optional value type BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.zeros,dtype,"DD: str or numpy.dtype, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.zeros,dtype,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.signum_update,grad,Gradient,ONE_WORD Gradient,,D_STRUCTURE,,,,
mxnet.ndarray.signum_update,grad,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.signum_update,grad,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_exponential,shape,Shape to be sampled from each random distribution.,Shape to be sampled from each random distribution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.sample_exponential,shape,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.sample_exponential,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.Deconvolution,cudnn_tune,Whether to pick convolution algorithm by running performance test.,Whether to pick convolution algorithm by running performance test,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.Deconvolution,cudnn_tune,"DD: {None, 'fastest', 'limited_workspace', 'off'},optional, default='None'",None QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.Deconvolution,cudnn_tune,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.contrib.arange_like,ctx,"Context of output, in format [cpu|gpu|cpu_pinned](n).Only used for imperative calls.",Context of output in format cpu gpu cpu_pinned BSTR Only used for imperative calls,D_TYPE,,,,
mxnet.ndarray.contrib.arange_like,ctx,"DD: string, optional, default=''",D_TYPE optional default,D_TYPE,,,,
mxnet.ndarray.contrib.arange_like,ctx,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.contrib.ndarray.RROIAlign,pooled_size,"RROI align output shape (h,w)",RROI align output shape BSTR,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.contrib.ndarray.RROIAlign,pooled_size,"DD: Shape(tuple), required",Shape BSTR required,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.contrib.ndarray.RROIAlign,pooled_size,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.gluon.model_zoo.vision.densenet161,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.densenet161,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.densenet161,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.ROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]], where (x1, y1) and (x2, y2) are top left and bottom right corners of designated region of interest. batch_index indicates the index of corresponding image in the input array",Bounding box coordinates a CONSTANT_NUM D D_STRUCTURE of BSTR where BSTR are top left and bottom right corners of designated region of interest,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.ROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]], where (x1, y1) and (x2, y2) are top left and bottom right corners of designated region of interest. batch_index indicates the index of corresponding image in the input array",batch_index indicates the index of corresponding image in the input D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.ROIPooling,rois,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.ROIPooling,rois,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,alpha,Alpha (dispersion) parameter of the negative binomial distribution.,Alpha BSTR parameter of the negative binomial distribution,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,alpha,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,alpha,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",Interpolation method default cv2 INTER_LINEAR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",Possible values CONSTANT_NUM Nearest Neighbors Interpolation,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",CONSTANT_NUM Bilinear interpolation,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",CONSTANT_NUM Bicubic interpolation over 4x4 pixel neighborhood,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",CONSTANT_NUM Area based BSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",It may be a preferred method for image decimation as it gives moire free results,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",But when the image is zoomed it is similar to the Nearest Neighbors method,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",ONE_WORD BSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",CONSTANT_NUM Lanczos interpolation over 8x8 pixel neighborhood,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",CONSTANT_NUM Cubic for enlarge area for shrink bilinear for others CONSTANT_NUM Random select from interpolation method metioned above,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",Note When shrinking an image it will generally look best with AREA based interpolation whereas when enlarging an image it will generally look best with Bicubic BSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html.",More details can be found in the documentation of OpenCV please refer to http docs opencv org master da d54 group__imgproc__transform html,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,"DD: int, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imresize,interp,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.ftrl_update,grad,Gradient,ONE_WORD Gradient,,D_STRUCTURE,,,,
mxnet.ndarray.ftrl_update,grad,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.ftrl_update,grad,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.backward_gradientmultiplier,data,source input,source input,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.backward_gradientmultiplier,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.backward_gradientmultiplier,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.rnn.GRUCell,prefix,prefix for name of Block`s (and name of weight if params is `None).,prefix for name of Block and name of weight if PARAM is None,D_TYPE,,,,
mxnet.gluon.rnn.GRUCell,prefix,"DD: str, default `'gru_'`",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.rnn.GRUCell,prefix,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.rmspropalex_update,epsilon,A small constant for numerical stability.,A small constant for numerical stability,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.rmspropalex_update,epsilon,"DD: float, optional, default=9.99999994e-09",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.rmspropalex_update,epsilon,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.reshape,shape,The target shape,The target shape,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.reshape,shape,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.reshape,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.image.copyMakeBorder,right,Right margin.,Right margin,D_TYPE,,,,
mxnet.image.copyMakeBorder,right,"DD: int, required",D_TYPE required,D_TYPE,,,,
mxnet.image.copyMakeBorder,right,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.op.sum_axis,exclude,Whether to perform reduction on axis that are NOT in axis instead.,Whether to perform reduction on PARAM that are NOT in PARAM instead,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.sum_axis,exclude,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.sum_axis,exclude,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.swapaxes,data,Input array.,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.swapaxes,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.swapaxes,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.model.save_checkpoint,arg_params,"Model parameter, dict of name to NDArray of net's weights.",Model parameter D_STRUCTURE of name to D_STRUCTURE of net weights,D_TYPE,D_STRUCTURE,,,,
mxnet.model.save_checkpoint,arg_params,DD: dict of str to NDArray,D_STRUCTURE of D_TYPE to D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,eps,Epsilon to prevent div 0. Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn.h when using cudnn (usually 1e-5),Epsilon to prevent div CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,eps,Epsilon to prevent div 0. Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn.h when using cudnn (usually 1e-5),Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,eps,"DD: double, optional, default=0.0010000000474974513",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,eps,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,"If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.",If CONSTANT_BOOL multiply by gamma,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,"If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.",If CONSTANT_BOOL gamma is not used,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,"If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.",When the next layer is linear also e g,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,"If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.",nn relu this can be disabled since the scaling will be done by the next layer,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,"DD: bool, default True",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.BatchNorm,scale,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.stack,*data,List of arrays to stack,D_STRUCTURE of D_STRUCTURE to stack,,D_STRUCTURE,,,,
mxnet.ndarray.stack,*data,DD: NDArray[],ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.FullyConnected,bias,Bias parameter.,Bias parameter,,D_STRUCTURE,,,,
mxnet.ndarray.FullyConnected,bias,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.FullyConnected,bias,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.gamma,shape,"The number of samples to draw. If shape is, e.g., (m, n) and alpha and beta are scalars, output shape will be (m, n). If alpha and beta are NDArrays with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each [alpha, beta) pair.",The number of samples to draw,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,shape,"The number of samples to draw. If shape is, e.g., (m, n) and alpha and beta are scalars, output shape will be (m, n). If alpha and beta are NDArrays with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each [alpha, beta) pair.",If shape is e g BSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,shape,"The number of samples to draw. If shape is, e.g., (m, n) and alpha and beta are scalars, output shape will be (m, n). If alpha and beta are NDArrays with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each [alpha, beta) pair.",If PARAM and PARAM are NDArrays with shape e g BSTR where m n samples are drawn for each BSTR pair,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,shape,"DD: int or tuple of ints, optional",D_TYPE or D_STRUCTURE of D_TYPE optional,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.fix,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.fix,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.fix,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.hawkesll,state,"Shape (N, K) the Hawkes state for each process",Shape BSTR the Hawkes state for each process,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,state,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.hawkesll,state,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.concat,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.concat,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.concat,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.profiler.set_config,continuous_dump,whether to periodically dump profiling data to file,whether to periodically dump profiling data to file,D_TYPE,,CONSTANT_VAL,,
mxnet.profiler.set_config,continuous_dump,"DD: boolean,",ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.profiler.set_config,continuous_dump,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.LeakyReLU,slope,Init slope for the activation. (For leaky and elu only),Init slope for the activation,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.LeakyReLU,slope,Init slope for the activation. (For leaky and elu only),ONE_WORD BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.LeakyReLU,slope,"DD: float, optional, default=0.25",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.LeakyReLU,slope,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.densenet121,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.densenet121,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.densenet121,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.Dense,activation,"Activation function to use. See help on Activation layer. If you don't specify anything, no activation is applied (ie. ""linear"" activation: a(x) = x).",Activation function to use,D_TYPE,,,,
mxnet.gluon.nn.Dense,activation,"Activation function to use. See help on Activation layer. If you don't specify anything, no activation is applied (ie. ""linear"" activation: a(x) = x).",See help on Activation layer,D_TYPE,,,,
mxnet.gluon.nn.Dense,activation,"Activation function to use. See help on Activation layer. If you don't specify anything, no activation is applied (ie. ""linear"" activation: a(x) = x).",If you don t specify anything no activation is applied ie,D_TYPE,,,,
mxnet.gluon.nn.Dense,activation,"Activation function to use. See help on Activation layer. If you don't specify anything, no activation is applied (ie. ""linear"" activation: a(x) = x).",QSTR activation a BSTR x,D_TYPE,,,,
mxnet.gluon.nn.Dense,activation,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.gluon.nn.Dense,activation,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.image.random_lighting,data,The input.,The input,,D_STRUCTURE,,,,
mxnet.ndarray.image.random_lighting,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.image.random_lighting,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.io.ImageRecordIter,seed_aug,Random seed for augmentations.,Random PARAM for augmentations,D_TYPE,,,,
mxnet.io.ImageRecordIter,seed_aug,"DD: int or None, optional, default='None'",D_TYPE or None optional default QSTR,D_TYPE,,,,
mxnet.io.ImageRecordIter,seed_aug,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.test_utils.verify_generator,nsamples,The number of samples to generate for the testing,The number of samples to generate for the testing,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.test_utils.verify_generator,nsamples,DD: int,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.test_utils.verify_generator,nsamples,DF: 1000000,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Deconvolution,target_shape,"Shape of the output tensor: (w,), (h, w) or (d, h, w).",Shape of the output D_STRUCTURE BSTR,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Deconvolution,target_shape,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Deconvolution,target_shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,BSTR,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.Dropout,axes,"The axes on which dropout mask is shared. If empty, regular dropout is applied.",The axes on which dropout mask is shared,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Dropout,axes,"The axes on which dropout mask is shared. If empty, regular dropout is applied.",If empty regular dropout is applied,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Dropout,axes,"DD: tuple of int, default ",D_STRUCTURE of D_TYPE default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Dropout,axes,DF: (),,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.slice_axis,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.slice_axis,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.slice_axis,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.MakeLoss,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.MakeLoss,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.MakeLoss,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.ROIPooling,data,"The input array to the pooling operator,  a 4D Feature maps",The input D_STRUCTURE to the pooling operator a CONSTANT_NUM D Feature maps,,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.ROIPooling,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.ROIPooling,data,DF: None,DEFAULT None,,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.choose_element_0index,data,The input array,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.choose_element_0index,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.choose_element_0index,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.PReLU,alpha_initializer,Initializer for the embeddings matrix.,Initializer for the embeddings matrix,,,,,
mxnet.gluon.nn.PReLU,alpha_initializer,DD: Initializer,ONE_WORD Initializer,,,,,
mxnet.gluon.nn.PReLU,alpha_initializer,DF: <mxnet.initializer.Constantobject>,DEFAULT REXPR,,,,,
mxnet.ndarray.image.to_tensor,data,Input ndarray,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.image.to_tensor,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.image.to_tensor,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.test_utils.check_symbolic_forward,expected,The expected output value   if type is list of np.ndarrayContains arrays corresponding to exe.outputs.   ,The expected output value if type is D_STRUCTURE of np ndarrayContains D_STRUCTURE corresponding to exe outputs,D_TYPE,D_STRUCTURE,,,,
mxnet.test_utils.check_symbolic_forward,expected,DD: list of np.ndarray or dict of str to np.ndarray,D_STRUCTURE of np D_STRUCTURE of D_TYPE to np D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.SwapAxis,dim2,the second axis to be swapped.,the second axis to be swapped,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.SwapAxis,dim2,"DD: int, optional, default='0'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.SwapAxis,dim2,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_normal,scale,Standard deviation of the distribution.,Standard deviation of the distribution,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_normal,scale,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_normal,scale,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trsm,lower,"True if the triangular matrix is lower triangular, false if it is upper triangular.",CONSTANT_BOOL if the triangular matrix is lower triangular CONSTANT_BOOL if it is upper triangular,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trsm,lower,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trsm,lower,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.unravel_index,data,Array of flat indices,D_STRUCTURE of flat indices,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.unravel_index,data,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.unravel_index,data,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.ctc_loss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",Set the PARAM that is reserved for blank PARAM If QSTR CONSTANT_NUM th PARAM is reserved and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.op.ctc_loss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",If QSTR last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.op.ctc_loss,blank_label,"DD: {'first', 'last'},optional, default='first'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.op.ctc_loss,blank_label,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.ndarray.transpose,data,Source input,Source input,,D_STRUCTURE,,,,
mxnet.ndarray.transpose,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.transpose,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.rmspropalex_update,delta,delta,ONE_WORD delta,,D_STRUCTURE,,,,
mxnet.ndarray.rmspropalex_update,delta,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.rmspropalex_update,delta,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_gelqf,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_gelqf,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_gelqf,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.transpose,data,Source input,Source input,,D_STRUCTURE,,,,
mxnet.ndarray.op.transpose,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.transpose,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,fix_gamma,Fix gamma while training,Fix PARAM while training,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,fix_gamma,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,fix_gamma,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.expm1,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.expm1,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.expm1,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.ftrl_update,lr,Learning rate,Learning rate,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.ftrl_update,lr,"DD: float, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.ftrl_update,lr,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.random.gamma,dtype,Data type of output samples. Default is 'float32',Data type of output samples,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.gamma,dtype,Data type of output samples. Default is 'float32',Default is QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.gamma,dtype,"DD: {'float16', 'float32', 'float64'}, optional",QSTR optional,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.gamma,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.uniform,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Device context of output,,,,,
mxnet.ndarray.random.uniform,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Default is current context,,,,,
mxnet.ndarray.random.uniform,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Overridden by PARAM context when PARAM is an D_STRUCTURE,,,,,
mxnet.ndarray.random.uniform,ctx,"DD: Context, optional",Context optional,,,,,
mxnet.ndarray.random.uniform,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.op.dot,forward_stype,"The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type.",The desired storage type of the forward output given by user if thecombination of input storage types and this hint does not matchany implemented ones the dot operator will perform fallback operationand still produce an output of the desired storage type,,,,,QSTR
mxnet.ndarray.op.dot,forward_stype,"DD: {None, 'csr', 'default', 'row_sparse'},optional, default='None'",None QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.op.dot,forward_stype,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.io.ImageDetRecordIter,scale,Augmentation Param: Scale in color space.,Augmentation Param Scale in color space,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,scale,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,scale,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.GroupNorm,num_groups,Number of groups to separate the channel axis into.,Number of groups to separate the channel axis into,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.GroupNorm,num_groups,"DD: int, default 1",D_TYPE default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.GroupNorm,num_groups,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.recordio.pack_img,img_fmt,"Encoding of the image (.jpg for JPEG, .png for PNG).",Encoding of the image BSTR,D_TYPE,,,,
mxnet.recordio.pack_img,img_fmt,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.recordio.pack_img,img_fmt,DF: .jpg,DEFAULT jpg,D_TYPE,,,,
mxnet.ndarray.contrib.PSROIPooling,data,"Input data to the pooling operator, a 4D Feature maps",Input data to the pooling operator a CONSTANT_NUM D Feature maps,,,CONSTANT_VAL,,
mxnet.ndarray.contrib.PSROIPooling,data,DD: Symbol,ONE_WORD Symbol,,,CONSTANT_VAL,,
mxnet.ndarray.contrib.PSROIPooling,data,DF: None,DEFAULT None,,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,beta,beta array,beta D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,beta,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,beta,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.nanprod,keepdims,"If this is set to True, the reduced axes are left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced axes are left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.nanprod,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.nanprod,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_trsm,A,Tensor of lower triangular matrices,D_STRUCTURE of PARAM triangular matrices,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_trsm,A,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.uniform,high,Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.,Upper boundary of the output interval,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,high,Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.,All values generated will be less than high,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,high,Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.,The default value is CONSTANT_FLOAT,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,high,"DD: float or NDArray, optional",D_TYPE or D_STRUCTURE optional,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random.uniform,high,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_act,data,Input data.,Input data,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_act,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_act,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv3DLSTMCell,params,Container for weight sharing between cells. Created if None.,Container for weight sharing between cells,,,,,
mxnet.gluon.contrib.rnn.Conv3DLSTMCell,params,Container for weight sharing between cells. Created if None.,Created if None,,,,,
mxnet.gluon.contrib.rnn.Conv3DLSTMCell,params,"DD: RNNParams, default None",RNNParams default None,,,,,
mxnet.gluon.contrib.rnn.Conv3DLSTMCell,params,DF: None,DEFAULT None,,,,,
mxnet.contrib.ndarray.quantized_fully_connected,flatten,Whether to collapse all but the first axis of the input data tensor.,Whether to collapse all but the first axis of the input PARAM D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_fully_connected,flatten,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_fully_connected,flatten,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.elemwise_add,lhs,first input,first input,,D_STRUCTURE,,,,
mxnet.ndarray.op.elemwise_add,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.elemwise_add,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantize,min_range,The minimum scalar value possibly produced for the input,The minimum scalar value possibly produced for the input,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantize,min_range,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantize,min_range,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.image.CreateDetAugmenter,rand_pad,"[0, 1], probability to apply random padding",BSTR probability to apply random padding,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.image.CreateDetAugmenter,rand_pad,DD: float,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.image.CreateDetAugmenter,rand_pad,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.all_finite,data,Array,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.all_finite,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.all_finite,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,max_bias,Maximum value of bias.,Maximum value of PARAM,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,max_bias,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_fully_connected,max_bias,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.nn.Conv3DTranspose,weight_initializer,Initializer for the weight weights matrix.,Initializer for the weight weights matrix,D_TYPE,,,,
mxnet.gluon.nn.Conv3DTranspose,weight_initializer,DD: str or Initializer,D_TYPE or Initializer,D_TYPE,,,,
mxnet.gluon.nn.Conv3DTranspose,weight_initializer,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.arange,dtype,The data type of the NDArray. The default datatype is np.float32.,The data type of the D_STRUCTURE,D_TYPE,,,,
mxnet.ndarray.arange,dtype,The data type of the NDArray. The default datatype is np.float32.,The default datatype is D_TYPE,D_TYPE,,,,
mxnet.ndarray.arange,dtype,"DD: str or numpy.dtype, optional",D_TYPE optional,D_TYPE,,,,
mxnet.ndarray.arange,dtype,DF: <classnumpy.float32>,DEFAULT REXPR,D_TYPE,,,,
mxnet.ndarray.contrib.arange_like,step,Spacing between values.,Spacing between values,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.arange_like,step,"DD: double, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.arange_like,step,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.MakeLoss,grad_scale,Gradient scale as a supplement to unary and binary operators,Gradient scale as a supplement to unary and binary operators,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.MakeLoss,grad_scale,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.MakeLoss,grad_scale,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.minimum,lhs,First array to be compared.,First D_STRUCTURE to be compared,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.minimum,lhs,DD: scalar or mxnet.ndarray.array,scalar or mxnet D_STRUCTURE D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,mu,Mean of the negative binomial distribution.,Mean of the negative binomial distribution,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,mu,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_generalized_negative_binomial,mu,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.LSTMPCell,hidden_size,Number of units in cell state symbol.,Number of units in cell state symbol,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.contrib.rnn.LSTMPCell,hidden_size,DD: int,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,label,Ground-truth labels for the loss.,Ground truth labels for the loss,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.CTCLoss,label,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.CTCLoss,label,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.normal,out,Store output to an existing NDArray.,Store output to an existing D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.random.normal,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.random.normal,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.randint,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Device context of output,,,,,
mxnet.ndarray.random.randint,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Default is current context,,,,,
mxnet.ndarray.random.randint,ctx,Device context of output. Default is current context. Overridden by low.context when low is an NDArray.,Overridden by PARAM context when PARAM is an D_STRUCTURE,,,,,
mxnet.ndarray.random.randint,ctx,"DD: Context, optional",Context optional,,,,,
mxnet.ndarray.random.randint,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.arange,start,Start of interval. The default start value is 0.,Start of interval,D_TYPE,,,,
mxnet.ndarray.arange,start,Start of interval. The default start value is 0.,The default start value is CONSTANT_NUM,D_TYPE,,,,
mxnet.ndarray.arange,start,"DD: number, optional",number optional,D_TYPE,,,,
mxnet.ndarray.sparse.retain,data,The input array for sparse_retain operator.,The input D_STRUCTURE for sparse_retain operator,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.retain,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.retain,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.SequenceLast,axis,The sequence axis. Only values of 0 and 1 are currently supported.,The D_STRUCTURE axis,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.SequenceLast,axis,The sequence axis. Only values of 0 and 1 are currently supported.,Only values of CONSTANT_NUM are currently supported,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.SequenceLast,axis,"DD: int, optional, default='0'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.SequenceLast,axis,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.gluon.nn.Conv1DTranspose,kernel_size,Specifies the dimensions of the convolution window.,Specifies the dimensions of the convolution window,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.nn.Conv1DTranspose,kernel_size,DD: int or tuple/list of 1 int,D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.BatchNorm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,Whether use global moving statistics instead of local batch norm,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,use_global_stats,Whether use global moving statistics instead of local batch-norm. This will force change batch-norm into a scale shift operator.,This will force change batch norm into a scale shift operator,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,use_global_stats,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.BatchNorm,use_global_stats,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SequenceMask,value,The value to be used as a mask.,The value to be used as a mask,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SequenceMask,value,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SequenceMask,value,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.chi_square_check,generator,A function that is assumed to generate i.i.d samples from a specific distribution. generator(N) should generate N random samples.,A function that is assumed to generate i i d samples from a specific distribution,,,,,
mxnet.test_utils.chi_square_check,generator,A function that is assumed to generate i.i.d samples from a specific distribution. generator(N) should generate N random samples.,generator BSTR should generate N random samples,,,,,
mxnet.test_utils.chi_square_check,generator,DD: function,ONE_WORD function,,,,,
mxnet.gluon.contrib.rnn.Conv3DRNNCell,params,Container for weight sharing between cells. Created if None.,Container for weight sharing between cells,,,,,
mxnet.gluon.contrib.rnn.Conv3DRNNCell,params,Container for weight sharing between cells. Created if None.,Created if None,,,,,
mxnet.gluon.contrib.rnn.Conv3DRNNCell,params,"DD: RNNParams, default None",RNNParams default None,,,,,
mxnet.gluon.contrib.rnn.Conv3DRNNCell,params,DF: None,DEFAULT None,,,,,
mxnet.ndarray.op.log,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.log,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.log,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.SparseEmbedding,input_dim,Vocabulary size of the input indices.,Vocabulary size of the input indices,D_TYPE,,,"[0,inf)",
mxnet.contrib.ndarray.SparseEmbedding,input_dim,"DD: int, required",D_TYPE required,D_TYPE,,,"[0,inf)",
mxnet.contrib.ndarray.SparseEmbedding,input_dim,DF: _Null,DEFAULT Null,D_TYPE,,,"[0,inf)",
mxnet.ndarray.contrib.quantized_batch_norm,output_mean_var,Output the mean and inverse std,Output the mean and inverse std,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantized_batch_norm,output_mean_var,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantized_batch_norm,output_mean_var,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.log2,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log2,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log2,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.zeros,stype,"The storage type of the empty array, such as 'row_sparse', 'csr', etc.",The storage type of the empty D_STRUCTURE such as QSTR etc,D_TYPE,,,,
mxnet.ndarray.zeros,stype,"DD: string, optional",D_TYPE optional,D_TYPE,,,,
mxnet.ndarray.zeros,stype,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.contrib.ROIAlign,sample_ratio,"Optional sampling ratio of ROI align, using adaptive size by default.",Optional sampling ratio of ROI align using adaptive size by default,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.ROIAlign,sample_ratio,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.ROIAlign,sample_ratio,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.SparseEmbedding,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.SparseEmbedding,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.SparseEmbedding,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.gradientmultiplier,scalar,lambda multiplier,lambda multiplier,D_TYPE,,,,
mxnet.contrib.ndarray.gradientmultiplier,scalar,DD: float,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.contrib.ndarray.gradientmultiplier,scalar,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.op.broadcast_equal,rhs,Second input to the function,Second input to the function,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_equal,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_equal,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.allclose,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.allclose,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.allclose,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.softmax_cross_entropy,label,Input label,Input label,,D_STRUCTURE,,,,
mxnet.ndarray.op.softmax_cross_entropy,label,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.softmax_cross_entropy,label,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",The axis or axes along which to perform the reduction,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",The default axis BSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If axis is D_TYPE a reduction is performed on a particular axis,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If axis is a D_STRUCTURE of D_TYPE a reduction is performed on all the axes specified in the D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If PARAM is CONSTANT_BOOL reduction will be performed on the axes that are NOT in axis instead,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",Negative values means indexing from right to left,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,"DD: Shape or None, optional, default=None",Shape or None optional default None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.nanprod,axis,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.random_uniform,shape,Shape of the output.,Shape of the output,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.random_uniform,shape,"DD: Shape(tuple), optional, default=None",Shape BSTR optional default None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.random_uniform,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.sqrt,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sqrt,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sqrt,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,bias,bias.,ONE_WORD bias,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,bias,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,bias,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.linalg.extracttrian,offset,"Offset of the diagonal versus the main diagonal. 0 corresponds to the main diagonal, a negative/positive value to diagonals below/above the main diagonal.",Offset of the diagonal versus the main diagonal,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg.extracttrian,offset,"Offset of the diagonal versus the main diagonal. 0 corresponds to the main diagonal, a negative/positive value to diagonals below/above the main diagonal.",CONSTANT_NUM corresponds to the main diagonal a negative positive value to diagonals below above the main diagonal,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg.extracttrian,offset,"DD: int, optional, default='0'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg.extracttrian,offset,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,i2h_kernel,Input convolution kernel sizes.,Input convolution kernel sizes,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,i2h_kernel,DD: int or tuple of int,D_TYPE or D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.cast_storage,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.cast_storage,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.cast_storage,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.elemwise_add,rhs,second input,second input,,D_STRUCTURE,,,,
mxnet.ndarray.elemwise_add,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.elemwise_add,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.utils.download,sha1_hash,Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified but doesn't match.,Expected sha1 hash in hexadecimal digits,D_TYPE,,,,
mxnet.gluon.utils.download,sha1_hash,Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified but doesn't match.,Will ignore existing file when hash is specified but doesn t match,D_TYPE,,,,
mxnet.gluon.utils.download,sha1_hash,"DD: str, optional",D_TYPE optional,D_TYPE,,,,
mxnet.gluon.utils.download,sha1_hash,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.ctc_loss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",Set the PARAM that is reserved for blank PARAM If QSTR CONSTANT_NUM th PARAM is reserved and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.ctc_loss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",If QSTR last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.ctc_loss,blank_label,"DD: {'first', 'last'},optional, default='first'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.ctc_loss,blank_label,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.gluon.nn.Conv2DTranspose,in_channels,"The number of input channels to this layer. If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data.",The number of input PARAM to this layer,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.Conv2DTranspose,in_channels,"The number of input channels to this layer. If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data.",If not specified initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.Conv2DTranspose,in_channels,"DD: int, default 0",D_TYPE default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.Conv2DTranspose,in_channels,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.minimum,rhs,"Second array to be compared. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.",Second D_STRUCTURE to be compared,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.minimum,rhs,"Second array to be compared. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.",If PARAM shape rhs shape they must be broadcastable to a common shape,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.minimum,rhs,DD: scalar or mxnet.ndarray.array,scalar or mxnet D_STRUCTURE D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.DeformablePSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",Bounding box coordinates a CONSTANT_NUM D D_STRUCTURE of BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.DeformablePSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",BSTR are top left and down right corners of designated region of interest,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.DeformablePSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",batch_index indicates the index of corresponding image in the input PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.DeformablePSROIPooling,rois,DD: Symbol,ONE_WORD Symbol,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.DeformablePSROIPooling,rois,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.fft,data,Input data to the FFTOp.,Input data to the FFTOp,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.fft,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.fft,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sample_exponential,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,DType of the output in case this can t be inferred,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.sample_exponential,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,Defaults to D_TYPE if not defined dtype None,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.sample_exponential,dtype,"DD: {'None', 'float16', 'float32', 'float64'},optional, default='None'",QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.sample_exponential,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.ctc_loss,data,Input ndarray,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.ctc_loss,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.ctc_loss,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.MaxPool1D,layout,"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Pooling is applied on the W dimension.",Dimension ordering of data and out QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool1D,layout,"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Pooling is applied on the W dimension.",QSTR stands for batch channel and width BSTR dimensions respectively,D_TYPE,,,,
mxnet.gluon.nn.MaxPool1D,layout,"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Pooling is applied on the W dimension.",Pooling is applied on the W dimension,D_TYPE,,,,
mxnet.gluon.nn.MaxPool1D,layout,"DD: str, default 'NCW'",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool1D,layout,DF: NCW,DEFAULT DF_STR,D_TYPE,,,,
mxnet.contrib.ndarray.getnnz,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.getnnz,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.getnnz,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",The axis or axes along which to perform the reduction,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",The default axis BSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If axis is D_TYPE a reduction is performed on a particular axis,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If axis is a D_STRUCTURE of D_TYPE a reduction is performed on all the axes specified in the D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",If PARAM is CONSTANT_BOOL reduction will be performed on the axes that are NOT in axis instead,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",Negative values means indexing from right to left,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,"DD: Shape or None, optional, default=None",Shape or None optional default None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.max,axis,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.signum_update,weight,Weight,ONE_WORD Weight,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.signum_update,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.signum_update,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_fully_connected,weight,weight.,ONE_WORD weight,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_fully_connected,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_fully_connected,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.Activation,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.Activation,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.Activation,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.AvgPool1D,pool_size,Size of the average pooling windows.,Size of the average pooling windows,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.AvgPool1D,pool_size,DD: int,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.AvgPool1D,pool_size,DF: 2,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.Softmax,preserve_shape,"If set to `true`, the softmax function will be computed along the last axis (`-1`).",If set to CONSTANT_BOOL the softmax function will be computed along the last axis CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Softmax,preserve_shape,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.Softmax,preserve_shape,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.GroupNorm,output_mean_var,Output the mean and std calculated along the given axis.,Output the mean and std calculated along the given axis,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.GroupNorm,output_mean_var,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.GroupNorm,output_mean_var,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.batch_dot,lhs,The first input,The first input,,D_STRUCTURE,,,,
mxnet.ndarray.batch_dot,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.batch_dot,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.SequenceReverse,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.SequenceReverse,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.SequenceReverse,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_1_0,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_1_0,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_1_0,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.contrib.quantized_conv,max_bias,Maximum value of bias.,Maximum value of PARAM,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,max_bias,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_conv,max_bias,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.nn.Conv3D,dilation,Specifies the dilation rate to use for dilated convolution.,Specifies the dilation rate to use for dilated convolution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3D,dilation,DD: int or tuple/list of 3 int,D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3D,dilation,"DF: (1,1,1)",CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.elemwise_add,lhs,first input,first input,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_add,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_add,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random_generalized_negative_binomial,ctx,"Context of output, in format [cpu|gpu|cpu_pinned](n). Only used for imperative calls.",Context of output in format cpu gpu cpu_pinned BSTR,D_TYPE,,,,
mxnet.ndarray.random_generalized_negative_binomial,ctx,"Context of output, in format [cpu|gpu|cpu_pinned](n). Only used for imperative calls.",Only used for imperative calls,D_TYPE,,,,
mxnet.ndarray.random_generalized_negative_binomial,ctx,"DD: string, optional, default=''",D_TYPE optional default,D_TYPE,,,,
mxnet.ndarray.random_generalized_negative_binomial,ctx,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.op.ftml_update,lr,Learning rate.,Learning rate,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.ftml_update,lr,"DD: float, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.ftml_update,lr,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.random_pdf_exponential,sample,Samples from the distributions.,Samples from the distributions,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_exponential,sample,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.random_pdf_exponential,sample,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.argmin,keepdims,"If this is set to True, the reduced axis is left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced PARAM is left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.argmin,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.argmin,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg11_bn,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg11_bn,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg11_bn,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sample_negative_binomial,p,Failure probabilities in each experiment.,Failure probabilities in each experiment,D_TYPE,D_STRUCTURE,,,"[0,1]",
mxnet.ndarray.sample_negative_binomial,p,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,"[0,1]",
mxnet.ndarray.sample_negative_binomial,p,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,"[0,1]",
mxnet.image.copyMakeBorder,bot,Bottom margin.,Bottom margin,D_TYPE,,,,
mxnet.image.copyMakeBorder,bot,"DD: int, required",D_TYPE required,D_TYPE,,,,
mxnet.image.copyMakeBorder,bot,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.op.ftml_update,weight,Weight,ONE_WORD Weight,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.ftml_update,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.ftml_update,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.RNN,state_outputs,Whether to have the states as symbol outputs.,Whether to have the states as symbol outputs,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.RNN,state_outputs,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.RNN,state_outputs,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.backward_hawkesll,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.backward_hawkesll,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.backward_hawkesll,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.exp,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.exp,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.exp,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.box_nms,id_index,"Optional, index of the class categories, -1 to disable.",Optional index of the class categories CONSTANT_NUM to disable,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.box_nms,id_index,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.box_nms,id_index,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,mean_g,The mean value to be subtracted on the G channel,The mean value to be subtracted on the G channel,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,mean_g,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,mean_g,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.image.imdecode,flag,1 for three channel color output. 0 for grayscale output.,CONSTANT_NUM for three channel color output,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imdecode,flag,1 for three channel color output. 0 for grayscale output.,CONSTANT_NUM for grayscale output,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imdecode,flag,"DD: int, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.image.imdecode,flag,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.randn,scale,Standard deviation (spread or width) of the distribution.,Standard deviation BSTR of the distribution,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.random.randn,scale,DD: float or NDArray,D_TYPE or D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.random.randn,scale,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,data,Data to be shuffled.,Data to be shuffled,,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.shuffle,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,max_data,Maximum value of data.,Maximum value of PARAM,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,max_data,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,max_data,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.CTCLoss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",Set the PARAM that is reserved for blank PARAM If QSTR CONSTANT_NUM th PARAM is reserved and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.CTCLoss,blank_label,"Set the label that is reserved for blank label.If ""first"", 0-th label is reserved, and label values for tokens in the vocabulary are between `1` and `alphabet_size-1`, and the padding mask is `-1`. If ""last"", last label value `alphabet_size-1` is reserved for blank label instead, and label values for tokens in the vocabulary are between `0` and `alphabet_size-2`, and the padding mask is `0`.",If QSTR last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM and the padding mask is CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.CTCLoss,blank_label,"DD: {'first', 'last'},optional, default='first'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.CTCLoss,blank_label,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.ndarray.op.sample_poisson,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_poisson,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_poisson,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.random.gamma,alpha,The shape of the gamma distribution. Should be greater than zero.,The PARAM of the gamma distribution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,alpha,The shape of the gamma distribution. Should be greater than zero.,Should be greater than zero,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,alpha,"DD: float or NDArray, optional",D_TYPE or D_STRUCTURE optional,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.random.gamma,alpha,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.RNN,activation,The activation function to use.,The activation function to use,D_TYPE,,,,
mxnet.gluon.rnn.RNN,activation,"DD: {'relu' or 'tanh'}, default 'relu'",QSTR default QSTR,D_TYPE,,,,
mxnet.gluon.rnn.RNN,activation,DF: relu,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.random.generalized_negative_binomial,dtype,Data type of output samples. Default is 'float32',Data type of output samples,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.generalized_negative_binomial,dtype,Data type of output samples. Default is 'float32',Default is QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.generalized_negative_binomial,dtype,"DD: {'float16', 'float32', 'float64'}, optional",QSTR optional,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.random.generalized_negative_binomial,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.gluon.model_zoo.vision.resnet152_v1,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.resnet152_v1,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.resnet152_v1,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.contrib.CTCLoss,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.CTCLoss,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.CTCLoss,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,params,Container for weight sharing between cells. Created if None.,Container for weight sharing between cells,,,,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,params,Container for weight sharing between cells. Created if None.,Created if None,,,,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,params,"DD: RNNParams, default None",RNNParams default None,,,,,
mxnet.gluon.contrib.rnn.Conv3DGRUCell,params,DF: None,DEFAULT None,,,,,
mxnet.ndarray.LRN,nsize,normalization window width in elements.,normalization window width in elements,D_TYPE,,,"[0,inf)",
mxnet.ndarray.LRN,nsize,"DD: int (non-negative), required",D_TYPE BSTR required,D_TYPE,,,"[0,inf)",
mxnet.ndarray.LRN,nsize,DF: _Null,DEFAULT Null,D_TYPE,,,"[0,inf)",
mxnet.test_utils.download,overwrite,"Default is false, which means skipping download if the local file exists. If true, then download the url to overwrite the local file if exists.",Default is CONSTANT_BOOL which means skipping download if the local file exists,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.download,overwrite,"Default is false, which means skipping download if the local file exists. If true, then download the url to overwrite the local file if exists.",If CONSTANT_BOOL then download the PARAM to overwrite the local file if exists,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.download,overwrite,"DD: bool, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.download,overwrite,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.DeformableConvolution,weight,Weight matrix.,Weight matrix,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.DeformableConvolution,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.DeformableConvolution,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.test_utils.check_symbolic_forward,aux_states,if type is list of np.ndarrayContains all the NumPy arrays corresponding to sym.list_auxiliary_states   ,if type is D_STRUCTURE of np ndarrayContains all the NumPy D_STRUCTURE corresponding to PARAM list_auxiliary_states,,D_STRUCTURE,,,,
mxnet.test_utils.check_symbolic_forward,aux_states,"DD: list of np.ndarray of dict, optional",D_STRUCTURE of np D_STRUCTURE of D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.test_utils.check_symbolic_forward,aux_states,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.SymbolBlock,inputs,The Variables in output's argument that should be used as inputs.,The Variables in output argument that should be used as inputs,,D_STRUCTURE,,,,
mxnet.gluon.nn.SymbolBlock,inputs,DD: Symbol or list of Symbol,Symbol or D_STRUCTURE of Symbol,,D_STRUCTURE,,,,
mxnet.ndarray.preloaded_multi_mp_sgd_update,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.preloaded_multi_mp_sgd_update,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.preloaded_multi_mp_sgd_update,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_potri,A,Tensor of lower triangular matrices,D_STRUCTURE of lower triangular matrices,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_potri,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_potri,A,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.io.CSVIter,dtype,Output data type. `None` means no change.,Output data type,D_TYPE,,,,QSTR
mxnet.io.CSVIter,dtype,Output data type. `None` means no change.,QSTR means no change,D_TYPE,,,,QSTR
mxnet.io.CSVIter,dtype,"DD: {None, 'float16', 'float32', 'float64', 'int32', 'int64', 'int8', 'uint8'},optional, default='None'",None QSTR optional default QSTR,D_TYPE,,,,QSTR
mxnet.io.CSVIter,dtype,DF: None,DEFAULT None,D_TYPE,,,,QSTR
mxnet.ndarray.op.signum_update,grad,Gradient,ONE_WORD Gradient,,D_STRUCTURE,,,,
mxnet.ndarray.op.signum_update,grad,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.signum_update,grad,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.test_utils.numeric_grad,aux_states,Auxiliary states values used as location to compute gradient Maps the name of aux_states to the corresponding numpy.ndarray. Value of all the auxiliary arguments must be provided.,Auxiliary states values used as PARAM to compute gradient Maps the name of aux_states to the corresponding numpy D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.test_utils.numeric_grad,aux_states,Auxiliary states values used as location to compute gradient Maps the name of aux_states to the corresponding numpy.ndarray. Value of all the auxiliary arguments must be provided.,Value of all the auxiliary arguments must be provided,D_TYPE,D_STRUCTURE,,,,
mxnet.test_utils.numeric_grad,aux_states,"DD: None or list of numpy.ndarray or dict of str to numpy.ndarray, optional",None or D_STRUCTURE of numpy D_STRUCTURE of D_TYPE to numpy D_STRUCTURE optional,D_TYPE,D_STRUCTURE,,,,
mxnet.test_utils.numeric_grad,aux_states,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.recordio.unpack,s,String buffer from `MXRecordIO.read`.,D_TYPE buffer from MXRecordIO read,D_TYPE,,,,
mxnet.recordio.unpack,s,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,
mxnet.ndarray.MAERegressionOutput,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.MAERegressionOutput,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.MAERegressionOutput,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_negative_binomial,k,Limit of unsuccessful experiments.,Limit of unsuccessful experiments,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_negative_binomial,k,"DD: int, optional, default='1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_negative_binomial,k,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.ElementWiseSum,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.ElementWiseSum,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.ElementWiseSum,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.rnn.RNN,input_size,"The number of expected features in the input x. If not specified, it will be inferred from input.",The number of expected features in the input x,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.RNN,input_size,"The number of expected features in the input x. If not specified, it will be inferred from input.",If not specified it will be inferred from input,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.RNN,input_size,"DD: int, default 0",D_TYPE default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.RNN,input_size,DF: 0,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.multi_sgd_mom_update,momentum,The decay rate of momentum estimates at each epoch.,The decay rate of momentum estimates at each epoch,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.multi_sgd_mom_update,momentum,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.multi_sgd_mom_update,momentum,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.mp_nag_mom_update,wd,Weight decay augments the objective function with a regularization term that penalizes large weights. The penalty scales with the square of the magnitude of each weight.,PARAM decay augments the objective function with a regularization term that penalizes large weights,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.mp_nag_mom_update,wd,Weight decay augments the objective function with a regularization term that penalizes large weights. The penalty scales with the square of the magnitude of each weight.,The penalty scales with the square of the magnitude of each PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.mp_nag_mom_update,wd,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.mp_nag_mom_update,wd,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,Lengths of labels for each of the samples,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,Only required when PARAM is CONSTANT_BOOL,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,label_lengths,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,label_lengths,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.quantize,max_range,The maximum scalar value possibly produced for the input,The maximum scalar value possibly produced for the input,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantize,max_range,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.quantize,max_range,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.random_negative_binomial,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,DType of the output in case this can t be inferred,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.random_negative_binomial,dtype,DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).,Defaults to D_TYPE if not defined dtype None,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.random_negative_binomial,dtype,"DD: {'None', 'float16', 'float32', 'float64'},optional, default='None'",QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.random_negative_binomial,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.op.mp_sgd_update,lazy_update,"If true, lazy updates are applied if gradient's stype is row_sparse.",If CONSTANT_BOOL lazy updates are applied if gradient stype is row_sparse,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.mp_sgd_update,lazy_update,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.mp_sgd_update,lazy_update,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_conv,weight,weight.,ONE_WORD weight,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_conv,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_conv,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.callback.do_checkpoint,period,Interval (number of epochs) between checkpoints. Default period is 1.,Interval BSTR between checkpoints,D_TYPE,,CONSTANT_VAL,,
mxnet.callback.do_checkpoint,period,Interval (number of epochs) between checkpoints. Default period is 1.,Default period is CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.callback.do_checkpoint,period,"DD: int, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.callback.do_checkpoint,period,DF: 1,DEFAULT CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.MultiProposal,feature_stride,"The size of the receptive field each unit in the convolution layer of the rpn,for example the product of all stride's prior to this layer.",The size of the receptive field each unit in the convolution layer of the rpn for example the product of all stride prior to this layer,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.MultiProposal,feature_stride,"DD: int, optional, default='16'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.MultiProposal,feature_stride,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.linalg_trmm,rightside,Multiply triangular matrix from the right to non-triangular one.,Multiply triangular matrix from the right to non triangular one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trmm,rightside,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_trmm,rightside,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.CTCLoss,data_lengths,Lengths of data for each of the samples. Only required when use_data_lengths is true.,Lengths of PARAM for each of the samples,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,data_lengths,Lengths of data for each of the samples. Only required when use_data_lengths is true.,Only required when PARAM is CONSTANT_BOOL,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,data_lengths,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.CTCLoss,data_lengths,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.box_nms,background_id,"Optional, id of the background class which will be ignored in nms.",Optional id of the background class which will be ignored in nms,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.box_nms,background_id,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.box_nms,background_id,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.contrib.quantized_batch_norm,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_batch_norm,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_batch_norm,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.test_utils.assert_almost_equal,equal_nan,The flag determining how to treat NAN values in comparison,The flag determining how to treat NAN values in comparison,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.assert_almost_equal,equal_nan,"DD: boolean, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.test_utils.assert_almost_equal,equal_nan,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.calibrate_entropy,num_quantized_bins,The number of quantized bins.,The number of quantized bins,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.calibrate_entropy,num_quantized_bins,"DD: int, optional, default='255'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.calibrate_entropy,num_quantized_bins,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.io.ImageDetRecordIter,random_illumination_prob,Augmentation Param: Probability to apply random illumination.,Augmentation Param Probability to apply random illumination,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.io.ImageDetRecordIter,random_illumination_prob,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.io.ImageDetRecordIter,random_illumination_prob,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.gluon.contrib.rnn.Conv2DLSTMCell,h2h_kernel,Recurrent convolution kernel sizes. Only odd-numbered sizes are supported.,Recurrent convolution kernel sizes,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv2DLSTMCell,h2h_kernel,Recurrent convolution kernel sizes. Only odd-numbered sizes are supported.,Only odd numbered sizes are supported,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv2DLSTMCell,h2h_kernel,DD: int or tuple of int,D_TYPE or D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.broadcast_sub,rhs,Second input to the function,Second input to the function,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_sub,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_sub,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.quantized_pooling,pooling_convention,Pooling convention to be applied.,Pooling convention to be applied,,,,,QSTR
mxnet.ndarray.contrib.quantized_pooling,pooling_convention,"DD: {'full', 'same', 'valid'},optional, default='valid'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.contrib.quantized_pooling,pooling_convention,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.ndarray.nansum,keepdims,"If this is set to True, the reduced axes are left in the result as dimension with size one.",If this is set to CONSTANT_BOOL the reduced axes are left in the result as dimension with size one,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.nansum,keepdims,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.nansum,keepdims,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_batch_norm,beta,beta.,ONE_WORD beta,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,beta,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_batch_norm,beta,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.pad,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.pad,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.pad,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.mp_sgd_update,weight32,Weight32,ONE_WORD Weight32,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_sgd_update,weight32,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.mp_sgd_update,weight32,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.rmspropalex_update,epsilon,A small constant for numerical stability.,A small constant for numerical stability,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rmspropalex_update,epsilon,"DD: float, optional, default=9.99999994e-09",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.rmspropalex_update,epsilon,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.Activation,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.Activation,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.Activation,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.LayerNorm,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.square,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.square,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.square,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.SequenceMask,use_sequence_length,"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence",If set to CONSTANT_BOOL this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.SequenceMask,use_sequence_length,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.SequenceMask,use_sequence_length,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.arccosh,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.arccosh,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.arccosh,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.nn.Dense,bias_initializer,Initializer for the bias vector.,Initializer for the bias vector,D_TYPE,,,,
mxnet.gluon.nn.Dense,bias_initializer,DD: str or Initializer,D_TYPE or Initializer,D_TYPE,,,,
mxnet.gluon.nn.Dense,bias_initializer,DF: zeros,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.op.BatchNorm,eps,Epsilon to prevent div 0. Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn.h when using cudnn (usually 1e-5),Epsilon to prevent div CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.BatchNorm,eps,Epsilon to prevent div 0. Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn.h when using cudnn (usually 1e-5),Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.BatchNorm,eps,"DD: double, optional, default=0.0010000000474974513",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.BatchNorm,eps,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv2D,layout,"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions.",Dimension ordering of data and weight,D_TYPE,,,,
mxnet.gluon.nn.Conv2D,layout,"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions.",Only supports QSTR layout for now,D_TYPE,,,,
mxnet.gluon.nn.Conv2D,layout,"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions.",QSTR stands for batch channel height and width dimensions respectively,D_TYPE,,,,
mxnet.gluon.nn.Conv2D,layout,"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions.",Convolution is applied on the QSTR dimensions,D_TYPE,,,,
mxnet.gluon.nn.Conv2D,layout,"DD: str, default 'NCHW'",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.nn.Conv2D,layout,DF: NCHW,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.op.Deconvolution,bias,Bias added to the result after the deconvolution operation.,Bias added to the result after the deconvolution operation,,D_STRUCTURE,,,,
mxnet.ndarray.op.Deconvolution,bias,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.Deconvolution,bias,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.array,ctx,Device context (default is the current default context).,Device context BSTR,,,,,
mxnet.ndarray.array,ctx,"DD: Context, optional",Context optional,,,,,
mxnet.ndarray.array,ctx,DF: None,DEFAULT None,,,,,
mxnet.io.ImageDetRecordIter,max_random_contrast,Augmentation Param: Maximum random value of delta contrast.,Augmentation Param Maximum random value of delta contrast,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,max_random_contrast,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,max_random_contrast,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.SoftmaxOutput,preserve_shape,"If set to `true`, the softmax function will be computed along the last axis (`-1`).",If set to CONSTANT_BOOL the softmax function will be computed along the last axis CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.SoftmaxOutput,preserve_shape,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.SoftmaxOutput,preserve_shape,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.ones,out,The output NDArray (default is None).,The output D_STRUCTURE BSTR,,D_STRUCTURE,,,,
mxnet.ndarray.ones,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.ones,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.util.set_np,shape,"A boolean value indicating whether the NumPy-shape semantics should be turned on or off. When this flag is set to True, zero-size and zero-dim shapes are all valid shapes in shape inference process, instead of treated as unknown shapes in legacy mode.",A D_TYPE value indicating whether the NumPy shape semantics should be turned on or off,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.util.set_np,shape,"A boolean value indicating whether the NumPy-shape semantics should be turned on or off. When this flag is set to True, zero-size and zero-dim shapes are all valid shapes in shape inference process, instead of treated as unknown shapes in legacy mode.",When this flag is set to CONSTANT_BOOL zero size and zero dim shapes are all valid shapes in shape inference process instead of treated as unknown shapes in legacy mode,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.util.set_np,shape,DD: bool,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.util.set_np,shape,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.broadcast_to,data,The input,The input,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_to,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_to,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.requantize,max_calib_range,"The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8.",The maximum scalar value in the form of D_TYPE obtained through calibration,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.requantize,max_calib_range,"The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8.",If present it will be used to requantize the D_TYPE PARAM into D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.requantize,max_calib_range,"DD: float or None, optional, default=None",D_TYPE or None optional default None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.requantize,max_calib_range,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.split,squeeze_axis,"If true, Removes the axis with length 1 from the shapes of the output arrays. Note that setting squeeze_axis to `true` removes axis with length 1 only along the axis which it is split. Also squeeze_axis can be set to `true` only if `input.shape[axis] == num_outputs`.",If CONSTANT_BOOL Removes the PARAM with length CONSTANT_NUM from the shapes of the output D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.split,squeeze_axis,"If true, Removes the axis with length 1 from the shapes of the output arrays. Note that setting squeeze_axis to `true` removes axis with length 1 only along the axis which it is split. Also squeeze_axis can be set to `true` only if `input.shape[axis] == num_outputs`.",Note that setting squeeze_axis to CONSTANT_BOOL removes PARAM with length CONSTANT_NUM only along the PARAM which it is split,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.split,squeeze_axis,"If true, Removes the axis with length 1 from the shapes of the output arrays. Note that setting squeeze_axis to `true` removes axis with length 1 only along the axis which it is split. Also squeeze_axis can be set to `true` only if `input.shape[axis] == num_outputs`.",Also squeeze_axis can be set to CONSTANT_BOOL only if input shape BSTR PARAM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.split,squeeze_axis,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.split,squeeze_axis,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.nag_mom_update,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.nag_mom_update,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.nag_mom_update,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.gather_nd,data,data,ONE_WORD data,,D_STRUCTURE,,,,
mxnet.ndarray.op.gather_nd,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.gather_nd,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_gamma,shape,Shape to be sampled from each random distribution.,Shape to be sampled from each random distribution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.sample_gamma,shape,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.sample_gamma,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.nn.AvgPool1D,count_include_pad,"When 'False', will exclude padding elements when computing the average value.",When CONSTANT_BOOL will exclude PARAM elements when computing the average value,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.AvgPool1D,count_include_pad,"DD: bool, default True",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.AvgPool1D,count_include_pad,DF: True,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.ROIPooling,pooled_size,"ROI pooling output shape (h,w)",ROI pooling output shape BSTR,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.ndarray.op.ROIPooling,pooled_size,"DD: Shape(tuple), required",Shape BSTR required,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.ndarray.op.ROIPooling,pooled_size,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,BSTR,,,
mxnet.ndarray.nanprod,data,The input,The input,,D_STRUCTURE,,,,
mxnet.ndarray.nanprod,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.nanprod,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.take,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.take,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.take,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sin,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sin,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sin,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.quantized_fully_connected,no_bias,Whether to disable bias parameter.,Whether to disable PARAM parameter,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_fully_connected,no_bias,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.quantized_fully_connected,no_bias,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.quantization.quantize_model,calib_mode,"If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset.",If calib_mode QSTR no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators,D_TYPE,,,,QSTR
mxnet.contrib.quantization.quantize_model,calib_mode,"If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset.",The quantized models generated in this mode are normally CONSTANT_NUM CONSTANT_NUM slower than those with calibrations during inference,D_TYPE,,,,QSTR
mxnet.contrib.quantization.quantize_model,calib_mode,"If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset.",If calib_mode QSTR the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization,D_TYPE,,,,QSTR
mxnet.contrib.quantization.quantize_model,calib_mode,"If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset.",If calib_mode QSTR BSTR the thresholds for quantization will be derived such that the KL divergence between the distributions of D_TYPE layer outputs and quantized layer outputs is minimized based upon the calibration dataset,D_TYPE,,,,QSTR
mxnet.contrib.quantization.quantize_model,calib_mode,DD: str,ONE_WORD D_TYPE,D_TYPE,,,,QSTR
mxnet.contrib.quantization.quantize_model,calib_mode,DF: entropy,DEFAULT DF_STR,D_TYPE,,,,QSTR
mxnet.gluon.model_zoo.vision.resnet152_v2,root,Location for keeping the model parameters.,Location for keeping the model parameters,D_TYPE,,,,
mxnet.gluon.model_zoo.vision.resnet152_v2,root,"DD: str, default '$MXNET_HOME/models'",D_TYPE default MXNET_HOME models,D_TYPE,,,,
mxnet.gluon.model_zoo.vision.resnet152_v2,root,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.io.ImageRecordIter,verbose,If or not output verbose information.,If or not output verbose information,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,verbose,"DD: boolean, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageRecordIter,verbose,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_gemm,transpose_a,Multiply with transposed of first input (A).,Multiply with transposed of first input BSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_gemm,transpose_a,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_gemm,transpose_a,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.elemwise_div,lhs,first input,first input,,D_STRUCTURE,,,,
mxnet.ndarray.elemwise_div,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.elemwise_div,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.UpSampling,num_filter,"Input filter. Only used by bilinear sample_type.Since bilinear upsampling uses deconvolution, num_filters is set to the number of channels.",Input filter,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.UpSampling,num_filter,"Input filter. Only used by bilinear sample_type.Since bilinear upsampling uses deconvolution, num_filters is set to the number of channels.",Only used by bilinear PARAM Since bilinear upsampling uses deconvolution num_filters is set to the number of channels,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.UpSampling,num_filter,"DD: int, optional, default='0'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.UpSampling,num_filter,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.BilinearResize2D,scale_width,"sampling scale of the width (optional, used in modes ""scale"" and ""odd_scale"")",sampling scale of the PARAM optional used in modes QSTR,D_TYPE,,,"[0,inf)",
mxnet.contrib.ndarray.BilinearResize2D,scale_width,"DD: float or None, optional, default=None",D_TYPE or None optional default None,D_TYPE,,,"[0,inf)",
mxnet.contrib.ndarray.BilinearResize2D,scale_width,DF: _Null,DEFAULT Null,D_TYPE,,,"[0,inf)",
mxnet.ndarray.lamb_update_phase2,g,Output of lamb_update_phase 1,Output of lamb_update_phase CONSTANT_NUM,,D_STRUCTURE,,,,
mxnet.ndarray.lamb_update_phase2,g,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.lamb_update_phase2,g,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.multi_mp_sgd_mom_update,lrs,Learning rates.,Learning rates,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.multi_mp_sgd_mom_update,lrs,"DD: tuple of <float>, required",D_STRUCTURE of REXPR required,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,1]",
mxnet.gluon.model_zoo.vision.vgg13,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg13,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.vgg13,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.box_decode,std2,value to be divided from the 3rd encoded values,value to be divided from the 3rd encoded values,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.box_decode,std2,"DD: float, optional, default=1",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.box_decode,std2,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.broadcast_axes,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_axes,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_axes,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.pick,mode,"Specify how out-of-bound indices behave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis.  ""wrap"" means to wrap around.",Specify how PARAM of bound indices behave,,,,,QSTR
mxnet.ndarray.pick,mode,"Specify how out-of-bound indices behave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis.  ""wrap"" means to wrap around.",Default is QSTR,,,,,QSTR
mxnet.ndarray.pick,mode,"Specify how out-of-bound indices behave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis.  ""wrap"" means to wrap around.",QSTR means clip to the range,,,,,QSTR
mxnet.ndarray.pick,mode,"Specify how out-of-bound indices behave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis.  ""wrap"" means to wrap around.",So if all indices mentioned are too large they are replaced by the PARAM that addresses the last element along an PARAM,,,,,QSTR
mxnet.ndarray.pick,mode,"Specify how out-of-bound indices behave. Default is ""clip"". ""clip"" means clip to the range. So, if all indices mentioned are too large, they are replaced by the index that addresses the last element along an axis.  ""wrap"" means to wrap around.",QSTR means to wrap around,,,,,QSTR
mxnet.ndarray.pick,mode,"DD: {'clip', 'wrap'},optional, default='clip'",QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.pick,mode,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.gluon.model_zoo.vision.resnet50_v2,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.resnet50_v2,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.resnet50_v2,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sqrt,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sqrt,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sqrt,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.log,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_trmm,A,Tensor of lower triangular matrices,D_STRUCTURE of PARAM triangular matrices,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_trmm,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.linalg_trmm,A,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_add,lhs,First input to the function,First input to the function,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_add,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.broadcast_add,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.adam_update,lr,Learning rate,Learning rate,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.adam_update,lr,"DD: float, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.adam_update,lr,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.RNN,lstm_state_clip_nan,"Whether to stop NaN from propagating in state by clipping it to min/max. If clipping range is not specified, this option is ignored.",Whether to stop NaN from propagating in PARAM by clipping it to min max,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.RNN,lstm_state_clip_nan,"Whether to stop NaN from propagating in state by clipping it to min/max. If clipping range is not specified, this option is ignored.",If clipping range is not specified this option is ignored,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.RNN,lstm_state_clip_nan,"DD: boolean, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.RNN,lstm_state_clip_nan,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.nn.MaxPool2D,layout,"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension.",Dimension ordering of data and out QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool2D,layout,"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension.",QSTR stands for batch channel height and width dimensions respectively,D_TYPE,,,,
mxnet.gluon.nn.MaxPool2D,layout,"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension.",PARAM is applied on QSTR dimension,D_TYPE,,,,
mxnet.gluon.nn.MaxPool2D,layout,"DD: str, default 'NCHW'",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.nn.MaxPool2D,layout,DF: NCHW,DEFAULT DF_STR,D_TYPE,,,,
mxnet.ndarray.random.normal_like,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.random.normal_like,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.random.normal_like,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_sub,rhs,second input,second input,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_sub,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.elemwise_sub,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.contrib.MultiProposal,threshold,"NMS value, below which to suppress.",NMS value below which to suppress,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.MultiProposal,threshold,"DD: float, optional, default=0.699999988",D_TYPE optional default CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.MultiProposal,threshold,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.broadcast_logical_and,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_logical_and,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_logical_and,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.ROIPooling,spatial_scale,Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers,Ratio of input feature map height BSTR,D_TYPE,,,,
mxnet.ndarray.ROIPooling,spatial_scale,Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers,Equals the reciprocal of total stride in convolutional layers,D_TYPE,,,,
mxnet.ndarray.ROIPooling,spatial_scale,"DD: float, required",D_TYPE required,D_TYPE,,,,
mxnet.ndarray.ROIPooling,spatial_scale,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.ndarray.op.nansum,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.nansum,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.nansum,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.ceil,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.ceil,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.ceil,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.radians,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.radians,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.radians,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.SequenceMask,data,"n-dimensional input array of the form [max_sequence_length, batch_size, other_feature_dims] where n>2",n dimensional input D_STRUCTURE of the form BSTR where n REXPR,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.SequenceMask,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.SequenceMask,data,DF: None,DEFAULT None,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.sample_multinomial,data,Distribution probabilities. Must sum to one on the last axis.,Distribution probabilities,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_multinomial,data,Distribution probabilities. Must sum to one on the last axis.,Must sum to one on the last axis,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_multinomial,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.sample_multinomial,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_25,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_25,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_25,ctx,DF: None,DEFAULT None,,,,,
mxnet.ndarray.op.linalg_det,A,Tensor of square matrix,D_STRUCTURE of square matrix,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_det,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.op.linalg_det,A,DF: None,DEFAULT None,,D_STRUCTURE,BSTR,CONSTANT_VAL,,
mxnet.ndarray.sinh,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sinh,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sinh,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.LogisticRegressionOutput,label,Input label to the function.,Input label to the function,,D_STRUCTURE,,,,
mxnet.ndarray.LogisticRegressionOutput,label,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.LogisticRegressionOutput,label,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.AdaptiveAvgPooling2D,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.AdaptiveAvgPooling2D,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.AdaptiveAvgPooling2D,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,prefix,Prefix for name of layers (and name of weight if params is None).,Prefix for name of layers BSTR,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,prefix,"DD: str, default `'conv_gru_`’",D_TYPE default QSTR,D_TYPE,,,,
mxnet.gluon.contrib.rnn.Conv1DGRUCell,prefix,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.io.ImageDetRecordIter,prefetch_buffer,Maximum number of batches to prefetch.,Maximum number of batches to prefetch,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.io.ImageDetRecordIter,prefetch_buffer,"DD: long (non-negative), optional, default=4",long BSTR optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.io.ImageDetRecordIter,prefetch_buffer,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.broadcast_not_equal,lhs,First input to the function,First input to the function,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_not_equal,lhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_not_equal,lhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.image.copyMakeBorder,left,Left margin.,Left margin,D_TYPE,,,,
mxnet.image.copyMakeBorder,left,"DD: int, required",D_TYPE required,D_TYPE,,,,
mxnet.image.copyMakeBorder,left,DF: _Null,DEFAULT Null,D_TYPE,,,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_75,pretrained,Whether to load the pretrained weights for model.,Whether to load the pretrained weights for model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_75,pretrained,"DD: bool, default False",D_TYPE default CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_75,pretrained,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.contrib.rnn.Conv2DRNNCell,input_shape,"Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W).",Input D_STRUCTURE shape at each time step for each sample excluding dimension of the batch size and D_STRUCTURE length,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.contrib.rnn.Conv2DRNNCell,input_shape,"Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W).",Must be consistent with PARAM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.contrib.rnn.Conv2DRNNCell,input_shape,"Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W).",For example for layout QSTR the shape should be BSTR,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.contrib.rnn.Conv2DRNNCell,input_shape,DD: tuple of int,D_STRUCTURE of D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.model_zoo.vision.densenet121,ctx,The context in which to load the pretrained weights.,The context in which to load the PARAM weights,,,,,
mxnet.gluon.model_zoo.vision.densenet121,ctx,"DD: Context, default CPU",Context default CPU,,,,,
mxnet.gluon.model_zoo.vision.densenet121,ctx,DF: None,DEFAULT None,,,,,
mxnet.io.LibSVMIter,dtype,Output data type. `None` means no change.,Output data type,D_TYPE,,,,QSTR
mxnet.io.LibSVMIter,dtype,Output data type. `None` means no change.,QSTR means no change,D_TYPE,,,,QSTR
mxnet.io.LibSVMIter,dtype,"DD: {None, 'float16', 'float32', 'float64', 'int32', 'int64', 'int8', 'uint8'},optional, default='None'",None QSTR optional default QSTR,D_TYPE,,,,QSTR
mxnet.io.LibSVMIter,dtype,DF: None,DEFAULT None,D_TYPE,,,,QSTR
mxnet.ndarray.full,val,Fill value.,Fill value,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.full,val,DD: scalar,ONE_WORD scalar,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.get_model,name,Name of the model.,Name of the model,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.get_model,name,DD: str,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.contrib.BilinearResize2D,mode,"resizing mode. ""simple"" - output height equals parameter ""height"" if ""scale_height"" parameter is not defined or input height multiplied by ""scale_height"" otherwise. Same for width;""odd_scale"" - if original height or width is odd, then result height is calculated like result_h = (original_h - 1) * scale + 1; for scale > 1 the result shape would be like if we did deconvolution with kernel = (1, 1) and stride = (height_scale, width_scale); and for scale < 1 shape would be like we did convolution with kernel = (1, 1) and stride = (int(1 / height_scale), int( 1/ width_scale);""like"" - resize first input to the height and width of second input; ""to_even_down"" - resize input to nearest lower even height and width (if original height is odd then result height = original height - 1);""to_even_up"" - resize input to nearest bigger even height and width (if original height is odd then result height = original height + 1);""to_odd_down"" - resize input to nearest odd height and width (if original height is odd then result height = original height - 1);""to_odd_up"" - resize input to nearest odd height and width (if original height is odd then result height = original height + 1);",resizing mode,,,,,QSTR
mxnet.ndarray.contrib.BilinearResize2D,mode,"resizing mode. ""simple"" - output height equals parameter ""height"" if ""scale_height"" parameter is not defined or input height multiplied by ""scale_height"" otherwise. Same for width;""odd_scale"" - if original height or width is odd, then result height is calculated like result_h = (original_h - 1) * scale + 1; for scale > 1 the result shape would be like if we did deconvolution with kernel = (1, 1) and stride = (height_scale, width_scale); and for scale < 1 shape would be like we did convolution with kernel = (1, 1) and stride = (int(1 / height_scale), int( 1/ width_scale);""like"" - resize first input to the height and width of second input; ""to_even_down"" - resize input to nearest lower even height and width (if original height is odd then result height = original height - 1);""to_even_up"" - resize input to nearest bigger even height and width (if original height is odd then result height = original height + 1);""to_odd_down"" - resize input to nearest odd height and width (if original height is odd then result height = original height - 1);""to_odd_up"" - resize input to nearest odd height and width (if original height is odd then result height = original height + 1);",QSTR output PARAM equals parameter PARAM if PARAM parameter is not defined or input PARAM multiplied by PARAM otherwise,,,,,QSTR
mxnet.ndarray.contrib.BilinearResize2D,mode,"resizing mode. ""simple"" - output height equals parameter ""height"" if ""scale_height"" parameter is not defined or input height multiplied by ""scale_height"" otherwise. Same for width;""odd_scale"" - if original height or width is odd, then result height is calculated like result_h = (original_h - 1) * scale + 1; for scale > 1 the result shape would be like if we did deconvolution with kernel = (1, 1) and stride = (height_scale, width_scale); and for scale < 1 shape would be like we did convolution with kernel = (1, 1) and stride = (int(1 / height_scale), int( 1/ width_scale);""like"" - resize first input to the height and width of second input; ""to_even_down"" - resize input to nearest lower even height and width (if original height is odd then result height = original height - 1);""to_even_up"" - resize input to nearest bigger even height and width (if original height is odd then result height = original height + 1);""to_odd_down"" - resize input to nearest odd height and width (if original height is odd then result height = original height - 1);""to_odd_up"" - resize input to nearest odd height and width (if original height is odd then result height = original height + 1);",Same for PARAM QSTR if original PARAM or PARAM is odd then result PARAM is calculated PARAM result_h BSTR scale CONSTANT_NUM for scale REXPR the result shape would be PARAM if we did deconvolution with kernel BSTR and stride BSTR and for scale REXPR shape would be PARAM we did convolution with kernel BSTR and stride BSTR PARAM resize first input to the PARAM and PARAM of second input QSTR resize input to nearest lower even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest bigger even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM,,,,,QSTR
mxnet.ndarray.contrib.BilinearResize2D,mode,"DD: {'like', 'odd_scale', 'size', 'to_even_down', 'to_even_up', 'to_odd_down', 'to_odd_up'},optional, default='size'",PARAM QSTR optional default QSTR,,,,,QSTR
mxnet.ndarray.contrib.BilinearResize2D,mode,DF: _Null,DEFAULT Null,,,,,QSTR
mxnet.contrib.quantization.quantize_graph,aux_params,Dictionary of name to NDArray.,D_STRUCTURE of name to D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.contrib.quantization.quantize_graph,aux_params,DD: dict,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.RNN,data,Input data to RNN,Input data to RNN,,D_STRUCTURE,,,,
mxnet.ndarray.RNN,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.RNN,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.io.ImageDetRecordIter,aug_seq,"Augmentation Param: the augmenter names to represent sequence of augmenters to be applied, seperated by comma. Additional keyword parameters will be seen by these augmenters. Make sure you don't use normal augmenters for detection tasks.",Augmentation Param the augmenter names to represent D_STRUCTURE of augmenters to be applied seperated by comma,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,aug_seq,"Augmentation Param: the augmenter names to represent sequence of augmenters to be applied, seperated by comma. Additional keyword parameters will be seen by these augmenters. Make sure you don't use normal augmenters for detection tasks.",Additional keyword parameters will be seen by these augmenters,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,aug_seq,"Augmentation Param: the augmenter names to represent sequence of augmenters to be applied, seperated by comma. Additional keyword parameters will be seen by these augmenters. Make sure you don't use normal augmenters for detection tasks.",Make sure you don t use normal augmenters for detection tasks,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,aug_seq,"DD: string, optional, default='det_aug_default'",D_TYPE optional default QSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.io.ImageDetRecordIter,aug_seq,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.backward_gradientmultiplier,scalar,scalar input,scalar input,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.backward_gradientmultiplier,scalar,DD: float,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.backward_gradientmultiplier,scalar,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.mp_lamb_update_phase1,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_lamb_update_phase1,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.mp_lamb_update_phase1,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.depth_to_space,data,Input ndarray,Input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.depth_to_space,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.depth_to_space,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiBoxDetection,loc_pred,Location regression predictions.,Location regression predictions,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiBoxDetection,loc_pred,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiBoxDetection,loc_pred,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.scatter_nd,data,data,ONE_WORD data,,D_STRUCTURE,,,,
mxnet.ndarray.scatter_nd,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.scatter_nd,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_poisson,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_poisson,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.random_poisson,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.cumsum,axis,Axis along which the cumulative sum is computed. The default (None) is to compute the cumsum over the flattened array.,Axis along which the cumulative sum is computed,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.cumsum,axis,Axis along which the cumulative sum is computed. The default (None) is to compute the cumsum over the flattened array.,The default BSTR is to compute the cumsum over the flattened D_STRUCTURE,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.cumsum,axis,"DD: int or None, optional, default='None'",D_TYPE or None optional default QSTR,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.op.cumsum,axis,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sparse.cosh,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.cosh,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sparse.cosh,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.ROIAlign,sample_ratio,"Optional sampling ratio of ROI align, using adaptive size by default.",Optional sampling ratio of ROI align using adaptive size by default,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.ROIAlign,sample_ratio,"DD: int, optional, default='-1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.contrib.ndarray.ROIAlign,sample_ratio,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.gluon.model_zoo.vision.inception_v3,root,Location for keeping the model parameters.,Location for keeping the model parameters,D_TYPE,,,,
mxnet.gluon.model_zoo.vision.inception_v3,root,"DD: str, default $MXNET_HOME/models",D_TYPE default MXNET_HOME models,D_TYPE,,,,
mxnet.gluon.model_zoo.vision.inception_v3,root,DF: /home/jenkins_slave/.mxnet/models,home jenkins_slave mxnet models,D_TYPE,,,,
mxnet.ndarray.broadcast_logical_or,rhs,Second input to the function,Second input to the function,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_logical_or,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.broadcast_logical_or,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.sample_uniform,shape,Shape to be sampled from each random distribution.,Shape to be sampled from each random distribution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.sample_uniform,shape,"DD: Shape(tuple), optional, default=[]",Shape BSTR optional default,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.sample_uniform,shape,DF: _Null,DEFAULT Null,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,"[0,inf)",
mxnet.metric.np,allow_extra_outputs,"Whether prediction output is allowed to have extra outputs. This is useful in cases like RNN where states are also part of output which can then be fed back to the RNN in the next step. By default, extra outputs are not allowed.",Whether prediction output is allowed to have extra outputs,D_TYPE,,CONSTANT_VAL,,
mxnet.metric.np,allow_extra_outputs,"Whether prediction output is allowed to have extra outputs. This is useful in cases like RNN where states are also part of output which can then be fed back to the RNN in the next step. By default, extra outputs are not allowed.",This is useful in cases like RNN where states are also part of output which can then be fed back to the RNN in the next step,D_TYPE,,CONSTANT_VAL,,
mxnet.metric.np,allow_extra_outputs,"Whether prediction output is allowed to have extra outputs. This is useful in cases like RNN where states are also part of output which can then be fed back to the RNN in the next step. By default, extra outputs are not allowed.",By default extra outputs are not allowed,D_TYPE,,CONSTANT_VAL,,
mxnet.metric.np,allow_extra_outputs,"DD: bool, optional",D_TYPE optional,D_TYPE,,CONSTANT_VAL,,
mxnet.metric.np,allow_extra_outputs,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg_gelqf,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_gelqf,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.linalg_gelqf,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.Embedding,weight,The embedding weight matrix.,The embedding weight matrix,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.Embedding,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.Embedding,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.gluon.nn.Conv3DTranspose,strides,Specify the strides of the convolution.,Specify the strides of the convolution,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3DTranspose,strides,DD: int or tuple/list of 3 int,D_TYPE or D_STRUCTURE of CONSTANT_NUM D_TYPE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.gluon.nn.Conv3DTranspose,strides,"DF: (1,1,1)",CONSTANT_NUM CONSTANT_NUM CONSTANT_NUM,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.op.GroupNorm,num_groups,Total number of groups.,Total number of groups,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.GroupNorm,num_groups,"DD: int, optional, default='1'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.GroupNorm,num_groups,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.RNNCell,i2h_weight_initializer,"Initializer for the input weights matrix, used for the linear transformation of the inputs.",Initializer for the input weights matrix used for the linear transformation of the inputs,D_TYPE,,,,
mxnet.gluon.rnn.RNNCell,i2h_weight_initializer,DD: str or Initializer,D_TYPE or Initializer,D_TYPE,,,,
mxnet.gluon.rnn.RNNCell,i2h_weight_initializer,DF: None,DEFAULT None,D_TYPE,,,,
mxnet.ndarray.op.elemwise_mul,rhs,second input,second input,,D_STRUCTURE,,,,
mxnet.ndarray.op.elemwise_mul,rhs,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.elemwise_mul,rhs,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.op.multi_mp_sgd_mom_update,momentum,The decay rate of momentum estimates at each epoch.,The decay rate of momentum estimates at each epoch,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.multi_mp_sgd_mom_update,momentum,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.op.multi_mp_sgd_mom_update,momentum,DF: None,DEFAULT None,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.image.CreateAugmenter,rand_mirror,Whether to apply horizontal flip to image with probability 0.5,Whether to apply horizontal flip to image with probability CONSTANT_FLOAT,D_TYPE,,CONSTANT_VAL,,
mxnet.image.CreateAugmenter,rand_mirror,DD: bool,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,,
mxnet.image.CreateAugmenter,rand_mirror,DF: False,DEFAULT CONSTANT_BOOL,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.linalg.potrf,A,Tensor of input matrices to be decomposed,D_STRUCTURE of input matrices to be decomposed,,D_STRUCTURE,,,,
mxnet.ndarray.linalg.potrf,A,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.linalg.potrf,A,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.erfinv,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.erfinv,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.erfinv,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.cast_storage,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.cast_storage,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.cast_storage,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.topk,dtype,"DType of the output indices when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices.",DType of the output indices when PARAM is QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.topk,dtype,"DType of the output indices when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices.",An error will be raised if the selected PARAM type cannot precisely represent the indices,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.topk,dtype,"DD: {'float16', 'float32', 'float64', 'int32', 'int64', 'uint8'},optional, default='float32'",QSTR optional default QSTR,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.topk,dtype,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,QSTR
mxnet.ndarray.mp_lamb_update_phase2,lr,Learning rate,Learning rate,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.mp_lamb_update_phase2,lr,"DD: float, required",D_TYPE required,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.ndarray.mp_lamb_update_phase2,lr,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,1]",
mxnet.gluon.rnn.LSTM,hidden_size,The number of features in the hidden state h.,The number of features in the hidden state h,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.gluon.rnn.LSTM,hidden_size,DD: int,ONE_WORD D_TYPE,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.sgd_mom_update,weight,Weight,ONE_WORD Weight,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.sgd_mom_update,weight,DD: NDArray,ONE_WORD D_STRUCTURE,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.op.sgd_mom_update,weight,DF: None,DEFAULT None,D_TYPE,D_STRUCTURE,,,,
mxnet.ndarray.ctc_loss,label,Ground-truth labels for the loss.,Ground truth labels for the loss,,D_STRUCTURE,,,,
mxnet.ndarray.ctc_loss,label,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.ctc_loss,label,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.contrib.ndarray.MultiProposal,rpn_pre_nms_top_n,Number of top scoring boxes to keep before applying NMS to RPN proposals,Number of top scoring boxes to keep before applying NMS to RPN proposals,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.MultiProposal,rpn_pre_nms_top_n,"DD: int, optional, default='6000'",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.contrib.ndarray.MultiProposal,rpn_pre_nms_top_n,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,"[0,inf)",
mxnet.ndarray.op.exp,data,The input array.,The input D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.exp,data,DD: NDArray,ONE_WORD D_STRUCTURE,,D_STRUCTURE,,,,
mxnet.ndarray.op.exp,data,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.ndarray.equal,rhs,"Second array to be compared. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.",Second D_STRUCTURE to be compared,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.equal,rhs,"Second array to be compared. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.",If PARAM shape rhs shape they must be broadcastable to a common shape,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.equal,rhs,DD: scalar or mxnet.ndarray.array,scalar or mxnet D_STRUCTURE D_STRUCTURE,D_TYPE,D_STRUCTURE,,CONSTANT_VAL,,
mxnet.ndarray.random_normal,loc,Mean of the distribution.,Mean of the distribution,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_normal,loc,"DD: float, optional, default=0",D_TYPE optional default CONSTANT_NUM,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.random_normal,loc,DF: _Null,DEFAULT Null,D_TYPE,,CONSTANT_VAL,,
mxnet.ndarray.sample_exponential,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.sample_exponential,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.sample_exponential,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
mxnet.io.ImageDetRecordIter,batch_size,Batch size.,Batch size,D_TYPE,,,"[0,inf)",
mxnet.io.ImageDetRecordIter,batch_size,"DD: int (non-negative), required",D_TYPE BSTR required,D_TYPE,,,"[0,inf)",
mxnet.ndarray.op.log1p,out,The output NDArray to hold the result.,The output D_STRUCTURE to hold the result,,D_STRUCTURE,,,,
mxnet.ndarray.op.log1p,out,"DD: NDArray, optional",D_STRUCTURE optional,,D_STRUCTURE,,,,
mxnet.ndarray.op.log1p,out,DF: None,DEFAULT None,,D_STRUCTURE,,,,
