sklearn.metrics.completeness_score = completeness_score(labels_true, labels_pred)
    Completeness metric of a cluster labeling given a ground truth.
    
    A clustering result satisfies completeness if all the data points
    that are members of a given class are elements of the same cluster.
    
    This metric is independent of the absolute values of the labels:
    a permutation of the class or cluster label values won't change the
    score value in any way.
    
    This metric is not symmetric: switching ``label_true`` with ``label_pred``
    will return the :func:`homogeneity_score` which will be different in
    general.
    
    Read more in the :ref:`User Guide <homogeneity_completeness>`.
    
    Parameters
    ----------
    labels_true : int array, shape = [n_samples]
        ground truth class labels to be used as a reference
    
    labels_pred : array-like of shape (n_samples,)
        cluster labels to evaluate
    
    Returns
    -------
    completeness : float
       score between 0.0 and 1.0. 1.0 stands for perfectly complete labeling
    
    References
    ----------
    
    .. [1] `Andrew Rosenberg and Julia Hirschberg, 2007. V-Measure: A
       conditional entropy-based external cluster evaluation measure
       <https://aclweb.org/anthology/D/D07/D07-1043.pdf>`_
    
    See also
    --------
    homogeneity_score
    v_measure_score
    
    Examples
    --------
    
    Perfect labelings are complete::
    
      >>> from sklearn.metrics.cluster import completeness_score
      >>> completeness_score([0, 0, 1, 1], [1, 1, 0, 0])
      1.0
    
    Non-perfect labelings that assign all classes members to the same clusters
    are still complete::
    
      >>> print(completeness_score([0, 0, 1, 1], [0, 0, 0, 0]))
      1.0
      >>> print(completeness_score([0, 1, 2, 3], [0, 0, 1, 1]))
      0.999...
    
    If classes members are split across different clusters, the
    assignment cannot be complete::
    
      >>> print(completeness_score([0, 0, 1, 1], [0, 1, 0, 1]))
      0.0
      >>> print(completeness_score([0, 0, 0, 0], [0, 1, 2, 3]))
      0.0