API,Arg,Descp,default,doc_dtype,Catrgory,Label,Extracted
mxnet.ndarray.contrib.quantized_conv,stride,"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",structure,['tuple'],[]
mxnet.ndarray.contrib.quantized_conv,stride,"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",shape,"['[d,h,w]', '[h,w]', '[w]']",[]
mxnet.ndarray.contrib.quantized_conv,stride,"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",ndim,"['1', '2', '3']",['1']
mxnet.ndarray.linalg.extracttrian,A,Tensor of square matrices,None,['NDArray'],dtype,['numeric'],[]
mxnet.ndarray.linalg.extracttrian,A,Tensor of square matrices,None,['NDArray'],tensor_t,['tensor'],[]
mxnet.ndarray.contrib.MultiBoxDetection,background_id,Background id.,_Null,"['int', 'optional', ""default='0'""]",range,"['[0,inf)']",[]
mxnet.gluon.model_zoo.vision.get_vgg,root,Location for keeping the model parameters.,/home/jenkins_slave/.mxnet/models,"['str', 'default $MXNET_HOME/models']",dtype,['string'],[]
mxnet.contrib.ndarray.requantize,max_calib_range,"The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8.",_Null,"['float', 'None', 'optional', 'default=None']",ndim,['0'],[]
mxnet.gluon.nn.Conv1DTranspose,bias_initializer,Initializer for the bias vector.,zeros,"['str', 'Initializer']",ndim,[],['0']
mxnet.gluon.nn.Conv1DTranspose,dilation,Controls the spacing between the kernel points; also known as the a trous algorithm,1,"['int', 'tuple/list of 1 int']",shape,['[1]'],[]
mxnet.io.ImageDetRecordIter,max_random_illumination,Augmentation Param: Maximum random value of L channel in HSL color space.,None,"['int', 'optional', ""default='0'""]",dtype,['int'],"['int', 'numeric']"
mxnet.io.ImageDetRecordIter,random_saturation_prob,Augmentation Param: Probability to apply random saturation.,None,"['float', 'optional', 'default=0']",range,"['[0,1]']",[]
mxnet.gluon.model_zoo.vision.get_resnet,ctx,The context in which to load the pretrained weights.,cpu(0),"['Context', 'default CPU']",dtype,['string'],['boolean']
mxnet.gluon.model_zoo.vision.get_resnet,ctx,The context in which to load the pretrained weights.,cpu(0),"['Context', 'default CPU']",ndim,[],['0']
mxnet.ndarray.softmax,length,The length array.,None,['NDArray'],dtype,['numeric'],[]
mxnet.ndarray.softmax,length,The length array.,None,['NDArray'],range,"['[0,inf)']",[]
mxnet.ndarray.sparse.cast_storage,stype,Output storage type.,_Null,"[""{'csr', 'default', 'row_sparse'}"", 'required']",enum,"['csr', 'default', 'row_sparse']",[]
mxnet.gluon.nn.Conv2D,kernel_size,Specifies the dimensions of the convolution window.,,"['int', 'tuple/list of 2 int']",shape,['[2]'],[]
mxnet.gluon.model_zoo.vision.resnet34_v1,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",dtype,[],['boolean']
mxnet.gluon.model_zoo.vision.resnet34_v1,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",ndim,[],['0']
mxnet.ndarray.op.SpatialTransformer,target_shape,"output shape(h, w) of spatial transformer: (y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[0,0]']",dtype,['int'],[]
mxnet.ndarray.op.SpatialTransformer,target_shape,"output shape(h, w) of spatial transformer: (y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[0,0]']",structure,['tuple'],[]
mxnet.ndarray.op.SpatialTransformer,target_shape,"output shape(h, w) of spatial transformer: (y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[0,0]']",ndim,['1'],[]
mxnet.ndarray.op.SpatialTransformer,target_shape,"output shape(h, w) of spatial transformer: (y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[0,0]']",range,"['[0,inf)']",[]
mxnet.ndarray.Deconvolution,dilate,"Dilation factor for each dimension of the input: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",structure,['tuple'],[]
mxnet.ndarray.Deconvolution,dilate,"Dilation factor for each dimension of the input: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",shape,"['[d,h,w]', '[h,w]', '[w]']",[]
mxnet.ndarray.Deconvolution,dilate,"Dilation factor for each dimension of the input: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension.",_Null,"['Shape(tuple)', 'optional', 'default=[]']",ndim,"['1', '2', '3']",['1']
mxnet.ndarray.topk,axis,"Axis along which to choose the top k indices. If not given, the flattened array is used. Default is -1.",_Null,"['int', 'None', 'optional', ""default='-1'""]",structure,[],['ndarray']
mxnet.ndarray.slice,begin,"starting indices for the slice operation, supports negative indices.",_Null,"['Shape(tuple)', 'required']",dtype,['int'],[]
mxnet.ndarray.slice,begin,"starting indices for the slice operation, supports negative indices.",_Null,"['Shape(tuple)', 'required']",structure,['tuple'],[]
mxnet.ndarray.slice,begin,"starting indices for the slice operation, supports negative indices.",_Null,"['Shape(tuple)', 'required']",range,"['[0,inf)']",[]
mxnet.gluon.rnn.LSTMCell,h2h_bias_initializer,Initializer for the bias vector.,zeros,"['str', 'Initializer', ""default 'zeros'""]",ndim,[],['0']
mxnet.ndarray.op.mp_sgd_update,weight32,Weight32,None,['NDArray'],dtype,['numeric'],[]
mxnet.gluon.nn.Conv3DTranspose,kernel_size,Specifies the dimensions of the convolution window.,,"['int', 'tuple/list of 3 int']",shape,['[3]'],[]
mxnet.gluon.nn.Conv3D,groups,"Controls the connections between inputs and outputs. At groups=1, all inputs are convolved to all outputs. At groups=2, the operation becomes equivalent to having two conv layers side by side, each seeing half the input channels, and producing half the output channels, and both subsequently concatenated.",1,['int'],enum,"['1', '2']",[]
mxnet.ndarray.op.reset_arrays,num_arrays,number of input arrays.,,"['int', 'required']",structure,[],['ndarray']
mxnet.gluon.nn.Conv1D,bias_initializer,Initializer for the bias vector.,zeros,"['str', 'Initializer']",ndim,[],['0']
mxnet.ndarray.contrib.quantized_act,min_data,Minimum value of data.,None,['NDArray'],dtype,[],['numeric']
mxnet.image.fixed_crop,size,"Optional, resize to new size after cropping",None,"['tuple of (w, h)']",dtype,['numeric'],[]
mxnet.image.fixed_crop,size,"Optional, resize to new size after cropping",None,"['tuple of (w, h)']",structure,['tuple'],[]
mxnet.image.fixed_crop,size,"Optional, resize to new size after cropping",None,"['tuple of (w, h)']",shape,['[2]'],[]
mxnet.ndarray.Softmax,ignore_label,"The instances whose labels == ignore_label will be ignored during backward, if use_ignore is set to `true`).",_Null,"['float', 'optional', 'default=-1']",dtype,['float'],"['boolean', 'float']"
mxnet.contrib.ndarray.RROIAlign,data,"Input data to the pooling operator, a 4D Feature maps",None,['NDArray'],ndim,['4'],[]
mxnet.ndarray.contrib.MultiBoxPrior,ratios,List of aspect ratios of generated MultiBoxPriores.,_Null,"['tuple of <float>', 'optional', 'default=[1]']",dtype,['float'],[]
mxnet.ndarray.contrib.MultiBoxPrior,ratios,List of aspect ratios of generated MultiBoxPriores.,_Null,"['tuple of <float>', 'optional', 'default=[1]']",structure,"['list', 'tuple']",[]
mxnet.ndarray.contrib.MultiBoxPrior,ratios,List of aspect ratios of generated MultiBoxPriores.,_Null,"['tuple of <float>', 'optional', 'default=[1]']",ndim,['1'],[]
mxnet.ndarray.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,None,['NDArray'],dtype,['int'],[]
mxnet.ndarray.CTCLoss,label_lengths,Lengths of labels for each of the samples. Only required when use_label_lengths is true.,None,['NDArray'],range,"['[0,inf)']",[]
mxnet.gluon.nn.AvgPool2D,padding,"If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points.",0,"['int', 'list/tuple of 2 ints,']",shape,['[2]'],[]
mxnet.gluon.nn.AvgPool2D,padding,"If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points.",0,"['int', 'list/tuple of 2 ints,']",range,[],"['[0,inf)']"
mxnet.ndarray.greater_equal,lhs,First array to be compared.,,"['scalar', 'mxnet.ndarray.array']",ndim,['0'],[]
mxnet.gluon.model_zoo.vision.mobilenet0_5,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",dtype,[],['boolean']
mxnet.gluon.model_zoo.vision.mobilenet0_5,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",ndim,[],['0']
mxnet.gluon.contrib.rnn.Conv3DGRUCell,h2h_bias_initializer,Initializer for the recurrent convolution bias vectors.,zeros,"['str', 'Initializer', 'default zeros']",ndim,[],['0']
mxnet.ndarray.mp_sgd_mom_update,weight,Weight,None,['NDArray'],dtype,['numeric'],[]
mxnet.gluon.model_zoo.vision.densenet169,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",dtype,[],['boolean']
mxnet.gluon.model_zoo.vision.densenet169,ctx,The context in which to load the pretrained weights.,None,"['Context', 'default CPU']",ndim,[],['0']
mxnet.gluon.model_zoo.vision.densenet169,root,Location for keeping the model parameters.,None,"['str', ""default '$MXNET_HOME/models'""]",dtype,['string'],[]
mxnet.ndarray.op.random_poisson,shape,Shape of the output.,_Null,"['Shape(tuple)', 'optional', 'default=None']",structure,['tuple'],[]
mxnet.ndarray.op.nag_mom_update,weight,Weight,None,['NDArray'],dtype,['numeric'],[]
mxnet.ndarray.contrib.Proposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",dtype,['float'],[]
mxnet.ndarray.contrib.Proposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",structure,['tuple'],[]
mxnet.ndarray.contrib.Proposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",ndim,['1'],[]
mxnet.gluon.contrib.rnn.Conv2DGRUCell,activation,"Type of activation function used in n_t. If argument type is string, it's equivalent to nn.Activation(act_type=str). See `Activation()` for available choices. Alternatively, other activation blocks such as nn.LeakyReLU can be used.",tanh,"['str', 'gluon.Block', ""default 'tanh'""]",ndim,[],['0']
mxnet.test_utils.chi_square_check,probs,The ground-truth probability of the random value fall in a specific bucket.,,"['list', 'tuple']",dtype,['float'],[]
mxnet.test_utils.chi_square_check,probs,The ground-truth probability of the random value fall in a specific bucket.,,"['list', 'tuple']",range,"['[0,1]']",[]
mxnet.ndarray.op.multi_mp_sgd_update,*data,Weights,,['NDArray[]'],dtype,['numeric'],[]
mxnet.contrib.ndarray.PSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",None,['Symbol'],dtype,['numeric'],[]
mxnet.contrib.ndarray.PSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",None,['Symbol'],structure,[],['ndarray']
mxnet.contrib.ndarray.PSROIPooling,rois,"Bounding box coordinates, a 2D array of [[batch_index, x1, y1, x2, y2]]. (x1, y1) and (x2, y2) are top left and down right corners of designated region of interest. batch_index indicates the index of corresponding image in the input data",None,['Symbol'],ndim,['2'],[]
mxnet.random.seed,ctx,"The device context of the generator. The default is ""all"" which means seeding random number generators of all devices.",all,['Context'],ndim,[],['0']
mxnet.gluon.nn.GroupNorm,scale,"If True, multiply by gamma. If False, gamma is not used.",True,"['bool', 'default True']",dtype,['boolean'],[]
mxnet.gluon.nn.GroupNorm,scale,"If True, multiply by gamma. If False, gamma is not used.",True,"['bool', 'default True']",ndim,['0'],[]
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,i2h_dilate,Input convolution dilate.,"(1,)","['int', 'tuple of int', 'default (1,)']",structure,"['tuple(int)', 'tuple']",['tuple']
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,i2h_dilate,Input convolution dilate.,"(1,)","['int', 'tuple of int', 'default (1,)']",ndim,['1'],"['0', '1']"
mxnet.gluon.nn.LayerNorm,beta_initializer,Initializer for the beta weight.,zeros,"['str', 'Initializer', 'default ‘zeros’']",ndim,[],['0']
mxnet.ndarray.contrib.quantized_fully_connected,flatten,Whether to collapse all but the first axis of the input data tensor.,_Null,"['boolean', 'optional', 'default=1']",tensor_t,[],['tensor']
mxnet.ndarray.sample_uniform,low,Lower bounds of the distributions.,None,['NDArray'],dtype,['numeric'],[]
mxnet.gluon.nn.Dense,use_bias,Whether the layer uses a bias vector.,True,"['bool', 'default True']",dtype,['boolean'],[]
mxnet.gluon.nn.Dense,use_bias,Whether the layer uses a bias vector.,True,"['bool', 'default True']",ndim,['0'],[]
mxnet.ndarray.op.sum,axis,"The axis or axes along which to perform the reduction.  The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a tuple of ints, a reduction is performed on all the axes specified in the tuple. If exclude is true, reduction will be performed on the axes that are NOT in axis instead. Negative values means indexing from right to left.  ",_Null,"['Shape', 'None', 'optional', 'default=None']",ndim,"['0', '1']",['1']
mxnet.ndarray.contrib.PSROIPooling,pooled_size,fix pooled size,_Null,"['int', 'required']",range,"['[0,inf)']",[]
mxnet.gluon.rnn.GRU,i2h_bias_initializer,Initializer for the bias vector.,zeros,"['str', 'Initializer']",ndim,[],['0']
mxnet.image.imresize,w,Width of resized image.,,"['int', 'required']",range,"['[0,inf)']",[]
mxnet.ndarray.SoftmaxActivation,mode,"Specifies how to compute the softmax. If set to `instance`, it computes softmax for each instance. If set to `channel`, It computes cross channel softmax for each position of each instance.",_Null,"[""{'channel', 'instance'}"", 'optional', ""default='instance'""]",dtype,[],['boolean']
mxnet.ndarray.SoftmaxActivation,mode,"Specifies how to compute the softmax. If set to `instance`, it computes softmax for each instance. If set to `channel`, It computes cross channel softmax for each position of each instance.",_Null,"[""{'channel', 'instance'}"", 'optional', ""default='instance'""]",ndim,[],['0']
mxnet.gluon.nn.AvgPool3D,ceil_mode,"When True, will use ceil instead of floor to compute the output shape.",False,"['bool', 'default False']",dtype,['boolean'],[]
mxnet.gluon.nn.AvgPool3D,layout,"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension.",NCDHW,"['str', ""default 'NCDHW'""]",ndim,[],['0']
mxnet.gluon.nn.AvgPool3D,layout,"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension.",NCDHW,"['str', ""default 'NCDHW'""]",enum,"['NCDHW', 'NDHWC']",[]
mxnet.gluon.nn.AvgPool3D,padding,"If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points.",0,"['int', 'list/tuple of 3 ints,']",shape,['[3]'],[]
mxnet.gluon.nn.AvgPool3D,padding,"If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points.",0,"['int', 'list/tuple of 3 ints,']",range,[],"['[0,inf)']"
mxnet.ndarray.random.negative_binomial_like,name,,None,,dtype,['string'],[]
mxnet.ndarray.random.negative_binomial_like,name,,None,,ndim,['0'],[]
mxnet.ndarray.contrib.dgl_graph_compact,graph_sizes,the number of vertices in each graph.,,"['tuple of <long>', 'required']",dtype,['numpy.int64'],['int']
mxnet.ndarray.contrib.dgl_graph_compact,graph_sizes,the number of vertices in each graph.,,"['tuple of <long>', 'required']",structure,['tuple'],[]
mxnet.ndarray.contrib.dgl_graph_compact,graph_sizes,the number of vertices in each graph.,,"['tuple of <long>', 'required']",ndim,[],['0']
mxnet.ndarray.contrib.MultiProposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",dtype,['float'],[]
mxnet.ndarray.contrib.MultiProposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",structure,['tuple'],[]
mxnet.ndarray.contrib.MultiProposal,scales,Used to generate anchor windows by enumerating scales,_Null,"['tuple of <float>', 'optional', 'default=[4,8,16,32]']",ndim,['1'],[]
mxnet.ndarray.contrib.quantized_pooling,kernel,"Pooling kernel size: (y, x) or (d, y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[]']",structure,['tuple'],[]
mxnet.ndarray.contrib.quantized_pooling,kernel,"Pooling kernel size: (y, x) or (d, y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[]']",shape,"['[d,y,x]', '[y,x]']",[]
mxnet.ndarray.contrib.quantized_pooling,kernel,"Pooling kernel size: (y, x) or (d, y, x)",_Null,"['Shape(tuple)', 'optional', 'default=[]']",ndim,"['2', '3']",['1']
mxnet.ndarray.linalg.gemm2,B,Tensor of input matrices,None,['NDArray'],dtype,['numeric'],[]
mxnet.ndarray.op.broadcast_axis,axis,The axes to perform the broadcasting.,_Null,"['Shape(tuple)', 'optional', 'default=[]']",structure,['tuple'],[]
mxnet.ndarray.sparse.row_sparse_array,dtype,The data type of the output array. (Default value = None),None,"['str', 'numpy.dtype', 'optional']",structure,[],['ndarray']
