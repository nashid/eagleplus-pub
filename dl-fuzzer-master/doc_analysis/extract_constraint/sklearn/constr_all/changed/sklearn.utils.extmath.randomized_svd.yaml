constraints:
  M:
    descp: ndarray or sparse matrix Matrix to decompose
    dtype:
    - numeric
  flip_sign:
    default: 'True'
    descp: boolean, (True by default) The output of a singular value decomposition
      is only unique up to a permutation of the signs of the singular vectors. If
      `flip_sign` is set to `True`, the sign ambiguity is resolved by making the largest
      loadings for each component in the left singular vectors positive.
    dtype:
    - boolean
    ndim:
    - '0'
  n_components:
    descp: int Number of singular values and vectors to extract.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  n_iter:
    default: auto
    descp: int or 'auto' (default is 'auto') Number of power iterations. It can be
      used to deal with very noisy problems. When 'auto', it is set to 4, unless `n_components`
      is small (< .1 * min(X.shape)) `n_iter` in which case is set to 7. This improves
      precision with few components.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  n_oversamples:
    default: '10'
    descp: int (default is 10) Additional number of random vectors to sample the range
      of M so as to ensure proper conditioning. The total number of random vectors
      used to find the range of M is n_components + n_oversamples. Smaller number
      can improve speed but can negatively impact the quality of approximation of
      singular vectors and singular values.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  power_iteration_normalizer:
    default: auto
    descp: '''auto'' (default), ''QR'', ''LU'', ''none'' Whether the power iterations
      are normalized with step-by-step QR factorization (the slowest but most accurate),
      ''none'' (the fastest but numerically unstable when `n_iter` is large, e.g.
      typically 5 or larger), or ''LU'' factorization (numerically stable but can
      lose slightly in accuracy). The ''auto'' mode applies no normalization if `n_iter`
      <= 2 and switches to LU otherwise.'
    dtype:
    - boolean
  random_state:
    default: '0'
    descp: int, RandomState instance or None, optional (default=None) The seed of
      the pseudo random number generator to use when shuffling the data.  If int,
      random_state is the seed used by the random number generator; If RandomState
      instance, random_state is the random number generator; If None, the random number
      generator is the RandomState instance used by `np.random`.
    dtype:
    - int
    ndim:
    - '0'
  transpose:
    default: auto
    descp: True, False or 'auto' (default) Whether the algorithm should be applied
      to M.T instead of M. The result should approximately be the same. The 'auto'
      mode will trigger the transposition if M.shape[1] > M.shape[0] since this implementation
      of randomized SVD tend to be a little faster in that case.
    dtype:
    - boolean
    ndim:
    - '1'
    shape:
    - '[0]'
    - '[1]'
inputs:
  optional:
  - n_oversamples
  - n_iter
  - power_iteration_normalizer
  - transpose
  - flip_sign
  - random_state
  required:
  - M
  - n_components
link: ''
package: sklearn
target: randomized_svd
title: sklearn.utils.extmath.randomized_svd
version: 0.24.2
