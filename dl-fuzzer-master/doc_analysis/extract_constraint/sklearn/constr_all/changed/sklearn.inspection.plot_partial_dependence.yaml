constraints:
  X:
    descp: '{array-like or dataframe} of shape (n_samples, n_features) The data to
      use to build the grid of values on which the dependence will be evaluated. This
      is usually the training data.'
    ndim:
    - '2'
    shape:
    - '[n_samples,n_features]'
  ax:
    default: None
    descp: 'Matplotlib axes or array-like of Matplotlib axes, default=None - If a
      single axis is passed in, it is treated as a bounding axes and a grid of partial
      dependence plots will be drawn within these bounds. The `n_cols` parameter controls
      the number of columns in the grid. - If an array-like of axes are passed in,
      the partial dependence plots will be drawn directly into these axes. - If `None`,
      a figure and a bounding axes is created and treated as the single axes case. '
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  contour_kw:
    default: None
    descp: dict, optional Dict with keywords passed to the ``matplotlib.pyplot.contourf``
      call. For two-way partial dependence plots.
  estimator:
    descp: BaseEstimator A fitted estimator object implementing :term:`predict`, :term:`predict_proba`,
      or :term:`decision_function`. Multioutput-multiclass classifiers are not supported.
  feature_names:
    default: None
    descp: array-like of shape (n_features,), dtype=str, default=None Name of each
      feature; feature_names[i] holds the name of the feature with index i. By default,
      the name of the feature corresponds to their numerical index for NumPy array
      and their column name for pandas dataframe.
    ndim:
    - '1'
    shape:
    - '[n_features]'
  features:
    descp: list of {int, str, pair of int, pair of str} The target features for which
      to create the PDPs. If features[i] is an int or a string, a one-way PDP is created;
      if features[i] is a tuple, a two-way PDP is created. Each tuple must be of size
      2. if any entry is a string, then it must be in ``feature_names``.
    ndim:
    - '1'
  fig:
    default: None
    descp: Matplotlib figure object, optional (default=None) A figure object onto
      which the plots will be drawn, after the figure has been cleared. By default,
      a new one is created.
  grid_resolution:
    default: '100'
    descp: int, optional (default=100) The number of equally spaced points on the
      axes of the plots, for each target feature.
    dtype:
    - int
    ndim:
    - '0'
  line_kw:
    default: None
    descp: dict, optional Dict with keywords passed to the ``matplotlib.pyplot.plot``
      call. For one-way partial dependence plots.
  method:
    default: auto
    descp: 'str, optional (default=''auto'') The method to use to calculate the partial
      dependence predictions: - ''recursion'' is only supported for gradient boosting
      estimator (namely :class:`GradientBoostingClassifier<sklearn.ensemble.GradientBoostingClassifier>`,
      :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>`,
      :class:`HistGradientBoostingClassifier<sklearn.ensemble.HistGradientBoostingClassifier>`,
      :class:`HistGradientBoostingRegressor<sklearn.ensemble.HistGradientBoostingRegressor>`)
      but is more efficient in terms of speed. With this method, ``X`` is optional
      and is only used to build the grid and the partial dependences are computed
      using the training data. This method does not account for the ``init`` predictor
      of the boosting process, which may lead to incorrect values (see warning below.
      With this method, the target response of a classifier is always the decision
      function, not the predicted probabilities. - ''brute'' is supported for any
      estimator, but is more computationally intensive. - ''auto'': - ''recursion''
      is used for estimators that supports it. - ''brute'' is used for all other estimators.'
    dtype:
    - string
    ndim:
    - '0'
  n_cols:
    default: '3'
    descp: int, optional (default=3) The maximum number of columns in the grid plot.
      Only active when `ax` is a single axis or `None`.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  n_jobs:
    default: None
    descp: int, optional (default=None) The number of CPUs to use to compute the partial
      dependences. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
      ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  percentiles:
    default: (0.05, 0.95)
    descp: tuple of float, optional (default=(0.05, 0.95)) The lower and upper percentile
      used to create the extreme values for the PDP axes. Must be in [0, 1].
    dtype:
    - float
    ndim:
    - '1'
    range:
    - '[0,1]'
  response_method:
    default: auto
    descp: '''auto'', ''predict_proba'' or ''decision_function'',             optional
      (default=''auto'') Specifies whether to use :term:`predict_proba` or :term:`decision_function`
      as the target response. For regressors this parameter is ignored and the response
      is always the output of :term:`predict`. By default, :term:`predict_proba` is
      tried first and we revert to :term:`decision_function` if it doesn''t exist.
      If ``method`` is ''recursion'', the response is always the output of :term:`decision_function`.'
    dtype:
    - boolean
  target:
    default: None
    descp: int, optional (default=None) - In a multiclass setting, specifies the class
      for which the PDPs should be computed. Note that for binary classification,
      the positive class (index 1) is always used. - In a multioutput setting, specifies
      the task for which the PDPs should be computed. Ignored in binary classification
      or classical regression settings.
    dtype:
    - int
    ndim:
    - '0'
  verbose:
    default: '0'
    descp: int, optional (default=0) Verbose output during PD computations.
    dtype:
    - int
    ndim:
    - '0'
dependency:
- n_features
- n_samples
inputs:
  optional:
  - feature_names
  - target
  - response_method
  - n_cols
  - grid_resolution
  - percentiles
  - method
  - n_jobs
  - verbose
  - fig
  - line_kw
  - contour_kw
  - ax
  required:
  - estimator
  - X
  - features
link: ''
package: sklearn
target: plot_partial_dependence
title: sklearn.inspection.plot_partial_dependence
version: 0.24.2
