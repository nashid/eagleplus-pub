constraints:
  '**kwargs':
    default: null
    descp: ''
    normalized_descp: []
  activation:
    default: tanh
    descp: 'Activation function to use. Default: hyperbolic tangent (`tanh`). If you
      pass None, no activation is applied (ie. "linear" activation: `a(x) = x`).'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Activation function to use
    - Default hyperbolic tangent QSTR
    - If you pass None, no activation is applied ie
    - QSTR activation a BSTR x
  bias_constraint:
    default: None
    descp: Constraint function applied to the bias vector. Default:`None`.
    normalized_default: DEFAULT None
    normalized_descp:
    - Constraint function applied to the bias D_STRUCTURE
    - Default QSTR
  bias_initializer:
    default: zeros
    descp: 'Initializer for the bias vector. Default: `zeros`.'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Initializer for the bias D_STRUCTURE
    - Default QSTR
  bias_regularizer:
    default: None
    descp: Regularizer function applied to the bias vector. Default:`None`.
    normalized_default: DEFAULT None
    normalized_descp:
    - Regularizer function applied to the bias D_STRUCTURE
    - Default QSTR
  dropout:
    default: '0.0'
    descp: 'Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the inputs. Default: 0.'
    normalized_default: DEFAULT CONSTANT_FLOAT
    normalized_descp:
    - D_TYPE between CONSTANT_NUM
    - Fraction of the PARAM to drop for the linear transformation of the inputs
    - Default CONSTANT_NUM
  implementation:
    default: '2'
    descp: 'Implementation mode, either 1 or 2. Mode 1 will structure its operations
      as a larger number of smaller dot products and additions, whereas mode 2 (default)
      will batch them into fewer, larger operations. These modes will have different
      performance profiles on different hardware and for different applications. Default:
      2.'
    normalized_default: DEFAULT CONSTANT_NUM
    normalized_descp:
    - Implementation mode, either CONSTANT_NUM
    - Mode CONSTANT_NUM will structure its operations as a larger number of smaller
      dot products and additions, whereas mode CONSTANT_NUM BSTR will batch them into
      fewer, larger operations
    - These modes will have different performance profiles on different hardware and
      for different applications
    - Default CONSTANT_NUM
  kernel_constraint:
    default: None
    descp: 'Constraint function applied to the `kernel` weights matrix. Default: `None`.'
    normalized_default: DEFAULT None
    normalized_descp:
    - Constraint function applied to the QSTR weights matrix
    - Default QSTR
  kernel_initializer:
    default: glorot_uniform
    descp: Initializer for the `kernel` weights matrix, used for the linear transformation
      of the inputs. Default:`glorot_uniform`.
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Initializer for the QSTR weights matrix, used for the linear transformation
      of the inputs
    - Default QSTR
  kernel_regularizer:
    default: None
    descp: 'Regularizer function applied to the `kernel` weights matrix. Default:
      `None`.'
    normalized_default: DEFAULT None
    normalized_descp:
    - Regularizer function applied to the QSTR weights matrix
    - Default QSTR
  recurrent_activation:
    default: sigmoid
    descp: 'Activation function to use for the recurrent step. Default: sigmoid (`sigmoid`).
      If you pass `None`, no activation is applied (ie. "linear" activation: `a(x)
      = x`).'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - PARAM function to use for the recurrent step
    - Default sigmoid QSTR
    - If you pass QSTR , no PARAM is applied ie
    - QSTR PARAM a BSTR x
  recurrent_constraint:
    default: None
    descp: 'Constraint function applied to the `recurrent_kernel`weights matrix. Default:
      `None`.'
    normalized_default: DEFAULT None
    normalized_descp:
    - Constraint function applied to the QSTR weights matrix
    - Default QSTR
  recurrent_dropout:
    default: '0.0'
    descp: 'Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the recurrent state. Default: 0.'
    normalized_default: DEFAULT CONSTANT_FLOAT
    normalized_descp:
    - D_TYPE between CONSTANT_NUM
    - Fraction of the PARAM to drop for the linear transformation of the recurrent
      state
    - Default CONSTANT_NUM
  recurrent_initializer:
    default: orthogonal
    descp: 'Initializer for the `recurrent_kernel`weights matrix, used for the linear
      transformation of the recurrent state. Default: `orthogonal`.'
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Initializer for the QSTR weights matrix, used for the linear transformation
      of the recurrent state
    - Default QSTR
  recurrent_regularizer:
    default: None
    descp: 'Regularizer function applied to the`recurrent_kernel` weights matrix.
      Default: `None`.'
    normalized_default: DEFAULT None
    normalized_descp:
    - Regularizer function applied to the QSTR weights matrix
    - Default QSTR
  reset_after:
    default: 'True'
    descp: GRU convention (whether to apply reset gate after or before matrix multiplication).
      False = "before", True = "after" (default and CuDNN compatible).
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - GRU convention BSTR
    - CONSTANT_BOOL QSTR , CONSTANT_BOOL QSTR BSTR
  units:
    descp: Positive integer, dimensionality of the output space.
    normalized_descp:
    - Positive D_TYPE, dimensionality of the output space
  use_bias:
    default: 'True'
    descp: Boolean, (default `True`), whether the layer uses a bias vector.
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - D_TYPE, default CONSTANT_BOOL , whether the layer uses a bias D_STRUCTURE
inputs:
  optional:
  - activation
  - recurrent_activation
  - use_bias
  - kernel_initializer
  - recurrent_initializer
  - bias_initializer
  - kernel_regularizer
  - recurrent_regularizer
  - bias_regularizer
  - kernel_constraint
  - recurrent_constraint
  - bias_constraint
  - dropout
  - recurrent_dropout
  - implementation
  - reset_after
  - '**kwargs'
  required:
  - units
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/keras/layers/GRUCell
outputs: List of mask tensor, generated or cached mask based on context.
package: tensorflow
target: GRUCell
title: tf.keras.layers.GRUCell
version: 2.1.0
