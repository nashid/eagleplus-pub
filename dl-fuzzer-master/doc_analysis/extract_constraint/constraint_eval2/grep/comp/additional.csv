File,Arg,Type,Constr,Descp
mxnet.ndarray.op.ctc_loss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.op.SequenceReverse,axis,nonprim_dtype,['sequence'],The sequence axis. Only 0 is currently supported.
mxnet.ndarray.op.SequenceReverse,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.stack,axis,nonprim_dtype,['ndarray'],The axis in the result array along which the input arrays are stacked.
mxnet.ndarray.diag,axis1,nonprim_dtype,['ndarray'],The first axis of the sub-arrays of interest. Ignored when the input is a 1-D array.
mxnet.ndarray.diag,axis2,nonprim_dtype,['ndarray'],The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.
mxnet.ndarray.op.SequenceMask,axis,nonprim_dtype,['sequence'],The sequence axis. Only values of 0 and 1 are currently supported.
mxnet.ndarray.op.SequenceMask,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.image.resize_short,src,prim_dtype,['numeric'],The original image.
mxnet.ndarray.op.diag,axis1,nonprim_dtype,['ndarray'],The first axis of the sub-arrays of interest. Ignored when the input is a 1-D array.
mxnet.ndarray.op.diag,axis2,nonprim_dtype,['ndarray'],The second axis of the sub-arrays of interest. Ignored when the input is a 1-D array.
mxnet.contrib.ndarray.ctc_loss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.arange,dtype,nonprim_dtype,['ndarray'],The data type of the NDArray. The default datatype is np.float32.
mxnet.ndarray.SequenceLast,axis,nonprim_dtype,['sequence'],The sequence axis. Only values of 0 and 1 are currently supported.
mxnet.ndarray.SequenceLast,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.reset_arrays,num_arrays,nonprim_dtype,['ndarray'],number of input arrays.
mxnet.ndarray.op.CTCLoss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.multi_sum_sq,num_arrays,nonprim_dtype,['ndarray'],number of input arrays.
mxnet.io.ImageDetRecordIter,aug_seq,nonprim_dtype,['sequence'],"Augmentation Param: the augmenter names to represent sequence of augmenters to be applied, seperated by comma. Additional keyword parameters will be seen by these augmenters. Make sure you don't use normal augmenters for detection tasks."
mxnet.io.ImageDetRecordIter,path_imglist,nonprim_dtype,['list'],Dataset Param: Path to image list.
mxnet.io.ImageDetRecordIter,resize_mode,prim_dtype,['numeric'],"Augmentation Param: How image data fit in data_shape. force: force reshape to data_shape regardless of aspect ratio; shrink: ensure each side fit in data_shape, preserve aspect ratio; fit: fit image to data_shape, preserve ratio, will upscale if applicable."
mxnet.gluon.rnn.LSTM,layout,nonprim_dtype,['sequence'],"The format of input and output tensors. T, N and C stand for sequence length, batch size, and feature dimensions respectively."
mxnet.recordio.pack,header,prim_dtype,['numeric'],Header of the image record. `header.label` can be a number or an array. See more detail in `IRHeader`.
mxnet.ndarray.random.normal,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by loc.context when loc is an NDArray.
mxnet.ndarray.op.split,squeeze_axis,nonprim_dtype,['ndarray'],"If true, Removes the axis with length 1 from the shapes of the output arrays. Note that setting squeeze_axis to `true` removes axis with length 1 only along the axis which it is split. Also squeeze_axis can be set to `true` only if `input.shape[axis] == num_outputs`."
mxnet.test_utils.np_reduce,numpy_reduce_func,prim_dtype,['int'],A NumPy reducing function like `np.sum` or `np.max`.
mxnet.ndarray.expand_dims,axis,nonprim_dtype,['ndarray'],"Position where new axis is to be inserted. Suppose that the input NDArray's dimension is ndim, the range of the inserted axis is [-ndim, ndim]"
mxnet.ndarray.random.randn,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by loc.context when loc is an NDArray.
mxnet.contrib.quantization.quantize_net,calib_data,nonprim_dtype,['list'],A iterable data loading object.
mxnet.contrib.quantization.quantize_net,network,prim_dtype,['numpy.float32'],Defines the structure of a neural network for FP32 data types.
mxnet.ndarray.op.multi_sum_sq,num_arrays,nonprim_dtype,['ndarray'],number of input arrays.
mxnet.image.copyMakeBorder,src,prim_dtype,['numeric'],source image
mxnet.ndarray.split_v2,squeeze_axis,nonprim_dtype,['ndarray'],"Whether to squeeze the axis of sub-arrays or not, only useful when size of the sub-arrays are 1 on the axis. Default is False."
mxnet.ndarray.linspace,dtype,nonprim_dtype,['ndarray'],The data type of the NDArray. The default datatype is np.float32.
mxnet.ndarray.linspace,stop,nonprim_dtype,['sequence'],"End of interval, unless endpoint is set to False.  In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False."
mxnet.ndarray.contrib.BilinearResize2D,mode,prim_dtype,['int'],"resizing mode. ""simple"" - output height equals parameter ""height"" if ""scale_height"" parameter is not defined or input height multiplied by ""scale_height"" otherwise. Same for width;""odd_scale"" - if original height or width is odd, then result height is calculated like result_h = (original_h - 1) * scale + 1; for scale > 1 the result shape would be like if we did deconvolution with kernel = (1, 1) and stride = (height_scale, width_scale); and for scale < 1 shape would be like we did convolution with kernel = (1, 1) and stride = (int(1 / height_scale), int( 1/ width_scale);""like"" - resize first input to the height and width of second input; ""to_even_down"" - resize input to nearest lower even height and width (if original height is odd then result height = original height - 1);""to_even_up"" - resize input to nearest bigger even height and width (if original height is odd then result height = original height + 1);""to_odd_down"" - resize input to nearest odd height and width (if original height is odd then result height = original height - 1);""to_odd_up"" - resize input to nearest odd height and width (if original height is odd then result height = original height + 1);"
mxnet.ndarray.array,dtype,nonprim_dtype,['ndarray'],"The data type of the output array. The default dtype is `source_array.dtype` if source_array is an NDArray, float32 otherwise."
mxnet.ndarray.SequenceMask,axis,nonprim_dtype,['sequence'],The sequence axis. Only values of 0 and 1 are currently supported.
mxnet.ndarray.SequenceMask,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.random.negative_binomial,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by k.context when k is an NDArray.
mxnet.ndarray.contrib.ctc_loss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.op.multi_all_finite,num_arrays,nonprim_dtype,['ndarray'],Number of arrays.
mxnet.ndarray.random.randint,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by low.context when low is an NDArray.
mxnet.ndarray.op.reset_arrays,num_arrays,nonprim_dtype,['ndarray'],number of input arrays.
mxnet.ndarray.op.SequenceLast,axis,nonprim_dtype,['sequence'],The sequence axis. Only values of 0 and 1 are currently supported.
mxnet.ndarray.op.SequenceLast,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.random.poisson,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by lam.context when lam is an NDArray.
mxnet.ndarray.from_numpy,zero_copy,nonprim_dtype,['ndarray'],"Whether we use DLPack's zero-copy conversion to convert to MXNet's NDArray. This is only available for c-contiguous arrays, i.e. array.flags[C_CONTIGUOUS] == True."
mxnet.ndarray.contrib.boolean_mask,axis,nonprim_dtype,['ndarray'],An integer that represents the axis in NDArray to mask from.
mxnet.ndarray.utils.array,dtype,nonprim_dtype,['ndarray'],"The data type of the output array. The default dtype is `source_array.dtype` if source_array is an NDArray, float32 otherwise."
mxnet.ndarray.multi_all_finite,num_arrays,nonprim_dtype,['ndarray'],Number of arrays.
mxnet.ndarray.RNN,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.CTCLoss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.UpSampling,multi_input_mode,prim_dtype,['numeric'],"How to handle multiple input. concat means concatenate upsampled images along the channel dimension. sum means add all images together, only available for nearest neighbor upsampling."
mxnet.ndarray.op.norm,axis,nonprim_dtype,['tuple'],"The axis or axes along which to perform the reduction.The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed.   "
mxnet.ndarray.norm,axis,nonprim_dtype,['tuple'],"The axis or axes along which to perform the reduction.The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed.   "
mxnet.ndarray.ctc_loss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.metric.create,**kwargs,prim_dtype,['string'],Additional arguments to metric constructor. Only used when metric is str
mxnet.metric.create,*args,prim_dtype,['string'],Additional arguments to metric constructor. Only used when metric is str.
mxnet.metric.create,metric,prim_dtype,['string'],Specifies the metric to create. This argument must be one of the below:  Name of a metric.
mxnet.io.ImageRecordIter,aug_seq,nonprim_dtype,['sequence'],"The augmenter names to represent sequence of augmenters to be applied, seperated by comma. Additional keyword parameters will be seen by these augmenters."
mxnet.io.ImageRecordIter,device_id,nonprim_dtype,['ndarray'],The device id used to create context for internal NDArray. Setting device_id to -1 will create Context::CPU(0). Setting device_id to valid positive device id will create Context::CPUPinned(device_id). Default is 0.
mxnet.io.ImageRecordIter,path_imglist,nonprim_dtype,['list'],Path to the image list (.lst) file. Generally created with tools/im2rec.py. Format (Tab separated): <index of record>       <one or more labels>    <relative path from root folder>.
mxnet.ndarray.random.generalized_negative_binomial,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by mu.context when mu is an NDArray.
mxnet.contrib.ndarray.BilinearResize2D,mode,prim_dtype,['int'],"resizing mode. ""simple"" - output height equals parameter ""height"" if ""scale_height"" parameter is not defined or input height multiplied by ""scale_height"" otherwise. Same for width;""odd_scale"" - if original height or width is odd, then result height is calculated like result_h = (original_h - 1) * scale + 1; for scale > 1 the result shape would be like if we did deconvolution with kernel = (1, 1) and stride = (height_scale, width_scale); and for scale < 1 shape would be like we did convolution with kernel = (1, 1) and stride = (int(1 / height_scale), int( 1/ width_scale);""like"" - resize first input to the height and width of second input; ""to_even_down"" - resize input to nearest lower even height and width (if original height is odd then result height = original height - 1);""to_even_up"" - resize input to nearest bigger even height and width (if original height is odd then result height = original height + 1);""to_odd_down"" - resize input to nearest odd height and width (if original height is odd then result height = original height - 1);""to_odd_up"" - resize input to nearest odd height and width (if original height is odd then result height = original height + 1);"
mxnet.ndarray.random.uniform,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by low.context when low is an NDArray.
mxnet.ndarray.op.RNN,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.ndarray.SequenceReverse,axis,nonprim_dtype,['sequence'],The sequence axis. Only 0 is currently supported.
mxnet.ndarray.SequenceReverse,use_sequence_length,nonprim_dtype,['sequence'],"If set to true, this layer takes in an extra input parameter sequence_length to specify variable length sequence"
mxnet.util.set_np,array,nonprim_dtype,['ndarray'],"A boolean value indicating whether the NumPy-array semantics should be turned on or off. When this flag is set to True, it enables Gluon code flow to use or generate mxnet.numpy.ndarray`s instead of `mxnet.ndarray.NDArray. For example, a Block would create parameters of type mxnet.numpy.ndarray."
mxnet.ndarray.random.gamma,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by alpha.context when alpha is an NDArray.
mxnet.ndarray.split,squeeze_axis,nonprim_dtype,['ndarray'],"If true, Removes the axis with length 1 from the shapes of the output arrays. Note that setting squeeze_axis to `true` removes axis with length 1 only along the axis which it is split. Also squeeze_axis can be set to `true` only if `input.shape[axis] == num_outputs`."
mxnet.gluon.nn.Embedding,sparse_grad,nonprim_dtype,['ndarray'],"If True, gradient w.r.t. weight will be a 'row_sparse' NDArray."
mxnet.ndarray.op.expand_dims,axis,nonprim_dtype,['ndarray'],"Position where new axis is to be inserted. Suppose that the input NDArray's dimension is ndim, the range of the inserted axis is [-ndim, ndim]"
mxnet.gluon.rnn.GRU,layout,nonprim_dtype,['sequence'],"The format of input and output tensors. T, N and C stand for sequence length, batch size, and feature dimensions respectively."
mxnet.image.imresize,src,prim_dtype,['numeric'],source image
mxnet.ndarray.full,dtype,nonprim_dtype,['ndarray'],The data type of the returned NDArray. The default datatype is float32.
mxnet.ndarray.random.exponential,ctx,nonprim_dtype,['ndarray'],Device context of output. Default is current context. Overridden by scale.context when scale is an NDArray.
mxnet.gluon.rnn.RNN,layout,nonprim_dtype,['sequence'],"The format of input and output tensors. T, N and C stand for sequence length, batch size, and feature dimensions respectively."
mxnet.ndarray.op.UpSampling,multi_input_mode,prim_dtype,['numeric'],"How to handle multiple input. concat means concatenate upsampled images along the channel dimension. sum means add all images together, only available for nearest neighbor upsampling."
mxnet.recordio.pack_img,header,prim_dtype,['numeric'],Header of the image record. `header.label` can be a number or an array. See more detail in `IRHeader`.
mxnet.contrib.ndarray.CTCLoss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.ndarray.contrib.CTCLoss,use_data_lengths,nonprim_dtype,['sequence'],"Whether the data lenghts are decided by data_lengths. If false, the lengths are equal to the max sequence length."
mxnet.image.random_crop,src,prim_dtype,['numeric'],
mxnet.ndarray.op.stack,axis,nonprim_dtype,['ndarray'],The axis in the result array along which the input arrays are stacked.
mxnet.contrib.ndarray.boolean_mask,axis,nonprim_dtype,['ndarray'],An integer that represents the axis in NDArray to mask from.
mxnet.metric.check_label_shapes,wrap,nonprim_dtype,"['list', 'ndarray']","If True, wrap labels/preds in a list if they are single NDArray"
mxnet.ndarray.sparse.norm,axis,nonprim_dtype,['tuple'],"The axis or axes along which to perform the reduction.The default, axis=(), will compute over all elements into a scalar array with shape (1,). If axis is int, a reduction is performed on a particular axis. If axis is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed.   "
mxnet.gluon.nn.Lambda,function,prim_dtype,['string'],"Function used in lambda must be one of the following: 1) the name of an operator that is available in ndarray. For example: block = Lambda('tanh')   <ol class=""arabic"" start=""2""> a function that conforms to `def function(*args)`. For example: block = Lambda(lambda x: nd.LeakyReLU(x, slope=0.1))   "
mxnet.gluon.nn.Lambda,function,nonprim_dtype,['ndarray'],"Function used in lambda must be one of the following: 1) the name of an operator that is available in ndarray. For example: block = Lambda('tanh')   <ol class=""arabic"" start=""2""> a function that conforms to `def function(*args)`. For example: block = Lambda(lambda x: nd.LeakyReLU(x, slope=0.1))   "
mxnet.gluon.nn.HybridLambda,function,prim_dtype,['string'],"Function used in lambda must be one of the following: 1) The name of an operator that is available in both symbol and ndarray. For example: block = HybridLambda('tanh')   <ol class=""arabic"" start=""2""> A function that conforms to `def function(F, data, *args)`. For example: block = HybridLambda(lambda F, x: F.LeakyReLU(x, slope=0.1))   "
mxnet.gluon.nn.HybridLambda,function,nonprim_dtype,['ndarray'],"Function used in lambda must be one of the following: 1) The name of an operator that is available in both symbol and ndarray. For example: block = HybridLambda('tanh')   <ol class=""arabic"" start=""2""> A function that conforms to `def function(F, data, *args)`. For example: block = HybridLambda(lambda F, x: F.LeakyReLU(x, slope=0.1))   "
