descp1,descp2,default,attribute,constraint,in_doc,extracted
"Shape(tuple), required","Widths of the padding regions applied to the edges of each axis. It is a tuple of integer padding widths for each axis of the format `(before_1, after_1, ... , before_N, after_N)`. It should be of length `2*N` where `N` is the number of dimensions of the array.This is equivalent to pad_width in numpy.pad, but flattened.",_Null,prim_dtype,dtype(int),,1
"Shape(tuple), required","Widths of the padding regions applied to the edges of each axis. It is a tuple of integer padding widths for each axis of the format `(before_1, after_1, ... , before_N, after_N)`. It should be of length `2*N` where `N` is the number of dimensions of the array.This is equivalent to pad_width in numpy.pad, but flattened.",_Null,nonprim_dtype,structure(tuple(int)),,1
"Shape(tuple), required","Widths of the padding regions applied to the edges of each axis. It is a tuple of integer padding widths for each axis of the format `(before_1, after_1, ... , before_N, after_N)`. It should be of length `2*N` where `N` is the number of dimensions of the array.This is equivalent to pad_width in numpy.pad, but flattened.",_Null,shape,"shape([2*n]), ndim(1)",,1
"Shape(tuple), required","Widths of the padding regions applied to the edges of each axis. It is a tuple of integer padding widths for each axis of the format `(before_1, after_1, ... , before_N, after_N)`. It should be of length `2*N` where `N` is the number of dimensions of the array.This is equivalent to pad_width in numpy.pad, but flattened.",_Null,validvalue,"range([0,inf))",,1
