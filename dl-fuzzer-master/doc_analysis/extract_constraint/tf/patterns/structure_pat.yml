parse_sent: False
direct_map: False  # need to map group
check_dt: False
break: False   # keep going when pattern matched, don't break
append: True
findall: True
target: structure


replace:
    'numpy array': 'list'

split_word:  # for len (shape) use

    - ','
    - ' '
    - '`'
    - ''''
    - '"'
    - '\+'
    - '-'
    - '\*'
    - '\/'
    - '>'
    - '<'
    - '='
    - 'len:'
    - 'ndim:'
    - 'max_value:'
    - 'inf'
pat:

    # group1: list of <> that has length ..

    # list of `ints` that has length `>=5`
    '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s+`*>=\s*([\d]+)`*':
        structure: \1
        ds_dtype:
            - \2
        ndim: 1
        len: \3
        len_prefix: '>='

    # list of `ints` that has length `1`, `N` or `N+2`
    '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s(([,\s]*(or\s)*`(.*?)`)+)':
        prereq:
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s+`*>=\s*([\d]+)`*'
        structure: \1
        ds_dtype:
            - \2
        ndim: 1
        len: \3

    
    # group2: list of \d/single <>
    
    # list/tuple of \d <dtype>
    '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*':
        replace:
            '\/': ' '
        structure: \1
        ds_dtype: 
            - \3
        len: \2
        ndim: 1

    # list/tuple of a single <dtype>
    '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+a\s+single\s+`*(\w+)`*':
        replace:
            '\/': ' '
        structure: \1
        ds_dtype: 
            - \2
        len: 1
        ndim: 1


    # group3: list/tuple/(list or tuple)/.. of <> (or <>)

    # list or tuple of ...
    '(list\s+or\s+tuple|tuple\s+or\s+list|sequence|vector|array)\s+of\s+(`*[\w]+`*(\s+[\w.]+)?)':
        replace: 
            '\/': ' or '
        prereq:
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+a\s+single\s+`*(\w+)`*'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*'
        structure: \1
        ds_dtype:
            - \2
        ndim: 1



    # list/tuple/iterable of <> <>
    '`*(list|tuple|iterable|sequence|vector|array)`*\s+of\s*(`*[\w.]+`*\s+`*[\w]+`*)[\.,\s](?!or)':
        structure: \1
        prereq:
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s+`*>=\s*([\d]+)`*'
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s(([,\s]*(or\s)*`(.*?)`)+)'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+a\s+single\s+`*(\w+)`*'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*'
        
        ds_dtype: 
            - \2
        ndim: 1



    # list/tuple of string
    # list/tuple of integer or string
    # list/tuple of integer indices or string
    '`*(list|tuple|iterable|vector|array|sequence)`*\s+of\s+(`*([\w]+`*(\s+[\w.]+)?\s+or\s+)?`*[\w]+`*)':
        prereq:
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s+`*>=\s*([\d]+)`*'
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s(([,\s]*(or\s)*`(.*?)`)+)'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+a\s+single\s+`*(\w+)`*'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*'
            # - '(list\s+or\s+tuple|tuple\s+or\s+list|sequence|vector|array)\s+of\s+(`*[\w]+`*(\s+[\w.]+)?)'
            # - '`*(list|tuple|iterable|sequence|vector|array)`*\s+of\s*(`*[\w.]+`*\s+`*[\w]+`*)[\.,\s](?!or)'
        structure: \1
        ds_dtype: 
            - \2
        ndim: 1
    

    # group4: dict of (<> to <> )
    '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*':
        structure: dict
        ds_dtype:
            - \2
            - \3

    '(dict|dictionary)\s+of\s+':
        structure: dict
        prereq: 
            - '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*'

        
    # group 5 list<>
    
    '(list|tuple|sequence|vector)<(.*?)>':
        structure: \1
        ds_dtype:
            - \2
        ndim: 1

    # group6 ^a/an/the list/tuple/dict...
    '^(\ba\b|an|the)?\s*(nested)?\s*`*(list|lists|tuple|iterable|sequence|vector)`*':
        prereq:
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s+`*>=\s*([\d]+)`*'
            - '(list|tuple)\s+of\s+`*([\d\w.]+)`*\s+that\s+has\s+length\s(([,\s]*(or\s)*`(.*?)`)+)'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+a\s+single\s+`*(\w+)`*'
            - '`*(list|tuple|iterable|vector|array|sequence)`*\s+of\s+(`*([\w]+`*(\s+[\w.]+)?\s+or\s+)?`*[\w]+`*)'
            - '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*'
            - '(list\s+or\s+tuple|sequence|array)\s+of\s+(`*[\w]+`*(\s+[\w.]+)?)'
            - '`*(list|tuple|iterable|sequence|vector|array)`*\s+of\s*(`*[\w.]+`*\s+`*[\w]+`*)[\.,\s](?!or)'
            - '(list|tuple|iterable|list\/tuple|tuple\/list)\s+of\s+(\d)\s+`*(\w+)`*'
            - '(list|tuple|sequence|vector)<(.*?)>'
        structure: \3
        ndim: 1

    '^([\[\(]optional[\]\)]\s+)?(\ba\b|an|the|optional)?\s*`*(dict|dictonary)`*':
        prereq:
            - '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*'
        structure: \3


    

    # old below




    

    # '(?<!returns\sa\s)list\s+of\s+(?!a\s)(\d)*\s*`*([\w\d.]+)`*':
    #     prereq: 
    #         - '(list|tuple)\s+of\s+([\w]+(\s+[\w.]+)?\s+or\s+[\w]+)'
    #     structure: list
    #     ds_dtype:   # different from dtype (one of the targets)
    #         - \2     # if \integer: map group -> check dtype , else -> check dtype
    #     ndim: 1
    #     len: \1  # \1 -> group 1, 1-> length 1

    # 'tuple/list\s+of\s+(?!a\s)(\d)*\s*`*([\w\d.]+)`*':
    #     structure: tuple
    #     ds_dtype:   
    #         - \2     
    #     ndim: 1
    #     len: \1  

    # '`*iterable`*\s+of\s+(`*[\w\d.]+`*(\s+or\s+`*[\w\d.]+`)?)':
    #     structure: iterable
    #     ds_dtype:   
    #         - \1    
    #     ndim: 1

    # '^an\s+([\d\w.-]+)?\s*`*iterable`*':
    #     prereq:
    #         - '`*iterable`*\s+of\s+(`*[\w\d.]+`*(\s+or\s+`*[\w\d.]+`)?)'
    #     structure: iterable
    #     ndim: 1


    # # '^`iterable`(?!\sof)':
    # #     structure: iterable
    # #     ndim: 1


    # '(list|tuple)\s+of\s+a\s+single\s+`*([\w\d.]+)`*':
    #     structure: \1
    #     ds_dtype:   
    #         - \2  
    #     ndim: 1
    #     len: 1


    # 'tuple/list\s+of\s+a\s+single\s+`*([\w\d.]+)`*':
    #     structure: tuple
    #     ds_dtype:   
    #         - \1   
    #     ndim: 1
    #     len: 1

    # 'non-empty\s+list\s+of\s+`*([\w\d.]+)`*':
    #     structure: list
    #     ds_dtype:   
    #         - \1    
    #     ndim: 1
    #     len: '>0'  

    # '(?<!returns\sa\s)tuple\s+of\s+(?!a\s)(\d)*\s*`*([\w\d.]+)`*':
    #     structure: tuple
    #     ds_dtype:   
    #         - \2    
    #     ndim: 1
    #     len: \1

    

    


    # '(tuple\s+or\s+list)\s+of\s+`*([\w\d.]+)`*':
    #     structure: \1
    #     ds_dtype:
    #         - \2
    #     ndim: 1

    # '(list\s+or\s+tuple)\s+of\s+`*([\w\d.]+)`*':
    #     structure: \1
    #     ds_dtype:
    #         - \2
    #     ndim: 1

    
    
    # # dict
    # # check the very first word

    # '^optional\s+`*(dict|dictionary)`*':
    #     structure: dict

    # '^configuration\s+`*(dict|dictionary)`*':
    #     structure: dict

    # '^the\s+[\d\w.-]+\s+`*(dict|dictionary)`*':
    #     structure: dict



    # '^(dict|dictionary)[\s\.,;]':
    #     prereq:
    #         - '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*'
    #     structure: dict

    # '^a\s+`*(dict|dictionary)`*':
    #     prereq:
    #         - '(dict|dictionary)\s+of\s+`*([\d\w.]+)`*\s+to\s+`*([\d\w.]+)`*'
    #     structure: dict


    


            

  
    
    
       
   
    