If set, compute the density of the log probability instead of the probability
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
If CONSTANT_BOOL then transpose the first input before dot
--------------------------------
If CONSTANT_BOOL then transpose the second input before dot
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Initialize output to CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
Input D_STRUCTURE
--------------------------------
D_STRUCTURE of means for each channel
--------------------------------
Default value is CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of standard deviations for each channel
--------------------------------
Default value is CONSTANT_NUM
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bound of the distribution
--------------------------------
Lower bound of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Loads the model into one or many context BSTR
--------------------------------
ONNX model file name
--------------------------------
Set number of heads
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Interleaved queries, keys and values
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
ONE_WORD bias
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algo by running performance test
--------------------------------
Input data
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
ONE_WORD weight
--------------------------------
Maximum temporary workspace allowed BSTR in convolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the convolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
Set number of heads
--------------------------------
Keys and values interleaved
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD Queries
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the input in D_TYPE
--------------------------------
The minimum scalar value possibly produced for the input in D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE to normalize
--------------------------------
A small constant for numerical stability
--------------------------------
Specify the dimension along which to compute L2 norm
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only CONSTANT_NUM is currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
Index D_STRUCTURE
--------------------------------
New D_STRUCTURE to be copied
--------------------------------
Old D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Default value returned if the env var doesn t exist
--------------------------------
Env var to set
--------------------------------
New value assigned to the env var
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The input
--------------------------------
Height of the cropping area
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Width of the cropping area
--------------------------------
Left boundary of the cropping area
--------------------------------
Top boundary of the cropping area
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Epsilon for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
ONE_WORD History
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
base class for classes that will be reigstered
--------------------------------
nickname of PARAM for logging
--------------------------------
Specify which shape axis the channel is specified
--------------------------------
beta D_STRUCTURE
--------------------------------
Do not select CUDNN operator, if available
--------------------------------
Input data to batch normalization
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR
--------------------------------
Fix PARAM while training
--------------------------------
gamma D_STRUCTURE
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Momentum for moving average
--------------------------------
running mean of input
--------------------------------
running variance of input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and inverse std
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of diagonal entries
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The number of quantized bins
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Optional, id of the background class which will be ignored in nms
--------------------------------
Start index of the consecutive CONSTANT_NUM coordinates
--------------------------------
The input
--------------------------------
Optional, if set CONSTANT_BOOL and PARAM is provided, nms will only apply to boxes belongs to the same category
--------------------------------
Optional, index of the class categories, CONSTANT_NUM to disable
--------------------------------
The input box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
Overlapping BSTR threshold to suppress object with smaller score
--------------------------------
Index of the scores confidence of boxes
--------------------------------
Apply nms to topk boxes with descending scores, CONSTANT_NUM to no restriction
--------------------------------
Filter input boxes to those whose scores greater than valid_thresh
--------------------------------
D_STRUCTURE of D_STRUCTURE to stack
--------------------------------
The axis in the result D_STRUCTURE along which the input D_STRUCTURE are stacked
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Interval BSTR between checkpoints
--------------------------------
Default period is CONSTANT_NUM
--------------------------------
Prefix for the checkpoint filenames
--------------------------------
Input D_STRUCTURE
--------------------------------
the first axis to be swapped
--------------------------------
the second axis to be swapped
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The Variables in output argument that should be used as inputs
--------------------------------
The desired output for SymbolBlock
--------------------------------
Parameter D_STRUCTURE for arguments and auxililary states of PARAM that are not PARAM
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Whether to use bias correction
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Index update count
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
The axes to perform the broadcasting
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Target sizes of the broadcasting axes
--------------------------------
Cell for forward unrolling
--------------------------------
Cell for backward unrolling
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The first axis of the sub D_STRUCTURE of interest
--------------------------------
Ignored when the input is a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
The second axis of the sub D_STRUCTURE of interest
--------------------------------
Ignored when the input is a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Diagonal in question
--------------------------------
The default is CONSTANT_NUM
--------------------------------
Use k REXPR for diagonals above the main diagonal, and k REXPR for diagonals below the main diagonal
--------------------------------
If input has shape BSTR k must be between S0 and S1
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda parameter BSTR of the exponential distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Maximum value
--------------------------------
Minimum value
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha parameter BSTR of the gamma distribution
--------------------------------
Beta parameter BSTR of the gamma distribution
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
whether to sort ascendingly defaults to CONSTANT_BOOL
--------------------------------
whether to return the aggregate stats in table of json format can take QSTR defaults to QSTR
--------------------------------
indicates whether to clean aggeregate statistical data collected up to this point
--------------------------------
can take QSTR by which stat to sort the entries in each category defaults to QSTR
--------------------------------
Specify which shape axis the channel is specified
--------------------------------
ONE_WORD beta
--------------------------------
Do not select CUDNN operator, if available
--------------------------------
Input data
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR
--------------------------------
Fix PARAM while training
--------------------------------
ONE_WORD gamma
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Maximum value of PARAM
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Minimum value of PARAM
--------------------------------
Momentum for moving average
--------------------------------
ONE_WORD moving_mean
--------------------------------
ONE_WORD moving_var
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and inverse std
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Left operand to the function
--------------------------------
Middle operand to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Right operand to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
The amount of PARAM decay that does not go into gradient PARAM calculationsotherwise do PARAM decay algorithmically only
--------------------------------
ONE_WORD Weight
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only values of CONSTANT_NUM are currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
The value to be used as a mask
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Function used in lambda must be one of the following CONSTANT_NUM the name of an operator that is available in D_STRUCTURE
--------------------------------
For example block Lambda QSTR REXPR class QSTR start CONSTANT_NUM REXPR function that conforms to def function BSTR
--------------------------------
For example block Lambda lambda x nd LeakyReLU x, slope CONSTANT_FLOAT
--------------------------------
The absolute threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
The relative threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Interpolation method used for resizing the image
--------------------------------
Possible values CONSTANT_NUM Nearest Neighbors Interpolation
--------------------------------
CONSTANT_NUM Bilinear interpolation
--------------------------------
CONSTANT_NUM Bicubic interpolation over 4x4 pixel neighborhood
--------------------------------
CONSTANT_NUM Area based BSTR
--------------------------------
It may be a preferred method for image decimation, as it gives moire free results
--------------------------------
But when the image is zoomed, it is similar to the Nearest Neighbors method
--------------------------------
ONE_WORD BSTR
--------------------------------
CONSTANT_NUM Lanczos interpolation over 8x8 pixel neighborhood
--------------------------------
CONSTANT_NUM Cubic for enlarge, area for shrink, bilinear for others CONSTANT_NUM Random select from interpolation method metioned above
--------------------------------
Note When shrinking an image, it will generally look best with AREA based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic BSTR
--------------------------------
More details can be found in the documentation of OpenCV, please refer to http docs opencv org master da d54 group_imgproc_transform html
--------------------------------
The length to be set for the shorter edge
--------------------------------
The original image
--------------------------------
Per Coordinate Learning Rate beta
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
The L1 regularization coefficient
--------------------------------
Learning rate
--------------------------------
Square of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD z
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Standard deviations of the distributions
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Target axis order
--------------------------------
By default the axes will be inverted
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data
--------------------------------
Input label
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
base class for classes that will be reigstered
--------------------------------
nickname of PARAM for logging
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Multibox prior anchor boxes
--------------------------------
Background id
--------------------------------
Clip PARAM of boundary boxes
--------------------------------
Class probabilities
--------------------------------
Suppress all detections regardless of class_id
--------------------------------
Location regression predictions
--------------------------------
Non maximum suppression PARAM
--------------------------------
Keep maximum top k detections before nms, CONSTANT_NUM for no limit
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Threshold to be a positive prediction
--------------------------------
Variances to be decoded from box regression output
--------------------------------
The first axis of the sub D_STRUCTURE of interest
--------------------------------
Ignored when the input is a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
The second axis of the sub D_STRUCTURE of interest
--------------------------------
Ignored when the input is a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Input D_STRUCTURE
--------------------------------
Diagonal in question
--------------------------------
The default is CONSTANT_NUM
--------------------------------
Use k REXPR for diagonals above the main diagonal, and k REXPR for diagonals below the main diagonal
--------------------------------
If input has shape BSTR k must be between S0 and S1
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Number of layers for the variant of densenet
--------------------------------
Options are CONSTANT_NUM
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Batch of multi indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the D_STRUCTURE into which the multi indices apply
--------------------------------
ONE_WORD Weights
--------------------------------
Whether to cast to the narrowest type
--------------------------------
Number of input output pairs to be casted to the widest type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value in the form of D_TYPE
--------------------------------
If present, it will be used to quantize the D_TYPE PARAM into D_TYPE
--------------------------------
The minimum scalar value in the form of D_TYPE
--------------------------------
If present, it will be used to quantize the D_TYPE PARAM into D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
auto can be specified to automatically determine output type according to PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input data to the CountSketchOp
--------------------------------
The index D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output dimension
--------------------------------
How many sketch D_STRUCTURE to process at one time
--------------------------------
The sign D_STRUCTURE
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to repeat values
--------------------------------
The negative numbers are interpreted counting from the backward
--------------------------------
By default, use the flattened input D_STRUCTURE, and return a flat output D_STRUCTURE
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The number of repetitions for each element
--------------------------------
whether to turn cudnn off
--------------------------------
Input data to the BilinearsamplerOp
--------------------------------
Input grid to the BilinearsamplerOp grid has two channels x_src, y_src
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
The axes to include in the index D_STRUCTURE
--------------------------------
Supports negative values
--------------------------------
Input data
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Number of units in output symbol
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
prefix for name of Block and name of weight if PARAM is None
--------------------------------
Left operand to the function
--------------------------------
Middle operand to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Right operand to the function
--------------------------------
Device context
--------------------------------
Default context is the current default context
--------------------------------
The data type of the D_STRUCTURE
--------------------------------
The default datatype is D_TYPE
--------------------------------
Infer the PARAM position from the PARAM, PARAM, PARAM, and output D_STRUCTURE size
--------------------------------
ONE_WORD Deprecated
--------------------------------
Only CONSTANT_BOOL is supported
--------------------------------
Number of times to repeat each element
--------------------------------
The default repeat count is CONSTANT_NUM
--------------------------------
Start of interval
--------------------------------
The default start value is CONSTANT_NUM
--------------------------------
Spacing between values
--------------------------------
The default step size is CONSTANT_NUM
--------------------------------
End of interval
--------------------------------
Env variable that holds the path to the MXNET folder
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether prediction output is allowed to have extra outputs
--------------------------------
This is useful in cases like RNN where states are also part of output which can then be fed back to the RNN in the next step
--------------------------------
By default, extra outputs are not allowed
--------------------------------
Name of the custom metric
--------------------------------
Custom evaluation function that receives labels and predictions for a minibatch as numpy D_STRUCTURE and returns the corresponding custom metric as a D_TYPE number
--------------------------------
Input data for the custom operator
--------------------------------
Name of the custom operator
--------------------------------
This is the name that is passed to mx operator register to register the operator
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
4th input
--------------------------------
3rd input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
6th input
--------------------------------
5th input
--------------------------------
if type is D_STRUCTURE of np ndarrayContains all the NumPy D_STRUCTURE corresponding to PARAM list_auxiliary_states
--------------------------------
running context
--------------------------------
If dtype is QSTR then the mx nd D_STRUCTURE created will have the same type as th numpy D_STRUCTURE from which it is copied
--------------------------------
Otherwise, dtype is the explicit datatype for all mx nd D_STRUCTURE objects created in this function
--------------------------------
if CONSTANT_BOOL, nan is a valid value for checking equivalency ie nan nan
--------------------------------
The expected output value if type is D_STRUCTURE of np ndarrayContains D_STRUCTURE corresponding to exe outputs
--------------------------------
The evaluation point if type is D_STRUCTURE of np ndarrayContains all the numpy D_STRUCTURE corresponding to PARAM list_arguments
--------------------------------
output symbol
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Generally close to CONSTANT_FLOAT
--------------------------------
Generally close to CONSTANT_NUM
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Internal state QSTR
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Number of update
--------------------------------
Internal state QSTR
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Internal state QSTR
--------------------------------
The input D_STRUCTURE to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ROI pooling output shape BSTR
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR , where BSTR are top left and bottom right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input D_STRUCTURE
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
Weights, gradients, momentums, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Input data to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Specifies the output shape BSTR
--------------------------------
This is required if transformation type is affine
--------------------------------
If transformation type is warp, this parameter is ignored
--------------------------------
The type of transformation
--------------------------------
For affine, input PARAM should be an affine matrix of size BSTR
--------------------------------
For warp, input PARAM should be an optical flow of size BSTR
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Buffer containing contents of a file as a D_TYPE or bytes
--------------------------------
The input
--------------------------------
Interpolation method for resizing
--------------------------------
By default uses bilinear interpolationOptions are INTER_NEAREST a nearest neighbor interpolationINTER_LINEAR a bilinear interpolationINTER_AREA resampling using pixel area relationINTER_CUBIC a bicubic interpolation over 4x4 pixel neighborhoodINTER_LANCZOS4 a Lanczos interpolation over 8x8 pixel neighborhoodNote that the GPU version only support bilinear interpolation BSTR and the result on cpu would be slightly different from gpu It uses opencv resize function which tend to align center on cpuwhile using contrib bilinearResize2D which aligns corner on gpu
--------------------------------
Whether to resize the short edge or both edges to PARAM, if PARAM is give as an D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Size of new image
--------------------------------
Could be BSTR
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix rows
--------------------------------
Scalar factor multiplied with C
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
Type of activation function used in c prime_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
first input
--------------------------------
4th input
--------------------------------
3rd input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
6th input
--------------------------------
5th input
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to requantize the D_TYPE PARAM into D_TYPE
--------------------------------
The original maximum scalar value in the form of D_TYPE used for quantizing PARAM into D_TYPE
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to requantize the D_TYPE PARAM into D_TYPE
--------------------------------
The original minimum scalar value in the form of D_TYPE used for quantizing PARAM into D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
auto can be specified to automatically determine output type according to PARAM
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Controls the spacing between the kernel points also known as the a trous algorithm
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimension
--------------------------------
Controls the amount of implicit zero paddings on both sides of the output for output_padding number of points for each dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
Blocks of block_size
--------------------------------
block_size are moved
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Select between the number of values across the whole matrix, in each column, or in each row
--------------------------------
ONE_WORD Input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
An optional storage type BSTR
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The type of KVStore
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only values of CONSTANT_NUM are currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
BSTR encoded in corner or center
--------------------------------
If larger than CONSTANT_NUM, bounding box target will be clipped to this value
--------------------------------
BSTR predicted bbox offset
--------------------------------
The box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
value to be divided from the 1st encoded values
--------------------------------
value to be divided from the 2nd encoded values
--------------------------------
value to be divided from the 3rd encoded values
--------------------------------
value to be divided from the 4th encoded values
--------------------------------
First D_STRUCTURE to be added
--------------------------------
Second D_STRUCTURE to be added
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Type of activation function
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The shape of the desired D_STRUCTURE
--------------------------------
We can set the dim to zero if it same as the original
--------------------------------
E g A broadcast_to B, shape BSTR has the same meaning as A broadcast_axis B, axis CONSTANT_NUM, size CONSTANT_NUM
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
number of input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Batch of multi indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the D_STRUCTURE into which the multi indices apply
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and all of w, m and v have the same stype
--------------------------------
Learning rate
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Running context
--------------------------------
Datatype for mx nd D_STRUCTURE
--------------------------------
if CONSTANT_BOOL, nan is a valid value for checking equivalency ie nan nan
--------------------------------
expected gradient values if type is D_STRUCTURE of np ndarrayContains D_STRUCTURE corresponding to exe grad_arrays
--------------------------------
Gradient requirements
--------------------------------
ONE_WORD QSTR
--------------------------------
D_STRUCTURE of mapping argument name to stype for the gradient
--------------------------------
The evaluation point if type is D_STRUCTURE of np ndarrayContains all the NumPy D_STRUCTURE corresponding to mx PARAM list_arguments
--------------------------------
NumPys D_STRUCTURE corresponding to PARAM outputs for incomming gradient
--------------------------------
if type is D_STRUCTURE of np ndarrayContains D_STRUCTURE corresponding to exe outputs
--------------------------------
output symbol
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rotal length of printed lines
--------------------------------
Relative or absolute positions of log elements in each line
--------------------------------
A D_STRUCTURE of shapes, D_TYPE REXPR BSTR, given input shapes
--------------------------------
Symbol to be visualized
--------------------------------
The device id of the device, needed for GPU
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input data for the custom operator
--------------------------------
Name of the custom operator
--------------------------------
This is the name that is passed to mx operator register to register the operator
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Batch size
--------------------------------
Context data loader optimized for
--------------------------------
The input zero base indexed LibSVM data file or a directory path
--------------------------------
The shape of one example
--------------------------------
Output data type
--------------------------------
QSTR means no change
--------------------------------
The input LibSVM label file or a directory path
--------------------------------
If NULL, all labels will be read from PARAM
--------------------------------
The shape of one label
--------------------------------
partition the data into multiple parts
--------------------------------
the index of the part will read
--------------------------------
Maximum number of batches to prefetch
--------------------------------
Whether to use round robin to handle overflow batch or not
--------------------------------
Alpha parameter BSTR of the gamma distribution
--------------------------------
Beta parameter BSTR of the gamma distribution
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
number of input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Interpolation method
--------------------------------
See resize_short for details
--------------------------------
The desired output image size
--------------------------------
Binary source image data
--------------------------------
Augmentation Param the augmenter names to represent D_STRUCTURE of augmenters to be applied, seperated by comma
--------------------------------
Additional keyword parameters will be seen by these augmenters
--------------------------------
Make sure you don t use normal augmenters for detection tasks
--------------------------------
Batch size
--------------------------------
Augmentation Param Emition mode for invalid ground truths after crop
--------------------------------
center emit if centroid of object is out of crop region overlap emit if overlap is less than PARAM
--------------------------------
Context data loader optimized for
--------------------------------
Dataset Param Shape of each instance generated by the DataIter
--------------------------------
Output data type
--------------------------------
QSTR means no change
--------------------------------
Augmentation Param Emit overlap thresh for emit mode overlap only
--------------------------------
Augmentation Param Filled color value while padding
--------------------------------
Augmentation Param CONSTANT_NUM NN CONSTANT_NUM bilinear CONSTANT_NUM cubic CONSTANT_NUM area CONSTANT_NUM lanczos4 CONSTANT_NUM auto CONSTANT_NUM0 rand
--------------------------------
label padding value if enabled
--------------------------------
pad output label width if set larger than CONSTANT_NUM for auto estimate
--------------------------------
Dataset Param How many labels for an image, CONSTANT_NUM for variable label size
--------------------------------
Augmentation Param Max crop aspect ratios
--------------------------------
Augmentation Param Maximum ratio of intersect gt_area between crop box and ground truths
--------------------------------
Augmentation Param Maximum crop IOU between crop_box and ground truth
--------------------------------
Augmentation Param Maximum ratio of intersect crop_area between crop box and ground truths
--------------------------------
Augmentation Param Max crop scales
--------------------------------
Augmentation Param Skip cropping if fail crop trail count exceeds this number
--------------------------------
Augmentation Param Maximum padding PARAM
--------------------------------
Augmentation Param Maximum random value of delta contrast
--------------------------------
Augmentation Param Maximum random value of H channel in HSL color space
--------------------------------
Augmentation Param Maximum random value of L channel in HSL color space
--------------------------------
Augmentation Param Maximum random value of S channel in HSL color space
--------------------------------
Augmentation Param Mean value on Alpha channel
--------------------------------
Augmentation Param Mean value on B channel
--------------------------------
Augmentation Param Mean value on G channel
--------------------------------
Augmentation Param Mean Image to be subtracted
--------------------------------
Augmentation Param Mean value on R channel
--------------------------------
Augmentation Param Min crop aspect ratios
--------------------------------
Augmentation Param Minimum ratio of intersect gt_area between crop box and ground truths
--------------------------------
Augmentation Param Minimum crop IOU between crop_box and ground truths
--------------------------------
Augmentation Param Minimum ratio of intersect crop_area between crop box and ground truths
--------------------------------
Augmentation Param Min crop scales
--------------------------------
Augmentation Param Number of crop samplers
--------------------------------
partition the data into multiple parts
--------------------------------
the index of the part will read
--------------------------------
Dataset Param Path to image D_STRUCTURE
--------------------------------
Dataset Param Path to image record file
--------------------------------
Maximum number of batches to prefetch
--------------------------------
Backend Param Number of thread to do preprocessing
--------------------------------
Augmentation Param Probability of random cropping, REXPR to disable
--------------------------------
Augmentation Param Probability to apply horizontal flip aka
--------------------------------
ONE_WORD mirror
--------------------------------
Augmentation Param Probability for random padding
--------------------------------
Augmentation Param Probability to apply random contrast
--------------------------------
Augmentation Param Probability to apply random hue
--------------------------------
Augmentation Param Probability to apply random illumination
--------------------------------
Augmentation Param Probability to apply random saturation
--------------------------------
Augmentation Param PARAM shorter edge to size before applying other augmentations, CONSTANT_NUM to disable
--------------------------------
Augmentation Param How image data fit in PARAM
--------------------------------
force force reshape to PARAM regardless of aspect ratio shrink ensure each side fit in PARAM, preserve aspect ratio fit fit image to PARAM, preserve ratio, will upscale if applicable
--------------------------------
Whether to use round robin to handle overflow batch or not
--------------------------------
Augmentation Param Scale in color space
--------------------------------
Augmentation Param Random Seed
--------------------------------
Augmentation Param Whether to shuffle data
--------------------------------
the PARAM for chunk shuffling
--------------------------------
the size BSTR of the PARAM chunk, used with PARAM CONSTANT_BOOL, it can enable global shuffling
--------------------------------
Augmentation Param Standard deviation on Alpha channel
--------------------------------
Augmentation Param Standard deviation on B channel
--------------------------------
Augmentation Param Standard deviation on G channel
--------------------------------
Augmentation Param Standard deviation on R channel
--------------------------------
Auxiliary Param Whether to output parser information
--------------------------------
The axis along which to repeat values
--------------------------------
The negative numbers are interpreted counting from the backward
--------------------------------
By default, use the flattened input D_STRUCTURE, and return a flat output D_STRUCTURE
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The number of repetitions for each element
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
The axes on which dropout mask is shared
--------------------------------
If empty, regular dropout is applied
--------------------------------
Fraction of the input units to drop
--------------------------------
Must be a number between CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Use transpose of input matrix
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Selects a subset of the single dimensional entries in the shape
--------------------------------
If an axis is selected with shape entry greater than one, an error is raised
--------------------------------
data to squeeze
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
gamma D_STRUCTURE
--------------------------------
Total number of groups
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and std calculated along the given axis
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
ONE_WORD data
--------------------------------
ONE_WORD index
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
BSTR encoded in corner or center
--------------------------------
If larger than CONSTANT_NUM, bounding box target will be clipped to this value
--------------------------------
BSTR predicted bbox offset
--------------------------------
The box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
value to be divided from the 1st encoded values
--------------------------------
value to be divided from the 2nd encoded values
--------------------------------
value to be divided from the 3rd encoded values
--------------------------------
value to be divided from the 4th encoded values
--------------------------------
The axis to perform layer normalization
--------------------------------
Usually, this should be be axis of the channel dimension
--------------------------------
Negative values means indexing from right to left
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data to layer normalization
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
gamma D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and std calculated along the given PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Numbers of layers
--------------------------------
Options are CONSTANT_NUM
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Version of ResNet
--------------------------------
Options are CONSTANT_NUM
--------------------------------
Shape BSTR for each process
--------------------------------
Shape BSTR The decay parameter for each process
--------------------------------
Shape BSTR the interarrival times
--------------------------------
Shape BSTR The intensity for each of the K processes, for each sample
--------------------------------
Shape BSTR
--------------------------------
the length of the interval where the processes were sampled
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape BSTR the Hawkes state for each process
--------------------------------
The number of valid points in the process
--------------------------------
D_TYPE or None
--------------------------------
The axis to picking the elements
--------------------------------
Negative values means indexing from right to left
--------------------------------
If is None, the elements in the PARAM w r t the flattened input will be picked
--------------------------------
The input D_STRUCTURE
--------------------------------
The index D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the PARAM where we pick the elements is left in the result as dimension with size one
--------------------------------
Specify how PARAM of bound indices behave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all indices mentioned are too large, they are replaced by the PARAM that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and all of w, m and v have the same stype
--------------------------------
Learning rate
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Function used in lambda must be one of the following CONSTANT_NUM The name of an operator that is available in both symbol and D_STRUCTURE
--------------------------------
For example block HybridLambda QSTR REXPR class QSTR start CONSTANT_NUM REXPR function that conforms to def function BSTR
--------------------------------
For example block HybridLambda lambda F, x F LeakyReLU x, slope CONSTANT_FLOAT
--------------------------------
Bias parameter
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algo by running performance test
--------------------------------
Input data to the ConvolutionOp
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Weight matrix
--------------------------------
Maximum temporary workspace allowed BSTR in convolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the convolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
Data to be shuffled
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Output PARAM type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Use ascend order for scores instead of descending
--------------------------------
Please set PARAM accordingly
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Ignore matching when score REXPR, if PARAM CONSTANT_BOOL, or ignore score REXPR, if PARAM CONSTANT_BOOL
--------------------------------
Limit the number of matches to topk, set CONSTANT_NUM for no limit
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
Beta BSTR parameters of the distributions
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
The absolute threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
The flag determining how to treat NAN values in comparison
--------------------------------
Maximum number of mismatches to be printed mismatches BSTR and determine mismatches BSTR
--------------------------------
The names used in error message when an exception occurs
--------------------------------
The relative threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
Multibox prior anchor boxes
--------------------------------
Background id
--------------------------------
Clip PARAM of boundary boxes
--------------------------------
Class probabilities
--------------------------------
Suppress all detections regardless of class_id
--------------------------------
Location regression predictions
--------------------------------
Non maximum suppression PARAM
--------------------------------
Keep maximum top k detections before nms, CONSTANT_NUM for no limit
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Threshold to be a positive prediction
--------------------------------
Variances to be decoded from box regression output
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Limit of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probability in each experiment
--------------------------------
Shape of the output
--------------------------------
ONNX model file name
--------------------------------
the key of the ufunc argument
--------------------------------
the value of the ufunc argument
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The length D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the PARAM input as a mask over the PARAM input
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Blocks of block_size
--------------------------------
block_size are moved
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of lower triangular matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of axes on which input PARAM will be sliced according to the corresponding size of the second input
--------------------------------
By default will slice on all axes
--------------------------------
Negative axes are supported
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape like input
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
A D_STRUCTURE of length QSTR , which is added to the product of the normalized input and the weight
--------------------------------
An n dimensional input D_STRUCTURE n REXPR of the form BSTR
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
A D_STRUCTURE of length QSTR , which multiplies the normalized input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to requantize the D_TYPE PARAM into D_TYPE
--------------------------------
The original maximum scalar value in the form of D_TYPE used for quantizing PARAM into D_TYPE
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to requantize the D_TYPE PARAM into D_TYPE
--------------------------------
The original minimum scalar value in the form of D_TYPE used for quantizing PARAM into D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
auto can be specified to automatically determine output type according to PARAM
--------------------------------
D_STRUCTURE of triangular matrices stored as D_STRUCTURE
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Maximum factor
--------------------------------
Minimum factor
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE or None
--------------------------------
The axis to picking the elements
--------------------------------
Negative values means indexing from right to left
--------------------------------
If is None, the elements in the PARAM w r t the flattened input will be picked
--------------------------------
The input D_STRUCTURE
--------------------------------
The index D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the PARAM where we pick the elements is left in the result as dimension with size one
--------------------------------
Specify how PARAM of bound indices behave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all indices mentioned are too large, they are replaced by the PARAM that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Upsampling factors, applied to the QSTR dimensions, in that order
--------------------------------
The base D_STRUCTURE
--------------------------------
The exponent D_STRUCTURE
--------------------------------
If PARAM shape exp shape , they must be broadcastable to a common shape
--------------------------------
The input
--------------------------------
Lambda parameter BSTR of the Poisson distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD bias
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algo by running performance test
--------------------------------
Input data
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
ONE_WORD weight
--------------------------------
Maximum temporary workspace allowed BSTR in convolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the convolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the input in D_TYPE
--------------------------------
The minimum scalar value possibly produced for the input in D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Image format option for cv2 imdecode
--------------------------------
D_TYPE buffer from MXRecordIO read
--------------------------------
Index D_STRUCTURE
--------------------------------
New D_STRUCTURE to be copied
--------------------------------
Old D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis that will be excluded in the normalization process
--------------------------------
This is typically the channels BSTR axis
--------------------------------
For instance, after a Conv2D layer with layout QSTR , set axis CONSTANT_NUM in InstanceNorm
--------------------------------
If layout QSTR , then set axis CONSTANT_NUM
--------------------------------
Data will be normalized along axes excluding the first axis and the axis given
--------------------------------
Initializer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of beta to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, beta is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Initializer for the gamma weight
--------------------------------
Number of channels BSTR in input data
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
If CONSTANT_BOOL, multiply by gamma
--------------------------------
If CONSTANT_BOOL, gamma is not used
--------------------------------
When the next layer is linear also e g
--------------------------------
nn relu , this can be disabled since the scaling will be done by the next layer
--------------------------------
If CONSTANT_BOOL, becomes a bidirectional RNN
--------------------------------
If non zero, introduces a dropout layer on the outputs of each RNN layer except the last layer
--------------------------------
Type to initialize the parameters and default states to
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Initializer for the projected recurrent weights matrix, used for the linear transformation of the recurrent state to the projected space
--------------------------------
The number of features in the hidden state h
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
By default, bias for the forget gate is initialized to CONSTANT_NUM while all other biases are initialized to zero
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
The number of expected features in the input x
--------------------------------
If not specified, it will be inferred from input
--------------------------------
The format of input and output D_STRUCTURE
--------------------------------
T, N and C stand for D_STRUCTURE length, batch size, and feature dimensions respectively
--------------------------------
Number of recurrent layers
--------------------------------
Shared Parameters for this Block
--------------------------------
Prefix of this Block
--------------------------------
The number of features after projection
--------------------------------
Maximum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
If None, clipping is not applied
--------------------------------
Minimum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
If None, clipping is not applied
--------------------------------
Whether to stop NaN from propagating in state by clipping it to min max
--------------------------------
If the clipping range is not specified, this option is ignored
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output storage type
--------------------------------
Indicates whether to turn on off NumPy shape semantics
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix row indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Mean of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Standard deviation of the distribution
--------------------------------
Shape of the output
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Header of the image record
--------------------------------
header label can be a number or an D_STRUCTURE
--------------------------------
See more detail in QSTR
--------------------------------
Raw image D_TYPE to be packed
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
lambda multiplier
--------------------------------
Arange elements according to the size of a certain axis of input D_STRUCTURE
--------------------------------
The negative numbers are interpreted counting from the backward
--------------------------------
If not provided, will arange elements according to the input shape
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR Only used for imperative calls
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The repeating time of all elements
--------------------------------
E g repeat CONSTANT_NUM, the element a will be repeated three times REXPR, a, a
--------------------------------
Start of interval
--------------------------------
The interval includes this value
--------------------------------
The default start value is CONSTANT_NUM
--------------------------------
Spacing between values
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
First input
--------------------------------
Axes to perform broadcast on in the first input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input
--------------------------------
Axes to copy from the second input D_STRUCTURE
--------------------------------
Type of activation function
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Mean BSTR of the distribution
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
Standard deviation BSTR of the distribution
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM and PARAM are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
The input
--------------------------------
Output PARAM type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE to the embedding operator
--------------------------------
PARAM type of PARAM
--------------------------------
Vocabulary size of the input indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension of the embedding D_STRUCTURE
--------------------------------
Compute row sparse gradient in the backward calculation
--------------------------------
If set to CONSTANT_BOOL, the grad storage type is row_sparse
--------------------------------
The embedding weight matrix
--------------------------------
Axis along which to split
--------------------------------
The input
--------------------------------
Number of splits
--------------------------------
Note that this should evenly divide the length of the PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL, Removes the PARAM with length CONSTANT_NUM from the shapes of the output D_STRUCTURE
--------------------------------
Note that setting squeeze_axis to CONSTANT_BOOL removes PARAM with length CONSTANT_NUM only along the PARAM which it is split
--------------------------------
Also squeeze_axis can be set to CONSTANT_BOOL only if input shape BSTR PARAM
--------------------------------
Absolute or relative path of the directory name to store bz2 files
--------------------------------
Name of the output file in which bz2 contents will be extracted
--------------------------------
Name of the downloaded b2 file
--------------------------------
URL to download data from
--------------------------------
Same as NumPy
--------------------------------
Same as NumPy
--------------------------------
Same as NumPy
--------------------------------
A NumPy reducing function like np sum QSTR np max
--------------------------------
Position where new axis is to be inserted
--------------------------------
Suppose that the input D_STRUCTURE dimension is ndim, the range of the inserted axis is BSTR
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The data to save
--------------------------------
The filename
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE or None
--------------------------------
The axis to picking the elements
--------------------------------
Negative values means indexing from right to left
--------------------------------
If is None, the elements in the PARAM w r t the flattened input will be picked
--------------------------------
The input D_STRUCTURE
--------------------------------
The index D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the PARAM where we pick the elements is left in the result as dimension with size one
--------------------------------
Specify how PARAM of bound indices behave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all indices mentioned are too large, they are replaced by the PARAM that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The number of quantized bins
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
Axes along which to compute mean and variance
--------------------------------
Input D_STRUCTURE
--------------------------------
produce moments with the same dimensionality as the input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL, check that the total_norm is finite BSTR
--------------------------------
This requires a blocking asscalar call
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
the dimension to be concated
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weights, gradients, momentums, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Bias parameter
--------------------------------
Input data
--------------------------------
Whether to collapse all but the first axis of the input PARAM D_STRUCTURE
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of hidden nodes of the output
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weight matrix
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Specifies the dilation rate to use for dilated convolution
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimensions
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
Input data1 to the correlation
--------------------------------
Input data2 to the correlation
--------------------------------
operation type is either multiplication or subduction
--------------------------------
kernel size for Correlation must be an odd number
--------------------------------
Max displacement of Correlation
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
pad for Correlation
--------------------------------
stride1 quantize PARAM globally
--------------------------------
stride2 quantize PARAM within the neighborhood centered around PARAM
--------------------------------
swish BSTR x sigmoid BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
A new Parameter container is created if params is None
--------------------------------
Prefix for names of Block this prefix is also used for names of weights if PARAM is None i e
--------------------------------
if PARAM are being created and not reused
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Per Coordinate Learning Rate beta
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
The L1 regularization coefficient
--------------------------------
Learning rate
--------------------------------
Square of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD z
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
If CONSTANT_BOOL then transpose the first input before dot
--------------------------------
If CONSTANT_BOOL then transpose the second input before dot
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM and PARAM are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Mean BSTR of the distribution
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
Standard deviation BSTR of the distribution
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of diagonal entries
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices to be factorized
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weights, gradients, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
First D_STRUCTURE to be checked
--------------------------------
Second D_STRUCTURE to be checked
--------------------------------
The axes on which dropout mask is shared
--------------------------------
If empty, regular dropout is applied
--------------------------------
Percentage of elements to drop out, which is CONSTANT_NUM percentage to retain
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Indicates whether to activate NumPy D_STRUCTURE semantics
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
A D_STRUCTURE of length QSTR , which is added to the product of the normalized input and the weight
--------------------------------
An n dimensional input D_STRUCTURE n REXPR of the form BSTR
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
A D_STRUCTURE of length QSTR , which multiplies the normalized input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Indicates whether to stop statistic output BSTR after this dump
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
whether to profile kvstore server or worker
--------------------------------
server can only be profiled when kvstore is of type dist
--------------------------------
if this is not passed, defaults to worker
--------------------------------
Concentration parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
Depth of the one hot dimension
--------------------------------
DType of the output
--------------------------------
D_STRUCTURE of locations where to set PARAM
--------------------------------
The value assigned to the locations not represented by PARAM
--------------------------------
The value assigned to the locations represented by PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of lower triangular matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The loop condition
--------------------------------
The loop body
--------------------------------
The initial values of the loop variables
--------------------------------
Maximum number of iterations
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the forward pass is in training or predicting mode
--------------------------------
This controls the behavior of some layers such as Dropout, BatchNorm
--------------------------------
D_STRUCTURE of flat indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the D_STRUCTURE into which the multi indices apply
--------------------------------
The box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
The number of classes to randomly sample
--------------------------------
The number of possible classes
--------------------------------
A CONSTANT_NUM-D D_STRUCTURE of the target classes
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to sort the input D_STRUCTURE
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output indices
--------------------------------
It is only valid when ret_typ is QSTR
--------------------------------
An error will be raised if the selected PARAM type can not precisely represent the indices
--------------------------------
Whether to sort in ascending or descending order
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Brightness jittering range BSTR
--------------------------------
Contrast jittering range BSTR
--------------------------------
Shape for output data
--------------------------------
Hue jittering range BSTR
--------------------------------
Interpolation method for all resizing operations Possible values CONSTANT_NUM Nearest Neighbors Interpolation
--------------------------------
CONSTANT_NUM Bilinear interpolation
--------------------------------
CONSTANT_NUM Bicubic interpolation over 4x4 pixel neighborhood
--------------------------------
CONSTANT_NUM Area based BSTR
--------------------------------
It may be a preferred method for image decimation, as it gives moire free results
--------------------------------
But when the image is zoomed, it is similar to the Nearest Neighbors method
--------------------------------
ONE_WORD BSTR
--------------------------------
CONSTANT_NUM Lanczos interpolation over 8x8 pixel neighborhood
--------------------------------
CONSTANT_NUM Cubic for enlarge, area for shrink, bilinear for others CONSTANT_NUM Random select from interpolation method metioned above
--------------------------------
Note When shrinking an image, it will generally look best with AREA based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic BSTR
--------------------------------
Mean pixel values for BSTR
--------------------------------
Pca noise level BSTR
--------------------------------
Whether to enable random cropping other than center crop
--------------------------------
BSTR, probability to convert to grayscale for all channels, the number of channels will not be reduced to CONSTANT_NUM
--------------------------------
Whether to apply horizontal flip to image with probability CONSTANT_FLOAT
--------------------------------
Whether to enable random sized cropping, require PARAM to be enabled
--------------------------------
Resize shorter edge if larger than CONSTANT_NUM at the begining
--------------------------------
Saturation jittering range BSTR
--------------------------------
Standard deviations for BSTR
--------------------------------
Activation function to be applied
--------------------------------
Input data
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of name to D_STRUCTURE
--------------------------------
D_STRUCTURE of name to D_STRUCTURE
--------------------------------
A data iterator initialized by the calibration dataset
--------------------------------
If calib_mode QSTR , no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators
--------------------------------
The quantized models generated in this mode are normally CONSTANT_NUM CONSTANT_NUM slower than those with calibrations during inference
--------------------------------
If calib_mode QSTR , the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization
--------------------------------
If calib_mode QSTR BSTR, the thresholds for quantization will be derived such that the KL divergence between the distributions of D_TYPE layer outputs and quantized layer outputs is minimized based upon the calibration dataset
--------------------------------
Defines the device that users want to run forward propagation on the calibration dataset for collecting layer output statistics
--------------------------------
Currently, only supports single context
--------------------------------
Data names required for creating a Module object to run forward propagation on the calibration dataset
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the operators that users want to excluding from being quantized
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the symbols that users want to excluding from being quantized
--------------------------------
Label names required for creating a Module object to run forward propagation on the calibration dataset
--------------------------------
A logging object for printing information during the process of quantization
--------------------------------
The maximum number of examples that user would like to use for calibration
--------------------------------
If not provided, the whole calibration dataset will be used
--------------------------------
The mode that quantization pass to apply
--------------------------------
Support QSTR
--------------------------------
QSTR means quantize all operator if possible
--------------------------------
QSTR means quantization pass will smartly choice which operator should be quantized
--------------------------------
The quantized destination type for input data
--------------------------------
Currently support QSTR
--------------------------------
QSTR means automatically select output type according to calibration result
--------------------------------
Default value is QSTR
--------------------------------
Defines the structure of a neural network for D_TYPE data types
--------------------------------
The generator function
--------------------------------
It expected to generate N i i d samples by calling generator BSTR
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
Beta BSTR parameters of the distributions
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Name of the image file to be loaded
--------------------------------
CONSTANT_NUM for three channel color output
--------------------------------
CONSTANT_NUM for grayscale output
--------------------------------
Output buffer
--------------------------------
Use None for automatic allocation
--------------------------------
CONSTANT_BOOL for RGB formatted output BSTR
--------------------------------
CONSTANT_BOOL for BGR formatted output BSTR
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the length input as a mask over the PARAM input
--------------------------------
Data type of PARAM embeddings
--------------------------------
Size of the vocabulary, i e
--------------------------------
maximum D_TYPE index CONSTANT_NUM
--------------------------------
Dimension of the dense embedding
--------------------------------
Initializer for the embeddings matrix
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The value used for padding when PARAM is QSTR
--------------------------------
An n dimensional input D_STRUCTURE
--------------------------------
Padding type to use
--------------------------------
QSTR pads with PARAM QSTR pads using the edge values of the input D_STRUCTURE QSTR pads by reflecting values with respect to the edges
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Widths of the padding regions applied to the edges of each axis
--------------------------------
It is a D_STRUCTURE of D_TYPE padding widths for each axis of the format BSTR
--------------------------------
It should be of length CONSTANT_NUM N QSTR N is the number of dimensions of the D_STRUCTURE This is equivalent to pad_width in numpy pad, but flattened
--------------------------------
Attention maps
--------------------------------
Set number of heads
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Queries, keys and values interleaved
--------------------------------
whether to turn cudnn off
--------------------------------
Input data to the SpatialTransformerOp
--------------------------------
localisation net, the output dim should be CONSTANT_NUM when PARAM is affine
--------------------------------
You shold initialize the weight and bias with identity tranform
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
sampling type
--------------------------------
output shape BSTR of spatial transformer BSTR
--------------------------------
transformation type
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Blocks of block_size
--------------------------------
block_size are moved
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE or None
--------------------------------
The axis to picking the elements
--------------------------------
Negative values means indexing from right to left
--------------------------------
If is None, the elements in the PARAM w r t the flattened input will be picked
--------------------------------
The input D_STRUCTURE
--------------------------------
The index D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, the PARAM where we pick the elements is left in the result as dimension with size one
--------------------------------
Specify how PARAM of bound indices behave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all indices mentioned are too large, they are replaced by the PARAM that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
Beta BSTR parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Specify which shape axis the channel is specified
--------------------------------
beta D_STRUCTURE
--------------------------------
Do not select CUDNN operator, if available
--------------------------------
Input data to batch normalization
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR
--------------------------------
Fix PARAM while training
--------------------------------
gamma D_STRUCTURE
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Momentum for moving average
--------------------------------
running mean of input
--------------------------------
running variance of input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and inverse std
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
D_STRUCTURE of axes on which input PARAM will be sliced according to the corresponding size of the second input
--------------------------------
By default will slice on all axes
--------------------------------
Negative axes are supported
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape like input
--------------------------------
The axis which to reverse elements
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE data loading object
--------------------------------
If calib_mode QSTR , no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators
--------------------------------
The quantized models generated in this mode are normally CONSTANT_NUM CONSTANT_NUM slower than those with calibrations during inference
--------------------------------
If calib_mode QSTR , the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization
--------------------------------
If calib_mode QSTR BSTR, the thresholds for quantization will be derived such that the KL divergence between the distributions of D_TYPE layer outputs and quantized layer outputs is minimized based upon the calibration dataset
--------------------------------
Defines the device that users want to run forward propagation on the calibration dataset for collecting layer output statistics
--------------------------------
Currently, only supports single context
--------------------------------
D_STRUCTURE of DataDesc, required if PARAM is not provided
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the symbols that users want to excluding
--------------------------------
A D_STRUCTURE of D_TYPE wildcard matching the names of the symbols that users want to excluding from being quantized
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the operators that users want to excluding
--------------------------------
A logging object for printing information during the process of quantization
--------------------------------
Defines the structure of a neural network for D_TYPE data types
--------------------------------
The maximum number of examples that user would like to use for calibration
--------------------------------
If not provided, the whole calibration dataset will be used
--------------------------------
The quantized destination type for input data
--------------------------------
Currently support QSTR
--------------------------------
QSTR means automatically select output type according to calibration result
--------------------------------
Default value is QSTR
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The device id of the device
--------------------------------
device_id is not needed for CPU
--------------------------------
This is included to make interface compatible with GPU
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
number of input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Bias parameter
--------------------------------
Input data to the DeformableConvolutionOp
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of deformable group partitions
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
Input offset to the DeformableConvolutionOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Weight matrix
--------------------------------
Maximum temperal workspace allowed for convolution BSTR
--------------------------------
Adjustment for output shape BSTR
--------------------------------
If PARAM is set, adj will be ignored and computed accordingly
--------------------------------
Bias added to the result after the deconvolution operation
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algorithm by running performance test
--------------------------------
Input D_STRUCTURE to the deconvolution operation
--------------------------------
Dilation factor for each dimension of the input BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Deconvolution kernel size BSTR
--------------------------------
This is same as the kernel size used for the corresponding convolution
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout, NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of output filters
--------------------------------
Number of groups partition
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The amount of implicit zero padding added during convolution for each dimension of the input BSTR
--------------------------------
BSTR CONSTANT_NUM is usually a good choice
--------------------------------
If PARAM is set, pad will be ignored and a padding that will generate the target shape will be used
--------------------------------
Defaults to no padding
--------------------------------
The stride used for the corresponding convolution BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Shape of the output D_STRUCTURE BSTR
--------------------------------
Weights representing the PARAM
--------------------------------
Maximum temporary workspace allowed BSTR in deconvolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the deconvolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
BSTR encoded in corner
--------------------------------
BSTR value range BSTR
--------------------------------
BSTR Mean value to be subtracted from encoded values
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
BSTR encoded in corner
--------------------------------
ONE_WORD BSTR
--------------------------------
BSTR Std value to be divided from encoded values
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Batch Param Batch Size
--------------------------------
Context data loader optimized for
--------------------------------
Output data type
--------------------------------
QSTR means no change
--------------------------------
Augmentation Param Whether to flat the data into CONSTANT_NUM D
--------------------------------
Dataset Param Mnist image path
--------------------------------
Dataset Param Mnist label path
--------------------------------
partition the data into multiple parts
--------------------------------
the index of the part will read
--------------------------------
Maximum number of batches to prefetch
--------------------------------
Augmentation Param Random Seed
--------------------------------
Augmentation Param Whether to shuffle data
--------------------------------
Auxiliary Param Whether to print out data info
--------------------------------
Bottom margin
--------------------------------
Left margin
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Right margin
--------------------------------
source image
--------------------------------
Top margin
--------------------------------
Filling type default cv2 BORDER_CONSTANT
--------------------------------
ONE_WORD Deprecated
--------------------------------
Use PARAM instead
--------------------------------
Fill with single value
--------------------------------
Fill with PARAM RGB BSTR or gray , up to CONSTANT_NUM channels
--------------------------------
output directory name
--------------------------------
If None, then guess from PARAM or use the current directory
--------------------------------
filename of the downloaded file
--------------------------------
If None, then will guess a filename from PARAM
--------------------------------
Default is CONSTANT_BOOL, which means skipping download if the local file exists
--------------------------------
If CONSTANT_BOOL, then download the PARAM to overwrite the local file if exists
--------------------------------
The number of times to attempt the download in case of failure or non CONSTANT_NUM return codes
--------------------------------
URL to download
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE to be divided into sub D_STRUCTURE
--------------------------------
The axis along which to split, default is CONSTANT_NUM
--------------------------------
If indices_or_sections is an D_TYPE, N, the D_STRUCTURE will be divided into N equal D_STRUCTURE along PARAM
--------------------------------
If such a split is not possible, an error is raised
--------------------------------
If indices_or_sections is a CONSTANT_NUM-D D_STRUCTURE of sorted D_TYPE, the entries indicate where along PARAM the D_STRUCTURE is split
--------------------------------
For example, BSTR would, for PARAM CONSTANT_NUM, result in PARAM CONSTANT_NUM PARAM CONSTANT_NUM CONSTANT_NUM PARAM CONSTANT_NUM If an index exceeds the dimension of the D_STRUCTURE along PARAM, an empty sub D_STRUCTURE is returned correspondingly
--------------------------------
Whether to squeeze the PARAM of sub D_STRUCTURE or not, only useful when size of the sub D_STRUCTURE are CONSTANT_NUM on the PARAM
--------------------------------
Default is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The device id of the GPU device
--------------------------------
Input shape of the model e g BSTR
--------------------------------
Input data type e g
--------------------------------
ONE_WORD D_TYPE
--------------------------------
Path where to save the generated onnx file
--------------------------------
Path to the params file or params D_STRUCTURE
--------------------------------
ONE_WORD BSTR
--------------------------------
Path to the json file or Symbol object
--------------------------------
If CONSTANT_BOOL will print logs of the model conversion
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Target axis order
--------------------------------
By default the axes will be inverted
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be multiplied
--------------------------------
Second D_STRUCTURE to be multiplied
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
ONE_WORD bias
--------------------------------
Input data
--------------------------------
Whether to collapse all but the first axis of the input PARAM D_STRUCTURE
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of hidden nodes of the output
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices to be factorized
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Buffer containing contents of a file as a D_TYPE or bytes
--------------------------------
Output of lamb_update_phase CONSTANT_NUM
--------------------------------
Lower limit of norm of PARAM
--------------------------------
If lower_bound REXPR, Lower limit is not set
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD r1
--------------------------------
ONE_WORD r2
--------------------------------
Upper limit of norm of PARAM
--------------------------------
If upper_bound REXPR, Upper limit is not set
--------------------------------
ONE_WORD Weight
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The axis along which to slice
--------------------------------
A D_STRUCTURE of Contexts
--------------------------------
A batch of data
--------------------------------
Whether to force all slices to have the same number of elements
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameter of the negative binomial distribution
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Mean of the negative binomial distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Use transpose of input matrix
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bound of the distribution
--------------------------------
Lower bound of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Controls the spacing between the kernel points also known as the a trous algorithm
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimensions
--------------------------------
Controls the amount of implicit zero paddings on both sides of the output for output_padding number of points for each dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data to batch normalization
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Fix PARAM while training
--------------------------------
gamma D_STRUCTURE
--------------------------------
Hash key for synchronization, please set the same hash key for same layer, Block prefix is typically used as in gluon nn contrib SyncBatchNorm
--------------------------------
Momentum for moving average
--------------------------------
running mean of input
--------------------------------
running variance of input
--------------------------------
The count of GPU devices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output All,normal mean and var
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
Device context
--------------------------------
Default context is the current default context
--------------------------------
The data type of the D_STRUCTURE
--------------------------------
The default datatype is D_TYPE
--------------------------------
If CONSTANT_BOOL, PARAM is the last sample
--------------------------------
Otherwise, it is not included
--------------------------------
The default is CONSTANT_BOOL
--------------------------------
Number of samples to generate
--------------------------------
Must be non negative
--------------------------------
Start of interval
--------------------------------
End of interval, unless PARAM is set to CONSTANT_BOOL
--------------------------------
In that case, the D_STRUCTURE consists of all but the last of PARAM CONSTANT_NUM evenly spaced samples, so that stop is excluded
--------------------------------
Note that the step size changes when PARAM is CONSTANT_BOOL
--------------------------------
slope coefficient for the negative half axis
--------------------------------
Must be REXPR
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data
--------------------------------
output height required, but ignored if PARAM is defined or PARAM is not QSTR
--------------------------------
Resize PARAM to it shape
--------------------------------
resizing mode
--------------------------------
QSTR output PARAM equals parameter PARAM if PARAM parameter is not defined or input PARAM multiplied by PARAM otherwise
--------------------------------
Same for PARAM QSTR if original PARAM or PARAM is odd, then result PARAM is calculated PARAM result_h BSTR scale CONSTANT_NUM for scale REXPR the result shape would be PARAM if we did deconvolution with kernel BSTR and stride BSTR and for scale REXPR shape would be PARAM we did convolution with kernel BSTR and stride BSTR PARAM resize first input to the PARAM and PARAM of second input QSTR resize input to nearest lower even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest bigger even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
sampling scale of the PARAM optional, used in modes QSTR
--------------------------------
sampling scale of the PARAM optional, used in modes QSTR
--------------------------------
output width required, but ignored if PARAM is defined or PARAM is not QSTR
--------------------------------
The filename
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axes for variational dropout kernel
--------------------------------
Whether to turn off cudnn in dropout operator
--------------------------------
This option is ignored if PARAM is specified
--------------------------------
Input D_STRUCTURE to which dropout will be applied
--------------------------------
Whether to only turn on dropout during training or to also turn on for inference
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Fraction of the input that gets dropped PARAM during training time
--------------------------------
Generated anchor boxes
--------------------------------
Class predictions
--------------------------------
PARAM for ignored anchors
--------------------------------
Object detection labels
--------------------------------
Minimum number of negative samples
--------------------------------
Max negative to positive samples ratio, use CONSTANT_NUM to disable mining
--------------------------------
Threshold used for negative mining
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
PARAM GT overlap threshold to be regarded as a positive match
--------------------------------
Variances to be encoded in box regression target
--------------------------------
RGB mean to be subtracted
--------------------------------
Input image
--------------------------------
RGB standard deviation to be divided
--------------------------------
Arange elements according to the size of a certain axis of input D_STRUCTURE
--------------------------------
The negative numbers are interpreted counting from the backward
--------------------------------
If not provided, will arange elements according to the input shape
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR Only used for imperative calls
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The repeating time of all elements
--------------------------------
E g repeat CONSTANT_NUM, the element a will be repeated three times REXPR, a, a
--------------------------------
Start of interval
--------------------------------
The interval includes this value
--------------------------------
The default start value is CONSTANT_NUM
--------------------------------
Spacing between values
--------------------------------
Shape BSTR for each process
--------------------------------
Shape BSTR The decay parameter for each process
--------------------------------
Shape BSTR the interarrival times
--------------------------------
Shape BSTR The intensity for each of the K processes, for each sample
--------------------------------
Shape BSTR
--------------------------------
the length of the interval where the processes were sampled
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape BSTR the Hawkes state for each process
--------------------------------
The number of valid points in the process
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Limit of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probability in each experiment
--------------------------------
Shape of the output
--------------------------------
The input D_STRUCTURE to the embedding operator
--------------------------------
PARAM type of PARAM
--------------------------------
Vocabulary size of the input indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension of the embedding D_STRUCTURE
--------------------------------
Compute row sparse gradient in the backward calculation
--------------------------------
If set to CONSTANT_BOOL, the grad storage type is row_sparse
--------------------------------
The embedding weight matrix
--------------------------------
Input data
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE BSTR
--------------------------------
An n dimensional D_STRUCTURE whose last dimension has length k, where k is the number of possible outcomes of each multinomial distribution
--------------------------------
For example, data with PARAM BSTR specifies m n multinomial distributions each with k possible outcomes
--------------------------------
PARAM type of the sample output D_STRUCTURE
--------------------------------
The default is D_TYPE
--------------------------------
Note that the PARAM type of the log likelihood D_STRUCTURE is the same with that of PARAM
--------------------------------
If CONSTANT_BOOL, a second D_STRUCTURE containing log likelihood of the drawn samples will also be returned
--------------------------------
This is usually used for reinforcement learning, where you can provide reward as head gradient w r t
--------------------------------
this D_STRUCTURE to estimate gradient
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw from each distribution
--------------------------------
If shape is empty one sample will be drawn from each distribution
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix row indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
Weights, gradients, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Device context BSTR
--------------------------------
The data type of the output D_STRUCTURE
--------------------------------
The default dtype is PARAM dtype if PARAM is an D_STRUCTURE, D_TYPE otherwise
--------------------------------
An object exposing the D_STRUCTURE interface, an object whose array method returns an D_STRUCTURE, or any BSTR D_STRUCTURE
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axes to perform the broadcasting
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Target sizes of the broadcasting axes
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
First D_STRUCTURE in modulo
--------------------------------
Second D_STRUCTURE in modulo
--------------------------------
The D_STRUCTURE to be taken modulo
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
condition D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE representing the head of computation graph
--------------------------------
Upper bounds of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Lower bounds of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
First input
--------------------------------
Axes to perform broadcast on in the first input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input
--------------------------------
Axes to copy from the second input D_STRUCTURE
--------------------------------
Maximum value
--------------------------------
Minimum value
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only values of CONSTANT_NUM are currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
The value to be used as a mask
--------------------------------
Indicates whether to activate NumPy shape semantics
--------------------------------
Distribution probabilities
--------------------------------
Must sum to one on the last axis
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Whether to also return the log probability of sampled result
--------------------------------
This is usually used for differentiating through stochastic variables, e g
--------------------------------
in reinforcement learning
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Alpha parameter BSTR of the gamma distribution
--------------------------------
Beta parameter BSTR of the gamma distribution
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Axis along which to choose the top k indices
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output indices when PARAM is QSTR
--------------------------------
An error will be raised if the selected PARAM type can not precisely represent the indices
--------------------------------
Whether to choose k largest or k smallest elements
--------------------------------
Top K largest elements will be chosen if set to CONSTANT_BOOL
--------------------------------
Number of top elements to select, should be always smaller than or equal to the element number in the given PARAM
--------------------------------
A global sort is performed if set k REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The return type
--------------------------------
QSTR means to return the top k values, QSTR means to return the indices of the top k values, QSTR means to return a mask D_STRUCTURE containing CONSTANT_NUM
--------------------------------
CONSTANT_NUM means the top k values
--------------------------------
QSTR means to return a D_STRUCTURE of both values and indices of top k elements
--------------------------------
Weights, gradients and PARAM
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
D_STRUCTURE of input matrices to be decomposed
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by k context when k is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Limit of unsuccessful experiments, REXPR
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
Failure probability in each experiment, REXPR and REXPR
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If k and p are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Whether to use bias correction
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Index update count
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Initialize output to CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the length input as a mask over the PARAM input
--------------------------------
The input D_STRUCTURE to the embedding operator
--------------------------------
PARAM type of PARAM
--------------------------------
Vocabulary size of the input indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension of the embedding D_STRUCTURE
--------------------------------
Compute row sparse gradient in the backward calculation
--------------------------------
If set to CONSTANT_BOOL, the grad storage type is row_sparse
--------------------------------
The embedding weight matrix
--------------------------------
starting indices for the slice operation, supports negative indices
--------------------------------
Source input
--------------------------------
ending indices for the slice operation, supports negative indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
step for the slice operation, supports negative values
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
gamma D_STRUCTURE
--------------------------------
Total number of groups
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and std calculated along the given axis
--------------------------------
Maximum number of operators that can be bundled in a bulk
--------------------------------
Upsampling factors, applied to the QSTR dimensions, in that order
--------------------------------
D_STRUCTURE of triangular matrices stored as D_STRUCTURE
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether to do forward for training or predicting
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
Activation type to use
--------------------------------
See nd symbol Activation for supported types
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Number of units in output symbol
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of Block and name of weight if PARAM is None
--------------------------------
PARAM type to use for the recurrent step
--------------------------------
See nd symbol PARAM for supported types
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
The cell on which to perform variational dropout
--------------------------------
The dropout rate for inputs
--------------------------------
Won t apply dropout if it equals CONSTANT_NUM
--------------------------------
The dropout rate for outputs
--------------------------------
Won t apply dropout if it equals CONSTANT_NUM
--------------------------------
The dropout rate for state inputs on the first state channel
--------------------------------
Won t apply dropout if it equals CONSTANT_NUM
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Initialize output to CONSTANT_NUM
--------------------------------
Number of D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix rows
--------------------------------
Scalar factor multiplied with C
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
Generated anchor boxes
--------------------------------
Class predictions
--------------------------------
PARAM for ignored anchors
--------------------------------
Object detection labels
--------------------------------
Minimum number of negative samples
--------------------------------
Max negative to positive samples ratio, use CONSTANT_NUM to disable mining
--------------------------------
Threshold used for negative mining
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
PARAM GT overlap threshold to be regarded as a positive match
--------------------------------
Variances to be encoded in box regression target
--------------------------------
Type of activation function used in n_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
Input data
--------------------------------
Input label
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data to reshape
--------------------------------
ONE_WORD Deprecated
--------------------------------
Use PARAM instead
--------------------------------
Whether keep the highest dim unchanged If set to CONSTANT_BOOL, then the first dim in PARAM is ignored,and always fixed as input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL then the special values are inferred from right to left
--------------------------------
The target shape
--------------------------------
ONE_WORD Deprecated
--------------------------------
Use PARAM instead
--------------------------------
Target new PARAM
--------------------------------
One and only one dim can be CONSTANT_NUM, in which case it will be inferred from the rest of dims
--------------------------------
Input D_STRUCTURE
--------------------------------
the first axis to be swapped
--------------------------------
the second axis to be swapped
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis to perform layer normalization
--------------------------------
Usually, this should be be axis of the channel dimension
--------------------------------
Negative values means indexing from right to left
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data to layer normalization
--------------------------------
An epsilon parameter to prevent division by CONSTANT_NUM
--------------------------------
gamma D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and std calculated along the given PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD data
--------------------------------
ONE_WORD index
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Controls the spacing between the kernel points also known as the a trous algorithm
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimensions
--------------------------------
Controls the amount of implicit zero paddings on both sides of the output for output_padding number of points for each dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
Input data
--------------------------------
The histogram is computed over the flattened D_STRUCTURE
--------------------------------
If bins is an D_TYPE, it defines the number of equal width bins in the given PARAM BSTR
--------------------------------
If bins is a D_STRUCTURE, it defines the bin edges, including the rightmost edge, allowing for non uniform bin widths
--------------------------------
The lower and upper range of the PARAM
--------------------------------
If not provided, range is simply BSTR
--------------------------------
Values outside the range are ignored
--------------------------------
The first element of the range must be less than or equal to the second
--------------------------------
range affects the automatic bin computation as well, the range will be equally divided by the number of PARAM
--------------------------------
Bias parameter
--------------------------------
Input data
--------------------------------
Whether to collapse all but the first axis of the input PARAM D_STRUCTURE
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of hidden nodes of the output
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weight matrix
--------------------------------
GPU context whose corresponding cuda compute capability is to be retrieved
--------------------------------
QSTR for sharing weights with the new QSTR
--------------------------------
For example, if you want QSTR to share QSTR weights, you can do dense0 nn Dense BSTR dense1 nn Dense CONSTANT_NUM, params dense0 collect_params BSTR
--------------------------------
Prefix acts like a name space
--------------------------------
All children blocks created in parent block name_scope will have parent block prefix in their name
--------------------------------
Please refer to naming tutorial for more info on prefix and naming
--------------------------------
Set number of heads
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Interleaved queries, keys and values
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be multiplied
--------------------------------
Second D_STRUCTURE to be multiplied
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
beta D_STRUCTURE
--------------------------------
Input data to batch normalization
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Fix PARAM while training
--------------------------------
gamma D_STRUCTURE
--------------------------------
Hash key for synchronization, please set the same hash key for same layer, Block prefix is typically used as in gluon nn contrib SyncBatchNorm
--------------------------------
Momentum for moving average
--------------------------------
running mean of input
--------------------------------
running variance of input
--------------------------------
The count of GPU devices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output All,normal mean and var
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Upper boundary of the output interval
--------------------------------
All values generated will be less than high
--------------------------------
Lower boundary of the output interval
--------------------------------
All values generated will be greater than or equal to low
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
Input data to the CountSketchOp
--------------------------------
The index D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output dimension
--------------------------------
How many sketch D_STRUCTURE to process at one time
--------------------------------
The sign D_STRUCTURE
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Specifies the dilation rate to use for dilated convolution
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimensions
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
number of input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The shape of the desired D_STRUCTURE
--------------------------------
We can set the dim to zero if it same as the original
--------------------------------
E g A broadcast_to B, shape BSTR has the same meaning as A broadcast_axis B, axis CONSTANT_NUM, size CONSTANT_NUM
--------------------------------
A logging object for printing information during the process of quantization
--------------------------------
The quantized destination type for input data
--------------------------------
Currently support QSTR
--------------------------------
QSTR means automatically select output type according to calibration result
--------------------------------
Default value is QSTR
--------------------------------
Activation function to use
--------------------------------
See Activation
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
The dimensionality of the output space, i e
--------------------------------
the number of output channels BSTR in the convolution
--------------------------------
Specifies the dilation rate to use for dilated convolution
--------------------------------
Controls the connections between inputs and outputs
--------------------------------
At groups CONSTANT_NUM, all inputs are convolved to all outputs
--------------------------------
At groups CONSTANT_NUM, the operation becomes equivalent to having two conv layers side by side, each seeing half the input PARAM, and producing half the output PARAM, and both subsequently concatenated
--------------------------------
The number of input PARAM to this layer
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Specifies the dimensions of the convolution window
--------------------------------
Dimension ordering of data and weight
--------------------------------
Only supports QSTR layout for now
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
Convolution is applied on the QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Specify the strides of the convolution
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the weight weights matrix
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Whether to use bias correction
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Index update count
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only values of CONSTANT_NUM are currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
The input
--------------------------------
Output PARAM type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Optional, id of the background class which will be ignored in nms
--------------------------------
Start index of the consecutive CONSTANT_NUM coordinates
--------------------------------
The input
--------------------------------
Optional, if set CONSTANT_BOOL and PARAM is provided, nms will only apply to boxes belongs to the same category
--------------------------------
Optional, index of the class categories, CONSTANT_NUM to disable
--------------------------------
The input box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
Overlapping BSTR threshold to suppress object with smaller score
--------------------------------
Index of the scores confidence of boxes
--------------------------------
Apply nms to topk boxes with descending scores, CONSTANT_NUM to no restriction
--------------------------------
Filter input boxes to those whose scores greater than valid_thresh
--------------------------------
Mapping each input name to a NumPy D_STRUCTURE
--------------------------------
If QSTR , will take the default context
--------------------------------
Initializer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of beta to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, beta is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Initializer for the gamma weight
--------------------------------
Number of channels BSTR in input data
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Momentum for the moving average
--------------------------------
Initializer for the running mean
--------------------------------
Initializer for the running variance
--------------------------------
If CONSTANT_BOOL, multiply by gamma
--------------------------------
If CONSTANT_BOOL, gamma is not used
--------------------------------
When the next layer is linear also e g
--------------------------------
nn relu , this can be disabled since the scaling will be done by the next layer
--------------------------------
If CONSTANT_BOOL, use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a PARAM shift operator
--------------------------------
If CONSTANT_BOOL, use local batch norm
--------------------------------
The input D_STRUCTURE to the embedding operator
--------------------------------
PARAM type of PARAM
--------------------------------
Vocabulary size of the input indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension of the embedding D_STRUCTURE
--------------------------------
Compute row sparse gradient in the backward calculation
--------------------------------
If set to CONSTANT_BOOL, the grad storage type is row_sparse
--------------------------------
The embedding weight matrix
--------------------------------
condition D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Activation function to be applied
--------------------------------
Input data
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
The storage type of the empty D_STRUCTURE, such as QSTR , etc
--------------------------------
Input D_STRUCTURE
--------------------------------
Gradient scale as a supplement to unary and binary operators
--------------------------------
If this is set to null, the output gradient will not be normalized
--------------------------------
If this is set to batch, the output gradient will be divided by the batch size
--------------------------------
If this is set to valid, the output gradient will be divided by the number of valid input elements
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
clip each element in the D_STRUCTURE to CONSTANT_NUM when it is less than QSTR
--------------------------------
This is used when PARAM is set to QSTR
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Only used for AvgPool, specify whether to count padding elements for averagecalculation
--------------------------------
For example, with a CONSTANT_NUM CONSTANT_NUM PARAM on a CONSTANT_NUM CONSTANT_NUM corner of a image,the sum of the CONSTANT_NUM valid elements will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL,or it will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Turn off cudnn pooling and use MXNet pooling operator
--------------------------------
Input data to the pooling operator
--------------------------------
Ignore PARAM size, do global pooling based on current input feature map
--------------------------------
Pooling kernel size BSTR
--------------------------------
Set layout for input and output
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Value of p for Lp pooling, can be CONSTANT_NUM, required for Lp Pooling
--------------------------------
Pad for pooling BSTR
--------------------------------
Defaults to no padding
--------------------------------
Pooling type to be applied
--------------------------------
Pooling convention to be applied
--------------------------------
Stride for pooling BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Expectation of interval, should be REXPR
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM is an D_STRUCTURE with shape, e g , BSTR, where m n samples are drawn for each entry in PARAM
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
BSTR encoded in corner
--------------------------------
BSTR value range BSTR
--------------------------------
BSTR Mean value to be subtracted from encoded values
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
BSTR encoded in corner
--------------------------------
ONE_WORD BSTR
--------------------------------
BSTR Std value to be divided from encoded values
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value in the form of D_TYPE
--------------------------------
If present, it will be used to quantize the D_TYPE PARAM into D_TYPE
--------------------------------
The minimum scalar value in the form of D_TYPE
--------------------------------
If present, it will be used to quantize the D_TYPE PARAM into D_TYPE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
auto can be specified to automatically determine output type according to PARAM
--------------------------------
Height of the cropping area
--------------------------------
Interpolation method
--------------------------------
See resize_short for details
--------------------------------
Optional, resize to new size after cropping
--------------------------------
Input image
--------------------------------
Width of the cropping area
--------------------------------
Left boundary of the cropping area
--------------------------------
Top boundary of the cropping area
--------------------------------
Blocks of block_size
--------------------------------
block_size are moved
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Upsampling factor, applied to the QSTR dimension
--------------------------------
Maximum value
--------------------------------
Minimum value
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ROI pooling output shape BSTR
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR , where BSTR are top left and bottom right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input D_STRUCTURE
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The value used for padding when PARAM is QSTR
--------------------------------
An n dimensional input D_STRUCTURE
--------------------------------
Padding type to use
--------------------------------
QSTR pads with PARAM QSTR pads using the edge values of the input D_STRUCTURE QSTR pads by reflecting values with respect to the edges
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Widths of the padding regions applied to the edges of each axis
--------------------------------
It is a D_STRUCTURE of D_TYPE padding widths for each axis of the format BSTR
--------------------------------
It should be of length CONSTANT_NUM N QSTR N is the number of dimensions of the D_STRUCTURE This is equivalent to pad_width in numpy pad, but flattened
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
An D_TYPE padding size
--------------------------------
Path to the file
--------------------------------
Expected sha1 hash in hexadecimal digits
--------------------------------
Axis along which to choose the top k indices
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output indices when PARAM is QSTR
--------------------------------
An error will be raised if the selected PARAM type can not precisely represent the indices
--------------------------------
Whether to choose k largest or k smallest elements
--------------------------------
Top K largest elements will be chosen if set to CONSTANT_BOOL
--------------------------------
Number of top elements to select, should be always smaller than or equal to the element number in the given PARAM
--------------------------------
A global sort is performed if set k REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The return type
--------------------------------
QSTR means to return the top k values, QSTR means to return the indices of the top k values, QSTR means to return a mask D_STRUCTURE containing CONSTANT_NUM
--------------------------------
CONSTANT_NUM means the top k values
--------------------------------
QSTR means to return a D_STRUCTURE of both values and indices of top k elements
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axes to include in the index D_STRUCTURE
--------------------------------
Supports negative values
--------------------------------
Input data
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Clip weights to the range of BSTR If clip_weights REXPR, PARAM clipping is turned off
--------------------------------
weights max BSTR
--------------------------------
ONE_WORD delta
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD g
--------------------------------
Decay rate
--------------------------------
Decay rate
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD n
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The computation to be executed if PARAM is CONSTANT_BOOL
--------------------------------
The branch condition
--------------------------------
The computation to be executed if PARAM is CONSTANT_BOOL
--------------------------------
Input D_STRUCTURE
--------------------------------
Scales the gradient by a D_TYPE factor
--------------------------------
The instances whose labels ignore_label will be ignored during backward, if PARAM is set to CONSTANT_BOOL
--------------------------------
Ground truth label
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along axis CONSTANT_NUM
--------------------------------
This is applied when the shape of input D_STRUCTURE differs from the shape of PARAM D_STRUCTURE
--------------------------------
Normalizes the gradient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiplies gradient with output gradient element wise
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along the last axis CONSTANT_NUM
--------------------------------
Constant for computing a PARAM smoothed version of cross entropyfor the backwards pass
--------------------------------
This constant gets subtracted from theone hot encoding of the gold PARAM and distributed uniformly toall other labels
--------------------------------
If set to CONSTANT_BOOL, the PARAM value will not contribute to the backward gradient
--------------------------------
The generator function
--------------------------------
It expected to generate N i i d samples by calling generator BSTR
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE
--------------------------------
Scales the gradient by a D_TYPE factor
--------------------------------
The instances whose labels ignore_label will be ignored during backward, if PARAM is set to CONSTANT_BOOL
--------------------------------
Ground truth label
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along axis CONSTANT_NUM
--------------------------------
This is applied when the shape of input D_STRUCTURE differs from the shape of PARAM D_STRUCTURE
--------------------------------
Normalizes the gradient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiplies gradient with output gradient element wise
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along the last axis CONSTANT_NUM
--------------------------------
Constant for computing a PARAM smoothed version of cross entropyfor the backwards pass
--------------------------------
This constant gets subtracted from theone hot encoding of the gold PARAM and distributed uniformly toall other labels
--------------------------------
If set to CONSTANT_BOOL, the PARAM value will not contribute to the backward gradient
--------------------------------
whether to maintain aggregate stats in memory for console dump
--------------------------------
Has some negative performance impact
--------------------------------
whether to periodically dump profiling data to file
--------------------------------
seconds between profile data dumps
--------------------------------
output file for profile data
--------------------------------
all profile types enabled
--------------------------------
whether to profile the C API
--------------------------------
whether to profile imperative operators
--------------------------------
whether to profile memory usage
--------------------------------
whether to profile kvstore server or worker
--------------------------------
server can only be profiled when kvstore is of type dist
--------------------------------
if this is not passed, defaults to worker
--------------------------------
whether to profile symbolic operators
--------------------------------
input data
--------------------------------
Whether we use DLPack zero copy conversion to convert to MXNet D_STRUCTURE
--------------------------------
This is only available for c contiguous D_STRUCTURE, i e
--------------------------------
D_STRUCTURE flags BSTR CONSTANT_BOOL
--------------------------------
Weights, gradients, PARAM, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
PARAM is applied on QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the max pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bound of the distribution
--------------------------------
Lower bound of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
An D_TYPE that represents the axis in D_STRUCTURE to mask from
--------------------------------
ONE_WORD Data
--------------------------------
ONE_WORD Mask
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Device context BSTR
--------------------------------
The data type of the output D_STRUCTURE
--------------------------------
The default dtype is PARAM dtype if PARAM is an D_STRUCTURE, D_TYPE otherwise
--------------------------------
An object exposing the D_STRUCTURE interface, an object whose array method returns an D_STRUCTURE, or any BSTR D_STRUCTURE
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The filename
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Mean of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Standard deviation of the distribution
--------------------------------
Shape of the output
--------------------------------
First input
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The beginning index along which the PARAM dimensions are to be reshaped
--------------------------------
Supports negative indices
--------------------------------
Defaults to None
--------------------------------
The ending index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The beginning index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
Defaults to None
--------------------------------
The ending index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
The module to checkpoint
--------------------------------
How many epochs to wait before checkpointing
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The file prefix for this checkpoint
--------------------------------
Indicates whether or not to save optimizer states for continued training
--------------------------------
Output of mp_lamb_update_phase CONSTANT_NUM
--------------------------------
Lower limit of norm of PARAM
--------------------------------
If lower_bound REXPR, Lower limit is not set
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD r1
--------------------------------
ONE_WORD r2
--------------------------------
Upper limit of norm of PARAM
--------------------------------
If upper_bound REXPR, Upper limit is not set
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
RROI align output shape BSTR
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Optional sampling ratio of RROI align, using adaptive size by default
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
If CONSTANT_BOOL then transpose the first input before dot
--------------------------------
If CONSTANT_BOOL then transpose the second input before dot
--------------------------------
Type of activation function
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Number of units in output symbol
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of Block and name of weight if PARAM is None
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bounds of the distributions
--------------------------------
Lower bounds of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
First input of the function
--------------------------------
Second input of the function
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
D_STRUCTURE of lower triangular matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
the dimension to be concated
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis which to reverse elements
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD D_STRUCTURE
--------------------------------
Initialize output to CONSTANT_NUM
--------------------------------
Number of D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Data to be shuffled
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to perform the reduction
--------------------------------
Negative values means indexing from right to left
--------------------------------
Requires axis to be set as D_TYPE, because global reduction is not supported yet
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
whether to use bidirectional recurrent layers
--------------------------------
Input data to RNN
--------------------------------
Maximum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
Minimum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
Whether to stop NaN from propagating in PARAM by clipping it to min max
--------------------------------
If clipping range is not specified, this option is ignored
--------------------------------
the type of RNN to compute
--------------------------------
number of stacked layers
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
drop rate of the dropout on the outputs of each RNN layer, except the last layer
--------------------------------
D_STRUCTURE of all RNN trainable parameters concatenated
--------------------------------
size of project size
--------------------------------
D_STRUCTURE of valid D_STRUCTURE lengths for each element in batch
--------------------------------
ONE_WORD BSTR
--------------------------------
initial hidden state of the RNN
--------------------------------
initial cell PARAM for LSTM networks BSTR
--------------------------------
Whether to have the states as symbol outputs
--------------------------------
size of the PARAM for each layer
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the input
--------------------------------
The minimum scalar value possibly produced for the input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
Slope of hard sigmoid
--------------------------------
Bias of hard sigmoid
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the length input as a mask over the PARAM input
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
whether to turn cudnn off
--------------------------------
Input data to the SpatialTransformerOp
--------------------------------
localisation net, the output dim should be CONSTANT_NUM when PARAM is affine
--------------------------------
You shold initialize the weight and bias with identity tranform
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
sampling type
--------------------------------
output shape BSTR of spatial transformer BSTR
--------------------------------
transformation type
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Attention maps
--------------------------------
Set number of heads
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Queries, keys and values interleaved
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Limits of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probabilities in each experiment
--------------------------------
Samples from the distributions
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The cropped area of the image must contain a fraction of the supplied image within in this range
--------------------------------
The cropped area of the image must have an aspect ratio width height within this range
--------------------------------
Brightness jittering range BSTR
--------------------------------
Contrast jittering range BSTR
--------------------------------
Shape for output data
--------------------------------
Hue jittering range BSTR
--------------------------------
Interpolation method for all resizing operations Possible values CONSTANT_NUM Nearest Neighbors Interpolation
--------------------------------
CONSTANT_NUM Bilinear interpolation
--------------------------------
CONSTANT_NUM Area based BSTR
--------------------------------
It may be a preferred method for image decimation, as it gives moire free results
--------------------------------
But when the image is zoomed, it is similar to the Nearest Neighbors method
--------------------------------
ONE_WORD BSTR
--------------------------------
CONSTANT_NUM Bicubic interpolation over 4x4 pixel neighborhood
--------------------------------
CONSTANT_NUM Lanczos interpolation over 8x8 pixel neighborhood
--------------------------------
CONSTANT_NUM Cubic for enlarge, area for shrink, bilinear for others CONSTANT_NUM Random select from interpolation method metioned above
--------------------------------
Note When shrinking an image, it will generally look best with AREA based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic BSTR
--------------------------------
Number of attempts at generating a cropped padded region of the image of the specified constraints
--------------------------------
After max_attempts failures, return the original image
--------------------------------
Mean pixel values for BSTR
--------------------------------
The minimum coverage of cropped sample w r t its original size
--------------------------------
With this constraint, objects that have marginal area after crop will be discarded
--------------------------------
The cropped area of the image must contain at least this fraction of any bounding box supplied
--------------------------------
The value of this parameter should be non negative
--------------------------------
In the case of CONSTANT_NUM, the cropped area does not need to overlap any of the bounding boxes supplied
--------------------------------
Pixel value to be filled when padding is enabled
--------------------------------
pad_val will automatically be subtracted by PARAM and divided by PARAM if applicable
--------------------------------
Pca noise level BSTR
--------------------------------
BSTR, probability to apply random cropping
--------------------------------
BSTR, probability to convert to grayscale for all channels
--------------------------------
Whether to apply horizontal flip to image with probability CONSTANT_FLOAT
--------------------------------
BSTR, probability to apply random padding
--------------------------------
Resize shorter edge if larger than CONSTANT_NUM at the begining
--------------------------------
Saturation jittering range BSTR
--------------------------------
Standard deviations for BSTR
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
RROI align output shape BSTR
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE
--------------------------------
Optional sampling ratio of RROI align, using adaptive size by default
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to be sliced, supports negative indexes
--------------------------------
The beginning index along the PARAM to be sliced, supports negative indexes
--------------------------------
Source input
--------------------------------
The ending index along the PARAM to be sliced, supports negative indexes
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Repeat times
--------------------------------
Running context
--------------------------------
Gradient requirements
--------------------------------
Location to evaluate the inner executor
--------------------------------
Symbol to run the speed test
--------------------------------
QSTR Test the forward_backward speed
--------------------------------
Selects a subset of the single dimensional entries in the shape
--------------------------------
If an axis is selected with shape entry greater than one, an error is raised
--------------------------------
data to squeeze
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE to the embedding operator
--------------------------------
PARAM type of PARAM
--------------------------------
Vocabulary size of the input indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension of the embedding D_STRUCTURE
--------------------------------
Compute row sparse gradient in the backward calculation
--------------------------------
If set to CONSTANT_BOOL, the grad storage type is row_sparse
--------------------------------
The embedding weight matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix rows
--------------------------------
Scalar factor multiplied with C
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The axis along which to perform the reduction
--------------------------------
Negative values means indexing from right to left
--------------------------------
Requires axis to be set as D_TYPE, because global reduction is not supported yet
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The number of times for repeating the D_STRUCTURE a
--------------------------------
Each dim size of reps must be a positive D_TYPE
--------------------------------
If reps has length d, the result will have dimension of max BSTR If a ndim REXPR, a is promoted to be d dimensional by prepending new axes
--------------------------------
If a ndim REXPR, reps is promoted to a ndim by pre pending CONSTANT_NUMs to it
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
padding is applied on QSTR dimension
--------------------------------
Whether to clip PARAM of boundary boxes
--------------------------------
Input data
--------------------------------
Priorbox center offsets, y and x respectively
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of aspect ratios of generated MultiBoxPriores
--------------------------------
D_STRUCTURE of sizes of generated MultiBoxPriores
--------------------------------
Priorbox step across y and x, CONSTANT_NUM for auto calculation
--------------------------------
The absolute threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
The relative threshold
--------------------------------
Default threshold will be used if set to QSTR
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
u D_STRUCTURE
--------------------------------
v D_STRUCTURE
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
base class for classes that will be registered
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
When CONSTANT_BOOL, will exclude PARAM elements when computing the average value
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
PARAM is applied on QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the average pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
u D_STRUCTURE
--------------------------------
v D_STRUCTURE
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
D_STRUCTURE of D_STRUCTURE to upsample
--------------------------------
For bilinear upsampling, there should be CONSTANT_NUM inputs CONSTANT_NUM data and CONSTANT_NUM weight
--------------------------------
How to handle multiple input
--------------------------------
concat means concatenate upsampled images along the channel dimension
--------------------------------
sum means add all images together, only available for nearest neighbor upsampling
--------------------------------
Input filter
--------------------------------
Only used by bilinear PARAM Since bilinear upsampling uses deconvolution, num_filters is set to the number of channels
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
upsampling method
--------------------------------
Up sampling scale
--------------------------------
Tmp workspace for deconvolution BSTR
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The axis of input D_STRUCTURE to be taken For input D_STRUCTURE of rank r, it could be in the range of BSTR
--------------------------------
The indices of the values to be extracted
--------------------------------
Specify how PARAM of bound PARAM bahave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all PARAM mentioned are too large, they are replaced by the index that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
QSTR means to raise an error when index PARAM of range
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices to be factorized
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a CONSTANT_NUM D_STRUCTURE, it specifies the axes that hold CONSTANT_NUM-D matrices, and the matrix norms of these matrices are computed
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
Order of the norm
--------------------------------
Currently ord CONSTANT_NUM and ord CONSTANT_NUM is supported
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The PARAM type of the output
--------------------------------
Type of activation function used in n_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
The input D_STRUCTURE
--------------------------------
The axis of input D_STRUCTURE to be taken For input D_STRUCTURE of rank r, it could be in the range of BSTR
--------------------------------
The indices of the values to be extracted
--------------------------------
Specify how PARAM of bound PARAM bahave
--------------------------------
Default is QSTR
--------------------------------
QSTR means clip to the range
--------------------------------
So, if all PARAM mentioned are too large, they are replaced by the index that addresses the last element along an PARAM
--------------------------------
QSTR means to wrap around
--------------------------------
QSTR means to raise an error when index PARAM of range
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
padding is applied on QSTR dimension
--------------------------------
The axis or axes along which to perform the reduction The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a CONSTANT_NUM D_STRUCTURE, it specifies the axes that hold CONSTANT_NUM-D matrices, and the matrix norms of these matrices are computed
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
Order of the norm
--------------------------------
Currently ord CONSTANT_NUM and ord CONSTANT_NUM is supported
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The PARAM type of the output
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The optimizer
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weights, gradients and PARAM
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Maximum size of sub batch to be forwarded at one time
--------------------------------
Input data to the IFFTOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Lambda parameter BSTR of the exponential distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to slice
--------------------------------
A batch of data
--------------------------------
Whether to force all slices to have the same number of elements
--------------------------------
If CONSTANT_BOOL, an error will be raised when PARAM does not evenly divide PARAM shape BSTR
--------------------------------
Number of desired slices
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output of lamb_update_phase CONSTANT_NUM
--------------------------------
Lower limit of norm of PARAM
--------------------------------
If lower_bound REXPR, Lower limit is not set
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD r1
--------------------------------
ONE_WORD r2
--------------------------------
Upper limit of norm of PARAM
--------------------------------
If upper_bound REXPR, Upper limit is not set
--------------------------------
ONE_WORD Weight
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The number of times for repeating the D_STRUCTURE a
--------------------------------
Each dim size of reps must be a positive D_TYPE
--------------------------------
If reps has length d, the result will have dimension of max BSTR If a ndim REXPR, a is promoted to be d dimensional by prepending new axes
--------------------------------
If a ndim REXPR, reps is promoted to a ndim by pre pending CONSTANT_NUMs to it
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda parameter BSTR of the Poisson distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Clip weights to the range of BSTR If clip_weights REXPR, PARAM clipping is turned off
--------------------------------
weights max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
The decay rate of momentum estimates
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD n
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
How much to jitter brightness
--------------------------------
How much to jitter contrast
--------------------------------
The input
--------------------------------
How much to jitter hue
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
How much to jitter saturation
--------------------------------
Input D_STRUCTURE
--------------------------------
the first axis to be swapped
--------------------------------
the second axis to be swapped
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
size of the buckets
--------------------------------
The Quantile function that takes a probability and maps it back to a value
--------------------------------
It the inverse of the cdf function
--------------------------------
starting indices for the slice operation, supports negative indices
--------------------------------
Source input
--------------------------------
ending indices for the slice operation, supports negative indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
step for the slice operation, supports negative values
--------------------------------
LARS eps
--------------------------------
LARS eta
--------------------------------
sum of square of gradients D_STRUCTURE
--------------------------------
Learning rates to scale by LARS coefficient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Gradient rescaling factor
--------------------------------
weight decays
--------------------------------
sum of square of weights D_STRUCTURE
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The variance scaling parameter lpha in the LRN expression
--------------------------------
The power parameter eta in the LRN expression
--------------------------------
Input data to LRN
--------------------------------
The parameter k in the LRN expression
--------------------------------
normalization window width in elements
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
ONE_WORD data
--------------------------------
ONE_WORD index
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of output
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output storage type
--------------------------------
Model parameter, D_STRUCTURE of name to D_STRUCTURE of net weights
--------------------------------
Model parameter, D_STRUCTURE of name to D_STRUCTURE of net auxiliary states
--------------------------------
The epoch number of the model
--------------------------------
Prefix of model name
--------------------------------
Whether to remove the amp_cast and amp_multicast operators, before saving the model
--------------------------------
The input Symbol
--------------------------------
The axis which to reverse elements
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Number of classes for the output layer
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Name of the model
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
D_STRUCTURE of D_TYPE
--------------------------------
Axes along which to compute mean and variance
--------------------------------
Input D_STRUCTURE
--------------------------------
produce moments with the same dimensionality as the input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
scalar input
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
padding is applied on QSTR dimension
--------------------------------
Activation function to be applied
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
Pooling is applied on the W dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the max pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
Whether to overwrite destination file if already exists
--------------------------------
Destination path to store downloaded file
--------------------------------
By default stores to the current directory with same name as in PARAM
--------------------------------
The number of times to attempt the download in case of failure or non CONSTANT_NUM return codes
--------------------------------
Expected sha1 hash in hexadecimal digits
--------------------------------
Will ignore existing file when hash is specified but doesn t match
--------------------------------
URL to download
--------------------------------
Verify SSL certificates
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
Upper bounds of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Lower bounds of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices to be decomposed
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Number of columns in the output
--------------------------------
If CONSTANT_NUM, defaults to N
--------------------------------
Number of rows in the output
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
Index of the diagonal CONSTANT_NUM BSTR refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal
--------------------------------
BBox Predicted deltas from anchors for proposals
--------------------------------
Score of how likely proposal is object
--------------------------------
The size of the receptive field each unit in the convolution layer of the rpn,for example the product of all stride prior to this layer
--------------------------------
Image size and scale
--------------------------------
Usage of IoU Loss
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Add score to outputs
--------------------------------
Used to generate anchor windows by enumerating ratios
--------------------------------
Minimum height or width in proposal
--------------------------------
Number of top scoring boxes to keep after applying NMS to RPN proposals
--------------------------------
Number of top scoring boxes to keep before applying NMS to RPN proposals
--------------------------------
Used to generate anchor windows by enumerating scales
--------------------------------
NMS value, below which to suppress
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Limits of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probabilities in each experiment
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Input D_STRUCTURE a
--------------------------------
Absolute tolerance
--------------------------------
Input D_STRUCTURE b
--------------------------------
Whether to compare NaN as equal
--------------------------------
If CONSTANT_BOOL, NaN in A will be considered equal to NaN in B in the output D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Relative tolerance
--------------------------------
ONE_WORD Weights
--------------------------------
Whether to cast to the narrowest type
--------------------------------
Number of input output pairs to be casted to the widest type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axes to perform the broadcasting
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Target sizes of the broadcasting axes
--------------------------------
condition D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Standard deviations of the distributions
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Additional arguments to PARAM constructor
--------------------------------
Only used when PARAM is D_TYPE
--------------------------------
Additional arguments to PARAM constructor
--------------------------------
Only used when PARAM is D_TYPE
--------------------------------
Specifies the metric to create
--------------------------------
This argument must be one of the below Name of a metric
--------------------------------
Whether to record gradient graph for computing higher order
--------------------------------
Gradients with respect to PARAM
--------------------------------
Output D_STRUCTURE BSTR
--------------------------------
Whether to keep computation graph to differentiate again, instead of clearing history and release memory
--------------------------------
Defaults to the same value as PARAM
--------------------------------
Whether to do backward for training or prediction
--------------------------------
Input variables to compute gradients for
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The variance scaling parameter lpha in the LRN expression
--------------------------------
The power parameter eta in the LRN expression
--------------------------------
Input data to LRN
--------------------------------
The parameter k in the LRN expression
--------------------------------
normalization window width in elements
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Distribution probabilities
--------------------------------
Must sum to one on the last axis
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Whether to also return the log probability of sampled result
--------------------------------
This is usually used for differentiating through stochastic variables, e g
--------------------------------
in reinforcement learning
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Type of activation function used in n_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
input data
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
fix group size
--------------------------------
Whether to disable PARAM parameter
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
fix output dim
--------------------------------
fix part size
--------------------------------
fix pooled size
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR
--------------------------------
BSTR are top left and down right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input PARAM
--------------------------------
fix samples per part
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
transition parameter
--------------------------------
fix transition std
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Whether to use bias correction
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Index update count
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Alpha BSTR parameter of the negative binomial distribution
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Mean of the negative binomial distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Positional input matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Maximum size of sub batch to be forwarded at one time
--------------------------------
Input data to the IFFTOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
Standard deviations of the distributions
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
fix group size
--------------------------------
Whether to disable PARAM parameter
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
fix output dim
--------------------------------
fix part size
--------------------------------
fix pooled size
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR
--------------------------------
BSTR are top left and down right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input PARAM
--------------------------------
fix samples per part
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
transition parameter
--------------------------------
fix transition std
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ROI Align output roi feature map height and width BSTR
--------------------------------
Whether to perform position sensitive RoI pooling
--------------------------------
PSRoIPooling is first proposaled by R FCN and it can reduce the input channels by ph pw times, where BSTR is the PARAM
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE, if batchid is less than CONSTANT_NUM, it will be ignored
--------------------------------
Optional sampling ratio of ROI align, using adaptive size by default
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The axis that should be normalized
--------------------------------
This is typically the channels BSTR axis
--------------------------------
For instance, after a Conv2D layer with layout QSTR , set axis CONSTANT_NUM in BatchNorm
--------------------------------
If layout QSTR , then set axis CONSTANT_NUM
--------------------------------
Initializer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of beta to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, beta is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Initializer for the gamma weight
--------------------------------
Number of channels BSTR in input data
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
Momentum for the moving average
--------------------------------
Initializer for the running mean
--------------------------------
Initializer for the running variance
--------------------------------
If CONSTANT_BOOL, multiply by gamma
--------------------------------
If CONSTANT_BOOL, gamma is not used
--------------------------------
When the next layer is linear also e g
--------------------------------
nn relu , this can be disabled since the scaling will be done by the next layer
--------------------------------
If CONSTANT_BOOL, use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a PARAM shift operator
--------------------------------
If CONSTANT_BOOL, use local batch norm
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Limits of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probabilities in each experiment
--------------------------------
Samples from the distributions
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
Select between the number of values across the whole matrix, in each column, or in each row
--------------------------------
ONE_WORD Input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
Standard deviations of the distributions
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
Beta BSTR parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
The buckets to run the chi square the test
--------------------------------
Make sure that the buckets cover the whole range of the distribution
--------------------------------
Also, the buckets must be in ascending order and have no intersection
--------------------------------
A function that is assumed to generate i i d samples from a specific distribution
--------------------------------
generator BSTR should generate N random samples
--------------------------------
The number of samples to generate for the testing
--------------------------------
The ground truth probability of the random value fall in a specific bucket
--------------------------------
source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
scalar input
--------------------------------
Input data to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Specifies the output shape BSTR
--------------------------------
This is required if transformation type is affine
--------------------------------
If transformation type is warp, this parameter is ignored
--------------------------------
The type of transformation
--------------------------------
For affine, input PARAM should be an affine matrix of size BSTR
--------------------------------
For warp, input PARAM should be an optical flow of size BSTR
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
The storage type of the empty D_STRUCTURE, such as QSTR , etc
--------------------------------
The input
--------------------------------
Mean of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Standard deviation of the distribution
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Parameters for the optimizer
--------------------------------
Name of the optimizer
--------------------------------
Should be the name of a subclass of Optimizer
--------------------------------
Case insensitive
--------------------------------
The input D_STRUCTURE for sparse_retain operator
--------------------------------
The index D_STRUCTURE of rows ids that will be retained
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
The augmenter names to represent D_STRUCTURE of augmenters to be applied, seperated by comma
--------------------------------
Additional keyword parameters will be seen by these augmenters
--------------------------------
Batch size
--------------------------------
Add a random value in BSTR to the brightness of image
--------------------------------
Add a random value in BSTR to the contrast of image
--------------------------------
Context data loader optimized for
--------------------------------
The shape of one output image in BSTR format
--------------------------------
The device id used to create context for internal D_STRUCTURE
--------------------------------
Setting device_id to CONSTANT_NUM will create Context CPU BSTR
--------------------------------
Setting device_id to valid positive device id will create Context CPUPinned BSTR
--------------------------------
Default is CONSTANT_NUM
--------------------------------
Output data type
--------------------------------
QSTR means no change
--------------------------------
Set the padding pixels value to QSTR
--------------------------------
The interpolation method CONSTANT_NUM NN CONSTANT_NUM bilinear CONSTANT_NUM cubic CONSTANT_NUM area CONSTANT_NUM lanczos4 CONSTANT_NUM auto CONSTANT_NUM0 rand
--------------------------------
The number of labels per image
--------------------------------
Change the aspect BSTR to a random value
--------------------------------
If PARAM is None then the aspect ratio ins sampled from BSTR, else it is in BSTR
--------------------------------
Crop both width and height into a random size in BSTR Ignored if PARAM is CONSTANT_BOOL
--------------------------------
Set the maximal width and height after all PARAM and PARAM argumentation are applied
--------------------------------
Change the area BSTR to a random value in BSTR
--------------------------------
Ignored if PARAM is CONSTANT_BOOL
--------------------------------
Change the PARAM with a value randomly chosen from BSTR
--------------------------------
Change the illumination with a value randomly chosen from BSTR
--------------------------------
PARAM into BSTR with QSTR randomly chosen from BSTR
--------------------------------
Ignored if PARAM is CONSTANT_BOOL
--------------------------------
PARAM by a random degree in BSTR
--------------------------------
Apply a shear transformation namely BSTR REXPR with QSTR randomly chose from BSTR
--------------------------------
The mean value to be subtracted on the alpha channel
--------------------------------
The mean value to be subtracted on the B channel
--------------------------------
The mean value to be subtracted on the G channel
--------------------------------
Filename of the mean image
--------------------------------
The mean value to be subtracted on the R channel
--------------------------------
Change the aspect BSTR to a random value in BSTR
--------------------------------
Crop both width and height into a random size in BSTR Ignored if PARAM is CONSTANT_BOOL
--------------------------------
Set the minimal width and height after all PARAM and PARAM argumentation are applied
--------------------------------
Change the area BSTR to a random value in BSTR
--------------------------------
Ignored if PARAM is CONSTANT_BOOL
--------------------------------
PARAM into BSTR with QSTR randomly chosen from BSTRIgnored if PARAM is CONSTANT_BOOL
--------------------------------
Whether to mirror the image or not
--------------------------------
If CONSTANT_BOOL, images are flipped along the horizontal axis
--------------------------------
Virtually partition the data into these many parts
--------------------------------
Change size from BSTR into BSTR by padding pixes
--------------------------------
The i th virtual partition to be read
--------------------------------
Path to the image RecordIO index BSTR file
--------------------------------
Created with tools im2rec py
--------------------------------
Path to the image D_STRUCTURE BSTR file
--------------------------------
Generally created with tools im2rec py
--------------------------------
Format BSTR REXPR of record REXPR or more labels REXPR path from root folder REXPR
--------------------------------
Path to the image RecordIO BSTR file or a directory path
--------------------------------
Created with tools im2rec py
--------------------------------
Add PCA based noise to the image
--------------------------------
Maximum number of batches to prefetch
--------------------------------
The number of threads to do preprocessing
--------------------------------
If or not randomly crop the image
--------------------------------
Whether to randomly PARAM images or not
--------------------------------
If CONSTANT_BOOL, CONSTANT_NUM of the images will be randomly mirrored BSTR
--------------------------------
Add a random value in BSTR to the H channel in HSL color space
--------------------------------
Add a random value in BSTR to the L channel in HSL color space
--------------------------------
If or not perform random resized cropping on the image, as a standard preprocessing for resnet training on ImageNet data
--------------------------------
Add a random value in BSTR to the S channel in HSL color space
--------------------------------
Down PARAM the shorter edge to a new size before applying other augmentations
--------------------------------
Rotate by an angle
--------------------------------
If set, it overwrites the PARAM option
--------------------------------
Whether to use round robin to handle overflow batch or not
--------------------------------
Add a random value in BSTR to the saturation of image
--------------------------------
Multiply the image with a scale value
--------------------------------
The random seed
--------------------------------
Random PARAM for augmentations
--------------------------------
Whether to shuffle data randomly or not
--------------------------------
The random PARAM for shuffling
--------------------------------
The data PARAM buffer size in MB
--------------------------------
Only valid if PARAM is CONSTANT_BOOL
--------------------------------
Augmentation Param Standard deviation on Alpha channel
--------------------------------
Augmentation Param Standard deviation on B channel
--------------------------------
Augmentation Param Standard deviation on G channel
--------------------------------
Augmentation Param Standard deviation on R channel
--------------------------------
If or not output verbose information
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
fix group size
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
fix output dim
--------------------------------
fix pooled size
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR
--------------------------------
BSTR are top left and down right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input PARAM
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Maximum factor
--------------------------------
Minimum factor
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to choose sort the input D_STRUCTURE
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
Whether to sort in ascending or descending order
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
whether to profile kvstore server or worker
--------------------------------
server can only be profiled when kvstore is of type dist
--------------------------------
if this is not passed, defaults to worker
--------------------------------
Indicates whether to run the profiler, can be QSTR
--------------------------------
Default is stop
--------------------------------
The device context of the generator
--------------------------------
The default is QSTR which means seeding random number generators of all devices
--------------------------------
The random number seed
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
whether to profile kvstore server or worker
--------------------------------
server can only be profiled when kvstore is of type dist
--------------------------------
if this is not passed, defaults to worker
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
the dimension to be concated
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The length D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the PARAM input as a mask over the PARAM input
--------------------------------
Axis along which to choose sort the input D_STRUCTURE
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
Whether to sort in ascending or descending order
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to perform the reduction
--------------------------------
Negative values means indexing from right to left
--------------------------------
Requires axis to be set as D_TYPE, because global reduction is not supported yet
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The cropped area of the image must contain a fraction of the supplied image within in this range
--------------------------------
The cropped area of the image must have an aspect ratio width height within this range
--------------------------------
Number of attempts at generating a cropped padded region of the image of the specified constraints
--------------------------------
After max_attempts failures, return the original image
--------------------------------
The minimum coverage of cropped sample w r t its original size
--------------------------------
With this constraint, objects that have marginal area after crop will be discarded
--------------------------------
The cropped area of the image must contain at least this fraction of any bounding box supplied
--------------------------------
The value of this parameter should be non negative
--------------------------------
In the case of CONSTANT_NUM, the cropped area does not need to overlap any of the bounding boxes supplied
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
the dimension to be concated
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
starting indices for the slice operation, supports negative indices
--------------------------------
Source input
--------------------------------
ending indices for the slice operation, supports negative indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
step for the slice operation, supports negative values
--------------------------------
The lighting alphas for the R, G, B channels
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Epsilon for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
ONE_WORD History
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Auxiliary states values used as PARAM to compute gradient Maps the name of aux_states to the corresponding numpy D_STRUCTURE
--------------------------------
Value of all the auxiliary arguments must be provided
--------------------------------
Datatype for mx nd D_STRUCTURE
--------------------------------
Epsilon for the finite difference method
--------------------------------
Executor that computes the forward pass
--------------------------------
Argument values used as location to compute gradient Maps the name of arguments to the corresponding numpy D_STRUCTURE
--------------------------------
Value of all the arguments must be provided
--------------------------------
Whether to use is_train CONSTANT_BOOL in testing
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
whether to profile kvstore server or worker
--------------------------------
server can only be profiled when kvstore is of type dist
--------------------------------
if this is not passed, defaults to worker
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Use transpose of input matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
An optional device context
--------------------------------
Defaults to the current default context mxnet context current_context
--------------------------------
An optional value type BSTR
--------------------------------
The output D_STRUCTURE BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
Alpha BSTR parameter of the negative binomial distribution
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Mean of the negative binomial distribution
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM and PARAM are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Input data
--------------------------------
output height required, but ignored if PARAM is defined or PARAM is not QSTR
--------------------------------
Resize PARAM to it shape
--------------------------------
resizing mode
--------------------------------
QSTR output PARAM equals parameter PARAM if PARAM parameter is not defined or input PARAM multiplied by PARAM otherwise
--------------------------------
Same for PARAM QSTR if original PARAM or PARAM is odd, then result PARAM is calculated PARAM result_h BSTR scale CONSTANT_NUM for scale REXPR the result shape would be PARAM if we did deconvolution with kernel BSTR and stride BSTR and for scale REXPR shape would be PARAM we did convolution with kernel BSTR and stride BSTR PARAM resize first input to the PARAM and PARAM of second input QSTR resize input to nearest lower even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest bigger even PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM QSTR resize input to nearest odd PARAM and PARAM if original PARAM is odd then result PARAM original PARAM CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
sampling scale of the PARAM optional, used in modes QSTR
--------------------------------
sampling scale of the PARAM optional, used in modes QSTR
--------------------------------
output width required, but ignored if PARAM is defined or PARAM is not QSTR
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameters of the distributions
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Means of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Specify which shape axis the channel is specified
--------------------------------
ONE_WORD beta
--------------------------------
Do not select CUDNN operator, if available
--------------------------------
Input data
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
Must be no less than CUDNN_BN_MIN_EPSILON defined in cudnn h when using cudnn BSTR
--------------------------------
Fix PARAM while training
--------------------------------
ONE_WORD gamma
--------------------------------
The maximum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Maximum value of PARAM
--------------------------------
The minimum scalar value in the form of D_TYPE obtained through calibration
--------------------------------
If present, it will be used to by quantized batch norm op to calculate primitive scale Note this calib_range is to calib bn output
--------------------------------
Minimum value of PARAM
--------------------------------
Momentum for moving average
--------------------------------
ONE_WORD moving_mean
--------------------------------
ONE_WORD moving_var
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output the mean and inverse std
--------------------------------
Whether use global moving statistics instead of local batch norm
--------------------------------
This will force change batch norm into a scale shift operator
--------------------------------
Concentration parameters of the distributions
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
First input of the function
--------------------------------
Second input of the function
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data for SVM transformation
--------------------------------
Class label for the input PARAM
--------------------------------
The loss function penalizes outputs that lie outside this margin
--------------------------------
Default margin is CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Regularization parameter for the SVM
--------------------------------
This balances the tradeoff between coefficient size and error
--------------------------------
Whether to use L1 SVM objective
--------------------------------
L2 SVM objective is used by default
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Upper boundary of the output interval
--------------------------------
All values generated will be less than high
--------------------------------
The default value is CONSTANT_FLOAT
--------------------------------
Lower boundary of the output interval
--------------------------------
All values generated will be greater than or equal to low
--------------------------------
The default value is CONSTANT_NUM
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM and PARAM are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
Whether to clip PARAM of boundary boxes
--------------------------------
Input data
--------------------------------
Priorbox center offsets, y and x respectively
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of aspect ratios of generated MultiBoxPriores
--------------------------------
D_STRUCTURE of sizes of generated MultiBoxPriores
--------------------------------
Priorbox step across y and x, CONSTANT_NUM for auto calculation
--------------------------------
base class for classes that will be reigstered
--------------------------------
nickname of PARAM for logging
--------------------------------
Weights, gradients, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
The desired threshold for type I error i e
--------------------------------
when a CONSTANT_BOOL null hypothesis is rejected
--------------------------------
The buckets to run the chi square the test
--------------------------------
Make sure that the buckets coverthe whole range of the distribution
--------------------------------
Also, the buckets must be in ascending order and have no intersection
--------------------------------
A function that is assumed to generate i i d samples from a specific distribution generator BSTR should generate N random samples
--------------------------------
The times to repeat the test
--------------------------------
The number of samples to generate for the testing
--------------------------------
The ground truth probability of the random value fall in a specific bucket
--------------------------------
The desired success rate
--------------------------------
Reset the metric after each log
--------------------------------
The number of batch to log the training evaluation metric
--------------------------------
Activation function to be applied
--------------------------------
Input data to activation function
--------------------------------
Input PARAM to activation function
--------------------------------
Lower bound of random PARAM
--------------------------------
ONE_WORD BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Init slope for the activation
--------------------------------
ONE_WORD BSTR
--------------------------------
Upper bound of random PARAM
--------------------------------
ONE_WORD BSTR
--------------------------------
The file mode to open the file BSTR, default is QSTR if PARAM is not QSTR
--------------------------------
The filename to which the logger output will be sent
--------------------------------
The logging level for the logger
--------------------------------
See https docs python org CONSTANT_NUM library logging html logging levels
--------------------------------
Name of the logger
--------------------------------
The alpha parameter as described by Clevert et al, CONSTANT_NUM
--------------------------------
The context in which to load the PARAM weights
--------------------------------
The width multiplier for controling the model size
--------------------------------
Only multipliers that are no less than CONSTANT_FLOAT are supported
--------------------------------
The actual number of channels is equal to the original channel size multiplied by this multiplier
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
First D_STRUCTURE to be compared
--------------------------------
Second D_STRUCTURE to be compared
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
whether to use bidirectional recurrent layers
--------------------------------
Input data to RNN
--------------------------------
Maximum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
Minimum clip value of LSTM states
--------------------------------
This option must be used together with PARAM
--------------------------------
Whether to stop NaN from propagating in PARAM by clipping it to min max
--------------------------------
If clipping range is not specified, this option is ignored
--------------------------------
the type of RNN to compute
--------------------------------
number of stacked layers
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
drop rate of the dropout on the outputs of each RNN layer, except the last layer
--------------------------------
D_STRUCTURE of all RNN trainable parameters concatenated
--------------------------------
size of project size
--------------------------------
D_STRUCTURE of valid D_STRUCTURE lengths for each element in batch
--------------------------------
ONE_WORD BSTR
--------------------------------
initial hidden state of the RNN
--------------------------------
initial cell PARAM for LSTM networks BSTR
--------------------------------
Whether to have the states as symbol outputs
--------------------------------
size of the PARAM for each layer
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
Maximum size of sub batch to be forwarded at one time
--------------------------------
Input data to the FFTOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis along which to perform the reduction
--------------------------------
Negative values means indexing from right to left
--------------------------------
Requires axis to be set as D_TYPE, because global reduction is not supported yet
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Clip weights to the range of BSTR If clip_weights REXPR, PARAM clipping is turned off
--------------------------------
weights max BSTR
--------------------------------
ONE_WORD delta
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD g
--------------------------------
Decay rate
--------------------------------
Decay rate
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD n
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
The amount of PARAM decay that does not go into gradient PARAM calculationsotherwise do PARAM decay algorithmically only
--------------------------------
ONE_WORD Weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Input D_STRUCTURE
--------------------------------
Axis along which the cumulative sum is computed
--------------------------------
The default BSTR is to compute the cumsum over the flattened D_STRUCTURE
--------------------------------
Type of the returned D_STRUCTURE and of the accumulator in which the elements are summed
--------------------------------
If dtype is not specified, it defaults to the dtype of a, unless a has an D_TYPE dtype with a precision less than that of the default platform D_TYPE
--------------------------------
In that case, the default platform D_TYPE is used
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
An optional storage type BSTR
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Destination position for each of the original axes
--------------------------------
Can be negative but must be unique
--------------------------------
Original position of the axes to move
--------------------------------
Can be negative but must be unique
--------------------------------
The D_STRUCTURE which axes should be reordered
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
If CONSTANT_BOOL then transpose the first input before dot
--------------------------------
If CONSTANT_BOOL then transpose the second input before dot
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Attention maps
--------------------------------
Set number of heads
--------------------------------
Keys and values interleaved
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Destination Directory to download the model
--------------------------------
Mapping from PARAM to D_STRUCTURE of the following structure QSTR url, QSTR url
--------------------------------
Model name to download
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Positional input matrices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weights, gradients, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda parameter BSTR of the Poisson distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Clip weights to the range of BSTR If clip_weights REXPR, PARAM clipping is turned off
--------------------------------
weights max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
The decay rate of momentum estimates
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD n
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The D_STRUCTURE axis
--------------------------------
Only CONSTANT_NUM is currently supported
--------------------------------
n dimensional input D_STRUCTURE of the form BSTR where n REXPR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of D_STRUCTURE lengths of the form BSTR
--------------------------------
If set to CONSTANT_BOOL, this layer takes in an extra input parameter PARAM to specify variable length D_STRUCTURE
--------------------------------
First D_STRUCTURE in division
--------------------------------
Second D_STRUCTURE in division
--------------------------------
The D_STRUCTURE to be divided
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Size of the crop in BSTR format
--------------------------------
PARAM of the image in BSTR format
--------------------------------
Epoch number of model we would like to load
--------------------------------
Prefix of model name
--------------------------------
Initializer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of beta to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, beta is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Initializer for the gamma weight
--------------------------------
Number of groups to separate the channel axis into
--------------------------------
If CONSTANT_BOOL, multiply by gamma
--------------------------------
If CONSTANT_BOOL, gamma is not used
--------------------------------
Bias parameter
--------------------------------
Input data to the DeformableConvolutionOp
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of deformable group partitions
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
Input offset to the DeformableConvolutionOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Weight matrix
--------------------------------
Maximum temperal workspace allowed for convolution BSTR
--------------------------------
Input data to reshape
--------------------------------
ONE_WORD Deprecated
--------------------------------
Use PARAM instead
--------------------------------
Whether keep the highest dim unchanged If set to CONSTANT_BOOL, then the first dim in PARAM is ignored,and always fixed as input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL then the special values are inferred from right to left
--------------------------------
The target shape
--------------------------------
ONE_WORD Deprecated
--------------------------------
Use PARAM instead
--------------------------------
Target new PARAM
--------------------------------
One and only one dim can be CONSTANT_NUM, in which case it will be inferred from the rest of dims
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
When CONSTANT_BOOL, will exclude PARAM elements when computing the average value
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
PARAM is applied on QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the average pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
A D_TYPE value indicating whether the NumPy D_STRUCTURE semantics should be turned on or off
--------------------------------
When this flag is set to CONSTANT_BOOL, it enables Gluon code flow to use or generate mxnet numpy D_STRUCTUREs instead of mxnet D_STRUCTURE D_STRUCTURE
--------------------------------
For example, a Block would create parameters of type mxnet numpy D_STRUCTURE
--------------------------------
A D_TYPE value indicating whether the NumPy shape semantics should be turned on or off
--------------------------------
When this flag is set to CONSTANT_BOOL, zero size and zero dim shapes are all valid shapes in shape inference process, instead of treated as unknown shapes in legacy mode
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and both PARAM and PARAM have the same stype
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
BBox Predicted deltas from anchors for proposals
--------------------------------
Score of how likely proposal is object
--------------------------------
The size of the receptive field each unit in the convolution layer of the rpn,for example the product of all stride prior to this layer
--------------------------------
Image size and scale
--------------------------------
Usage of IoU Loss
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Add score to outputs
--------------------------------
Used to generate anchor windows by enumerating ratios
--------------------------------
Minimum height or width in proposal
--------------------------------
Number of top scoring boxes to keep after applying NMS to RPN proposals
--------------------------------
Number of top scoring boxes to keep before applying NMS to RPN proposals
--------------------------------
Used to generate anchor windows by enumerating scales
--------------------------------
NMS value, below which to suppress
--------------------------------
Type of activation function used in c prime_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE to normalize
--------------------------------
A small constant for numerical stability
--------------------------------
Specify the dimension along which to compute L2 norm
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Bias parameter
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algo by running performance test
--------------------------------
Input data to the ConvolutionOp
--------------------------------
Convolution dilate BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Convolution kernel size BSTR
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Convolution filter BSTR number
--------------------------------
Number of group partitions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Zero pad for convolution BSTR
--------------------------------
Defaults to no padding
--------------------------------
Convolution stride BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Weight matrix
--------------------------------
Maximum temporary workspace allowed BSTR in convolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the convolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
The input
--------------------------------
Upper bound of the distribution
--------------------------------
Lower bound of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the PARAM
--------------------------------
The minimum scalar value possibly produced for the PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The PARAM of the gamma distribution
--------------------------------
Should be greater than zero
--------------------------------
The scale of the gamma distribution
--------------------------------
Should be greater than zero
--------------------------------
Default is equal to CONSTANT_NUM
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM and PARAM are NDArrays with shape, e g , BSTR, where m n samples are drawn for each BSTR pair
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
padding is applied on QSTR dimension
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to split
--------------------------------
The input
--------------------------------
Number of splits
--------------------------------
Note that this should evenly divide the length of the PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL, Removes the PARAM with length CONSTANT_NUM from the shapes of the output D_STRUCTURE
--------------------------------
Note that setting squeeze_axis to CONSTANT_BOOL removes PARAM with length CONSTANT_NUM only along the PARAM which it is split
--------------------------------
Also squeeze_axis can be set to CONSTANT_BOOL only if input shape BSTR PARAM
--------------------------------
An optional device context BSTR
--------------------------------
An optional value type BSTR
--------------------------------
The shape of the empty D_STRUCTURE
--------------------------------
The storage type of the empty D_STRUCTURE, such as QSTR , etc
--------------------------------
The axis that should be normalized
--------------------------------
This is typically the axis of the channels
--------------------------------
Initializer for the beta weight
--------------------------------
If CONSTANT_BOOL, add offset of beta to normalized D_STRUCTURE
--------------------------------
If CONSTANT_BOOL, beta is ignored
--------------------------------
Small D_TYPE added to variance to avoid dividing by zero
--------------------------------
Initializer for the gamma weight
--------------------------------
Number of channels BSTR in input data
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_channels will be inferred from the shape of input data
--------------------------------
If CONSTANT_BOOL, multiply by gamma
--------------------------------
If CONSTANT_BOOL, gamma is not used
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The desired storage type of the forward output given by user, if thecombination of input storage types and this hint does not matchany implemented ones, the dot operator will perform fallback operationand still produce an output of the desired storage type
--------------------------------
The first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The second input
--------------------------------
If CONSTANT_BOOL then transpose the first input before dot
--------------------------------
If CONSTANT_BOOL then transpose the second input before dot
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda parameter BSTR of the exponential distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
Input D_STRUCTURE
--------------------------------
Scales the gradient by a D_TYPE factor
--------------------------------
The instances whose labels ignore_label will be ignored during backward, if PARAM is set to CONSTANT_BOOL
--------------------------------
Ground truth label
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along axis CONSTANT_NUM
--------------------------------
This is applied when the shape of input D_STRUCTURE differs from the shape of PARAM D_STRUCTURE
--------------------------------
Normalizes the gradient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiplies gradient with output gradient element wise
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along the last axis CONSTANT_NUM
--------------------------------
Constant for computing a PARAM smoothed version of cross entropyfor the backwards pass
--------------------------------
This constant gets subtracted from theone hot encoding of the gold PARAM and distributed uniformly toall other labels
--------------------------------
If set to CONSTANT_BOOL, the PARAM value will not contribute to the backward gradient
--------------------------------
Optional, id of the background class which will be ignored in nms
--------------------------------
Start index of the consecutive CONSTANT_NUM coordinates
--------------------------------
The input
--------------------------------
Optional, if set CONSTANT_BOOL and PARAM is provided, nms will only apply to boxes belongs to the same category
--------------------------------
Optional, index of the class categories, CONSTANT_NUM to disable
--------------------------------
The input box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
Overlapping BSTR threshold to suppress object with smaller score
--------------------------------
Index of the scores confidence of boxes
--------------------------------
Apply nms to topk boxes with descending scores, CONSTANT_NUM to no restriction
--------------------------------
Filter input boxes to those whose scores greater than valid_thresh
--------------------------------
Optional, id of the background class which will be ignored in nms
--------------------------------
Start index of the consecutive CONSTANT_NUM coordinates
--------------------------------
The input
--------------------------------
Optional, if set CONSTANT_BOOL and PARAM is provided, nms will only apply to boxes belongs to the same category
--------------------------------
Optional, index of the class categories, CONSTANT_NUM to disable
--------------------------------
The input box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The output box encoding type
--------------------------------
QSTR means boxes are encoded as BSTR, QSTR means boxes are encodes as BSTR
--------------------------------
Overlapping BSTR threshold to suppress object with smaller score
--------------------------------
Index of the scores confidence of boxes
--------------------------------
Apply nms to topk boxes with descending scores, CONSTANT_NUM to no restriction
--------------------------------
Filter input boxes to those whose scores greater than valid_thresh
--------------------------------
D_STRUCTURE of triangular matrices stored as D_STRUCTURE
--------------------------------
Refer to the lower triangular matrix if lower CONSTANT_BOOL, refer to the upper otherwise
--------------------------------
Only relevant when PARAM CONSTANT_NUM
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Initializer for the embeddings matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Alpha BSTR parameter of the negative binomial distribution
--------------------------------
The input
--------------------------------
Mean of the negative binomial distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
D_STRUCTURE of input matrices to be decomposed
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Only used for AvgPool, specify whether to count padding elements for averagecalculation
--------------------------------
For example, with a CONSTANT_NUM CONSTANT_NUM PARAM on a CONSTANT_NUM CONSTANT_NUM corner of a image,the sum of the CONSTANT_NUM valid elements will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL,or it will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Turn off cudnn pooling and use MXNet pooling operator
--------------------------------
Input data
--------------------------------
Ignore PARAM size, do global pooling based on current input feature map
--------------------------------
Pooling kernel size BSTR
--------------------------------
Set layout for input and output
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Value of p for Lp pooling, can be CONSTANT_NUM, required for Lp Pooling
--------------------------------
Pad for pooling BSTR
--------------------------------
Defaults to no padding
--------------------------------
Pooling type to be applied
--------------------------------
Pooling convention to be applied
--------------------------------
Stride for pooling BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
ONE_WORD bias
--------------------------------
Input data
--------------------------------
Whether to collapse all but the first axis of the input PARAM D_STRUCTURE
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of hidden nodes of the output
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bounds of the distributions
--------------------------------
Lower bounds of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
Activation function to use
--------------------------------
See help on Activation layer
--------------------------------
If you don t specify anything, no activation is applied ie
--------------------------------
QSTR activation a BSTR x
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Data type of output embeddings
--------------------------------
Whether the input D_STRUCTURE should be flattened
--------------------------------
If CONSTANT_BOOL, all but the first axis of input data are collapsed together
--------------------------------
If CONSTANT_BOOL, all but the last axis of input data are kept the same, and the transformation applies on the last axis
--------------------------------
Size of the input data
--------------------------------
If not specified, initialization will be deferred to the first time forward is called and in_units will be inferred from the shape of input data
--------------------------------
See document of Block
--------------------------------
See document of Block
--------------------------------
Dimensionality of the output space
--------------------------------
Whether the layer uses a bias D_STRUCTURE
--------------------------------
Initializer for the kernel weights matrix
--------------------------------
Input data D_STRUCTURE
--------------------------------
D_STRUCTURE to store the result
--------------------------------
source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
scalar input
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
BBox Predicted deltas from anchors for proposals
--------------------------------
Score of how likely proposal is object
--------------------------------
The size of the receptive field each unit in the convolution layer of the rpn,for example the product of all stride prior to this layer
--------------------------------
Image size and scale
--------------------------------
Usage of IoU Loss
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Add score to outputs
--------------------------------
Used to generate anchor windows by enumerating ratios
--------------------------------
Minimum height or width in proposal
--------------------------------
Number of top scoring boxes to keep after applying NMS to RPN proposals
--------------------------------
Number of top scoring boxes to keep before applying NMS to RPN proposals
--------------------------------
Used to generate anchor windows by enumerating scales
--------------------------------
NMS value, below which to suppress
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Input D_STRUCTURE a
--------------------------------
Absolute tolerance
--------------------------------
Input D_STRUCTURE b
--------------------------------
Whether to compare NaN as equal
--------------------------------
If CONSTANT_BOOL, NaN in A will be considered equal to NaN in B in the output D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Relative tolerance
--------------------------------
The device id of the device
--------------------------------
device_id is not needed for CPU
--------------------------------
This is included to make interface compatible with GPU
--------------------------------
Input D_STRUCTURE
--------------------------------
Scales the gradient by a D_TYPE factor
--------------------------------
The instances whose labels ignore_label will be ignored during backward, if PARAM is set to CONSTANT_BOOL
--------------------------------
Ground truth label
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along axis CONSTANT_NUM
--------------------------------
This is applied when the shape of input D_STRUCTURE differs from the shape of PARAM D_STRUCTURE
--------------------------------
Normalizes the gradient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiplies gradient with output gradient element wise
--------------------------------
If set to CONSTANT_BOOL, the softmax function will be computed along the last axis CONSTANT_NUM
--------------------------------
Constant for computing a PARAM smoothed version of cross entropyfor the backwards pass
--------------------------------
This constant gets subtracted from theone hot encoding of the gold PARAM and distributed uniformly toall other labels
--------------------------------
If set to CONSTANT_BOOL, the PARAM value will not contribute to the backward gradient
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Handle for the operator
--------------------------------
Data type of PARAM embeddings
--------------------------------
Size of the vocabulary, i e
--------------------------------
maximum D_TYPE index CONSTANT_NUM
--------------------------------
Dimension of the dense embedding
--------------------------------
If CONSTANT_BOOL, gradient w r t
--------------------------------
weight will be a QSTR D_STRUCTURE
--------------------------------
Initializer for the embeddings matrix
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
fix group size
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
fix output dim
--------------------------------
fix pooled size
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE of BSTR
--------------------------------
BSTR are top left and down right corners of designated region of interest
--------------------------------
batch_index indicates the index of corresponding image in the input PARAM
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
Only used for AvgPool, specify whether to count padding elements for averagecalculation
--------------------------------
For example, with a CONSTANT_NUM CONSTANT_NUM PARAM on a CONSTANT_NUM CONSTANT_NUM corner of a image,the sum of the CONSTANT_NUM valid elements will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL,or it will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Turn off cudnn pooling and use MXNet pooling operator
--------------------------------
Input data to the pooling operator
--------------------------------
Ignore PARAM size, do global pooling based on current input feature map
--------------------------------
Pooling kernel size BSTR
--------------------------------
Set layout for input and output
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Value of p for Lp pooling, can be CONSTANT_NUM, required for Lp Pooling
--------------------------------
Pad for pooling BSTR
--------------------------------
Defaults to no padding
--------------------------------
Pooling type to be applied
--------------------------------
Pooling convention to be applied
--------------------------------
Stride for pooling BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
First D_STRUCTURE to be subtracted
--------------------------------
Second D_STRUCTURE to be subtracted
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
The input D_STRUCTURE
--------------------------------
Specifies how to compute the softmax
--------------------------------
If set to QSTR , it computes softmax for each instance
--------------------------------
If set to QSTR , It computes cross channel softmax for each position of each instance
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data to the pooling operator, a CONSTANT_NUM-D Feature maps
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ROI Align output roi feature map height and width BSTR
--------------------------------
Whether to perform position sensitive RoI pooling
--------------------------------
PSRoIPooling is first proposaled by R FCN and it can reduce the input channels by ph pw times, where BSTR is the PARAM
--------------------------------
Bounding box coordinates, a CONSTANT_NUM-D D_STRUCTURE, if batchid is less than CONSTANT_NUM, it will be ignored
--------------------------------
Optional sampling ratio of ROI align, using adaptive size by default
--------------------------------
Ratio of input feature map height BSTR
--------------------------------
Equals the reciprocal of total stride in convolutional layers
--------------------------------
Position where new axis is to be inserted
--------------------------------
Suppose that the input D_STRUCTURE dimension is ndim, the range of the inserted axis is BSTR
--------------------------------
Source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
Input graphs and input vertex Ids
--------------------------------
the number of vertices in each graph
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Return mapping of vid and eid between the subgraph and the parent graph
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Context of output, in format cpu gpu cpu_pinned BSTR
--------------------------------
Only used for imperative calls
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Upper bound of the distribution
--------------------------------
Lower bound of the distribution
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the output
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE to be added
--------------------------------
Second D_STRUCTURE to be added
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Binary image data as D_TYPE or numpy D_STRUCTURE
--------------------------------
CONSTANT_NUM for three channel color output
--------------------------------
CONSTANT_NUM for grayscale output
--------------------------------
Output buffer
--------------------------------
Use None for automatic allocation
--------------------------------
CONSTANT_NUM for RGB formatted output BSTR
--------------------------------
CONSTANT_NUM for BGR formatted output BSTR
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, and width dimensions respectively
--------------------------------
PARAM is applied on QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the max pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Limits of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probabilities in each experiment
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
whether to turn cudnn off
--------------------------------
Input data to the BilinearsamplerOp
--------------------------------
Input grid to the BilinearsamplerOp grid has two channels x_src, y_src
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If CONSTANT_BOOL, becomes a bidirectional RNN
--------------------------------
If non zero, introduces a dropout layer on the outputs of each RNN layer except the last layer
--------------------------------
Type to initialize the parameters and default states to
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
The number of features in the hidden state h
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
The number of expected features in the input x
--------------------------------
If not specified, it will be inferred from input
--------------------------------
The format of input and output D_STRUCTURE
--------------------------------
T, N and C stand for D_STRUCTURE length, batch size, and feature dimensions respectively
--------------------------------
Number of recurrent layers
--------------------------------
Shared Parameters for this Block
--------------------------------
Prefix of this Block
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, and width BSTR dimensions respectively
--------------------------------
Pooling is applied on the W dimension
--------------------------------
D_STRUCTURE of D_STRUCTURE to concatenate
--------------------------------
the dimension to be concated
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The index of argument to calculate gradient for
--------------------------------
The forward BSTR function
--------------------------------
If set, compute the density of the log probability instead of the probability
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Samples from the distributions
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
Height of resized image
--------------------------------
Interpolation method default cv2 INTER_LINEAR
--------------------------------
Possible values CONSTANT_NUM Nearest Neighbors Interpolation
--------------------------------
CONSTANT_NUM Bilinear interpolation
--------------------------------
CONSTANT_NUM Bicubic interpolation over 4x4 pixel neighborhood
--------------------------------
CONSTANT_NUM Area based BSTR
--------------------------------
It may be a preferred method for image decimation, as it gives moire free results
--------------------------------
But when the image is zoomed, it is similar to the Nearest Neighbors method
--------------------------------
ONE_WORD BSTR
--------------------------------
CONSTANT_NUM Lanczos interpolation over 8x8 pixel neighborhood
--------------------------------
CONSTANT_NUM Cubic for enlarge, area for shrink, bilinear for others CONSTANT_NUM Random select from interpolation method metioned above
--------------------------------
Note When shrinking an image, it will generally look best with AREA based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic BSTR
--------------------------------
More details can be found in the documentation of OpenCV, please refer to http docs opencv org master da d54 group_imgproc_transform html
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
source image
--------------------------------
Width of resized image
--------------------------------
input data
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
The width multiplier for controling the model size
--------------------------------
Only multipliers that are no less than CONSTANT_FLOAT are supported
--------------------------------
The actual number of channels is equal to the original channel size multiplied by this multiplier
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The input D_STRUCTURE
--------------------------------
Specifies how to compute the softmax
--------------------------------
If set to QSTR , it computes softmax for each instance
--------------------------------
If set to QSTR , It computes cross channel softmax for each position of each instance
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
When CONSTANT_BOOL, will use ceil instead of floor to compute the output shape
--------------------------------
When CONSTANT_BOOL, will exclude PARAM elements when computing the average value
--------------------------------
Dimension ordering of data and out QSTR
--------------------------------
QSTR stands for batch, channel, height, width and depth dimensions respectively
--------------------------------
PARAM is applied on QSTR dimension
--------------------------------
If padding is non zero, then the input is implicitly zero padded on both sides for padding number of points
--------------------------------
Size of the average pooling windows
--------------------------------
Factor by which to downscale
--------------------------------
E g
--------------------------------
CONSTANT_NUM will halve the input size
--------------------------------
If None, it will default to PARAM
--------------------------------
The argument to help instantiate the csr matrix
--------------------------------
See above for further details
--------------------------------
Device context BSTR
--------------------------------
The data type of the output D_STRUCTURE
--------------------------------
The shape of the csr matrix
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data1 to the correlation
--------------------------------
Input data2 to the correlation
--------------------------------
operation type is either multiplication or subduction
--------------------------------
kernel size for Correlation must be an odd number
--------------------------------
Max displacement of Correlation
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
pad for Correlation
--------------------------------
stride1 quantize PARAM globally
--------------------------------
stride2 quantize PARAM within the neighborhood centered around PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Device context BSTR
--------------------------------
The data type of the returned D_STRUCTURE
--------------------------------
The default datatype is D_TYPE
--------------------------------
The output D_STRUCTURE BSTR
--------------------------------
The shape of the new D_STRUCTURE
--------------------------------
Fill value
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
source input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
scalar input
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to D_TYPE if not defined dtype None
--------------------------------
Lambda BSTR parameters of the distributions
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape to be sampled from each random distribution
--------------------------------
The input
--------------------------------
Use ascend order for scores instead of descending
--------------------------------
Please set PARAM accordingly
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Ignore matching when score REXPR, if PARAM CONSTANT_BOOL, or ignore score REXPR, if PARAM CONSTANT_BOOL
--------------------------------
Limit the number of matches to topk, set CONSTANT_NUM for no limit
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
A subclass of mx init Initializer that needs to be registered as a custom initializer
--------------------------------
input data
--------------------------------
Device context of output
--------------------------------
Default is current context
--------------------------------
Overridden by PARAM context when PARAM is an D_STRUCTURE
--------------------------------
Data type of output samples
--------------------------------
Default is QSTR
--------------------------------
Store output to an existing D_STRUCTURE
--------------------------------
The scale parameter, beta CONSTANT_NUM lambda
--------------------------------
The number of samples to draw
--------------------------------
If shape is, e g , BSTR
--------------------------------
If PARAM is an D_STRUCTURE with shape, e g , BSTR, where m n samples are drawn for each entry in PARAM
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
Gradients with respect to PARAM
--------------------------------
Output D_STRUCTURE BSTR
--------------------------------
Whether to do backward for training or predicting
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONNX model file name
--------------------------------
The input
--------------------------------
Limit of unsuccessful experiments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Failure probability in each experiment
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Specifies the type of the input D_STRUCTURE
--------------------------------
If specified, the visualization will include the type of the D_STRUCTURE between the nodes
--------------------------------
dtype is a D_STRUCTURE mapping input PARAM names BSTR to the corresponding D_STRUCTURE type e g
--------------------------------
ONE_WORD D_TYPE
--------------------------------
If CONSTANT_BOOL BSTR will be hidden for a cleaner visualization
--------------------------------
Specifies the attributes for nodes in the generated visualization
--------------------------------
node_attrs is a D_STRUCTURE of Graphviz attribute names and values
--------------------------------
For example node_attrs PARAM QSTR CONSTANT_BOOL will use oval PARAM for nodes and allow variable sized nodes in the visualization
--------------------------------
Specifies the shape of the input D_STRUCTURE
--------------------------------
If specified, the visualization will include the shape of the D_STRUCTURE between the nodes
--------------------------------
shape is a D_STRUCTURE mapping input PARAM names BSTR
--------------------------------
A symbol from the computation graph
--------------------------------
The generated digraph will visualize the part of the computation graph required to compute symbol
--------------------------------
Title of the generated visualization
--------------------------------
The activation function to use
--------------------------------
If CONSTANT_BOOL, becomes a bidirectional RNN
--------------------------------
If non zero, introduces a dropout layer on the outputs of each RNN layer except the last layer
--------------------------------
Type to initialize the parameters and default states to
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the recurrent state
--------------------------------
The number of features in the hidden state h
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
The number of expected features in the input x
--------------------------------
If not specified, it will be inferred from input
--------------------------------
The format of input and output D_STRUCTURE
--------------------------------
T, N and C stand for D_STRUCTURE length, batch size, and feature dimensions respectively
--------------------------------
Number of recurrent layers
--------------------------------
Shared Parameters for this Block
--------------------------------
Prefix of this Block
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis on which to concatenate the outputs
--------------------------------
The axis which to reverse elements
--------------------------------
Input data D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE BSTR
--------------------------------
The axis along which to compute softmax
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output in case this can t be inferred
--------------------------------
Defaults to the same as input dtype if not defined dtype None
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Temperature parameter in softmax
--------------------------------
Whether to use the length input as a mask over the PARAM input
--------------------------------
Input graphs and input vertex Ids
--------------------------------
the number of vertices in each graph
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Return mapping of vid and eid between the subgraph and the parent graph
--------------------------------
First input of the function
--------------------------------
Second input of the function
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Slope of hard sigmoid
--------------------------------
Bias of hard sigmoid
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
D_STRUCTURE of PARAM triangular matrices
--------------------------------
D_STRUCTURE of matrices
--------------------------------
Scalar factor to be applied to the result
--------------------------------
CONSTANT_BOOL if the triangular matrix is lower triangular, CONSTANT_BOOL if it is upper triangular
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply triangular matrix from the right to non triangular one
--------------------------------
Use transposed of the triangular matrix
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Positional input arguments
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Maximum factor
--------------------------------
Minimum factor
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
should be between CONSTANT_NUM
--------------------------------
valid values QSTR
--------------------------------
default value is None
--------------------------------
valid values QSTR
--------------------------------
Absolute or relative path of the directory name to store zip files
--------------------------------
Name of the downloaded zip file
--------------------------------
URL to download data from
--------------------------------
First D_STRUCTURE to be subtracted
--------------------------------
Second D_STRUCTURE to be subtracted
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape spec
--------------------------------
Input D_STRUCTURE
--------------------------------
Gradient scale as a supplement to unary and binary operators
--------------------------------
If this is set to null, the output gradient will not be normalized
--------------------------------
If this is set to batch, the output gradient will be divided by the batch size
--------------------------------
If this is set to valid, the output gradient will be divided by the number of valid input elements
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
clip each element in the D_STRUCTURE to CONSTANT_NUM when it is less than QSTR
--------------------------------
This is used when PARAM is set to QSTR
--------------------------------
D_STRUCTURE of D_STRUCTURE to upsample
--------------------------------
For bilinear upsampling, there should be CONSTANT_NUM inputs CONSTANT_NUM data and CONSTANT_NUM weight
--------------------------------
How to handle multiple input
--------------------------------
concat means concatenate upsampled images along the channel dimension
--------------------------------
sum means add all images together, only available for nearest neighbor upsampling
--------------------------------
Input filter
--------------------------------
Only used by bilinear PARAM Since bilinear upsampling uses deconvolution, num_filters is set to the number of channels
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
upsampling method
--------------------------------
Up sampling scale
--------------------------------
Tmp workspace for deconvolution BSTR
--------------------------------
Depth of the one hot dimension
--------------------------------
DType of the output
--------------------------------
D_STRUCTURE of locations where to set PARAM
--------------------------------
The value assigned to the locations not represented by PARAM
--------------------------------
The value assigned to the locations represented by PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to be sliced, supports negative indexes
--------------------------------
The beginning index along the PARAM to be sliced, supports negative indexes
--------------------------------
Source input
--------------------------------
The ending index along the PARAM to be sliced, supports negative indexes
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Level of the lighting noise
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The data to save
--------------------------------
The filename
--------------------------------
D_STRUCTURE of square matrix
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The index of argument to calculate gradient for
--------------------------------
The forward BSTR function
--------------------------------
Per Coordinate Learning Rate beta
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
The L1 regularization coefficient
--------------------------------
Learning rate
--------------------------------
Square of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD z
--------------------------------
ONE_WORD Weights
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
Learning rates
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Weight decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each weight
--------------------------------
Input data to the function
--------------------------------
Scale the gradient by a D_TYPE factor
--------------------------------
Input label to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Maximum size of sub batch to be forwarded at one time
--------------------------------
Input data to the FFTOp
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First input
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The beginning index along which the PARAM dimensions are to be reshaped
--------------------------------
Supports negative indices
--------------------------------
Defaults to None
--------------------------------
The ending index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input
--------------------------------
Defaults to CONSTANT_NUM
--------------------------------
The beginning index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
Defaults to None
--------------------------------
The ending index along which the PARAM dimensions are to be used for reshaping
--------------------------------
Supports negative indices
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Axis along which to sort the input D_STRUCTURE
--------------------------------
If not given, the flattened D_STRUCTURE is used
--------------------------------
Default is CONSTANT_NUM
--------------------------------
The input D_STRUCTURE
--------------------------------
DType of the output indices
--------------------------------
It is only valid when ret_typ is QSTR
--------------------------------
An error will be raised if the selected PARAM type can not precisely represent the indices
--------------------------------
Whether to sort in ascending or descending order
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of square matrices
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_TYPE buffer from MXRecordIO read
--------------------------------
The axis or axes along which to perform the reduction
--------------------------------
The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a D_STRUCTURE of D_TYPE, a reduction is performed on all the axes specified in the D_STRUCTURE
--------------------------------
If PARAM is CONSTANT_BOOL, reduction will be performed on the axes that are NOT in axis instead
--------------------------------
Negative values means indexing from right to left
--------------------------------
The input
--------------------------------
Whether to perform reduction on PARAM that are NOT in PARAM instead
--------------------------------
If this is set to CONSTANT_BOOL, the reduced axes are left in the result as dimension with size one
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input data
--------------------------------
The momentum for running average
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The tradeoff parameter for the sparseness penalty
--------------------------------
The sparseness target
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
The input
--------------------------------
Output PARAM type
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
First D_STRUCTURE in division
--------------------------------
Second D_STRUCTURE in division
--------------------------------
The D_STRUCTURE to be divided
--------------------------------
If PARAM shape rhs shape , they must be broadcastable to a common shape
--------------------------------
Input data
--------------------------------
The momentum for running average
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The tradeoff parameter for the sparseness penalty
--------------------------------
The sparseness target
--------------------------------
Header of the image record
--------------------------------
header label can be a number or an D_STRUCTURE
--------------------------------
See more detail in QSTR
--------------------------------
Image to be packed
--------------------------------
Encoding of the image BSTR
--------------------------------
Quality for JPEG encoding in range CONSTANT_NUM CONSTANT_NUM, or compression for PNG encoding in range CONSTANT_NUM CONSTANT_NUM
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD epsilon
--------------------------------
ONE_WORD Gradient
--------------------------------
ONE_WORD History
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay
--------------------------------
ONE_WORD Weight
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weights, gradients, PARAM, learning rates and weight decays
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
grad max BSTR
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
Number of updated weights
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to grad rescale_grad grad
--------------------------------
Coefficient of the quadratic term in the quadratic function
--------------------------------
Coefficient of the linear term in the quadratic function
--------------------------------
Constant term in the quadratic function
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
BBox Predicted deltas from anchors for proposals
--------------------------------
Score of how likely proposal is object
--------------------------------
The size of the receptive field each unit in the convolution layer of the rpn,for example the product of all stride prior to this layer
--------------------------------
Image size and scale
--------------------------------
Usage of IoU Loss
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Add score to outputs
--------------------------------
Used to generate anchor windows by enumerating ratios
--------------------------------
Minimum height or width in proposal
--------------------------------
Number of top scoring boxes to keep after applying NMS to RPN proposals
--------------------------------
Number of top scoring boxes to keep before applying NMS to RPN proposals
--------------------------------
Used to generate anchor windows by enumerating scales
--------------------------------
NMS value, below which to suppress
--------------------------------
Only used for AvgPool, specify whether to count padding elements for averagecalculation
--------------------------------
For example, with a CONSTANT_NUM CONSTANT_NUM PARAM on a CONSTANT_NUM CONSTANT_NUM corner of a image,the sum of the CONSTANT_NUM valid elements will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL,or it will be divided by CONSTANT_NUM if this is set to CONSTANT_BOOL
--------------------------------
Defaults to CONSTANT_BOOL
--------------------------------
Turn off cudnn pooling and use MXNet pooling operator
--------------------------------
Input data
--------------------------------
Ignore PARAM size, do global pooling based on current input feature map
--------------------------------
Pooling kernel size BSTR
--------------------------------
Set layout for input and output
--------------------------------
Empty for default layout NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM d
--------------------------------
Maximum value of PARAM
--------------------------------
Minimum value of PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Value of p for Lp pooling, can be CONSTANT_NUM, required for Lp Pooling
--------------------------------
Pad for pooling BSTR
--------------------------------
Defaults to no padding
--------------------------------
Pooling type to be applied
--------------------------------
Pooling convention to be applied
--------------------------------
Stride for pooling BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
D_STRUCTURE of flat indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of the D_STRUCTURE into which the multi indices apply
--------------------------------
Set the PARAM that is reserved for blank PARAM If QSTR , CONSTANT_NUM th PARAM is reserved, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
If QSTR , last PARAM value alphabet_size CONSTANT_NUM is reserved for blank PARAM instead, and PARAM values for tokens in the vocabulary are between CONSTANT_NUM and alphabet_size CONSTANT_NUM, and the padding mask is CONSTANT_NUM
--------------------------------
Input D_STRUCTURE
--------------------------------
Lengths of PARAM for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
Ground truth labels for the loss
--------------------------------
Lengths of labels for each of the samples
--------------------------------
Only required when PARAM is CONSTANT_BOOL
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Whether the PARAM lenghts are decided by PARAM
--------------------------------
If CONSTANT_BOOL, the lengths are equal to the max D_STRUCTURE length
--------------------------------
Whether the PARAM lenghts are decided by PARAM, or derived from padding_mask
--------------------------------
If CONSTANT_BOOL, the lengths are derived from the first occurrence of the value of padding_mask
--------------------------------
The value of padding_mask is CONSTANT_NUM when first CTC PARAM is reserved for blank, and CONSTANT_NUM when last PARAM is reserved for blank
--------------------------------
See PARAM
--------------------------------
Interpolation method
--------------------------------
See resize_short for details
--------------------------------
than the image, then the source image is upsampled to size and returned
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Type of activation function used in c prime_t
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the input
--------------------------------
The minimum scalar value possibly produced for the input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output PARAM type
--------------------------------
A D_STRUCTURE symbol of type D_TYPE
--------------------------------
The maximum scalar value possibly produced for the PARAM
--------------------------------
The minimum scalar value possibly produced for the PARAM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Attention maps
--------------------------------
Set number of heads
--------------------------------
Keys and values interleaved
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output storage type
--------------------------------
Axes for variational dropout kernel
--------------------------------
Whether to turn off cudnn in dropout operator
--------------------------------
This option is ignored if PARAM is specified
--------------------------------
Input D_STRUCTURE to which dropout will be applied
--------------------------------
Whether to only turn on dropout during training or to also turn on for inference
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Fraction of the input that gets dropped PARAM during training time
--------------------------------
First input to the function
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Second input to the function
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
If D_STRUCTURE, minimum area and maximum area to be maintained after cropping If D_TYPE, minimum area to be maintained after cropping, maximum area is set to CONSTANT_FLOAT
--------------------------------
Interpolation method
--------------------------------
See resize_short for details
--------------------------------
Aspect ratio range as BSTR
--------------------------------
Size of the crop formatted as BSTR
--------------------------------
Input image
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
D_STRUCTURE of input matrices
--------------------------------
Scalar factor multiplied with A B
--------------------------------
Axis corresponding to the matrix row indices
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Multiply with transposed of first input BSTR
--------------------------------
Multiply with transposed of second input BSTR
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Batch size
--------------------------------
Context data loader optimized for
--------------------------------
The input CSV file or a directory path
--------------------------------
The shape of one example
--------------------------------
Output data type
--------------------------------
QSTR means no change
--------------------------------
The input CSV file or a directory path
--------------------------------
If NULL, all labels will be returned as CONSTANT_NUM
--------------------------------
The shape of one label
--------------------------------
Maximum number of batches to prefetch
--------------------------------
Whether to use round robin to handle overflow batch or not
--------------------------------
Input D_STRUCTURE
--------------------------------
Axis along which the cumulative sum is computed
--------------------------------
The default BSTR is to compute the cumsum over the flattened D_STRUCTURE
--------------------------------
Type of the returned D_STRUCTURE and of the accumulator in which the elements are summed
--------------------------------
If dtype is not specified, it defaults to the dtype of a, unless a has an D_TYPE dtype with a precision less than that of the default platform D_TYPE
--------------------------------
In that case, the default platform D_TYPE is used
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axes to perform the broadcasting
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Target sizes of the broadcasting axes
--------------------------------
D_STRUCTURE of D_STRUCTURE to stack
--------------------------------
The axis in the result D_STRUCTURE along which the input D_STRUCTURE are stacked
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE
--------------------------------
the first axis to be swapped
--------------------------------
the second axis to be swapped
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
first input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
second input
--------------------------------
Coefficient of the quadratic term in the quadratic function
--------------------------------
Coefficient of the linear term in the quadratic function
--------------------------------
Constant term in the quadratic function
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
lambda multiplier
--------------------------------
D_STRUCTURE of diagonal entries
--------------------------------
Offset of the diagonal versus the main diagonal
--------------------------------
CONSTANT_NUM corresponds to the main diagonal, a negative positive value to diagonals below above the main diagonal
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Type of activation function
--------------------------------
If argument type is D_TYPE, it equivalent to nn Activation act_type D_TYPE
--------------------------------
See Activation for available choices
--------------------------------
Alternatively, other activation blocks such as nn LeakyReLU can be used
--------------------------------
Layout for all convolution inputs, outputs and weights
--------------------------------
Options are QSTR
--------------------------------
Initializer for the recurrent convolution bias D_STRUCTURE
--------------------------------
Recurrent convolution dilate
--------------------------------
Recurrent convolution kernel sizes
--------------------------------
Only odd numbered sizes are supported
--------------------------------
Initializer for the recurrent weights matrix, used for the input convolutions
--------------------------------
Number of output channels
--------------------------------
Initializer for the input convolution bias D_STRUCTURE
--------------------------------
Input convolution dilate
--------------------------------
Input convolution kernel sizes
--------------------------------
Pad for input convolution
--------------------------------
Initializer for the input weights matrix, used for the input convolutions
--------------------------------
Input D_STRUCTURE shape at each time step for each sample, excluding dimension of the batch size and D_STRUCTURE length
--------------------------------
Must be consistent with PARAM
--------------------------------
For example, for layout QSTR the shape should be BSTR
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of layers BSTR
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
Activation function to be applied
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Activation function to be applied
--------------------------------
Input data to activation function
--------------------------------
Input PARAM to activation function
--------------------------------
Lower bound of random PARAM
--------------------------------
ONE_WORD BSTR
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Init slope for the activation
--------------------------------
ONE_WORD BSTR
--------------------------------
Upper bound of random PARAM
--------------------------------
ONE_WORD BSTR
--------------------------------
Bias parameter
--------------------------------
Input data
--------------------------------
Whether to collapse all but the first axis of the input PARAM D_STRUCTURE
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of hidden nodes of the output
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Weight matrix
--------------------------------
The input
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
ONE_WORD PARAM
--------------------------------
The decay rate of momentum estimates at each epoch
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
Generally close to CONSTANT_FLOAT
--------------------------------
Generally close to CONSTANT_NUM
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
Internal state QSTR
--------------------------------
Epsilon to prevent div CONSTANT_NUM
--------------------------------
ONE_WORD Gradient
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Number of update
--------------------------------
Internal state QSTR
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Internal state QSTR
--------------------------------
An D_TYPE that represents the axis in D_STRUCTURE to mask from
--------------------------------
ONE_WORD Data
--------------------------------
ONE_WORD Mask
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Output of mp_lamb_update_phase CONSTANT_NUM
--------------------------------
Lower limit of norm of PARAM
--------------------------------
If lower_bound REXPR, Lower limit is not set
--------------------------------
Learning rate
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD r1
--------------------------------
ONE_WORD r2
--------------------------------
Upper limit of norm of PARAM
--------------------------------
If upper_bound REXPR, Upper limit is not set
--------------------------------
ONE_WORD Weight
--------------------------------
ONE_WORD Weight32
--------------------------------
Input data for SVM transformation
--------------------------------
Class label for the input PARAM
--------------------------------
The loss function penalizes outputs that lie outside this margin
--------------------------------
Default margin is CONSTANT_NUM
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Regularization parameter for the SVM
--------------------------------
This balances the tradeoff between coefficient size and error
--------------------------------
Whether to use L1 SVM objective
--------------------------------
L2 SVM objective is used by default
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The labels of the data
--------------------------------
Predicted values
--------------------------------
If CONSTANT_BOOL, check the shape of PARAM and PARAM Otherwise only check their length
--------------------------------
If CONSTANT_BOOL, wrap PARAM PARAM in a D_STRUCTURE if they are single D_STRUCTURE
--------------------------------
The argument to help instantiate the row sparse D_STRUCTURE
--------------------------------
See above for further details
--------------------------------
Device context BSTR
--------------------------------
The data type of the output D_STRUCTURE
--------------------------------
Default value None
--------------------------------
The shape of the row sparse D_STRUCTURE
--------------------------------
Default value None
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The input
--------------------------------
Maximum factor
--------------------------------
Minimum factor
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
ONE_WORD data
--------------------------------
ONE_WORD index
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Shape of output
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
LARS eps
--------------------------------
LARS eta
--------------------------------
sum of square of gradients D_STRUCTURE
--------------------------------
Learning rates to scale by LARS coefficient
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Gradient rescaling factor
--------------------------------
weight decays
--------------------------------
sum of square of weights D_STRUCTURE
--------------------------------
D_STRUCTURE of name to D_STRUCTURE
--------------------------------
D_STRUCTURE of name to D_STRUCTURE
--------------------------------
If calib_mode QSTR , no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators
--------------------------------
The quantized models generated in this mode are normally CONSTANT_NUM CONSTANT_NUM slower than those with calibrations during inference
--------------------------------
If calib_mode QSTR , the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization
--------------------------------
If calib_mode QSTR BSTR, the thresholds for quantization will be derived such that the KL divergence between the distributions of D_TYPE layer outputs and quantized layer outputs is minimized based upon the calibration dataset
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the operators that users want to excluding
--------------------------------
A D_STRUCTURE of D_TYPE representing the names of the symbols that users want to excluding from being quantized
--------------------------------
A logging object for printing information during the process of quantization
--------------------------------
The quantized destination type for input data
--------------------------------
Currently support QSTR
--------------------------------
QSTR means automatically select output type according to calibration result
--------------------------------
Default value is QSTR
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The decay rate for the 1st moment estimates
--------------------------------
The decay rate for the 2nd moment estimates
--------------------------------
Clip gradient to the range of BSTR If clip_gradient REXPR, gradient clipping is turned off
--------------------------------
PARAM max BSTR
--------------------------------
A small constant for numerical stability
--------------------------------
ONE_WORD Gradient
--------------------------------
If CONSTANT_BOOL, lazy updates are applied if gradient stype is row_sparse and all of w, m and v have the same stype
--------------------------------
Learning rate
--------------------------------
Moving mean
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Rescale gradient to PARAM rescale_grad PARAM
--------------------------------
Moving variance
--------------------------------
PARAM decay augments the objective function with a regularization term that penalizes large weights
--------------------------------
The penalty scales with the square of the magnitude of each PARAM
--------------------------------
ONE_WORD Weight
--------------------------------
Name of activation function to use
--------------------------------
See Activation for available choices
--------------------------------
D_STRUCTURE of input matrices to be factorized
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The axis or axes along which to perform the reduction The default, axis BSTR
--------------------------------
If axis is D_TYPE, a reduction is performed on a particular axis
--------------------------------
If axis is a CONSTANT_NUM D_STRUCTURE, it specifies the axes that hold CONSTANT_NUM-D matrices, and the matrix norms of these matrices are computed
--------------------------------
The input
--------------------------------
If this is set to CONSTANT_BOOL, the reduced PARAM is left in the result as dimension with size one
--------------------------------
Order of the norm
--------------------------------
Currently ord CONSTANT_NUM and ord CONSTANT_NUM is supported
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The PARAM type of the output
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
Initializer for the recurrent weights matrix, used for the linear transformation of the hidden state
--------------------------------
Initializer for the projection weights matrix, used for the linear transformation of the recurrent state
--------------------------------
Number of units in cell state symbol
--------------------------------
Initializer for the bias D_STRUCTURE
--------------------------------
By default, bias for the forget gate is initialized to CONSTANT_NUM while all other biases are initialized to zero
--------------------------------
Initializer for the input weights matrix, used for the linear transformation of the inputs
--------------------------------
Container for weight sharing between cells
--------------------------------
Created if None
--------------------------------
Prefix for name of Block and name of weight if PARAM is None
--------------------------------
Number of units in output symbol
--------------------------------
Set number of heads
--------------------------------
Keys and values interleaved
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
ONE_WORD Queries
--------------------------------
Adjustment for output shape BSTR
--------------------------------
If PARAM is set, adj will be ignored and computed accordingly
--------------------------------
Bias added to the result after the deconvolution operation
--------------------------------
Turn off cudnn for this layer
--------------------------------
Whether to pick convolution algorithm by running performance test
--------------------------------
Input D_STRUCTURE to the deconvolution operation
--------------------------------
Dilation factor for each dimension of the input BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Deconvolution kernel size BSTR
--------------------------------
This is same as the kernel size used for the corresponding convolution
--------------------------------
Set layout for input, output and PARAM
--------------------------------
Empty for default layout, NCW for 1d, NCHW for CONSTANT_NUM-D and NCDHW for CONSTANT_NUM-D NHWC and NDHWC are only supported on GPU
--------------------------------
Whether to disable PARAM parameter
--------------------------------
Number of output filters
--------------------------------
Number of groups partition
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
The amount of implicit zero padding added during convolution for each dimension of the input BSTR
--------------------------------
BSTR CONSTANT_NUM is usually a good choice
--------------------------------
If PARAM is set, pad will be ignored and a padding that will generate the target shape will be used
--------------------------------
Defaults to no padding
--------------------------------
The stride used for the corresponding convolution BSTR
--------------------------------
Defaults to CONSTANT_NUM for each dimension
--------------------------------
Shape of the output D_STRUCTURE BSTR
--------------------------------
Weights representing the PARAM
--------------------------------
Maximum temporary workspace allowed BSTR in deconvolution This parameter has two usages
--------------------------------
When CUDNN is not used, it determines the effective batch size of the deconvolution PARAM
--------------------------------
When CUDNN is used, it controls the maximum temporary storage used for tuning the best CUDNN PARAM when limited_workspace strategy is used
--------------------------------
The axis on which to concatenate the outputs
--------------------------------
The input D_STRUCTURE
--------------------------------
The output D_STRUCTURE to hold the result
--------------------------------
Number of classes for the output layer
--------------------------------
The context in which to load the PARAM weights
--------------------------------
Name of the model
--------------------------------
Whether to load the pretrained weights for model
--------------------------------
Location for keeping the model parameters
--------------------------------
