File,Arg,Type,Constr,Descp
mxnet.contrib.ndarray.dgl_graph_compact,graph_sizes,prim_dtype,['int'],the number of vertices in each graph.
mxnet.gluon.model_zoo.vision.vgg19_bn,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.flip,axis,prim_dtype,['int'],The axis which to reverse elements.
mxnet.ndarray.op.broadcast_axes,axis,prim_dtype,['int'],The axes to perform the broadcasting.
mxnet.ndarray.op.broadcast_axes,size,prim_dtype,['int'],Target sizes of the broadcasting axes.
mxnet.gluon.model_zoo.vision.vgg16,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.densenet169,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.get_mobilenet,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.reshape,shape,prim_dtype,['int'],The target shape
mxnet.ndarray.op.reshape,target_shape,prim_dtype,['int'],"(Deprecated! Use `shape` instead.) Target new shape. One and only one dim can be 0, in which case it will be inferred from the rest of dims"
mxnet.gluon.model_zoo.vision.resnet18_v1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.random_gamma,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.sample_multinomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.sample_gamma,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_5,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.broadcast_axes,axis,prim_dtype,['int'],The axes to perform the broadcasting.
mxnet.ndarray.broadcast_axes,size,prim_dtype,['int'],Target sizes of the broadcasting axes.
mxnet.ndarray.random_negative_binomial,shape,prim_dtype,['int'],Shape of the output.
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_25,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.test_utils.verify_generator,buckets,prim_dtype,['int'],"The buckets to run the chi-square the test. Make sure that the buckets coverthe whole range of the distribution. Also, the buckets must be in ascending order and have no intersection   "
mxnet.ndarray.Convolution,dilate,prim_dtype,['int'],"Convolution dilate: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.Convolution,pad,prim_dtype,['int'],"Zero pad for convolution: (w,), (h, w) or (d, h, w). Defaults to no padding."
mxnet.ndarray.Convolution,stride,prim_dtype,['int'],"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.op.Convolution,dilate,prim_dtype,['int'],"Convolution dilate: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.op.Convolution,pad,prim_dtype,['int'],"Zero pad for convolution: (w,), (h, w) or (d, h, w). Defaults to no padding."
mxnet.ndarray.op.Convolution,stride,prim_dtype,['int'],"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.gluon.model_zoo.vision.alexnet,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.densenet121,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.random_exponential,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.op.broadcast_like,lhs_axes,prim_dtype,['int'],Axes to perform broadcast on in the first input array
mxnet.ndarray.op.broadcast_like,rhs_axes,prim_dtype,['int'],Axes to copy from the second input array
mxnet.ndarray.broadcast_to,shape,prim_dtype,"['boolean', 'int']","The shape of the desired array. We can set the dim to zero if it's same as the original. E.g A = broadcast_to(B, shape=(10, 0, 0)) has the same meaning as A = broadcast_axis(B, axis=0, size=10)."
mxnet.gluon.model_zoo.vision.vgg11_bn,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.sample_exponential,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.op.slice,step,prim_dtype,['int'],"step for the slice operation, supports negative values."
mxnet.ndarray.sample_poisson,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.transpose,axes,prim_dtype,['int'],Target axis order. By default the axes will be inverted.
mxnet.ndarray.contrib.quantized_batch_norm,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.ndarray.contrib.quantized_batch_norm,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.contrib.ndarray.quantized_conv,dilate,prim_dtype,['int'],"Convolution dilate: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.contrib.ndarray.quantized_conv,max_bias,prim_dtype,['numeric'],Maximum value of bias.
mxnet.contrib.ndarray.quantized_conv,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.contrib.ndarray.quantized_conv,max_weight,prim_dtype,['numeric'],Maximum value of weight.
mxnet.contrib.ndarray.quantized_conv,min_bias,prim_dtype,['numeric'],Minimum value of bias.
mxnet.contrib.ndarray.quantized_conv,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.contrib.ndarray.quantized_conv,min_weight,prim_dtype,['numeric'],Minimum value of weight.
mxnet.contrib.ndarray.quantized_conv,pad,prim_dtype,['int'],"Zero pad for convolution: (w,), (h, w) or (d, h, w). Defaults to no padding."
mxnet.contrib.ndarray.quantized_conv,stride,prim_dtype,['int'],"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.random.seed,ctx,prim_dtype,['string'],"The device context of the generator. The default is ""all"" which means seeding random number generators of all devices."
mxnet.ndarray.contrib.dgl_graph_compact,graph_sizes,prim_dtype,['int'],the number of vertices in each graph.
mxnet.ndarray.linspace,num,prim_dtype,['int'],Number of samples to generate. Must be non-negative.
mxnet.ndarray.linspace,stop,prim_dtype,['boolean'],"End of interval, unless endpoint is set to False.  In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False."
mxnet.ndarray.op.sample_negative_binomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.contrib.ndarray.quantized_fully_connected,max_bias,prim_dtype,['numeric'],Maximum value of bias.
mxnet.contrib.ndarray.quantized_fully_connected,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.contrib.ndarray.quantized_fully_connected,max_weight,prim_dtype,['numeric'],Maximum value of weight.
mxnet.contrib.ndarray.quantized_fully_connected,min_bias,prim_dtype,['numeric'],Minimum value of bias.
mxnet.contrib.ndarray.quantized_fully_connected,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.contrib.ndarray.quantized_fully_connected,min_weight,prim_dtype,['numeric'],Minimum value of weight.
mxnet.ndarray.op.SoftmaxActivation,mode,prim_dtype,['boolean'],"Specifies how to compute the softmax. If set to `instance`, it computes softmax for each instance. If set to `channel`, It computes cross channel softmax for each position of each instance."
mxnet.ndarray.sample_negative_binomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.contrib.hawkesll,valid_length,prim_dtype,['int'],The number of valid points in the process
mxnet.ndarray.reshape,shape,prim_dtype,['int'],The target shape
mxnet.ndarray.reshape,target_shape,prim_dtype,['int'],"(Deprecated! Use `shape` instead.) Target new shape. One and only one dim can be 0, in which case it will be inferred from the rest of dims"
mxnet.gluon.model_zoo.vision.resnet34_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.resnet34_v1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.io.CSVIter,prefetch_buffer,prim_dtype,['int'],Maximum number of batches to prefetch.
mxnet.ndarray.random_uniform,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.contrib.quantized_act,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.ndarray.contrib.quantized_act,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.ndarray.image.resize,size,prim_dtype,['int'],"Size of new image. Could be (width, height) or (size)"
mxnet.ndarray.op.Deconvolution,adj,prim_dtype,['int'],"Adjustment for output shape: (w,), (h, w) or (d, h, w). If target_shape is set, adj will be ignored and computed accordingly."
mxnet.ndarray.op.Deconvolution,dilate,prim_dtype,['int'],"Dilation factor for each dimension of the input: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.op.Deconvolution,pad,prim_dtype,['int'],"The amount of implicit zero padding added during convolution for each dimension of the input: (w,), (h, w) or (d, h, w). `(kernel-1)/2` is usually a good choice. If target_shape is set, pad will be ignored and a padding that will generate the target shape will be used. Defaults to no padding."
mxnet.ndarray.op.Deconvolution,stride,prim_dtype,['int'],"The stride used for the corresponding convolution: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.op.Deconvolution,target_shape,prim_dtype,['int'],"Shape of the output tensor: (w,), (h, w) or (d, h, w)."
mxnet.ndarray.op.Deconvolution,weight,prim_dtype,['boolean'],Weights representing the kernel.
mxnet.gluon.model_zoo.vision.resnet101_v1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.random_randint,shape,prim_dtype,['int'],Shape of the output.
mxnet.contrib.ndarray.hawkesll,valid_length,prim_dtype,['int'],The number of valid points in the process
mxnet.ndarray.op.sample_normal,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.op.squeeze,axis,prim_dtype,['int'],"Selects a subset of the single-dimensional entries in the shape. If an axis is selected with shape entry greater than one, an error is raised."
mxnet.gluon.model_zoo.vision.squeezenet1_1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.vgg11,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.contrib.ndarray.DeformableConvolution,dilate,prim_dtype,['int'],"Convolution dilate: (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.contrib.ndarray.DeformableConvolution,pad,prim_dtype,['int'],"Zero pad for convolution: (h, w) or (d, h, w). Defaults to no padding."
mxnet.contrib.ndarray.DeformableConvolution,stride,prim_dtype,['int'],"Convolution stride: (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.gluon.model_zoo.vision.get_model,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.io.ImageRecordIter,prefetch_buffer,prim_dtype,['int'],Maximum number of batches to prefetch.
mxnet.ndarray.op.Pooling,kernel,prim_dtype,['int'],"Pooling kernel size: (y, x) or (d, y, x)"
mxnet.ndarray.op.Pooling,pad,prim_dtype,['int'],"Pad for pooling: (y, x) or (d, y, x). Defaults to no padding."
mxnet.ndarray.op.Pooling,stride,prim_dtype,['int'],"Stride: for pooling (y, x) or (d, y, x). Defaults to 1 for each dimension."
mxnet.ndarray.contrib.index_array,axes,prim_dtype,['int'],The axes to include in the index array. Supports negative values.
mxnet.ndarray.Deconvolution,adj,prim_dtype,['int'],"Adjustment for output shape: (w,), (h, w) or (d, h, w). If target_shape is set, adj will be ignored and computed accordingly."
mxnet.ndarray.Deconvolution,dilate,prim_dtype,['int'],"Dilation factor for each dimension of the input: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.Deconvolution,pad,prim_dtype,['int'],"The amount of implicit zero padding added during convolution for each dimension of the input: (w,), (h, w) or (d, h, w). `(kernel-1)/2` is usually a good choice. If target_shape is set, pad will be ignored and a padding that will generate the target shape will be used. Defaults to no padding."
mxnet.ndarray.Deconvolution,stride,prim_dtype,['int'],"The stride used for the corresponding convolution: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.Deconvolution,target_shape,prim_dtype,['int'],"Shape of the output tensor: (w,), (h, w) or (d, h, w)."
mxnet.ndarray.Deconvolution,weight,prim_dtype,['boolean'],Weights representing the kernel.
mxnet.ndarray.slice,step,prim_dtype,['int'],"step for the slice operation, supports negative values."
mxnet.ndarray.op.sample_generalized_negative_binomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.unravel_index,shape,prim_dtype,['int'],Shape of the array into which the multi-indices apply.
mxnet.ndarray.ravel_multi_index,shape,prim_dtype,['int'],Shape of the array into which the multi-indices apply.
mxnet.ndarray.op.sample_multinomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.random_generalized_negative_binomial,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.sample_normal,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.gluon.model_zoo.vision.vgg13_bn,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.slice_like,axes,prim_dtype,['int'],List of axes on which input data will be sliced according to the corresponding size of the second input. By default will slice on all axes. Negative axes are supported.
mxnet.ndarray.random.multinomial,data,prim_dtype,['int'],"An n dimensional array whose last dimension has length k, where k is the number of possible outcomes of each multinomial distribution. For example, data with shape (m, n, k) specifies m*n multinomial distributions each with k possible outcomes."
mxnet.ndarray.op.MakeLoss,normalization,prim_dtype,"['boolean', 'int']","If this is set to null, the output gradient will not be normalized. If this is set to batch, the output gradient will be divided by the batch size. If this is set to valid, the output gradient will be divided by the number of valid input elements."
mxnet.ndarray.op.sample_gamma,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.one_hot,indices,prim_dtype,['boolean'],array of locations where to set on_value
mxnet.test_utils.chi_square_check,buckets,prim_dtype,['int'],"The buckets to run the chi-square the test. Make sure that the buckets cover the whole range of the distribution. Also, the buckets must be in ascending order and have no intersection"
mxnet.gluon.model_zoo.vision.squeezenet1_0,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.inception_v3,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.ravel_multi_index,shape,prim_dtype,['int'],Shape of the array into which the multi-indices apply.
mxnet.ndarray.op.random_exponential,shape,prim_dtype,['int'],Shape of the output.
mxnet.gluon.model_zoo.vision.resnet152_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.squeeze,axis,prim_dtype,['int'],"Selects a subset of the single-dimensional entries in the shape. If an axis is selected with shape entry greater than one, an error is raised."
mxnet.ndarray.broadcast_axis,axis,prim_dtype,['int'],The axes to perform the broadcasting.
mxnet.ndarray.broadcast_axis,size,prim_dtype,['int'],Target sizes of the broadcasting axes.
mxnet.test_utils.assert_almost_equal,mismatches,prim_dtype,['int'],Maximum number of mismatches to be printed (mismatches[0]) and determine (mismatches[1])
mxnet.gluon.model_zoo.vision.vgg13,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.sample_exponential,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.random_gamma,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.SoftmaxActivation,mode,prim_dtype,['boolean'],"Specifies how to compute the softmax. If set to `instance`, it computes softmax for each instance. If set to `channel`, It computes cross channel softmax for each position of each instance."
mxnet.ndarray.sample_uniform,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.gluon.model_zoo.vision.mobilenet1_0,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.random_normal,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.broadcast_like,lhs_axes,prim_dtype,['int'],Axes to perform broadcast on in the first input array
mxnet.ndarray.broadcast_like,rhs_axes,prim_dtype,['int'],Axes to copy from the second input array
mxnet.gluon.model_zoo.vision.vgg16_bn,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.contrib.ndarray.quantized_batch_norm,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.contrib.ndarray.quantized_batch_norm,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.gluon.model_zoo.vision.mobilenet0_25,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.mobilenet0_5,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.get_resnet,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.io.MNISTIter,prefetch_buffer,prim_dtype,['int'],Maximum number of batches to prefetch.
mxnet.ndarray.op.reverse,axis,prim_dtype,['int'],The axis which to reverse elements.
mxnet.ndarray.op.slice_like,axes,prim_dtype,['int'],List of axes on which input data will be sliced according to the corresponding size of the second input. By default will slice on all axes. Negative axes are supported.
mxnet.ndarray.reverse,axis,prim_dtype,['int'],The axis which to reverse elements.
mxnet.gluon.model_zoo.vision.resnet152_v1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.densenet161,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.one_hot,indices,prim_dtype,['boolean'],array of locations where to set on_value
mxnet.gluon.model_zoo.vision.resnet18_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.resnet50_v1,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.contrib.quantization.calib_graph,calib_mode,prim_dtype,['string'],
mxnet.gluon.model_zoo.vision.mobilenet_v2_0_75,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.random_poisson,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.Pooling,kernel,prim_dtype,['int'],"Pooling kernel size: (y, x) or (d, y, x)"
mxnet.ndarray.Pooling,pad,prim_dtype,['int'],"Pad for pooling: (y, x) or (d, y, x). Defaults to no padding."
mxnet.ndarray.Pooling,stride,prim_dtype,['int'],"Stride: for pooling (y, x) or (d, y, x). Defaults to 1 for each dimension."
mxnet.ndarray.op.random_generalized_negative_binomial,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.sample_generalized_negative_binomial,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.contrib.ndarray.quantized_pooling,kernel,prim_dtype,['int'],"Pooling kernel size: (y, x) or (d, y, x)"
mxnet.contrib.ndarray.quantized_pooling,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.contrib.ndarray.quantized_pooling,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.contrib.ndarray.quantized_pooling,pad,prim_dtype,['int'],"Pad for pooling: (y, x) or (d, y, x). Defaults to no padding."
mxnet.contrib.ndarray.quantized_pooling,stride,prim_dtype,['int'],"Stride: for pooling (y, x) or (d, y, x). Defaults to 1 for each dimension."
mxnet.ndarray.contrib.quantized_fully_connected,max_bias,prim_dtype,['numeric'],Maximum value of bias.
mxnet.ndarray.contrib.quantized_fully_connected,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.ndarray.contrib.quantized_fully_connected,max_weight,prim_dtype,['numeric'],Maximum value of weight.
mxnet.ndarray.contrib.quantized_fully_connected,min_bias,prim_dtype,['numeric'],Minimum value of bias.
mxnet.ndarray.contrib.quantized_fully_connected,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.ndarray.contrib.quantized_fully_connected,min_weight,prim_dtype,['numeric'],Minimum value of weight.
mxnet.ndarray.op.random_poisson,shape,prim_dtype,['int'],Shape of the output.
mxnet.gluon.model_zoo.vision.vgg19,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.densenet201,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.resnet50_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.sample_poisson,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.contrib.quantized_conv,dilate,prim_dtype,['int'],"Convolution dilate: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.contrib.quantized_conv,max_bias,prim_dtype,['numeric'],Maximum value of bias.
mxnet.ndarray.contrib.quantized_conv,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.ndarray.contrib.quantized_conv,max_weight,prim_dtype,['numeric'],Maximum value of weight.
mxnet.ndarray.contrib.quantized_conv,min_bias,prim_dtype,['numeric'],Minimum value of bias.
mxnet.ndarray.contrib.quantized_conv,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.ndarray.contrib.quantized_conv,min_weight,prim_dtype,['numeric'],Minimum value of weight.
mxnet.ndarray.contrib.quantized_conv,pad,prim_dtype,['int'],"Zero pad for convolution: (w,), (h, w) or (d, h, w). Defaults to no padding."
mxnet.ndarray.contrib.quantized_conv,stride,prim_dtype,['int'],"Convolution stride: (w,), (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.op.broadcast_axis,axis,prim_dtype,['int'],The axes to perform the broadcasting.
mxnet.ndarray.op.broadcast_axis,size,prim_dtype,['int'],Target sizes of the broadcasting axes.
mxnet.ndarray.op.Dropout,axes,prim_dtype,['int'],Axes for variational dropout kernel.
mxnet.gluon.model_zoo.vision.get_model,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.random_negative_binomial,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.op.unravel_index,shape,prim_dtype,['int'],Shape of the array into which the multi-indices apply.
mxnet.io.LibSVMIter,prefetch_buffer,prim_dtype,['int'],Maximum number of batches to prefetch.
mxnet.gluon.model_zoo.vision.mobilenet_v2_1_0,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.gluon.model_zoo.vision.resnet101_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.visualization.plot_network,node_attrs,prim_dtype,['string'],"Specifies the attributes for nodes in the generated visualization. node_attrs is a dictionary of Graphviz attribute names and values. For example: node_attrs={""shape"":""oval"",""fixedsize"":""false""}   will use oval shape for nodes and allow variable sized nodes in the visualization. "
mxnet.visualization.plot_network,save_format,prim_dtype,['string'],
mxnet.ndarray.contrib.DeformableConvolution,dilate,prim_dtype,['int'],"Convolution dilate: (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.ndarray.contrib.DeformableConvolution,pad,prim_dtype,['int'],"Zero pad for convolution: (h, w) or (d, h, w). Defaults to no padding."
mxnet.ndarray.contrib.DeformableConvolution,stride,prim_dtype,['int'],"Convolution stride: (h, w) or (d, h, w). Defaults to 1 for each dimension."
mxnet.gluon.model_zoo.vision.mobilenet0_75,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.transpose,axes,prim_dtype,['int'],Target axis order. By default the axes will be inverted.
mxnet.ndarray.op.random_uniform,shape,prim_dtype,['int'],Shape of the output.
mxnet.gluon.model_zoo.vision.get_vgg,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.op.sample_uniform,shape,prim_dtype,['int'],Shape to be sampled from each random distribution.
mxnet.ndarray.contrib.quantized_pooling,kernel,prim_dtype,['int'],"Pooling kernel size: (y, x) or (d, y, x)"
mxnet.ndarray.contrib.quantized_pooling,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.ndarray.contrib.quantized_pooling,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.ndarray.contrib.quantized_pooling,pad,prim_dtype,['int'],"Pad for pooling: (y, x) or (d, y, x). Defaults to no padding."
mxnet.ndarray.contrib.quantized_pooling,stride,prim_dtype,['int'],"Stride: for pooling (y, x) or (d, y, x). Defaults to 1 for each dimension."
mxnet.ndarray.op.flip,axis,prim_dtype,['int'],The axis which to reverse elements.
mxnet.ndarray.op.broadcast_to,shape,prim_dtype,"['boolean', 'int']","The shape of the desired array. We can set the dim to zero if it's same as the original. E.g A = broadcast_to(B, shape=(10, 0, 0)) has the same meaning as A = broadcast_axis(B, axis=0, size=10)."
mxnet.ndarray.random_normal,shape,prim_dtype,['int'],Shape of the output.
mxnet.io.ImageDetRecordIter,prefetch_buffer,prim_dtype,['int'],Maximum number of batches to prefetch.
mxnet.contrib.ndarray.quantized_act,max_data,prim_dtype,['numeric'],Maximum value of data.
mxnet.contrib.ndarray.quantized_act,min_data,prim_dtype,['numeric'],Minimum value of data.
mxnet.gluon.rnn.RNN,activation,prim_dtype,['string'],The activation function to use.
mxnet.gluon.model_zoo.vision.get_mobilenet_v2,ctx,prim_dtype,['boolean'],The context in which to load the pretrained weights.
mxnet.ndarray.random_randint,shape,prim_dtype,['int'],Shape of the output.
mxnet.ndarray.sparse.slice,step,prim_dtype,['int'],"step for the slice operation, supports negative values."
mxnet.ndarray.Dropout,axes,prim_dtype,['int'],Axes for variational dropout kernel.
mxnet.contrib.ndarray.index_array,axes,prim_dtype,['int'],The axes to include in the index array. Supports negative values.
mxnet.ndarray.MakeLoss,normalization,prim_dtype,"['boolean', 'int']","If this is set to null, the output gradient will not be normalized. If this is set to batch, the output gradient will be divided by the batch size. If this is set to valid, the output gradient will be divided by the number of valid input elements."
mxnet.gluon.rnn.BidirectionalCell,output_prefix,prim_dtype,['string'],
mxnet.kvstore.create,name,prim_dtype,['string'],The type of KVStore.
