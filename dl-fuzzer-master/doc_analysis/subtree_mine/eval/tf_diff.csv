API,Arg,Descp,default,doc_dtype,Catrgory,Label,Extracted
tf.nn.conv1d,padding,'SAME' or 'VALID',,,enum,"['SAME', 'VALID']",[]
tf.feature_column.sequence_numeric_column,default_value,A single value compatible with `dtype` that is used for padding the sparse data into a dense `Tensor`.,0.0,,dtype,['tf.dtype'],['float']
tf.feature_column.sequence_numeric_column,default_value,A single value compatible with `dtype` that is used for padding the sparse data into a dense `Tensor`.,0.0,,tensor_t,[],['tf.tensor']
tf.feature_column.sequence_numeric_column,key,A unique string identifying the input features.,,,ndim,['0'],[]
tf.keras.preprocessing.text.hashing_trick,n,Dimension of the hashing space.,,,dtype,['int'],[]
tf.data.experimental.sample_from_datasets,weights,"(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list. Defaults to a uniform distribution across`datasets`.",None,,dtype,['float'],[]
tf.data.experimental.sample_from_datasets,weights,"(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list. Defaults to a uniform distribution across`datasets`.",None,,structure,['list'],[]
tf.data.experimental.sample_from_datasets,weights,"(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list. Defaults to a uniform distribution across`datasets`.",None,,ndim,[],['0']
tf.data.experimental.sample_from_datasets,weights,"(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list. Defaults to a uniform distribution across`datasets`.",None,,range,"['[0,1]']",[]
tf.random.shuffle,seed,A Python integer. Used to create a random seed for the distribution. See`tf.compat.v1.set_random_seed`for behavior.,None,,ndim,['0'],[]
tf.keras.layers.LSTM,kernel_constraint,Constraint function applied to the `kernel` weights matrix. Default: `None`.,None,,enum,[],['None']
tf.keras.layers.SeparableConv1D,kernel_size,A single integer specifying the spatial dimensions of the filters.,,,ndim,['0'],[]
tf.strings.to_hash_bucket_strong,key,"A list of `ints`. The key used to seed the hash function, passed as a list of two uint64 elements.",,,dtype,['tf.uint64'],"['int', 'tf.uint64']"
tf.strings.to_hash_bucket_strong,key,"A list of `ints`. The key used to seed the hash function, passed as a list of two uint64 elements.",,,shape,['[2]'],[]
tf.strings.to_hash_bucket_strong,key,"A list of `ints`. The key used to seed the hash function, passed as a list of two uint64 elements.",,,ndim,['1'],[]
tf.debugging.assert_rank,x,`Tensor`.,,,tensor_t,['tf.tensor'],[]
tf.linalg.trace,x,tensor.,,,tensor_t,['tf.tensor'],[]
tf.keras.layers.RepeatVector,n,"Integer, repetition factor.",,dtype,['int'],
tf.keras.backend.batch_dot,axes,"Tuple or list of integers with target dimensions, or single integer. The sizes of `x.shape[axes[0]]` and `y.shape[axes[1]]` should be equal.",None,,shape,[],"['[0]', '[1]']"
tf.keras.backend.batch_dot,axes,"Tuple or list of integers with target dimensions, or single integer. The sizes of `x.shape[axes[0]]` and `y.shape[axes[1]]` should be equal.",None,,ndim,"['0', '1']",['1']
tf.keras.backend.batch_dot,y,Keras tensor or variable with `ndim >= 2`.,,,ndim,['>=2'],[]
tf.keras.preprocessing.image.array_to_img,data_format,"Image data format. either ""channels_first"" or ""channels_last"".",None,,enum,"['channels_first', 'channels_last']",[]
tf.signal.linear_to_mel_weight_matrix,sample_rate,"An integer or float `Tensor`. Samples per second of the input signal used to create the spectrogram. Used to figure out the frequencies corresponding to each spectrogram bin, which dictates how they are mapped into the mel scale.",8000,,ndim,['0'],[]
tf.keras.layers.ReLU,threshold,Float. Threshold value for thresholded activation.,0,,dtype,['float'],['int']
tf.io.encode_jpeg,image,"A `Tensor` of type `uint8`. 3-D with shape `[height, width, channels]`.",,,shape,"['[height,width,channels]']",[]
tf.io.encode_jpeg,image,"A `Tensor` of type `uint8`. 3-D with shape `[height, width, channels]`.",,,ndim,['3'],[]
tf.unique,out_idx,"An optional `tf.DType` from: `tf.int32, tf.int64`. Defaults to `tf.int32`.",tf.dtypes.int32,,dtype,['tf.dtype'],"['tf.dtype', 'tf.int32', 'tf.int64']"
tf.unique,out_idx,"An optional `tf.DType` from: `tf.int32, tf.int64`. Defaults to `tf.int32`.",tf.dtypes.int32,,enum,"['tf.int32', 'tf.int64']",[]
tf.keras.layers.LayerNormalization,axis,Integer or List/Tuple. The axis that should be normalized (typically the features axis).,-1,,ndim,"['0', '1']",[]
tf.compat.forward_compatible,day,"A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an`int`.",,,dtype,['int'],[]
tf.compat.forward_compatible,day,"A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an`int`.",,,ndim,['0'],[]
tf.compat.forward_compatible,day,"A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an`int`.",,,range,"['[1,31]']",[]
tf.sparse.segment_sqrt_n,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,None,,dtype,['tf.int32'],[]
tf.sparse.segment_sqrt_n,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,None,,ndim,['0'],[]
tf.sparse.segment_sqrt_n,num_segments,An optional int32 scalar. Indicates the size of the output`Tensor`.,None,,range,"['[0,inf)']",[]
tf.sparse.segment_sqrt_n,segment_ids,A 1-D `Tensor` with indices into the output `Tensor`. Values should be sorted and can be repeated.,,,dtype,['int'],[]
tf.function,input_signature,"A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function. If `None`, a separate function is instantiated for each inferred input signature.  If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",None,,tensor_t,[],['tf.tensor']
tf.clip_by_global_norm,use_norm,"A 0-D (scalar) `Tensor` of type `float` (optional). The global norm to use. If not provided, `global_norm()` is used to compute the norm.",None,,dtype,['float'],[]
tf.clip_by_global_norm,use_norm,"A 0-D (scalar) `Tensor` of type `float` (optional). The global norm to use. If not provided, `global_norm()` is used to compute the norm.",None,,tensor_t,['tf.tensor'],[]
tf.clip_by_global_norm,use_norm,"A 0-D (scalar) `Tensor` of type `float` (optional). The global norm to use. If not provided, `global_norm()` is used to compute the norm.",None,,ndim,['0'],[]
tf.sparse.to_indicator,vocab_size,"A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",,,tensor_t,['tf.tensor'],[]
tf.sparse.to_indicator,vocab_size,"A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",,,ndim,['0'],[]
tf.sparse.to_indicator,vocab_size,"A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",,,range,"['[0,inf)']",[]
tf.keras.backend.resize_images,width_factor,Positive integer.,,,dtype,['int'],[]
tf.keras.backend.resize_images,width_factor,Positive integer.,,,ndim,['0'],[]
tf.keras.backend.resize_images,width_factor,Positive integer.,,,range,"['(0,inf)']",[]
tf.nn.conv3d_transpose,strides,"An int or list of `ints` that has length `1`, `3` or `5`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `D`, `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",,,ndim,"['0', '1']",['1']
tf.nn.conv3d_transpose,strides,"An int or list of `ints` that has length `1`, `3` or `5`.  The stride of the sliding window for each dimension of `input`. If a single value is given it is replicated in the `D`, `H` and `W` dimension. By default the `N` and `C` dimensions are set to 0. The dimension order is determined by the value of `data_format`, see below for details.",,,range,"['[0,inf)']",[]
tf.keras.preprocessing.sequence.skipgrams,negative_samples,Float >= 0. 0 for no negative (i.e. random) samples.     1 for same number as positive samples.,1.0,,range,"['[0,inf)']",[]
tf.math.confusion_matrix,dtype,Data type of the confusion matrix.,tf.dtypes.int32,,dtype,['tf.dtype'],"['tf.dtype', 'tf.int32']"
tf.nn.max_pool1d,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",,,dtype,['tf.string'],[]
tf.nn.max_pool1d,padding,"A string, either `'VALID'` or `'SAME'`. The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",,,enum,"['SAME', 'VALID']",[]
tf.keras.layers.AlphaDropout,seed,A Python integer to use as random seed.,None,,ndim,['0'],[]
tf.keras.utils.plot_model,dpi,Dots per inch.,96,,ndim,['0'],[]
tf.nondifferentiable_batch_function,max_batch_size,Batch sizes will never be bigger than this.,,,dtype,['int'],[]
tf.nondifferentiable_batch_function,max_batch_size,Batch sizes will never be bigger than this.,,,range,"['[0,inf)']",[]
tf.keras.preprocessing.image.random_rotation,fill_mode,"Points outside the boundaries of the input     are filled according to the given mode     (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).",nearest,,enum,"['constant', 'nearest', 'reflect', 'wrap']",[]
tf.keras.layers.InputLayer,dtype,Datatype of the input.,None,,dtype,['tf.dtype'],[]
tf.keras.layers.InputLayer,dtype,Datatype of the input.,None,,ndim,['0'],[]
tf.sort,direction,The direction in which to sort the values (`'ASCENDING'` or`'DESCENDING'`).,ASCENDING,,enum,"['ASCENDING', 'DESCENDING']",[]
tf.math.cumprod,axis,"A `Tensor` of type `int32` (default: 0). Must be in the range`[-rank(x), rank(x))`.",0,,dtype,['tf.int32'],"['int', 'tf.int32']"
tf.math.cumprod,axis,"A `Tensor` of type `int32` (default: 0). Must be in the range`[-rank(x), rank(x))`.",0,,ndim,['0'],[]
tf.signal.inverse_stft,fft_length,"An integer scalar `Tensor`. The size of the FFT that produced`stfts`. If not provided, uses the smallest power of 2 enclosing`frame_length`.",None,,range,"['[0,inf)']",[]
tf.nn.separable_conv2d,padding,"A string, either `'VALID'` or `'SAME'`.  The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",,,dtype,['tf.string'],[]
tf.nn.separable_conv2d,padding,"A string, either `'VALID'` or `'SAME'`.  The padding algorithm. See the ""returns"" section of `tf.nn.convolution` for details.",,,enum,"['SAME', 'VALID']",[]
tf.nn.separable_conv2d,pointwise_filter,"4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.  Pointwise filter to mix channels after`depthwise_filter` has convolved spatially.",,,ndim,[],['4']
tf.nn.separable_conv2d,strides,1-D of size 4.  The strides for the depthwise convolution for each dimension of `input`.,,,shape,['[4]'],[]
tf.nn.separable_conv2d,strides,1-D of size 4.  The strides for the depthwise convolution for each dimension of `input`.,,,ndim,['1'],[]
tf.nn.separable_conv2d,strides,1-D of size 4.  The strides for the depthwise convolution for each dimension of `input`.,,,range,"['[0,inf)']",[]
tf.summary.scalar,step,"Explicit `int64`-castable monotonic step value for this summary. If omitted, this defaults to `tf.summary.experimental.get_step()`, which must not be None.",None,,dtype,['tf.int64'],[]
tf.nn.dilation2d,filters,"A `Tensor`. Must have the same type as `input`. 3-D with shape `[filter_height, filter_width, depth]`.",,,dtype,['dtype:&input'],['&input']
tf.nn.dilation2d,filters,"A `Tensor`. Must have the same type as `input`. 3-D with shape `[filter_height, filter_width, depth]`.",,,shape,"['[filter_height,filter_width,depth]']",[]
tf.nn.dilation2d,filters,"A `Tensor`. Must have the same type as `input`. 3-D with shape `[filter_height, filter_width, depth]`.",,,ndim,['3'],[]
tf.debugging.assert_none_equal,y,"Numeric `Tensor`, same dtype as and broadcastable to `x`.",,,dtype,['dtype:&x'],[]
tf.debugging.assert_none_equal,y,"Numeric `Tensor`, same dtype as and broadcastable to `x`.",,,tensor_t,['tf.tensor'],[]
tf.keras.backend.depthwise_conv2d,dilation_rate,"tuple of integers, dilation rates for the separable convolution.","(1, 1)",,ndim,['1'],[]
tf.feature_column.crossed_column,keys,An iterable identifying the features to be crossed. Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column. Does not support hashed categorical column. ,,,dtype,['tf.string'],[]
tf.feature_column.crossed_column,keys,An iterable identifying the features to be crossed. Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column. Does not support hashed categorical column. ,,,ndim,['1'],[]
tf.summary.experimental.write_raw_pb,tensor,the string Tensor holding one or more serialized `Summary` protobufs,,,ndim,[],['0']
tf.keras.layers.ConvLSTM2D,dropout,Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.,0.0,,range,"['[0,1]']",[]
tf.test.create_local_cluster,num_ps,Number of PS servers to start.,,,dtype,['int'],[]
tf.keras.activations.sigmoid,x,Input tensor.,,tensor_t,['tf.tensor'],
tf.strided_slice,shrink_axis_mask,An `int32` mask.,0,,dtype,['tf.int32'],['int']
tf.strided_slice,shrink_axis_mask,An `int32` mask.,0,,ndim,['0'],[]
tf.signal.stft,fft_length,"An integer scalar `Tensor`. The size of the FFT to apply. If not provided, uses the smallest power of 2 enclosing `frame_length`.",None,,range,"['[0,inf)']",[]
tf.keras.estimator.model_to_estimator,keras_model_path,"Path to a compiled Keras model saved on disk, in HDF5 format, which can be generated with the `save()` method of a Keras model. This argument is mutually exclusive with `keras_model`.",None,,dtype,['tf.string'],[]
tf.keras.estimator.model_to_estimator,keras_model_path,"Path to a compiled Keras model saved on disk, in HDF5 format, which can be generated with the `save()` method of a Keras model. This argument is mutually exclusive with `keras_model`.",None,,ndim,['0'],[]
tf.strings.unicode_encode,input,"An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",,,shape,"['[...,num_chars]']",[]
tf.strings.unicode_encode,input,"An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",,,ndim,['>=1'],[]
tf.strings.unicode_encode,output_encoding,"Unicode encoding that should be used to encode each codepoint sequence.  Can be `""UTF-8""`, `""UTF-16-BE""`, or `""UTF-32-BE""`.",,,enum,"['UTF-8', 'UTF-16-BE', 'UTF-32-BE']",[]
tf.nn.sampled_softmax_loss,sampled_values,"a tuple of (`sampled_candidates`, `true_expected_count`,`sampled_expected_count`) returned by a `*_candidate_sampler` function. (if None, we default to `log_uniform_candidate_sampler`)",None,,ndim,['1'],[]
tf.nn.depthwise_conv2d_backprop_input,input_sizes,"A `Tensor` of type `int32`. An integer vector representing the shape of `input`, based on `data_format`.  For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",,,dtype,"['tf.int32', 'int']",['tf.int32']
tf.nn.depthwise_conv2d_backprop_input,input_sizes,"A `Tensor` of type `int32`. An integer vector representing the shape of `input`, based on `data_format`.  For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",,,shape,"['[batch, height, width, channels]']","['[batch,height,width,channels]']"
tf.nn.depthwise_conv2d_backprop_input,input_sizes,"A `Tensor` of type `int32`. An integer vector representing the shape of `input`, based on `data_format`.  For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",,,ndim,"['1', '4']",['4']
tf.nn.depthwise_conv2d_backprop_input,input_sizes,"A `Tensor` of type `int32`. An integer vector representing the shape of `input`, based on `data_format`.  For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",,,range,"['[0,inf)']",[]
tf.nn.ctc_beam_search_decoder,sequence_length,"1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",,,dtype,['tf.int32'],[]
tf.nn.ctc_beam_search_decoder,sequence_length,"1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",,,structure,['list'],[]
tf.nn.ctc_beam_search_decoder,sequence_length,"1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",,,shape,['[batch_size]'],[]
tf.nn.ctc_beam_search_decoder,sequence_length,"1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",,,ndim,['1'],[]
tf.nn.ctc_beam_search_decoder,sequence_length,"1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",,,range,"['[0,inf)']",[]
tf.ragged.constant,ragged_rank,"An integer specifying the ragged rank of the returned`RaggedTensor`.  Must be nonnegative and less than `K`. Defaults to`max(0, K - 1)` if `inner_shape` is not specified.  Defaults to `max(0, K 1 - len(inner_shape))`if`inner_shape` is specified. ",None,,range,"['[0,K)']",[]
tf.keras.backend.rnn,constants,List of constant values passed at each step.,None,,structure,['list'],[]
tf.linalg.cholesky,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",,,shape,"['[...,m,m]']",[]
tf.linalg.cholesky,input,"A `Tensor`. Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`. Shape is `[..., M, M]`.",,,ndim,['>=2'],[]
tf.autograph.set_verbosity,level,"int, the verbosity level; larger values specify increased verbosity; 0 means no logging. When reporting bugs, it is recommended to set this value to a larger number, like 10.",,,ndim,['0'],[]
tf.autograph.set_verbosity,level,"int, the verbosity level; larger values specify increased verbosity; 0 means no logging. When reporting bugs, it is recommended to set this value to a larger number, like 10.",,,range,[],"['[0,inf)']"
tf.random.gamma,seed,A Python integer. Used to create a random seed for the distributions. See`tf.compat.v1.set_random_seed`for behavior.,None,,ndim,['0'],[]
tf.keras.models.clone_model,clone_function,"Callable to be used to clone each layer in the target model (except `InputLayer` instances). It takes as argument the layer instance to be cloned, and returns the corresponding layer instance to be used in the model copy. If unspecified, this callable defaults to the following serialization/deserialization function:`lambda layer: layer.__class__.from_config(layer.get_config())`. By passing a custom callable, you can customize your copy of the model, e.g. by wrapping certain layers of interest (you might want to replace all `LSTM` instances with equivalent`Bidirectional(LSTM(...))` instances, for example).",None,,ndim,[],['0']
tf.quantization.quantize,T,"A `tf.DType` from: `tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16`.",,,dtype,['tf.dtype'],"['tf.dtype', 'tf.qint16', 'tf.qint32', 'tf.qint8', 'tf.quint16', 'tf.quint8']"
tf.quantization.quantize,T,"A `tf.DType` from: `tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16`.",,,ndim,['0'],[]
tf.quantization.quantize,T,"A `tf.DType` from: `tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16`.",,,enum,"['tf.qint16', 'tf.qint32', 'tf.qint8', 'tf.quint16', 'tf.quint8']",[]
tf.quantization.quantize,max_range,"A `Tensor` of type `float32`. The maximum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to `output_max`. If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",,,ndim,[],['1']
tf.keras.losses.poisson,y_true,Tensor of true targets.,,tensor_t,['tf.tensor'],
tf.nn.pool,window_shape,Sequence of N ints >= 1.,,,ndim,['1'],[]
tf.nn.pool,window_shape,Sequence of N ints >= 1.,,,range,"['[1,inf)']",[]
tf.math.bincount,maxlength,"If given, skips values in `arr` that are equal or greater than`maxlength`, ensuring that the output has length at most `maxlength`.",None,,dtype,['int'],[]
tf.math.bincount,maxlength,"If given, skips values in `arr` that are equal or greater than`maxlength`, ensuring that the output has length at most `maxlength`.",None,,ndim,['0'],['1']
tf.sequence_mask,maxlen,"scalar integer tensor, size of last dimension of returned tensor. Default is the maximum value in `lengths`.",None,,dtype,['int'],[]
tf.sequence_mask,maxlen,"scalar integer tensor, size of last dimension of returned tensor. Default is the maximum value in `lengths`.",None,,tensor_t,['tf.tensor'],[]
tf.sequence_mask,maxlen,"scalar integer tensor, size of last dimension of returned tensor. Default is the maximum value in `lengths`.",None,,ndim,['0'],[]
tf.sequence_mask,maxlen,"scalar integer tensor, size of last dimension of returned tensor. Default is the maximum value in `lengths`.",None,,range,"['[0,inf)']",[]
tf.nn.dropout,rate,"A scalar `Tensor` with the same type as x. The probability that each element is dropped. For example, setting rate=0.1 would drop 10% of input elements.",,,dtype,['dtype:&x'],[]
tf.nn.dropout,rate,"A scalar `Tensor` with the same type as x. The probability that each element is dropped. For example, setting rate=0.1 would drop 10% of input elements.",,,range,"['[0,1]']",[]
tf.make_ndarray,tensor,A TensorProto.,,tensor_t,['tf.tensor'],
tf.quantization.fake_quant_with_min_max_args,min,An optional `float`. Defaults to `-6`.,-6,,dtype,['float'],"['float', 'int']"
tf.image.per_image_standardization,image,"An n-D Tensor with at least 3 dimensions, the last 3 of which are the dimensions of each image.",,,dtype,['numeric'],[]
tf.image.per_image_standardization,image,"An n-D Tensor with at least 3 dimensions, the last 3 of which are the dimensions of each image.",,,ndim,['>=3'],[]
tf.keras.preprocessing.text.one_hot,split,str. Separator for word splitting.`, ,,dtype,['tf.string'],[]
tf.keras.backend.separable_conv2d,padding,"string, `""same""` or `""valid""`.",valid,,enum,"['same', 'valid']",[]
tf.keras.layers.DepthwiseConv2D,padding,one of `'valid'` or `'same'` (case-insensitive).,valid,,ndim,[],['0']
tf.config.list_physical_devices,device_type,"(optional string) Only include devices matching this device type. For example ""CPU"" or ""GPU"".",,dtype,['tf.string'],
tf.image.extract_patches,images,"A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",,,dtype,['numeric'],[]
tf.audio.encode_wav,audio,"A `Tensor` of type `float32`. 2-D with shape `[length, channels]`.",,,shape,"['[length,channels]']",[]
tf.audio.encode_wav,audio,"A `Tensor` of type `float32`. 2-D with shape `[length, channels]`.",,,ndim,['2'],[]
