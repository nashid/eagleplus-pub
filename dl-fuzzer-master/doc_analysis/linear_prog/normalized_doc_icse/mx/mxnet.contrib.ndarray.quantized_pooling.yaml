constraints:
  '**kwargs':
    descp: ''
    normalized_descp: []
  count_include_pad:
    default: _Null
    descp: Only used for AvgPool, specify whether to count padding elements for averagecalculation.
      For example, with a 5*5 kernel on a 3*3 corner of a image,the sum of the 9 valid
      elements will be divided by 25 if this is set to true,or it will be divided
      by 9 if this is set to false. Defaults to true.
    doc_dtype: boolean or None, optional, default=None
    normalized_default: DEFAULT Null
    normalized_descp:
    - Only used for AvgPool specify whether to count padding elements for averagecalculation
    - For example with a CONSTANT_NUM CONSTANT_NUM PARAM on a CONSTANT_NUM CONSTANT_NUM
      corner of a image the sum of the CONSTANT_NUM valid elements will be divided
      by CONSTANT_NUM if this is set to CONSTANT_BOOL or it will be divided by CONSTANT_NUM
      if this is set to CONSTANT_BOOL
    - Defaults to CONSTANT_BOOL
    normalized_docdtype: D_TYPE or None optional default None
  cudnn_off:
    default: _Null
    descp: Turn off cudnn pooling and use MXNet pooling operator.
    doc_dtype: boolean, optional, default=0
    normalized_default: DEFAULT Null
    normalized_descp:
    - Turn off cudnn pooling and use MXNet pooling operator
    normalized_docdtype: D_TYPE optional default CONSTANT_NUM
  data:
    default: None
    descp: Input data.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Input data
    normalized_docdtype: ONE_WORD D_STRUCTURE
  global_pool:
    default: _Null
    descp: Ignore kernel size, do global pooling based on current input feature map.
    doc_dtype: boolean, optional, default=0
    normalized_default: DEFAULT Null
    normalized_descp:
    - Ignore PARAM size do global pooling based on current input feature map
    normalized_docdtype: D_TYPE optional default CONSTANT_NUM
  kernel:
    default: _Null
    descp: 'Pooling kernel size: (y, x) or (d, y, x)'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Pooling kernel size BSTR
    normalized_docdtype: Shape BSTR optional default
  layout:
    default: _Null
    descp: 'Set layout for input and output. Empty for default layout: NCW for 1d,
      NCHW for 2d and NCDHW for 3d.'
    doc_dtype: '{None, ''NCDHW'', ''NCHW'', ''NCW'', ''NDHWC'', ''NHWC'', ''NWC''},optional,
      default=''None'''
    normalized_default: DEFAULT Null
    normalized_descp:
    - Set layout for input and output
    - Empty for default layout NCW for CONSTANT_NUM d NCHW for CONSTANT_NUM d and
      NCDHW for CONSTANT_NUM d
    normalized_docdtype: None QSTR optional default QSTR
  max_data:
    default: None
    descp: Maximum value of data.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Maximum value of PARAM
    normalized_docdtype: ONE_WORD D_STRUCTURE
  min_data:
    default: None
    descp: Minimum value of data.
    doc_dtype: NDArray
    normalized_default: DEFAULT None
    normalized_descp:
    - Minimum value of PARAM
    normalized_docdtype: ONE_WORD D_STRUCTURE
  name:
    default: None
    descp: ''
    normalized_default: DEFAULT None
    normalized_descp: []
  out:
    default: None
    descp: The output NDArray to hold the result.
    doc_dtype: NDArray, optional
    normalized_default: DEFAULT None
    normalized_descp:
    - The output D_STRUCTURE to hold the result
    normalized_docdtype: D_STRUCTURE optional
  p_value:
    default: _Null
    descp: Value of p for Lp pooling, can be 1 or 2, required for Lp Pooling.
    doc_dtype: int or None, optional, default='None'
    normalized_default: DEFAULT Null
    normalized_descp:
    - Value of p for Lp pooling can be CONSTANT_NUM required for Lp Pooling
    normalized_docdtype: D_TYPE or None optional default QSTR
  pad:
    default: _Null
    descp: 'Pad for pooling: (y, x) or (d, y, x). Defaults to no padding.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Pad for pooling BSTR
    - Defaults to no padding
    normalized_docdtype: Shape BSTR optional default
  pool_type:
    default: _Null
    descp: Pooling type to be applied.
    doc_dtype: '{''avg'', ''lp'', ''max'', ''sum''},optional, default=''max'''
    normalized_default: DEFAULT Null
    normalized_descp:
    - Pooling type to be applied
    normalized_docdtype: QSTR optional default QSTR
  pooling_convention:
    default: _Null
    descp: Pooling convention to be applied.
    doc_dtype: '{''full'', ''same'', ''valid''},optional, default=''valid'''
    normalized_default: DEFAULT Null
    normalized_descp:
    - Pooling convention to be applied
    normalized_docdtype: QSTR optional default QSTR
  stride:
    default: _Null
    descp: 'Stride: for pooling (y, x) or (d, y, x). Defaults to 1 for each dimension.'
    doc_dtype: Shape(tuple), optional, default=[]
    normalized_default: DEFAULT Null
    normalized_descp:
    - Stride for pooling BSTR
    - Defaults to CONSTANT_NUM for each dimension
    normalized_docdtype: Shape BSTR optional default
inputs:
  optional:
  - data
  - min_data
  - max_data
  - kernel
  - pool_type
  - global_pool
  - cudnn_off
  - pooling_convention
  - stride
  - pad
  - p_value
  - count_include_pad
  - layout
  - out
  - name
  required:
  - '**kwargs'
link: https://mxnet.apache.org/versions/1.6/api/python/docs/api/contrib/ndarray/index.html#mxnet.contrib.ndarray.quantized_pooling
package: mxnet
target: quantized_pooling
title: mxnet.contrib.ndarray.quantized_pooling
version: 1.6.0
