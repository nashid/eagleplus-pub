sklearn.decomposition.dict_learning = dict_learning(X, n_components, alpha, max_iter=100, tol=1e-08, method='lars', n_jobs=None, dict_init=None, code_init=None, callback=None, verbose=False, random_state=None, return_n_iter=False, positive_dict=False, positive_code=False, method_max_iter=1000)
    Solves a dictionary learning matrix factorization problem.
    
    Finds the best dictionary and the corresponding sparse code for
    approximating the data matrix X by solving::
    
        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1
                     (U,V)
                    with || V_k ||_2 = 1 for all  0 <= k < n_components
    
    where V is the dictionary and U is the sparse code.
    
    Read more in the :ref:`User Guide <DictionaryLearning>`.
    
    Parameters
    ----------
    X : array of shape (n_samples, n_features)
        Data matrix.
    
    n_components : int,
        Number of dictionary atoms to extract.
    
    alpha : int,
        Sparsity controlling parameter.
    
    max_iter : int,
        Maximum number of iterations to perform.
    
    tol : float,
        Tolerance for the stopping condition.
    
    method : {'lars', 'cd'}
        lars: uses the least angle regression method to solve the lasso problem
        (linear_model.lars_path)
        cd: uses the coordinate descent method to compute the
        Lasso solution (linear_model.Lasso). Lars will be faster if
        the estimated components are sparse.
    
    n_jobs : int or None, optional (default=None)
        Number of parallel jobs to run.
        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
        for more details.
    
    dict_init : array of shape (n_components, n_features),
        Initial value for the dictionary for warm restart scenarios.
    
    code_init : array of shape (n_samples, n_components),
        Initial value for the sparse code for warm restart scenarios.
    
    callback : callable or None, optional (default: None)
        Callable that gets invoked every five iterations
    
    verbose : bool, optional (default: False)
        To control the verbosity of the procedure.
    
    random_state : int, RandomState instance or None, optional (default=None)
        If int, random_state is the seed used by the random number generator;
        If RandomState instance, random_state is the random number generator;
        If None, the random number generator is the RandomState instance used
        by `np.random`.
    
    return_n_iter : bool
        Whether or not to return the number of iterations.
    
    positive_dict : bool
        Whether to enforce positivity when finding the dictionary.
    
        .. versionadded:: 0.20
    
    positive_code : bool
        Whether to enforce positivity when finding the code.
    
        .. versionadded:: 0.20
    
    method_max_iter : int, optional (default=1000)
        Maximum number of iterations to perform.
    
        .. versionadded:: 0.22
    
    Returns
    -------
    code : array of shape (n_samples, n_components)
        The sparse code factor in the matrix factorization.
    
    dictionary : array of shape (n_components, n_features),
        The dictionary factor in the matrix factorization.
    
    errors : array
        Vector of errors at each iteration.
    
    n_iter : int
        Number of iterations run. Returned only if `return_n_iter` is
        set to True.
    
    See also
    --------
    dict_learning_online
    DictionaryLearning
    MiniBatchDictionaryLearning
    SparsePCA
    MiniBatchSparsePCA