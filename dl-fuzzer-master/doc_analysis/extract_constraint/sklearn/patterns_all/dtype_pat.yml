# result: list of datatypes. should check each item: whether valid dtype word


parse_sent: False
direct_map: False  # need to map group
check_dt: True
break: False   # keep going when pattern matched, don't break
append: True
target: dtype
findall: True
stop_word:
    - and
    - or
    - etc

sep:
    - /
    - '`'
    - \'
    - \"
    - ' '
    - ','
    - '\|'

replace:
    'data\s+type': 'dtype'

pat:
    # must be one of the following types
    'must\s+be\s+one\s+of\s+the\s+following\s+types\s*:(((and|or)*\s*[`''"][\w.]+[`''"]\s*[,\.]*\s*)+)':
        group: 1
    # acceptable types are ...
    'acceptable\s+types\s+are\s+(((and|or)*\s*[`''"][.\w]+[`''"]\s*[,\.]*\s*)+)':
        group: 1

    # Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` 
    'must\s+be\s*(((and|or)*\s*[`''"][.\w\d]+[`''"]\s*[,\.]*\s*)+)':
        group: 1
    
    # must be a/an <>
    'must\s+be\s+(a|an)\s+(positive\s+)?(`*\w+`*)':
        group: 3
        ndim: 0


    # must be <t1>, <t2>, ...
    'must\s*be\s*:*(((and|or)*\s*[`''"][.\w\d]+[`''"]\s*[,\.]*\s*)+)':
        group: 1

    # the first word or "a/an/the python/input/keras/required <word> " not followed by tensor
    '^(\(optional.*\)|either)?\s*(the|\ba\b|an|optional)?\s*(python|input|output|other|keras|tensorflow|required|unique|expected|variable)?\s*(\(.*?\)\s*)?([`''"]*[\w.]+[`''"]*)[\s\.,;-s](?!`*tensor`*)':
        group: 5
        ndim: 0
    # a/an/the <> <> (consider two words)
    '^(\ba\b|\ban\b|the)?\s*(optional)?\s*([`''"]*[\w-]+[`''"]*\s+[`''"]*[\w-]+[`''"]*)(?!\s`*tensor`*)':
        group: 3
        ndim: 0

        
    # followed by "tensor" -> don't update ndim
    '^(\(optional.*\))?\s*(the|\ba\b|an|optional)?\s*(python|input|keras|required|expected)?\s*([`''"]*[\w.]+[`''"]*)[\s\.,;-s]':
        prereq:
            - '^(\(optional.*\))?\s*(the|\ba\b|an|optional)?\s*(python|input|keras|required)?\s*([`''"]*[\w.]+[`''"]*)[\s\.,;-s](?!`*tensor`*)'
        group: 4
    
    # ^ <> or <>
    '^(\ba\b|an|the)?\s*([`''"]*[\w.]+[`''"]*\s+or\s+[`''"]*[\w.]+[`''"]*)':
        group: 2

    '(\ba\b|an)?\s*([`''"]*[\w.]+[`''"]*\/[`''"]*[\w.]+[`''"]*)':
        group: 2

    # one word before tensor
    # OR '<> or <> tensor'
    '(([`''"]*([.\w]+)[`''"]*\s+or\s+)?[`''"]*([.\w]+)[`''"]*)\s+[`''"]*(tensor|tf.tensor)[`''"]*':
        group: 1
        # tensor_t: tensor

    # one word before scalar
    '([`''"]*([.\w]+)[`''"]*)\s+scalar':
        group: 1
        ndim: 0

    # tensor of <> 
    '`*(tf.tensor|tensor|sparsetensor)`*\s+(of|with)\)?\s+(?!type)(?!shape)`*([\w.]+)`*':
        group: 3

    'this\s+must\s+be\s+(\ba\b|an)?\s*`*([\w]+)`*':
        group: 2

    # one word after positive/non-negative
    '(positive|negative)\s+`*([\w.]+)`*':
        group: 2

    # # list|str|None ..
    # '^((\w+\|)+\w+)[\s\.,]':
    #     group: 1
    #     update_structure: True





    # e.g. ... with type `int32` or `int64` containing ...
    # e.g. A list of `Tensor` objects with type `float32`
    # e.g. A Tensor with type `float32` or `float64`.
    # e.g. A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`, `int16`, or `int8`.
    # e.g. Keras tensor with dtype `dtype`.
    # e.g. A tensor of type `int64` and shape `[num_sampled]`.
    # must quoted
    '(of|with|and)\s+(type|dtype|types|dtypes)\s*(((and|or)*\s*[`''"][.\w]+[`''"][,]*\s*)+)': 
        group: 3

    # not qouted, only one word included
    # of/with/and type/dtype <> (or <>)
    '(of|with|and)\s+(type|dtype|types|dtypes)\s+([`''"]*([\w.]+)[`''"]*(\s+or\s+[`''"]*([\w.]+)[`''"]*)?)':
        group: 3
    
    # of/with/and/have/has <> type
    '(of|with|and|have|has)\s+(real\s+)?[`''"]*([\w.]+)[`''"]*\s+(type|dtype|types|dtypes)':
        group: 3

    
    # booleans
    # if/when true
    '(if|when)\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    '(if|when)\s+(this\s+is\s+)?set\s+to\s*`*(true|false)`*':
        dtype: bool
        ndim: 0

    '`*(true|false)`*\s+iff':
        dtype: bool
        ndim: 0

    '[`''"]*(true|false)[`''"]*\s+(if|when|enables|disables)\s+':   # true/false if/when...  OR `true`/`false` if/when...
        dtype: bool


    'determines*\s+whether\s+':
        dtype: bool

    'whether\s+':
        dtype: bool

    


    'a\s+name\s+for':
        dtype: string
        ndim: 0


    '(a|an)\s+optional\s*[`''"]*([\w.]+)[`''"]*':
        group: 2
        ndim: 0
    
    # (with|of|have|has|having|be)\s+
    '(the\s+)?same\s+(((dtype|type)\s+and\s+(shape|rank))|(shape\s+and\s+(type|dtype))|`*(dtype|type)`*)\s+(with|as)\s*`*([\w]+)`*[\s,.]':
        group: 10
        dependent: True

    'same\s+`*(dtype|type)`*\s+as,*\s+and\s+broadcastable\s+to,*\s*`*(\w+)`*':
        group: 2
        dependent: True


    'the\s+strides*\s+of\s+':
        dtype: int
        range: '[0,inf)' 
        

    '([`''"]*sparsetensor[`''"]*\s+or\s+[`''"]*tensor[`''"]*)':
        group: 1

    '([`''"]*tensor[`''"]*\s+or\s+[`''"]*sparsetensor[`''"]*)':
        group: 1

    '\bor\b\s+`*(sparsetensor)`*':
        group: 1


    '`*(dtype|data\s+type)`*\s+of':
        dtype: dtype


    'a\s+python\s+number':
        dtype: int
        ndim: 0

    '(\ba\b|or)\s+single\s`*(\w+)`*':
        group: 2
        ndim: 0

    '^(\ba\b|an|the)?\s*directory\s':
        dtype: string

    '^(the\s+)?index\s+of':
        dtype: int
        ndim: 0

    'as\s+a\s+(constant\s+)?`*(\w+)`*':
        group: 2
        ndim: 0
        

    # # not general
    # 'a\s+`*(tensor)`*\s+whose':
    #     group: 1
        

    # '`*(tensor)`*\s+of\s+(arbitrary|any)\s+(shape|dimension|dimensions)':
    #     group: 1


    # 'initializer\s+function':
    #     dtype: callable


    'a\s+number':
        dtype: int
        ndim: 0


    'single\s+(number|integer)':
        group: 1
        ndim: 0

    'whether':
        dtype: bool

    'if\s+`*(int|float)`*':
        group: 1
        ndim: 0

    'if\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    'default:*\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    'defaults\s+to\s+`(false|true)`':
        dtype: bool
        ndim: 0

    'if\s+set,': #\s+to\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    'if\s+set\s+to\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    'if\s+autograd\s+should\s+record':
        dtype: bool
        ndim: 0
    
    'when\s+(true|false)':
        dtype: bool
        ndim: 0

    'set\s+(it)?\s*to\s+`*true`*':
        dtype: bool
        ndim: 0

    'the\s+output\s+tensor\s+that\s+must\s+be\s+a\s+([\w]+)':
        group: 1


    'quantity\s+of\s+':
        dtype: int
        ndim: 0
        range: 'int:[0,inf)'

    
    
    # 'uses\s+the\s+current\s+device':
    #     dtype: torch.device

    'defaults\s+to\s+the\s+(\w+)\s+of':
        group: 1
        ndim: 0

    'the\s+desired\s+(\w+)\s+of':
        group: 1
        ndim: 0

    'the\s+desired\s+data\s+type\s+of':
        dtype: dtype

    # 'the\s+size\s+of\s+(?!`input)':
    #     dtype: torch.Size

    'the\s+size\s+of\s+returned\s+window':
        dtype: int
        range: '[0,inf)'

    '^(the|a|first|second)?\s*dimension\s+(to|along|over)':
        dtype: int
        ndim: 0


    # 'a\s+python\s+function':
    #     dtype: callable
    
    'number\s+of\s+.*?\.\s+if\s+set\s+to\s+-1':
        dtype: int
        ndim: 0
        range: 'int:[-1,inf)'
    


    '^((the|total)\s+)?number\s+(of|to)':
        prereq: 
            - 'number\s+of\s+.*?\.\s+if\s+set\s+to\s+-1'
        dtype: int
        ndim: 0
        range: '[0,inf)'

    '^the\s+shape\s+of':
        dtype: shape
        ndim: 1
    
    'a\s+file-like\s+object':
        dtype: string

    # 'the\s+tensor\s+type\s+must\s+be\s+([\w.]+)':
    #     group: 1
    #     tensor_t: tensor

    # 'selected\s+device':
    #     dtype: device


    '^([\w]+)\s':
        group: 1
        ndim: 0

    '^the\s+optional\s+(\w+\s+\w+)':
        group: 1


    # not useful, only two API, all have doc_dtype
    # '^(a|the)\s+(first)?\s*sparse\s+maxtrix':
    #     dtype: sparsetensor

    'parameter\s+name':
        dtype: string
        ndim: 0



    '^(source|destination)\s+(tensor)*\s*rank':
        dtype: int
        ndim: 0
        # range: '[0,inf)'

    '^(a|an)\s+(\w+)':
        group: 2
        ndim: 0
    
    '^the\s+(\w+)\s+(?!of)':
        group: 1

    '^(\w+)\s':
        group: 1

    'can\s+be\s+a\s+(((?<!\ba\b|\.).)*)':
        group: 1
        update_structure: True

    'a\s+(.*?),\s+or\s+`*[\w.]+`*':
        group: 1
        update_structure: True
    

    'of\s+type\s+([\w.]+)':
        group: 1

    'must\s+be\s+(a|an)\s+(\w+)':
        group: 2
        ndim: 0

    # 'only\s+floating\s+point\s+types\s+are\s+supported':
    #     dtype: float



    'a\s+manual\s+rescaling\s+weight':
        dtype: numeric


    '^if\s+`*(true|false)`*':
        dtype: bool
        ndim: 0
    
    '^(true|false)\s+(if|for)':
        dtype: bool
        ndim: 0

    '^(indicates\s+)whether':
        dtype: bool
        ndim: 0

    '^whether\s+to\s+':
        dtype: bool
        ndim: 0


    'if\s+(this\s+is\s+)?set\s+to\s+`*(true|false)`*':
        dtype: bool
        ndim: 0

    '^if\s+set,':
        dtype: bool
        ndim: 0

    '^turn\s+off':
        dtype: bool
        ndim: 0

    # 'an\s+optional\s+device\s+context':
    #     dtype: context
        
    # '^(device\s+)?context':
    #     dtype: context
 
    '^the\s+`*(\w+)`*':
        group: 1

    # the first word
    '^(\w+)':
        group: 1

    '\(deprecated!':
        dtype: deprecated

    '^(input|output|the)\s+data\s+type':
        dtype: numpy.dtype

        
    '^data\s+type\s+of':
        dtype: dtype
        ndim: 0

    '^dtype\s+of':
        dtype: dtype
        ndim: 0

    '^failure\s+probabilities':
        dtype: float
        range: '[0,1]'

    'if\s+(\w+)\s+is\s+(a|an)\s+(\w+)[,\s.]':
        group: 3
        check_arg: 1
        ndim: 0

    '(learning|drop)\s+rate':
        dtype: float
        range: '[0,1]'
        ndim: 0

    'location\s+for':
        dtype: string

    'in\s+the\s+form\s+of\s+(\w+)':
        group: 1

    'the\s+(minimum|maximum)\s+scalar\s+value\s+possibly\s+produced\s+for\s+the\s+input\s+in\s+(\w+)':
        group: 2
        ndim: 0

    'the\s+(minimum|maximum)\s+scalar\s+value\s+possibly\s+':
        dtype: numeric
        ndim: 0
        prereq:
            - 'the\s+(minimum|maximum)\s+scalar\s+value\s+possibly\s+produced\s+for\s+the\s+input\s+in\s+(\w+)'

    '^(a|an)\s+(optional\s+)?([\w.]+)':
        group: 3
        ndim: 0

    '^an\s+optional\s+value\s+type':
        dtype: numpy.dtype
        ndim: 0

    '^a\s+.*?\s+of\s+type\s+(\w+)':
        group: 1


    '^(the\s+)?((minimum|maximum|total|epoch)\s+)?number\s+of':
        dtype: int
        range: '[0,inf)'
        ndim: 0   
        
    # '^alpha.*?\(shape\)':
    #     dtype: shape

    '^(the\s+)?(target|input|output)?\s*(shape)':
        group: 3


    '^lengths\s+of\s+':
        dtype: int
        range: '[0,inf)'
        ndim: 1

    '^the\s+length\s+of':
        dtype: int
        range: '[0,inf)'
        ndim: 0

    '^(the\s+)?decay\s+rate':
        dtype: float
        range: '[0,1]'
        ndim: 0

    '^(the\s+)?dimension':
        dtype: int

    '^(the\s+)?(minimum|maximum)?\s*scalar':
        dtype: scalar

    '^(the\s+)?path\s':
        dtype: string

    'the\s+(beginning|ending)\s+index':
        dtype: int
        ndim: 0



    '^offset':
        dtype: int
        ndim: 0


    'type\s+for':
        dtype: dtype
        ndim: 0

    'device\s+id':
        dtype: int
        ndim: 0
        range: '[0,inf)'


    'directory\s+path':
        dtype: string
        ndim: 0


    '\bid\b\s+of':
        dtype: int
        range: '[0,inf)'
        ndim: 0

    '^(the\s+)?(optional,|start)?\s*index\s+of':
        dtype: int
        # range: '[0,inf)'
        ndim: 0

    '^(binary|input)\s+(source\s+)?image':
        dtype: image

    '(model|file)\s+name':
        dtype: string
        ndim: 0

    '(augmenter|data|label|the)\s+names':
        dtype: string
        ndim: 1



    




    
    

    
    

    
    
