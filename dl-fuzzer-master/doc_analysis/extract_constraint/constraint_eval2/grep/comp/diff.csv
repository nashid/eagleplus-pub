File,Arg,Type,Constr_src,Constr_cmp,Descp
mxnet.ndarray.image.normalize,mean,nonprim_dtype,['tuple(float)'],"['sequence', 'tuple']",Sequence of means for each channel. Default value is 0.
mxnet.ndarray.image.normalize,std,nonprim_dtype,['tuple(float)'],"['sequence', 'tuple']",Sequence of standard deviations for each channel. Default value is 1.
mxnet.ndarray.random_uniform,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.contrib.dequantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float32']",Output data type.
mxnet.ndarray.op.SequenceReverse,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.ndarray.BatchNorm,moving_var,prim_dtype,['numeric'],['float'],running variance of input
mxnet.ndarray.stack,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to stack
mxnet.ndarray.op.mp_lamb_update_phase1,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.random_exponential,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.random_gamma,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.profiler.dumps,format,prim_dtype,"['boolean', 'string']",['string'],whether to return the aggregate stats in table of json format can take 'table' or 'json' defaults to 'table'
mxnet.ndarray.op.SequenceMask,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.image.resize_short,interp,prim_dtype,['int'],"['int', 'numeric']","Interpolation method used for resizing the image. Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html."
mxnet.ndarray.multi_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.op.sample_normal,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.op.sample_normal,sigma,prim_dtype,['numeric'],['float'],Standard deviations of the distributions.
mxnet.ndarray.sample_poisson,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.op.amp_multicast,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.contrib.quantize_v2,max_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int8', 'numpy.uint8']","The maximum scalar value in the form of float32. If present, it will be used to quantize the fp32 data into int8 or uint8."
mxnet.ndarray.contrib.quantize_v2,min_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int8', 'numpy.uint8']","The minimum scalar value in the form of float32. If present, it will be used to quantize the fp32 data into int8 or uint8."
mxnet.ndarray.contrib.quantize_v2,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type. auto can be specified to automatically determine output type according to min_calib_range.
mxnet.ndarray.arange,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",The data type of the NDArray. The default datatype is np.float32.
mxnet.ndarray.arange,step,prim_dtype,"['float', 'int']",['float'],Spacing between values. The default step size is 1.
mxnet.metric.np,numpy_feval,prim_dtype,['int'],"['float', 'int']",Custom evaluation function that receives labels and predictions for a minibatch as numpy arrays and returns the corresponding custom metric as a floating point number.
mxnet.metric.np,numpy_feval,nonprim_dtype,['tuple'],['ndarray'],Custom evaluation function that receives labels and predictions for a minibatch as numpy arrays and returns the corresponding custom metric as a floating point number.
mxnet.ndarray.Custom,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Input data for the custom operator.
mxnet.ndarray.op.ROIPooling,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"ROI pooling output shape (h,w)"
mxnet.ndarray.op.ROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.ndarray.preloaded_multi_mp_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, momentums, learning rates and weight decays"
mxnet.ndarray.GridGenerator,target_shape,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"Specifies the output shape (H, W). This is required if transformation type is affine. If transformation type is warp, this parameter is ignored."
mxnet.ndarray.image.resize,keep_ratio,prim_dtype,['boolean'],"['boolean', 'int']","Whether to resize the short edge or both edges to size, if size is give as an integer."
mxnet.ndarray.image.resize,size,prim_dtype,['int'],"['int', 'numeric']","Size of new image. Could be (width, height) or (size)"
mxnet.ndarray.image.resize,size,nonprim_dtype,"['tuple(int)', 'tuple(int):(&size)', 'tuple(int):(width,height)']",['tuple'],"Size of new image. Could be (width, height) or (size)"
mxnet.gluon.contrib.rnn.Conv3DLSTMCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCDHW' the shape should be (C, D, H, W)."
mxnet.contrib.ndarray.requantize,max_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int32', 'numpy.int8']","The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8."
mxnet.contrib.ndarray.requantize,max_range,prim_dtype,['numpy.float32'],"['numpy.float32', 'numpy.int32']",The original maximum scalar value in the form of float32 used for quantizing data into int32.
mxnet.contrib.ndarray.requantize,min_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int32', 'numpy.int8']","The minimum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8."
mxnet.contrib.ndarray.requantize,min_range,prim_dtype,['numpy.float32'],"['numpy.float32', 'numpy.int32']",The original minimum scalar value in the form of float32 used for quantizing data into int32.
mxnet.contrib.ndarray.requantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type. auto can be specified to automatically determine output type according to min_calib_range.
mxnet.gluon.nn.Conv1DTranspose,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Controls the spacing between the kernel points; also known as the a trous algorithm
mxnet.gluon.nn.Conv1DTranspose,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv1DTranspose,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCW' layout for now. 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Convolution is applied on the 'W' dimension."
mxnet.gluon.nn.Conv1DTranspose,output_padding,nonprim_dtype,['list'],"['list', 'tuple']",Controls the amount of implicit zero-paddings on both sides of the output for output_padding number of points for each dimension.
mxnet.gluon.nn.Conv1DTranspose,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv1DTranspose,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.ndarray.empty,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32).
mxnet.ndarray.SequenceLast,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.ndarray.sparse.add,lhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],First array to be added.
mxnet.ndarray.sparse.add,rhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],"Second array to be added. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape."
mxnet.ndarray.sample_exponential,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.gluon.contrib.rnn.Conv3DRNNCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCDHW' the shape should be (C, D, H, W)."
mxnet.ndarray.reset_arrays,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.ndarray.adam_update,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.test_utils.check_symbolic_backward,grad_stypes,prim_dtype,"['numpy.dtype', 'string']",['string'],dictionary of mapping argument name to stype for the gradient
mxnet.visualization.print_summary,shape,prim_dtype,['int'],"['int', 'string']","A dict of shapes, str->shape (tuple), given input shapes."
mxnet.visualization.print_summary,shape,nonprim_dtype,['dict'],"['dict', 'tuple']","A dict of shapes, str->shape (tuple), given input shapes."
mxnet.ndarray.op.Custom,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Input data for the custom operator.
mxnet.io.LibSVMIter,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type. `None` means no change.
mxnet.ndarray.multi_sum_sq,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.image.center_crop,size,prim_dtype,['int'],"['int', 'numeric']",The desired output image size.
mxnet.io.ImageDetRecordIter,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type. `None` means no change.
mxnet.io.ImageDetRecordIter,label_width,prim_dtype,['int'],"['int', 'numeric']","Dataset Param: How many labels for an image, -1 for variable label size."
mxnet.io.ImageDetRecordIter,mean_img,prim_dtype,['string'],"['numeric', 'string']",Augmentation Param: Mean Image to be subtracted.
mxnet.io.ImageDetRecordIter,path_imglist,prim_dtype,['string'],"['numeric', 'string']",Dataset Param: Path to image list.
mxnet.io.ImageDetRecordIter,path_imgrec,prim_dtype,['string'],"['numeric', 'string']",Dataset Param: Path to image record file.
mxnet.ndarray.op.multi_mp_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.contrib.ndarray.hawkesll,max_time,prim_dtype,['int'],['numeric'],the length of the interval where the processes were sampled
mxnet.ndarray.sparse.adam_update,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.op.cast,dtype,prim_dtype,['numpy.dtype'],"['boolean', 'numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.ndarray.op.sample_gamma,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.random_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.softmax,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.ndarray.contrib.requantize,max_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int32', 'numpy.int8']","The maximum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8."
mxnet.ndarray.contrib.requantize,max_range,prim_dtype,['numpy.float32'],"['numpy.float32', 'numpy.int32']",The original maximum scalar value in the form of float32 used for quantizing data into int32.
mxnet.ndarray.contrib.requantize,min_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int32', 'numpy.int8']","The minimum scalar value in the form of float32 obtained through calibration. If present, it will be used to requantize the int32 data into int8."
mxnet.ndarray.contrib.requantize,min_range,prim_dtype,['numpy.float32'],"['numpy.float32', 'numpy.int32']",The original minimum scalar value in the form of float32 used for quantizing data into int32.
mxnet.ndarray.contrib.requantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type. auto can be specified to automatically determine output type according to min_calib_range.
mxnet.contrib.ndarray.dequantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float32']",Output data type.
mxnet.gluon.rnn.LSTM,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Type to initialize the parameters and default states to
mxnet.ndarray.random_normal,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.recordio.pack,s,prim_dtype,['string'],"['numeric', 'string']",Raw image string to be packed.
mxnet.gluon.contrib.rnn.Conv2DRNNCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W)."
mxnet.ndarray.random.normal,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.cast,dtype,prim_dtype,['numpy.dtype'],"['boolean', 'numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.ndarray.op.Embedding,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Data type of weight.
mxnet.ndarray.op.moments,axes,prim_dtype,['int'],"['float', 'int']",Array of ints. Axes along which to compute mean and variance.
mxnet.contrib.ndarray.quantized_concat,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to concatenate
mxnet.ndarray.op.preloaded_multi_mp_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, momentums, learning rates and weight decays"
mxnet.gluon.nn.Conv2D,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dilation rate to use for dilated convolution.
mxnet.gluon.nn.Conv2D,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv2D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions."
mxnet.gluon.nn.Conv2D,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv2D,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.ndarray.random.randn,*shape,nonprim_dtype,"['sequence', 'tuple(int)']",['tuple'],"The number of samples to draw. If shape is, e.g., (m, n) and loc and scale are scalars, output shape will be (m, n). If loc and scale are NDArrays with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each [loc, scale) pair."
mxnet.ndarray.random.randn,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.preloaded_multi_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, learning rates and weight decays"
mxnet.profiler.dump,profile_process,prim_dtype,"['boolean', 'string']",['string'],"whether to profile kvstore server or worker. server can only be profiled when kvstore is of type dist. if this is not passed, defaults to worker"
mxnet.ndarray.one_hot,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",DType of the output
mxnet.ndarray.contrib.while_loop,loop_vars,nonprim_dtype,['ndarray'],"['list', 'ndarray']",The initial values of the loop variables.
mxnet.ndarray.argsort,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.uint8']","DType of the output indices. It is only valid when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices."
mxnet.image.CreateAugmenter,inter_method,prim_dtype,['int'],"['int', 'numeric']","Interpolation method for all resizing operations Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). "
mxnet.image.CreateAugmenter,rand_mirror,prim_dtype,['boolean'],"['boolean', 'numeric']",Whether to apply horizontal flip to image with probability 0.5
mxnet.image.CreateAugmenter,std,prim_dtype,['numeric'],['float'],"Standard deviations for [r, g, b]"
mxnet.contrib.quantization.quantize_model,arg_params,nonprim_dtype,"['dict', 'dict(dict:string)']","['dict', 'ndarray']",Dictionary of name to NDArray.
mxnet.contrib.quantization.quantize_model,aux_params,nonprim_dtype,"['dict', 'dict(dict:string)']","['dict', 'ndarray']",Dictionary of name to NDArray.
mxnet.contrib.quantization.quantize_model,calib_mode,prim_dtype,['string'],"['numpy.float32', 'string']","If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset."
mxnet.contrib.quantization.quantize_model,quantized_dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.int8', 'numpy.uint8', 'string']","The quantized destination type for input data. Currently support 'int8', 'uint8' and 'auto'. 'auto' means automatically select output type according to calibration result. Default value is 'int8'."
mxnet.contrib.quantization.quantize_model,sym,prim_dtype,['string'],"['numpy.float32', 'string']",Defines the structure of a neural network for FP32 data types.
mxnet.ndarray.sample_gamma,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.image.imread,filename,prim_dtype,['string'],"['numeric', 'string']",Name of the image file to be loaded.
mxnet.ndarray.softmin,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.gluon.contrib.nn.SparseEmbedding,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Data type of output embeddings.
mxnet.ndarray.multi_mp_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.op.sample_poisson,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.sample_generalized_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.op.BatchNorm,moving_var,prim_dtype,['numeric'],['float'],running variance of input
mxnet.contrib.quantization.quantize_net,calib_mode,prim_dtype,['string'],"['numpy.float32', 'string']","If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset."
mxnet.contrib.quantization.quantize_net,quantized_dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.int8', 'numpy.uint8', 'string']","The quantized destination type for input data. Currently support 'int8' , 'uint8' and 'auto'. 'auto' means automatically select output type according to calibration result. Default value is 'int8'."
mxnet.ndarray.op.multi_sum_sq,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.io.MNISTIter,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type. `None` means no change.
mxnet.io.MNISTIter,image,prim_dtype,['string'],"['numeric', 'string']",Dataset Param: Mnist image path.
mxnet.image.copyMakeBorder,value,prim_dtype,"['deprecated', 'numpy.double']",['numpy.double'],(Deprecated! Use `values` instead.) Fill with single value.
mxnet.contrib.onnx.export_model,input_shape,nonprim_dtype,['list(tuple)'],"['list', 'tuple']","Input shape of the model e.g [(1,3,224,224)]"
mxnet.contrib.onnx.export_model,input_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float32']",Input data type e.g. np.float32
mxnet.ndarray.random_generalized_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.op.random_uniform,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.gluon.nn.Conv2DTranspose,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Controls the spacing between the kernel points; also known as the a trous algorithm
mxnet.gluon.nn.Conv2DTranspose,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv2DTranspose,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCHW' and 'NHWC' layout for now. 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. Convolution is applied on the 'H' and 'W' dimensions."
mxnet.gluon.nn.Conv2DTranspose,output_padding,nonprim_dtype,['list'],"['list', 'tuple']",Controls the amount of implicit zero-paddings on both sides of the output for output_padding number of points for each dimension.
mxnet.gluon.nn.Conv2DTranspose,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv2DTranspose,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.contrib.ndarray.SyncBatchNorm,moving_var,prim_dtype,['numeric'],['float'],running variance of input
mxnet.ndarray.linspace,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",The data type of the NDArray. The default datatype is np.float32.
mxnet.image.color_normalize,std,prim_dtype,['numeric'],['float'],RGB standard deviation to be divided
mxnet.ndarray.contrib.hawkesll,max_time,prim_dtype,['int'],['numeric'],the length of the interval where the processes were sampled
mxnet.ndarray.op.random_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.sparse.Embedding,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Data type of weight.
mxnet.ndarray.random.multinomial,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.int32', 'string']",Data type of the sample output array. The default is int32. Note that the data type of the log likelihood array is the same with that of data.
mxnet.ndarray.op.preloaded_multi_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, learning rates and weight decays"
mxnet.ndarray.array,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']","The data type of the output array. The default dtype is `source_array.dtype` if source_array is an NDArray, float32 otherwise."
mxnet.ndarray.array,source_array,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']","An object exposing the array interface, an object whose __array__ method returns an array, or any (nested) sequence."
mxnet.ndarray.SequenceMask,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.ndarray.op.sample_multinomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.uint8']",DType of the output in case this can't be inferred.
mxnet.ndarray.op.sample_multinomial,get_prob,prim_dtype,"['boolean', 'float']",['boolean'],"Whether to also return the log probability of sampled result. This is usually used for differentiating through stochastic variables, e.g. in reinforcement learning."
mxnet.ndarray.op.random_gamma,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.topk,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.uint8']","DType of the output indices when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices."
mxnet.ndarray.op.multi_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients and momentum"
mxnet.ndarray.random.negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.lamb_update_phase1,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.op.log_softmax,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.ndarray.contrib.SparseEmbedding,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Data type of weight.
mxnet.ndarray.op.multi_all_finite,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.gluon.contrib.rnn.Conv1DGRUCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCW' the shape should be (C, W)."
mxnet.ndarray.op.reshape,keep_highest,prim_dtype,"['boolean', 'deprecated']",['boolean'],"(Deprecated! Use `shape` instead.) Whether keep the highest dim unchanged.If set to true, then the first dim in target_shape is ignored,and always fixed as input"
mxnet.ndarray.op.reshape,target_shape,prim_dtype,"['deprecated', 'int']",['int'],"(Deprecated! Use `shape` instead.) Target new shape. One and only one dim can be 0, in which case it will be inferred from the rest of dims"
mxnet.gluon.nn.Conv3DTranspose,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Controls the spacing between the kernel points; also known as the a trous algorithm.
mxnet.gluon.nn.Conv3DTranspose,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv3DTranspose,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCDHW' and 'NDHWC' layout for now. 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. Convolution is applied on the 'D', 'H' and 'W' dimensions."
mxnet.gluon.nn.Conv3DTranspose,output_padding,nonprim_dtype,['list'],"['list', 'tuple']",Controls the amount of implicit zero-paddings on both sides of the output for output_padding number of points for each dimension.
mxnet.gluon.nn.Conv3DTranspose,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv3DTranspose,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.ndarray.histogram,bins,prim_dtype,"['int', 'scalar']",['int'],"If bins is an int, it defines the number of equal-width bins in the given range (10, by default). If bins is a sequence, it defines the bin edges, including the rightmost edge, allowing for non-uniform bin widths."
mxnet.ndarray.sparse.multiply,lhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],First array to be multiplied.
mxnet.ndarray.sparse.multiply,rhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],"Second array to be multiplied. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape."
mxnet.ndarray.contrib.SyncBatchNorm,moving_var,prim_dtype,['numeric'],['float'],running variance of input
mxnet.ndarray.random.randint,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int32', 'numpy.int64']",Data type of output samples. Default is 'int32'
mxnet.gluon.nn.Conv3D,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dilation rate to use for dilated convolution.
mxnet.gluon.nn.Conv3D,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv3D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCDHW' and 'NDHWC' layout for now. 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. Convolution is applied on the 'D', 'H' and 'W' dimensions."
mxnet.gluon.nn.Conv3D,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv3D,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.ndarray.op.reset_arrays,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.contrib.quantization.calib_graph,quantized_dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.int8', 'numpy.uint8', 'string']","The quantized destination type for input data. Currently support 'int8' , 'uint8' and 'auto'. 'auto' means automatically select output type according to calibration result. Default value is 'int8'."
mxnet.gluon.nn.Conv1D,dilation,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dilation rate to use for dilated convolution.
mxnet.gluon.nn.Conv1D,kernel_size,nonprim_dtype,['list'],"['list', 'tuple']",Specifies the dimensions of the convolution window.
mxnet.gluon.nn.Conv1D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and weight. Only supports 'NCW' layout for now. 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Convolution is applied on the 'W' dimension."
mxnet.gluon.nn.Conv1D,padding,nonprim_dtype,['list'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points"
mxnet.gluon.nn.Conv1D,strides,nonprim_dtype,['list'],"['list', 'tuple']",Specify the strides of the convolution.
mxnet.ndarray.mp_lamb_update_phase1,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.op.SequenceLast,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.ndarray.op.amp_cast,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.gluon.contrib.nn.SyncBatchNorm,running_variance_initializer,prim_dtype,['string'],"['float', 'string']",Initializer for the running variance.
mxnet.ndarray.Embedding,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Data type of weight.
mxnet.ndarray.zeros,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32)
mxnet.ndarray.Pooling,count_include_pad,prim_dtype,['boolean'],"['boolean', 'numeric']","Only used for AvgPool, specify whether to count padding elements for averagecalculation. For example, with a 5*5 kernel on a 3*3 corner of a image,the sum of the 9 valid elements will be divided by 25 if this is set to true,or it will be divided by 9 if this is set to false. Defaults to true."
mxnet.ndarray.random.poisson,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.random.poisson,shape,nonprim_dtype,['tuple(int)'],"['ndarray', 'tuple']","The number of samples to draw. If shape is, e.g., (m, n) and lam is a scalar, output shape will be (m, n). If lam is an NDArray with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each entry in lam."
mxnet.contrib.ndarray.quantize_v2,max_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int8', 'numpy.uint8']","The maximum scalar value in the form of float32. If present, it will be used to quantize the fp32 data into int8 or uint8."
mxnet.contrib.ndarray.quantize_v2,min_calib_range,prim_dtype,"['float', 'numpy.float32']","['float', 'numpy.float32', 'numpy.int8', 'numpy.uint8']","The minimum scalar value in the form of float32. If present, it will be used to quantize the fp32 data into int8 or uint8."
mxnet.contrib.ndarray.quantize_v2,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type. auto can be specified to automatically determine output type according to min_calib_range.
mxnet.ndarray.ROIPooling,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"ROI pooling output shape (h,w)"
mxnet.ndarray.ROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.ndarray.op.topk,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.uint8']","DType of the output indices when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices."
mxnet.profiler.set_config,profile_process,prim_dtype,"['boolean', 'string']",['string'],"whether to profile kvstore server or worker. server can only be profiled when kvstore is of type dist. if this is not passed, defaults to worker"
mxnet.ndarray.preloaded_multi_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, momentum, learning rates and weight decays"
mxnet.gluon.nn.MaxPool3D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension."
mxnet.gluon.nn.MaxPool3D,padding,nonprim_dtype,['tuple'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points."
mxnet.gluon.nn.MaxPool3D,pool_size,nonprim_dtype,['tuple'],"['list', 'tuple']",Size of the max pooling windows.
mxnet.gluon.nn.MaxPool3D,strides,nonprim_dtype,['tuple'],"['list', 'tuple']","Factor by which to downscale. E.g. 2 will halve the input size. If None, it will default to pool_size."
mxnet.ndarray.op.random_randint,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int32', 'numpy.int64']",DType of the output in case this can't be inferred. Defaults to int32 if not defined (dtype=None).
mxnet.ndarray.utils.array,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']","The data type of the output array. The default dtype is `source_array.dtype` if source_array is an NDArray, float32 otherwise."
mxnet.ndarray.utils.array,source_array,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']","An object exposing the array interface, an object whose __array__ method returns an array, or any (nested) sequence."
mxnet.ndarray.op.random_normal,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.contrib.RROIAlign,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"RROI align output shape (h,w)"
mxnet.ndarray.contrib.RROIAlign,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or width) to raw image height (or width). Equals the reciprocal of total stride in convolutional layers
mxnet.ndarray.op.sample_uniform,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.concat,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to concatenate
mxnet.ndarray.multi_all_finite,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Arrays
mxnet.ndarray.RNN,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",Vector of valid sequence lengths for each element in batch. (Only used if use_sequence_length kwarg is True)
mxnet.ndarray.contrib.quantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.ndarray.log_softmax,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.image.CreateDetAugmenter,area_range,prim_dtype,['float'],"['float', 'numeric']",The cropped area of the image must contain a fraction of the supplied image within in this range.
mxnet.image.CreateDetAugmenter,aspect_ratio_range,prim_dtype,['float'],"['float', 'numeric']",The cropped area of the image must have an aspect ratio = width / height within this range.
mxnet.image.CreateDetAugmenter,inter_method,prim_dtype,['int'],"['int', 'numeric']","Interpolation method for all resizing operations Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 3: Bicubic interpolation over 4x4 pixel neighborhood. 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). "
mxnet.image.CreateDetAugmenter,max_attempts,prim_dtype,['int'],"['int', 'numeric']","Number of attempts at generating a cropped/padded region of the image of the specified constraints. After max_attempts failures, return the original image."
mxnet.image.CreateDetAugmenter,min_object_covered,prim_dtype,['float'],"['float', 'numeric']","The cropped area of the image must contain at least this fraction of any bounding box supplied. The value of this parameter should be non-negative. In the case of 0, the cropped area does not need to overlap any of the bounding boxes supplied."
mxnet.image.CreateDetAugmenter,rand_mirror,prim_dtype,['boolean'],"['boolean', 'numeric']",Whether to apply horizontal flip to image with probability 0.5
mxnet.image.CreateDetAugmenter,std,prim_dtype,['numeric'],['float'],"Standard deviations for [r, g, b]"
mxnet.contrib.ndarray.RROIAlign,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"RROI align output shape (h,w)"
mxnet.contrib.ndarray.RROIAlign,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or width) to raw image height (or width). Equals the reciprocal of total stride in convolutional layers
mxnet.contrib.ndarray.SparseEmbedding,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Data type of weight.
mxnet.gluon.nn.GlobalAvgPool1D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. padding is applied on 'W' dimension."
mxnet.gluon.nn.AvgPool2D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension."
mxnet.gluon.nn.AvgPool2D,padding,nonprim_dtype,['tuple'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points."
mxnet.gluon.nn.AvgPool2D,pool_size,nonprim_dtype,['tuple'],"['list', 'tuple']",Size of the average pooling windows.
mxnet.gluon.nn.AvgPool2D,strides,nonprim_dtype,['tuple'],"['list', 'tuple']","Factor by which to downscale. E.g. 2 will halve the input size. If None, it will default to pool_size."
mxnet.ndarray.UpSampling,*data,nonprim_dtype,"['ndarray', 'ndarray(tensor)', 'sequence']",['ndarray'],"Array of tensors to upsample. For bilinear upsampling, there should be 2 inputs - 1 data and 1 weight."
mxnet.ndarray.op.norm,out_dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8']",The data type of the output.
mxnet.gluon.contrib.rnn.Conv3DGRUCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCDHW' the shape should be (C, D, H, W)."
mxnet.gluon.nn.GlobalAvgPool3D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension."
mxnet.ndarray.norm,out_dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8']",The data type of the output.
mxnet.ndarray.multi_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients and momentum"
mxnet.ndarray.op.random_poisson,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.moments,axes,prim_dtype,['int'],"['float', 'int']",Array of ints. Axes along which to compute mean and variance.
mxnet.gluon.nn.GlobalMaxPool2D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension."
mxnet.gluon.nn.MaxPool1D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Pooling is applied on the W dimension."
mxnet.ndarray.eye,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32)
mxnet.ndarray.op.sample_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.amp_multicast,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.sample_normal,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.sample_normal,sigma,prim_dtype,['numeric'],['float'],Standard deviations of the distributions.
mxnet.ndarray.sample_multinomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.uint8']",DType of the output in case this can't be inferred.
mxnet.ndarray.sample_multinomial,get_prob,prim_dtype,"['boolean', 'float']",['boolean'],"Whether to also return the log probability of sampled result. This is usually used for differentiating through stochastic variables, e.g. in reinforcement learning."
mxnet.gluon.contrib.rnn.Conv2DGRUCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W)."
mxnet.contrib.ndarray.DeformablePSROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.ndarray.op.lamb_update_phase1,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.op.random_generalized_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.op.random_pdf_normal,sigma,prim_dtype,['numeric'],['float'],Standard deviations of the distributions.
mxnet.ndarray.contrib.DeformablePSROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.contrib.ndarray.ROIAlign,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"ROI Align output roi feature map height and width: (h, w)"
mxnet.contrib.ndarray.ROIAlign,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.gluon.nn.BatchNorm,running_variance_initializer,prim_dtype,['string'],"['float', 'string']",Initializer for the running variance.
mxnet.ndarray.random_pdf_normal,sigma,prim_dtype,['numeric'],['float'],Standard deviations of the distributions.
mxnet.test_utils.chi_square_check,buckets,nonprim_dtype,"['list(int)', 'list(tuple)']","['list', 'tuple']","The buckets to run the chi-square the test. Make sure that the buckets cover the whole range of the distribution. Also, the buckets must be in ascending order and have no intersection"
mxnet.ndarray.op.GridGenerator,target_shape,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"Specifies the output shape (H, W). This is required if transformation type is affine. If transformation type is warp, this parameter is ignored."
mxnet.ndarray.utils.zeros,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32)
mxnet.ndarray.op.multi_mp_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.io.ImageRecordIter,brightness,prim_dtype,['float'],"['float', 'numeric']","Add a random value in `[-brightness, brightness]` to the brightness of image."
mxnet.io.ImageRecordIter,contrast,prim_dtype,['float'],"['float', 'numeric']","Add a random value in `[-contrast, contrast]` to the contrast of image."
mxnet.io.ImageRecordIter,data_shape,prim_dtype,['int'],"['int', 'numeric']","The shape of one output image in (channels, height, width) format."
mxnet.io.ImageRecordIter,data_shape,nonprim_dtype,"['tuple(int)', 'tuple:(channels,height,width)']",['tuple'],"The shape of one output image in (channels, height, width) format."
mxnet.io.ImageRecordIter,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type. `None` means no change.
mxnet.io.ImageRecordIter,label_width,prim_dtype,['int'],"['int', 'numeric']",The number of labels per image.
mxnet.io.ImageRecordIter,mean_img,prim_dtype,['string'],"['numeric', 'string']",Filename of the mean image.
mxnet.io.ImageRecordIter,mirror,prim_dtype,['boolean'],"['boolean', 'numeric']","Whether to mirror the image or not. If true, images are flipped along the horizontal axis."
mxnet.io.ImageRecordIter,path_imgidx,prim_dtype,['string'],"['numeric', 'string']",Path to the image RecordIO index (.idx) file. Created with tools/im2rec.py.
mxnet.io.ImageRecordIter,path_imglist,prim_dtype,['string'],"['numeric', 'string']",Path to the image list (.lst) file. Generally created with tools/im2rec.py. Format (Tab separated): <index of record>       <one or more labels>    <relative path from root folder>.
mxnet.io.ImageRecordIter,path_imgrec,prim_dtype,['string'],"['numeric', 'string']",Path to the image RecordIO (.rec) file or a directory path. Created with tools/im2rec.py.
mxnet.io.ImageRecordIter,pca_noise,prim_dtype,['float'],"['float', 'numeric']",Add PCA based noise to the image.
mxnet.io.ImageRecordIter,rand_crop,prim_dtype,['boolean'],"['boolean', 'numeric']",If or not randomly crop the image
mxnet.io.ImageRecordIter,rand_mirror,prim_dtype,['boolean'],"['boolean', 'numeric']","Whether to randomly mirror images or not. If true, 50% of the images will be randomly mirrored (flipped along the horizontal axis)"
mxnet.io.ImageRecordIter,random_resized_crop,prim_dtype,['boolean'],"['boolean', 'numeric']","If or not perform random resized cropping on the image, as a standard preprocessing for resnet training on ImageNet data."
mxnet.io.ImageRecordIter,saturation,prim_dtype,['float'],"['float', 'numeric']","Add a random value in `[-saturation, saturation]` to the saturation of image."
mxnet.io.ImageRecordIter,scale,prim_dtype,['float'],"['float', 'numeric']",Multiply the image with a scale value.
mxnet.contrib.ndarray.PSROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.profiler.set_state,profile_process,prim_dtype,"['boolean', 'string']",['string'],"whether to profile kvstore server or worker. server can only be profiled when kvstore is of type dist. if this is not passed, defaults to worker"
mxnet.profiler.set_state,state,prim_dtype,"['boolean', 'string']",['string'],"Indicates whether to run the profiler, can be 'stop' or 'run'. Default is stop."
mxnet.profiler.pause,profile_process,prim_dtype,"['boolean', 'string']",['string'],"whether to profile kvstore server or worker. server can only be profiled when kvstore is of type dist. if this is not passed, defaults to worker"
mxnet.ndarray.sparse.concat,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to concatenate
mxnet.ndarray.op.softmax,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.image.CreateMultiRandCropAugmenter,area_range,prim_dtype,['float'],"['float', 'numeric']",The cropped area of the image must contain a fraction of the supplied image within in this range.
mxnet.image.CreateMultiRandCropAugmenter,aspect_ratio_range,prim_dtype,['float'],"['float', 'numeric']",The cropped area of the image must have an aspect ratio = width / height within this range.
mxnet.image.CreateMultiRandCropAugmenter,max_attempts,prim_dtype,['int'],"['int', 'numeric']","Number of attempts at generating a cropped/padded region of the image of the specified constraints. After max_attempts failures, return the original image."
mxnet.image.CreateMultiRandCropAugmenter,min_object_covered,prim_dtype,['float'],"['float', 'numeric']","The cropped area of the image must contain at least this fraction of any bounding box supplied. The value of this parameter should be non-negative. In the case of 0, the cropped area does not need to overlap any of the bounding boxes supplied."
mxnet.ndarray.op.concat,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to concatenate
mxnet.profiler.resume,profile_process,prim_dtype,"['boolean', 'string']",['string'],"whether to profile kvstore server or worker. server can only be profiled when kvstore is of type dist. if this is not passed, defaults to worker"
mxnet.ndarray.ones,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32).
mxnet.ndarray.random.generalized_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.multi_mp_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.op.sample_generalized_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.random.uniform,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.op.preloaded_multi_mp_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, learning rates and weight decays"
mxnet.test_utils.verify_generator,buckets,nonprim_dtype,"['list(int)', 'list(tuple)']","['list', 'tuple']","The buckets to run the chi-square the test. Make sure that the buckets coverthe whole range of the distribution. Also, the buckets must be in ascending order and have no intersection   "
mxnet.ndarray.op.RNN,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",Vector of valid sequence lengths for each element in batch. (Only used if use_sequence_length kwarg is True)
mxnet.ndarray.op.cumsum,dtype,prim_dtype,['numpy.dtype'],"['int', 'numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8']","Type of the returned array and of the accumulator in which the elements are summed. If dtype is not specified, it defaults to the dtype of a, unless a has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used."
mxnet.ndarray.utils.empty,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32).
mxnet.ndarray.preloaded_multi_mp_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, learning rates and weight decays"
mxnet.ndarray.random_poisson,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.SequenceReverse,sequence_length,nonprim_dtype,['ndarray'],"['ndarray', 'sequence']",vector of sequence lengths of the form [batch_size]
mxnet.ndarray.sparse.divide,lhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],First array in division.
mxnet.ndarray.sparse.divide,rhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],"Second array in division. The arrays to be divided. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape."
mxnet.image.scale_down,size,nonprim_dtype,"['tuple(int)', 'tuple:(width,height)']",['tuple'],"Size of the crop in (width, height) format."
mxnet.image.scale_down,src_size,prim_dtype,['int'],"['int', 'numeric']","Size of the image in (width, height) format."
mxnet.image.scale_down,src_size,nonprim_dtype,"['tuple(int)', 'tuple:(width,height)']",['tuple'],"Size of the image in (width, height) format."
mxnet.ndarray.reshape,keep_highest,prim_dtype,"['boolean', 'deprecated']",['boolean'],"(Deprecated! Use `shape` instead.) Whether keep the highest dim unchanged.If set to true, then the first dim in target_shape is ignored,and always fixed as input"
mxnet.ndarray.reshape,target_shape,prim_dtype,"['deprecated', 'int']",['int'],"(Deprecated! Use `shape` instead.) Target new shape. One and only one dim can be 0, in which case it will be inferred from the rest of dims"
mxnet.gluon.nn.AvgPool1D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. padding is applied on 'W' dimension."
mxnet.gluon.contrib.rnn.Conv1DLSTMCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCW' the shape should be (C, W)."
mxnet.gluon.nn.GlobalAvgPool2D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively."
mxnet.ndarray.random.gamma,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.gluon.nn.GlobalMaxPool3D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension."
mxnet.ndarray.zeros,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",An optional value type (default is float32)
mxnet.ndarray.op.random_exponential,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.contrib.ndarray.quantized_pooling,count_include_pad,prim_dtype,['boolean'],"['boolean', 'numeric']","Only used for AvgPool, specify whether to count padding elements for averagecalculation. For example, with a 5*5 kernel on a 3*3 corner of a image,the sum of the 9 valid elements will be divided by 25 if this is set to true,or it will be divided by 9 if this is set to false. Defaults to true."
mxnet.ndarray.sample_uniform,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.gluon.nn.Dense,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Data type of output embeddings.
mxnet.gluon.nn.Embedding,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Data type of output embeddings.
mxnet.ndarray.contrib.PSROIPooling,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.ndarray.op.Pooling,count_include_pad,prim_dtype,['boolean'],"['boolean', 'numeric']","Only used for AvgPool, specify whether to count padding elements for averagecalculation. For example, with a 5*5 kernel on a 3*3 corner of a image,the sum of the 9 valid elements will be divided by 25 if this is set to true,or it will be divided by 9 if this is set to false. Defaults to true."
mxnet.ndarray.contrib.ROIAlign,pooled_size,nonprim_dtype,"['tuple(int)', 'tuple(int):(h,w)']",['tuple'],"ROI Align output roi feature map height and width: (h, w)"
mxnet.ndarray.contrib.ROIAlign,spatial_scale,prim_dtype,['float'],"['float', 'numeric']",Ratio of input feature map height (or w) to raw image height (or w). Equals the reciprocal of total stride in convolutional layers
mxnet.contrib.ndarray.dgl_graph_compact,*graph_data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Input graphs and input vertex Ids.
mxnet.ndarray.random_randint,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int32', 'numpy.int64']",DType of the output in case this can't be inferred. Defaults to int32 if not defined (dtype=None).
mxnet.gluon.nn.MaxPool2D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCHW' or 'NHWC'). 'N', 'C', 'H', 'W' stands for batch, channel, height, and width dimensions respectively. padding is applied on 'H' and 'W' dimension."
mxnet.gluon.nn.MaxPool2D,padding,nonprim_dtype,['tuple'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points."
mxnet.gluon.nn.MaxPool2D,pool_size,nonprim_dtype,['tuple'],"['list', 'tuple']",Size of the max pooling windows.
mxnet.gluon.nn.MaxPool2D,strides,nonprim_dtype,['tuple'],"['list', 'tuple']","Factor by which to downscale. E.g. 2 will halve the input size. If None, it will default to pool_size."
mxnet.ndarray.sample_negative_binomial,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.gluon.rnn.GRU,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Type to initialize the parameters and default states to
mxnet.gluon.nn.GlobalMaxPool1D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCW' or 'NWC'). 'N', 'C', 'W' stands for batch, channel, and width (time) dimensions respectively. Pooling is applied on the W dimension."
mxnet.ndarray.contrib.quantized_concat,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to concatenate
mxnet.image.imresize,h,prim_dtype,['int'],"['int', 'numeric']",Height of resized image.
mxnet.image.imresize,interp,prim_dtype,['int'],"['int', 'numeric']","Interpolation method (default=cv2.INTER_LINEAR). Possible values: 0: Nearest Neighbors Interpolation. 1: Bilinear interpolation. 2: Bicubic interpolation over 4x4 pixel neighborhood. 3: Area-based (resampling using pixel area relation). It may be a preferred method for image decimation, as it gives moire-free results. But when the image is zoomed, it is similar to the Nearest Neighbors method. (used by default). 4: Lanczos interpolation over 8x8 pixel neighborhood. 9: Cubic for enlarge, area for shrink, bilinear for others 10: Random select from interpolation method metioned above. Note: When shrinking an image, it will generally look best with AREA-based interpolation, whereas, when enlarging an image, it will generally look best with Bicubic (slow) or Bilinear (faster but still looks OK). More details can be found in the documentation of OpenCV, please refer to http://docs.opencv.org/master/da/d54/group__imgproc__transform.html."
mxnet.image.imresize,w,prim_dtype,['int'],"['int', 'numeric']",Width of resized image.
mxnet.gluon.nn.AvgPool3D,layout,prim_dtype,"['int', 'string']",['string'],"Dimension ordering of data and out ('NCDHW' or 'NDHWC'). 'N', 'C', 'H', 'W', 'D' stands for batch, channel, height, width and depth dimensions respectively. padding is applied on 'D', 'H' and 'W' dimension."
mxnet.gluon.nn.AvgPool3D,padding,nonprim_dtype,['tuple'],"['list', 'tuple']","If padding is non-zero, then the input is implicitly zero-padded on both sides for padding number of points."
mxnet.gluon.nn.AvgPool3D,pool_size,nonprim_dtype,['tuple'],"['list', 'tuple']",Size of the average pooling windows.
mxnet.gluon.nn.AvgPool3D,strides,nonprim_dtype,['tuple'],"['list', 'tuple']","Factor by which to downscale. E.g. 2 will halve the input size. If None, it will default to pool_size."
mxnet.ndarray.full,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",The data type of the returned NDArray. The default datatype is float32.
mxnet.ndarray.op.sample_exponential,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to float32 if not defined (dtype=None).
mxnet.ndarray.random.exponential,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",Data type of output samples. Default is 'float32'
mxnet.ndarray.random.exponential,shape,nonprim_dtype,['tuple(int)'],"['ndarray', 'tuple']","The number of samples to draw. If shape is, e.g., (m, n) and scale is a scalar, output shape will be (m, n). If scale is an NDArray with shape, e.g., (x, y), then output will have shape (x, y, m, n), where m*n samples are drawn for each entry in scale."
mxnet.visualization.plot_network,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float32', 'string']","Specifies the type of the input tensors. If specified, the visualization will include the type of the tensors between the nodes. dtype is a dictionary mapping input symbol names (str) to the corresponding tensor type (e.g. numpy.float32)."
mxnet.visualization.plot_network,shape,prim_dtype,['int'],"['int', 'string']","Specifies the shape of the input tensors. If specified, the visualization will include the shape of the tensors between the nodes. shape is a dictionary mapping input symbol names (str) to the corresponding tensor shape (tuple)."
mxnet.visualization.plot_network,shape,nonprim_dtype,['dict'],"['dict', 'tuple']","Specifies the shape of the input tensors. If specified, the visualization will include the shape of the tensors between the nodes. shape is a dictionary mapping input symbol names (str) to the corresponding tensor shape (tuple)."
mxnet.gluon.rnn.RNN,dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.float32', 'string']",Type to initialize the parameters and default states to
mxnet.ndarray.op.softmin,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64']",DType of the output in case this can't be inferred. Defaults to the same as input's dtype if not defined (dtype=None).
mxnet.ndarray.contrib.dgl_graph_compact,*graph_data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Input graphs and input vertex Ids.
mxnet.ndarray.sparse.subtract,lhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],First array to be subtracted.
mxnet.ndarray.sparse.subtract,rhs,nonprim_dtype,"['ndarray', 'sparse_ndarray']",['ndarray'],"Second array to be subtracted. If `lhs.shape != rhs.shape`, they must be broadcastable to a common shape.__spec__"
mxnet.ndarray.op.UpSampling,*data,nonprim_dtype,"['ndarray', 'ndarray(tensor)', 'sequence']",['ndarray'],"Array of tensors to upsample. For bilinear upsampling, there should be 2 inputs - 1 data and 1 weight."
mxnet.ndarray.op.one_hot,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",DType of the output
mxnet.ndarray.op.multi_sgd_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],Weights
mxnet.ndarray.op.argsort,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.uint8']","DType of the output indices. It is only valid when ret_typ is ""indices"" or ""both"". An error will be raised if the selected data type cannot precisely represent the indices."
mxnet.ndarray.amp_cast,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.recordio.pack_img,img_fmt,prim_dtype,['string'],"['numeric', 'string']","Encoding of the image (.jpg for JPEG, .png for PNG)."
mxnet.ndarray.op.preloaded_multi_sgd_mom_update,*data,nonprim_dtype,"['ndarray', 'sequence']",['ndarray'],"Weights, gradients, momentum, learning rates and weight decays"
mxnet.ndarray.contrib.quantized_pooling,count_include_pad,prim_dtype,['boolean'],"['boolean', 'numeric']","Only used for AvgPool, specify whether to count padding elements for averagecalculation. For example, with a 5*5 kernel on a 3*3 corner of a image,the sum of the 9 valid elements will be divided by 25 if this is set to true,or it will be divided by 9 if this is set to false. Defaults to true."
mxnet.gluon.contrib.rnn.Conv2DLSTMCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCHW' the shape should be (C, H, W)."
mxnet.contrib.ndarray.quantize,out_type,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.int8', 'numpy.uint8']",Output data type.
mxnet.image.random_size_crop,size,nonprim_dtype,"['tuple(int)', 'tuple(int):(width,height)']",['tuple'],"Size of the crop formatted as (width, height)."
mxnet.io.CSVIter,dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8', 'numpy.uint8']",Output data type. `None` means no change.
mxnet.ndarray.cumsum,dtype,prim_dtype,['numpy.dtype'],"['int', 'numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8']","Type of the returned array and of the accumulator in which the elements are summed. If dtype is not specified, it defaults to the dtype of a, unless a has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used."
mxnet.ndarray.op.stack,*data,nonprim_dtype,"['list(ndarray)', 'ndarray', 'sequence']","['list', 'ndarray']",List of arrays to stack
mxnet.gluon.contrib.rnn.Conv1DRNNCell,input_shape,nonprim_dtype,['tuple(int)'],"['sequence', 'tuple']","Input tensor shape at each time step for each sample, excluding dimension of the batch size and sequence length. Must be consistent with conv_layout. For example, for layout 'NCW' the shape should be (C, W)."
mxnet.ndarray.sparse.row_sparse_array,shape,nonprim_dtype,['tuple(int)'],"['ndarray', 'tuple']",The shape of the row sparse ndarray. (Default value = None)
mxnet.contrib.quantization.quantize_graph,arg_params,nonprim_dtype,"['dict', 'dict(dict:string)']","['dict', 'ndarray']",Dictionary of name to NDArray.
mxnet.contrib.quantization.quantize_graph,aux_params,nonprim_dtype,"['dict', 'dict(dict:string)']","['dict', 'ndarray']",Dictionary of name to NDArray.
mxnet.contrib.quantization.quantize_graph,calib_mode,prim_dtype,['string'],"['numpy.float32', 'string']","If calib_mode='none', no calibration will be used and the thresholds for requantization after the corresponding layers will be calculated at runtime by calling min and max operators. The quantized models generated in this mode are normally 10-20% slower than those with calibrations during inference. If calib_mode='naive', the min and max values of the layer outputs from a calibration dataset will be directly taken as the thresholds for quantization. If calib_mode='entropy' (default mode), the thresholds for quantization will be derived such that the KL divergence between the distributions of FP32 layer outputs and quantized layer outputs is minimized based upon the calibration dataset."
mxnet.contrib.quantization.quantize_graph,quantized_dtype,prim_dtype,"['numpy.dtype', 'string']","['numpy.dtype', 'numpy.int8', 'numpy.uint8', 'string']","The quantized destination type for input data. Currently support 'int8' , 'uint8' and 'auto'. 'auto' means automatically select output type according to calibration result. Default value is 'int8'."
mxnet.ndarray.op.adam_update,var,prim_dtype,['numeric'],['float'],Moving variance
mxnet.ndarray.sparse.norm,out_dtype,prim_dtype,['numpy.dtype'],"['numpy.dtype', 'numpy.float16', 'numpy.float32', 'numpy.float64', 'numpy.int32', 'numpy.int64', 'numpy.int8']",The data type of the output.
