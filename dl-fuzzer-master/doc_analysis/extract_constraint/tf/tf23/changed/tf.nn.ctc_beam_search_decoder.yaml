aliases:
- tf.compat.v1.nn.ctc_beam_search_decoder_v2
constraints:
  beam_width:
    default: '100'
    descp: An int scalar >= 0 (beam search beam width).
    dtype:
    - int
    ndim:
    - '0'
    range:
    - '[0,inf)'
  inputs:
    descp: 3-D float Tensor, size [max_time, batch_size, num_classes]. The logits.
    dtype:
    - float
    ndim:
    - '3'
    shape:
    - '[max_time,batch_size,num_classes]'
    tensor_t:
    - tf.tensor
  sequence_length:
    descp: 1-D int32 vector containing sequence lengths, having size [batch_size].
    dtype:
    - tf.int32
    ndim:
    - '0'
    - '1'
    range:
    - '[0,inf)'
    shape:
    - '[batch_size]'
  top_paths:
    default: '1'
    descp: An int scalar >= 0, <= beam_width (controls output size).
    dtype:
    - int
    ndim:
    - '0'
dependency:
- batch_size
- max_time
- num_classes
inputs:
  optional:
  - beam_width
  - top_paths
  required:
  - inputs
  - sequence_length
link: https://www.tensorflow.org/versions/r2.3/api_docs/python/tf/nn/ctc_beam_search_decoder
outputs:
- A tuple (decoded, log_probabilities) where
- decoded: 'A list of length top_paths, where decoded[j] is a SparseTensor containing
    the decoded outputs: decoded[j].indices: Indices matrix [total_decoded_outputs[j],
    2]; The rows store: [batch, time]. decoded[j].values: Values vector, size [total_decoded_outputs[j]].
    The vector stores the decoded classes for beam j. decoded[j].dense_shape: Shape
    vector, size (2). The shape values are: [batch_size, max_decoded_length[j]].'
- log_probability: A float matrix [batch_size, top_paths] containing sequence log-probabilities.
package: tensorflow
target: ctc_beam_search_decoder
title: tf.nn.ctc_beam_search_decoder
version: 2.3.0
