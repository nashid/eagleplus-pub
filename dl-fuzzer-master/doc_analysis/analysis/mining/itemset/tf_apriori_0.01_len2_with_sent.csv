,idx,support,cnt,itemsets,sentence,api,len
0,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.group.yaml,2
1,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.conv1d.yaml,2
2,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name scope for the associated operations (optional).,tf.math.reduce_std.yaml,2
3,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,2
4,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.band_part.yaml,2
5,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,2
6,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.mask.yaml,2
7,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operations (optional).,tf.io.match_filenames_once.yaml,2
8,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,2
9,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,2
10,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,2
11,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,2
12,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reciprocal.yaml,2
13,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.xlogy.yaml,2
14,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_regularization_losses.yaml,2
15,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
16,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,2
17,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,2
18,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.encode_png.yaml,2
19,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_max.yaml,2
20,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.conv2d_transpose.yaml,2
21,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the checkpoint file.,tf.train.get_checkpoint_state.yaml,2
22,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,2
23,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,2
24,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.split.yaml,2
25,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,2
26,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,2
27,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,2
28,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,2
29,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the return tensor.,tf.compat.v1.delete_session_tensor.yaml,2
30,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitcast.yaml,2
31,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,2
32,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,2
33,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,2
34,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,2
35,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.concat.yaml,2
36,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,2
37,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the op.,tf.sparse.cross.yaml,2
38,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.zeta.yaml,2
39,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,2
40,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name to give this `Op` (optional).,tf.linalg.adjoint.yaml,2
41,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.solve.yaml,2
42,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,2
43,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv2d_transpose.yaml,2
44,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.tanh.yaml,2
45,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,2
46,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,2
47,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,2
48,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,2
49,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,2
50,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,2
51,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.shuffle.yaml,2
52,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,2
53,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.lbeta.yaml,2
54,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,2
55,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.idct.yaml,2
56,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.polyval.yaml,2
57,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.relu6.yaml,2
58,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,2
59,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
60,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,2
61,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.resize.yaml,2
62,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.reorder.yaml,2
63,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,2
64,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.eig.yaml,2
65,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,2
66,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_solve.yaml,2
67,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the op.,tf.sparse.cross_hashed.yaml,2
68,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,2
69,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.conv3d.yaml,2
70,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.true_negatives.yaml,2
71,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.substr.yaml,2
72,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.split.yaml,2
73,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.cast.yaml,2
74,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.boolean_mask.yaml,2
75,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,2
76,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.broadcast_to.yaml,2
77,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.total_variation.yaml,2
78,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.sigmoid.yaml,2
79,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.is_nan.yaml,2
80,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
81,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for prefixing the operations (optional).,tf.compat.v1.sparse_placeholder.yaml,2
82,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.row_splits_to_segment_ids.yaml,2
83,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
84,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.clip_by_value.yaml,2
85,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.timestamp.yaml,2
86,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,2
87,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,2
88,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.sign.yaml,2
89,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,2
90,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean.yaml,2
91,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
92,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,2
93,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,2
94,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,2
95,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,2
96,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.sqrt.yaml,2
97,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool.yaml,2
98,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.stack.yaml,2
99,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.add_n.yaml,2
100,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the returned tensors.,tf.compat.v1.while_loop.yaml,2
101,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,2
102,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.dtypes.complex.yaml,2
103,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.unstack.yaml,2
104,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,2
105,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,2
106,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.random.categorical.yaml,2
107,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.io.serialize_many_sparse.yaml,2
108,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.fft3d.yaml,2
109,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.trace.yaml,2
110,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the tensor.,tf.keras.backend.constant.yaml,2
111,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,2
112,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,2
113,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,2
114,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.scalar.yaml,2
115,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",optional name of the operation.,tf.sparse.maximum.yaml,2
116,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.log1p.yaml,2
117,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.erfinv.yaml,2
118,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,2
119,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.floordiv.yaml,2
120,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,2
121,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_tensor.yaml,2
122,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_min.yaml,2
123,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.igamma.yaml,2
124,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.encode_base64.yaml,2
125,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,2
126,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
127,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.greater_equal.yaml,2
128,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
129,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,2
130,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,2
131,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,2
132,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","(Optional.) If non-empty, the returned iterator will be shared under the given name across multiple sessions that share the same devices (e.g. when using a remote server).",tf.compat.v1.data.make_initializable_iterator.yaml,2
133,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,2
134,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.histogram.yaml,2
135,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,2
136,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,2
137,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,2
138,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,2
139,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,2
140,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.sin.yaml,2
141,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,2
142,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,2
143,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,2
144,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.softplus.yaml,2
145,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,2
146,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.unique.yaml,2
147,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,2
148,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.subtract.yaml,2
149,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.elu.yaml,2
150,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
151,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name to give this `Op` (optional).,tf.linalg.expm.yaml,2
152,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,2
153,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.dynamic_partition.yaml,2
154,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,2
155,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name string for the placeholder.,tf.keras.backend.placeholder.yaml,2
156,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.tan.yaml,2
157,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.not_equal.yaml,2
158,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
159,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.write_file.yaml,2
160,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
161,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.zeros_like.yaml,2
162,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.asinh.yaml,2
163,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,2
164,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional),tf.io.decode_image.yaml,2
165,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,2
166,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,2
167,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",optional name of the operation.,tf.sparse.softmax.yaml,2
168,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,2
169,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.read_file.yaml,2
170,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.compat.v1.sparse_concat.yaml,2
171,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft.yaml,2
172,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,2
173,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,2
174,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.truediv.yaml,2
175,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,2
176,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,2
177,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,2
178,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,2
179,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
180,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional string name for this op.,tf.summary.write.yaml,2
181,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,2
182,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,2
183,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,2
184,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.as_string.yaml,2
185,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,2
186,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.crelu.yaml,2
187,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.accuracy.yaml,2
188,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,2
189,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,2
190,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.segment_mean.yaml,2
191,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,2
192,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.squared_difference.yaml,2
193,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.conv2d.yaml,2
194,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,2
195,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.ones_like.yaml,2
196,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,2
197,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,2
198,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,2
199,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,2
200,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.unravel_index.yaml,2
201,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the collection where shared embedding weights are added.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
202,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
203,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,2
204,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,2
205,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,2
206,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,2
207,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.upper.yaml,2
208,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,2
209,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.ndtri.yaml,2
210,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.Assert.yaml,2
211,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.less.yaml,2
212,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
213,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.realdiv.yaml,2
214,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.hann_window.yaml,2
215,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,2
216,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.image2.yaml,2
217,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,2
218,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,2
219,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,2
220,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
221,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,2
222,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,2
223,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,2
224,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.print.yaml,2
225,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_many_sparse.yaml,2
226,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",optional name of the operation.,tf.sparse.minimum.yaml,2
227,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,2
228,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,2
229,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,2
230,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,2
231,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,2
232,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,2
233,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,2
234,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,2
235,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,2
236,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
237,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,2
238,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the op.,tf.sparse.from_dense.yaml,2
239,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.is_finite.yaml,2
240,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.false_positives.yaml,2
241,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,2
242,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,2
243,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,2
244,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.truncatediv.yaml,2
245,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.softmax.yaml,2
246,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.imag.yaml,2
247,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
248,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.atan.yaml,2
249,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.angle.yaml,2
250,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.nextafter.yaml,2
251,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,2
252,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,2
253,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
254,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name of the operation (optional).,tf.where.yaml,2
255,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.log.yaml,2
256,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,2
257,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,2
258,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
259,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.gather.yaml,2
260,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,2
261,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.linalg.svd.yaml,2
262,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.asin.yaml,2
263,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
264,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.cosh.yaml,2
265,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.abs.yaml,2
266,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,2
267,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,2
268,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,2
269,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,2
270,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,2
271,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,2
272,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,2
273,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional collective name of these columns.,tf.feature_column.shared_embeddings.yaml,2
274,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,2
275,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,2
276,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.to_indicator.yaml,2
277,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.searchsorted.yaml,2
278,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,2
279,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,2
280,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,2
281,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Name for the operation (optional).,tf.linalg.matvec.yaml,2
282,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.diag.yaml,2
283,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,2
284,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.rint.yaml,2
285,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,2
286,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,2
287,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,2
288,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,2
289,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,2
290,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.round.yaml,2
291,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.eigvals.yaml,2
292,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.greater.yaml,2
293,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.conv3d_transpose.yaml,2
294,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,2
295,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as the prefix of the summary tag, which controls the name used for display on TensorBoard when display_name is not set.",tf.compat.v1.summary.tensor_summary.yaml,2
296,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.clip_by_norm.yaml,2
297,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,2
298,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,2
299,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.segment_prod.yaml,2
300,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,2
301,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,2
302,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,2
303,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.logm.yaml,2
304,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,2
305,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the initialization op.,tf.compat.v1.tables_initializer.yaml,2
306,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.ifftshift.yaml,2
307,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,2
308,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.convolution.yaml,2
309,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
310,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.identity_n.yaml,2
311,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.fingerprint.yaml,2
312,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_gif.yaml,2
313,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.transpose.yaml,2
314,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,2
315,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.inv.yaml,2
316,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,2
317,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use for grouping all the gradient ops together.,tf.gradients.yaml,2
318,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,2
319,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
320,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_handle.yaml,2
321,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
322,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_iou.yaml,2
323,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,2
324,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.negative.yaml,2
325,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,2
326,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
327,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,2
328,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.fft2d.yaml,2
329,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,2
330,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.recall.yaml,2
331,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.gradients.yaml,2
332,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.hamming_window.yaml,2
333,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,2
334,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,2
335,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.uniform.yaml,2
336,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.segment_sum.yaml,2
337,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.tensordot.yaml,2
338,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
339,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
340,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d_transpose.yaml,2
341,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,2
342,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.sparse.to_dense.yaml,2
343,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
344,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.add.yaml,2
345,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
346,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,2
347,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,2
348,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,2
349,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,2
350,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,2
351,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,2
352,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,2
353,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.sort.yaml,2
354,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.floor.yaml,2
355,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_sparse.yaml,2
356,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,2
357,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.squeeze.yaml,2
358,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,2
359,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the tensor.,tf.compat.v1.constant.yaml,2
360,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.cumprod.yaml,2
361,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
362,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,2
363,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_any.yaml,2
364,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.floormod.yaml,2
365,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.selu.yaml,2
366,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
367,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.atan2.yaml,2
368,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,2
369,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use for grouping all the gradient ops together.,tf.compat.v1.hessians.yaml,2
370,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.erf.yaml,2
371,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.sparse_dense_matmul.yaml,2
372,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,2
373,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,2
374,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,2
375,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.normal.yaml,2
376,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
377,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,2
378,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,2
379,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.lower.yaml,2
380,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.conj.yaml,2
381,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,2
382,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.segment_ids_to_row_splits.yaml,2
383,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.case.yaml,2
384,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,2
385,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name to give this `Op` (optional).,tf.linalg.tridiagonal_matmul.yaml,2
386,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
387,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.io.parse_example.yaml,2
388,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,2
389,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,2
390,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.logical_not.yaml,2
391,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,2
392,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.unique_with_counts.yaml,2
393,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.segment_max.yaml,2
394,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,2
395,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,2
396,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,2
397,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,2
398,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,2
399,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_relative_error.yaml,2
400,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,2
401,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,2
402,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.fill.yaml,2
403,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,2
404,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",name: A name for the operation (optional).,tf.einsum.yaml,2
405,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,2
406,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,2
407,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.bias_add.yaml,2
408,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,2
409,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) Name prefix for the returned tensors.,tf.foldr.yaml,2
410,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,2
411,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,2
412,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,2
413,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
414,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,2
415,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional string name for this op.,tf.summary.experimental.write_raw_pb.yaml,2
416,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,2
417,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.scatter_nd.yaml,2
418,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_squared_error.yaml,2
419,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.false_negatives.yaml,2
420,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.igammac.yaml,2
421,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_png.yaml,2
422,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,2
423,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.linalg.eigh.yaml,2
424,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.argmin.yaml,2
425,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,2
426,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.ensure_shape.yaml,2
427,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.xdivy.yaml,2
428,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,2
429,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strided_slice.yaml,2
430,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.percentage_below.yaml,2
431,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the op.,tf.nn.embedding_lookup_sparse.yaml,2
432,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
433,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,2
434,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
435,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,2
436,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,2
437,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,2
438,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Name for the operation (optional).,tf.linalg.matmul.yaml,2
439,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.slice.yaml,2
440,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.dct.yaml,2
441,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",optional suffix for the event file name.,tf.summary.create_file_writer.yaml,2
442,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.acos.yaml,2
443,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.conv1d_transpose.yaml,2
444,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.argmax.yaml,2
445,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.fftshift.yaml,2
446,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,2
447,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,2
448,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the returned tensors.,tf.cond.yaml,2
449,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,2
450,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,2
451,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.py_function.yaml,2
452,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,2
453,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,2
454,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,2
455,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.invert.yaml,2
456,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.square.yaml,2
457,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.segment_min.yaml,2
458,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,2
459,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) Name prefix for the returned tensors.,tf.scan.yaml,2
460,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linspace.yaml,2
461,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.det.yaml,2
462,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,2
463,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.stft.yaml,2
464,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.to_number.yaml,2
465,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,2
466,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,2
467,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,2
468,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
469,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,2
470,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,2
471,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.pow.yaml,2
472,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.exp.yaml,2
473,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,2
474,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.erfc.yaml,2
475,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_raw.yaml,2
476,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,2
477,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,2
478,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,2
479,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,2
480,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,2
481,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.slice.yaml,2
482,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,2
483,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.polygamma.yaml,2
484,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional op name.,tf.compat.v1.tpu.cross_replica_sum.yaml,2
485,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,2
486,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.minimum.yaml,2
487,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,2
488,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.transpose.yaml,2
489,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.atanh.yaml,2
490,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.qr.yaml,2
491,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.edit_distance.yaml,2
492,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
493,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the returned tensors.,tf.while_loop.yaml,2
494,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.rank.yaml,2
495,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,2
496,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,2
497,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,2
498,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,2
499,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_tensor.yaml,2
500,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.relu.yaml,2
501,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.pad.yaml,2
502,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames.,tf.train.latest_checkpoint.yaml,2
503,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,2
504,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.multiply.yaml,2
505,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,2
506,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.matching_files.yaml,2
507,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.random.poisson.yaml,2
508,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,2
509,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,2
510,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,2
511,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.tile.yaml,2
512,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,2
513,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,2
514,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.equal.yaml,2
515,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional),tf.io.is_jpeg.yaml,2
516,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.constant.yaml,2
517,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.shape.yaml,2
518,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,2
519,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.logical_and.yaml,2
520,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
521,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,2
522,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.betainc.yaml,2
523,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,2
524,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.acosh.yaml,2
525,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d.yaml,2
526,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,2
527,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,2
528,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
529,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,2
530,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,2
531,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as default name of the summary.",tf.summary.experimental.summary_scope.yaml,2
532,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,2
533,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,2
534,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.random.gamma.yaml,2
535,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.transpose.yaml,2
536,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.fill_empty_rows.yaml,2
537,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,2
538,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.join.yaml,2
539,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the returned tensor.,tf.compat.v1.nn.convolution.yaml,2
540,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.stack.yaml,2
541,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.logical_or.yaml,2
542,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,2
543,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.no_op.yaml,2
544,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional).,tf.io.serialize_sparse.yaml,2
545,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.quantize.yaml,2
546,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,2
547,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,2
548,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.switch_case.yaml,2
549,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.gather_nd.yaml,2
550,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name of the operation (optional),tf.compat.v1.where.yaml,2
551,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.encode_proto.yaml,2
552,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.rsqrt.yaml,2
553,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_total_loss.yaml,2
554,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,2
555,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,2
556,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,2
557,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,2
558,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.less_equal.yaml,2
559,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,2
560,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,2
561,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.guarantee_const.yaml,2
562,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.softsign.yaml,2
563,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.lgamma.yaml,2
564,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name prefix for the returned tensors.,tf.compat.v1.cond.yaml,2
565,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,2
566,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.reduce_all.yaml,2
567,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(Optional) A name for the operation.,tf.numpy_function.yaml,2
568,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.truncatemod.yaml,2
569,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,2
570,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","(Optional.) If supplied, the resulting list is filtered to include only items whose `name` attribute matches using `re.match`.",tf.compat.v1.get_collection.yaml,2
571,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,2
572,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,2
573,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.batch_to_space.yaml,2
574,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the tensor.,tf.constant.yaml,2
575,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
576,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.is_inf.yaml,2
577,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name string for the layer.,tf.keras.Input.yaml,2
578,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,2
579,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
580,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.boolean_mask.yaml,2
581,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.identity.yaml,2
582,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name scope for the associated operations (optional).,tf.math.bincount.yaml,2
583,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,2
584,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,2
585,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,2
586,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.maximum.yaml,2
587,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.math.top_k.yaml,2
588,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,2
589,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,2
590,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,2
591,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.true_positives.yaml,2
592,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,2
593,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,2
594,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_csv.yaml,2
595,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name scope for the associated operations (optional).,tf.math.reduce_variance.yaml,2
596,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the collection where shared embedding weights are added.,tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
597,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.one_hot.yaml,2
598,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.precision.yaml,2
599,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,2
600,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.space_to_batch.yaml,2
601,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.argsort.yaml,2
602,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.cumsum.yaml,2
603,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,2
604,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.parallel_stack.yaml,2
605,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,2
606,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.in_top_k.yaml,2
607,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,2
608,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,2
609,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_regularization_loss.yaml,2
610,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.sinh.yaml,2
611,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional name for the operation.,tf.signal.frame.yaml,2
612,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,2
613,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,2
614,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.format.yaml,2
615,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,2
616,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,2
617,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,2
618,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","Optional; if provided, used as the prefix of the summary tag name, which controls the tab name used for display on Tensorboard.",tf.compat.v1.summary.audio2.yaml,2
619,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,2
620,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.dropout.yaml,2
621,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_proto.yaml,2
622,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,2
623,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,2
624,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",The name of the output `Tensor` (optional).,tf.compat.v1.expand_dims.yaml,2
625,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) Name prefix for the returned tensors.,tf.foldl.yaml,2
626,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.reverse.yaml,2
627,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,2
628,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
629,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the op.,tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
630,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,2
631,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.digamma.yaml,2
632,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,2
633,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
634,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
635,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,2
636,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,2
637,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,2
638,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,2
639,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.cross.yaml,2
640,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.stop_gradient.yaml,2
641,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,2
642,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.expm1.yaml,2
643,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensor (optional).,tf.ragged.stack_dynamic_partitions.yaml,2
644,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.summary.flush.yaml,2
645,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,2
646,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.ceil.yaml,2
647,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",Optional name for the operation.,tf.nn.max_pool.yaml,2
648,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional variable_scope name.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
649,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,2
650,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,2
651,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.io.decode_base64.yaml,2
652,90,0.07481351469942957,682,"frozenset({'name', 'optional'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
653,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,2
654,90,0.07481351469942957,682,"frozenset({'name', 'optional'})", Optional name prefix.,tf.required_space_to_batch_paddings.yaml,2
655,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,2
656,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,2
657,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,2
658,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.real.yaml,2
659,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.size.yaml,2
660,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,2
661,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.roll.yaml,2
662,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",name: A name for the operation (optional).,tf.meshgrid.yaml,2
663,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.math.cos.yaml,2
664,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",An optional scope name for filtering the losses to return.,tf.compat.v1.losses.get_losses.yaml,2
665,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.image.extract_patches.yaml,2
666,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,2
667,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.sparse.reshape.yaml,2
668,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,2
669,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.linalg.lu.yaml,2
670,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",(optional) Name prefix for the returned tensors.,tf.map_fn.yaml,2
671,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.strip.yaml,2
672,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.case.yaml,2
673,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name prefix for the returned tensors (optional),tf.io.deserialize_many_sparse.yaml,2
674,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,2
675,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.shape_n.yaml,2
676,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.signal.fft.yaml,2
677,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,2
678,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,2
679,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,2
680,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for this operation (optional).,tf.image.random_crop.yaml,2
681,90,0.07481351469942957,682,"frozenset({'name', 'optional'})",A name for the operation (optional).,tf.strings.split.yaml,2
682,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
683,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A tensor of numeric type.,tf.math.zero_fraction.yaml,2
684,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
685,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
686,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
687,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
688,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
689,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.extract_glimpse.yaml,2
690,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
691,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
692,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
693,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
694,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
695,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
696,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
697,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
698,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,2
699,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
700,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
701,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or scalar `int32` `Tensor`.,tf.split.yaml,2
702,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
703,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","The logits, a float tensor.",tf.compat.v1.losses.hinge_loss.yaml,2
704,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar integer `Tensor`.,tf.debugging.assert_rank_at_least.yaml,2
705,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,2
706,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
707,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
708,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,2
709,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The string representation of a persistent tensor handle.,tf.compat.v1.delete_session_tensor.yaml,2
710,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",0-D `int32` `Tensor`.,tf.concat.yaml,2
711,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,2
712,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",int32 Tensor of known shape [num_spatial_dims].,tf.nn.with_space_to_batch.yaml,2
713,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
714,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
715,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
716,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
717,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
718,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,2
719,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,2
720,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or scalar `Tensor` denoting overlap offsets.,tf.signal.overlap_and_add.yaml,2
721,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
722,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.compat.v1.nn.crelu.yaml,2
723,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
724,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64` `complex64` or`complex128`.",tf.math.reciprocal_no_nan.yaml,2
725,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,2
726,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.idct.yaml,2
727,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
728,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
729,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of types `float32`, `float64`, `complex64`, `complex128`",tf.linalg.normalize.yaml,2
730,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.relu6.yaml,2
731,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
732,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,2
733,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
734,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
735,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
736,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D scalar `Tensor`.,tf.math.scalar_mul.yaml,2
737,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
738,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,2
739,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
740,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
741,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.substr.yaml,2
742,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Tensor of strings,tf.strings.substr.yaml,2
743,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D `int32` `Tensor`.,tf.sparse.split.yaml,2
744,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,2
745,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A potentially ragged boolean tensor.,tf.ragged.boolean_mask.yaml,2
746,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An 1-D `int` Tensor.,tf.broadcast_to.yaml,2
747,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
748,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,2
749,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A Tensor with type `float16`, `float32`, `float64`, `complex64`, or`complex128`.",tf.math.sigmoid.yaml,2
750,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
751,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Inputs of the SignatureDef defined as a proto map of string to tensor info.,tf.compat.v1.saved_model.build_signature_def.yaml,2
752,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Outputs of the SignatureDef defined as a proto map of string to tensor info.,tf.compat.v1.saved_model.build_signature_def.yaml,2
753,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A sorted 1-D integer Tensor.,tf.ragged.row_splits_to_segment_ids.yaml,2
754,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
755,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
756,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_strong.yaml,2
757,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer tensor of indices.,tf.keras.backend.gather.yaml,2
758,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_greater.yaml,2
759,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_greater.yaml,2
760,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.length.yaml,2
761,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar integer `Tensor`.,tf.debugging.assert_rank.yaml,2
762,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar or tensor.,tf.image.adjust_gamma.yaml,2
763,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar or tensor.,tf.image.adjust_gamma.yaml,2
764,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
765,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket.yaml,2
766,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A string `Tensor`.,tf.compat.v1.saved_model.classification_signature_def.yaml,2
767,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
768,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",a float `Tensor`.,tf.compat.v1.saved_model.classification_signature_def.yaml,2
769,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.log_poisson_loss.yaml,2
770,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.fft3d.yaml,2
771,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,2
772,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.train.sdca_fprint.yaml,2
773,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
774,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,2
775,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A real numeric Tensor containing a single value.,tf.compat.v1.summary.scalar.yaml,2
776,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.erfinv.yaml,2
777,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,2
778,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,2
779,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,2
780,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The string representation of a persistent tensor handle.,tf.compat.v1.get_session_tensor.yaml,2
781,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",a string-type Tensor to summarize.,tf.compat.v1.summary.text.yaml,2
782,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.encode_base64.yaml,2
783,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Iterable of scalar `Tensor` objects.,tf.compat.v1.assert_rank_in.yaml,2
784,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_rank_in.yaml,2
785,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","nD integer tensor of shape`(batch_size, dim1, dim2, ...",tf.keras.backend.one_hot.yaml,2
786,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
787,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
788,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A real numeric `Tensor`.,tf.compat.v1.summary.histogram.yaml,2
789,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_less.yaml,2
790,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_less.yaml,2
791,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer `Tensor`.,tf.signal.linear_to_mel_weight_matrix.yaml,2
792,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or float `Tensor`.,tf.signal.linear_to_mel_weight_matrix.yaml,2
793,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
794,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
795,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
796,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
797,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.image.extract_glimpse.yaml,2
798,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.regressor_parse_example_spec.yaml,2
799,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `uint8`.,tf.io.encode_jpeg.yaml,2
800,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
801,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
802,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.dynamic_partition.yaml,2
803,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
804,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
805,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
806,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
807,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
808,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
809,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar tensor to minimize.,tf.keras.backend.gradients.yaml,2
810,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
811,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
812,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.audio.decode_wav.yaml,2
813,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
814,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
815,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.quantization.quantized_concat.yaml,2
816,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
817,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
818,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
819,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
820,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.read_file.yaml,2
821,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.ifft.yaml,2
822,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_json_example.yaml,2
823,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` numerator of numeric type.,tf.math.truediv.yaml,2
824,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` denominator of numeric type.,tf.math.truediv.yaml,2
825,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_bmp.yaml,2
826,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
827,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",the Tensor holding the summary data to write or a callable that returns this Tensor.,tf.summary.write.yaml,2
828,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
829,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
830,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The boolean tensor to reduce.,tf.compat.v1.reduce_all.yaml,2
831,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `tf.string` tensor.,tf.compat.v1.reduce_join.yaml,2
832,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.crelu.yaml,2
833,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
834,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,2
835,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,2
836,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_hash_bucket.yaml,2
837,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D `int32` `Tensor`.,tf.compat.v1.sparse_split.yaml,2
838,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Float or complex `Tensor`.,tf.compat.v1.assert_near.yaml,2
839,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Float or complex `Tensor`, same `dtype` as, and broadcastable to, `x`.",tf.compat.v1.assert_near.yaml,2
840,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A Tensor with type `float32` or `float64`.,tf.math.log_sigmoid.yaml,2
841,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An 1-D `int` Tensor.,tf.unravel_index.yaml,2
842,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,2
843,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
844,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
845,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
846,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,2
847,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
848,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
849,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",an integer or 1-D tensor.,tf.random.experimental.create_rng_state.yaml,2
850,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.parse_tensor.yaml,2
851,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
852,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.upper.yaml,2
853,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
854,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
855,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.ndtri.yaml,2
856,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
857,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hann_window.yaml,2
858,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,2
859,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,2
860,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
861,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The boolean tensor to reduce.,tf.compat.v1.reduce_any.yaml,2
862,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
863,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
864,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
865,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
866,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
867,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
868,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
869,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A string tensor of the text to be processed.,tf.strings.regex_full_match.yaml,2
870,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
871,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,2
872,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
873,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,2
874,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,2
875,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.extract_jpeg_shape.yaml,2
876,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
877,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
878,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.pad.yaml,2
879,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
880,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
881,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,2
882,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
883,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A scalar string Tensor, a single serialized Example.",tf.compat.v1.parse_single_example.yaml,2
884,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
885,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
886,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_positive.yaml,2
887,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
888,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
889,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.crop_and_resize.yaml,2
890,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
891,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
892,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
893,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
894,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Matrix-shaped float `Tensor` representing targets for which to solve;`A X = RHS`.,tf.linalg.lu_solve.yaml,2
895,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
896,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
897,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
898,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`,tf.where.yaml,2
899,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Vector or scalar `Tensor`.,tf.ragged.range.yaml,2
900,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Vector or scalar `Tensor`.,tf.ragged.range.yaml,2
901,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Vector or scalar `Tensor`.,tf.ragged.range.yaml,2
902,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.inverse_stft_window_fn.yaml,2
903,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
904,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
905,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
906,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
907,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
908,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
909,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
910,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,2
911,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","string `Tensor`, the source strings to process.",tf.strings.regex_replace.yaml,2
912,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","string or scalar string `Tensor`, regular expression to use, see more details at https://github.com/google/re2/wiki/Syntax",tf.strings.regex_replace.yaml,2
913,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","string or scalar string `Tensor`, value to use in match replacement, supports backslash-escaped digits (\1 to \9) can be to insert text matching corresponding parenthesized group.",tf.strings.regex_replace.yaml,2
914,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
915,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
916,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
917,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,2
918,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",3-D `float` `Tensor`.,tf.compat.v1.nn.ctc_loss.yaml,2
919,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_global_norm.yaml,2
920,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
921,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_number.yaml,2
922,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
923,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A Tensor of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
924,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",0-D `double` `Tensor`.,tf.linalg.lstsq.yaml,2
925,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Iterable` of scalar `Tensor` objects.,tf.debugging.assert_rank_in.yaml,2
926,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
927,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.draw_bounding_boxes.yaml,2
928,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
929,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,2
930,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
931,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
932,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
933,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
934,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.math.round.yaml,2
935,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
936,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
937,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",What to return in test phase (tensor or callable that returns a tensor).,tf.keras.backend.in_test_phase.yaml,2
938,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
939,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
940,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_norm.yaml,2
941,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_negative.yaml,2
942,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
943,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
944,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
945,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
946,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,2
947,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar `int32 Tensor`.,tf.histogram_fixed_width.yaml,2
948,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.histogram_fixed_width.yaml,2
949,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
950,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_gif.yaml,2
951,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
952,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,2
953,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_equal.yaml,2
954,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_equal.yaml,2
955,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,2
956,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
957,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
958,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
959,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_greater_equal.yaml,2
960,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_greater_equal.yaml,2
961,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
962,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,2
963,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
964,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,2
965,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,2
966,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_greater.yaml,2
967,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_greater.yaml,2
968,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.pinv.yaml,2
969,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
970,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
971,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.fft2d.yaml,2
972,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",tensor (`int` or `bool`).,tf.keras.backend.switch.yaml,2
973,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,2
974,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","either a tensor, or a callable that returns a tensor.",tf.keras.backend.switch.yaml,2
975,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A bool `Tensor` indicating whether to generate a periodic or symmetric window.,tf.signal.hamming_window.yaml,2
976,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,2
977,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
978,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `Tensor` with the same type as `x`.,tf.compat.v1.nn.dropout.yaml,2
979,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,2
980,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` of type `float32` or `float64`.,tf.tensordot.yaml,2
981,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
982,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
983,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
984,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
985,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
986,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
987,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,2
988,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An 1-D `int` Tensor.,tf.repeat.yaml,2
989,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.'silent_for_int32': silently copies `int32` tensors, raising errors on the other ones.",tf.config.experimental.set_device_policy.yaml,2
990,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",What to return otherwise (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
991,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
992,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",What to return in train phase (tensor or callable that returns a tensor).,tf.keras.backend.in_train_phase.yaml,2
993,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
994,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
995,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
996,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,2
997,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`1-D` string `Tensor`, the strings to split.",tf.compat.v1.string_split.yaml,2
998,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
999,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.sparse_categorical_crossentropy.yaml,2
1000,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer tensor.,tf.keras.backend.sparse_categorical_crossentropy.yaml,2
1001,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,2
1002,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_less.yaml,2
1003,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_less.yaml,2
1004,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,2
1005,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
1006,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
1007,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumprod.yaml,2
1008,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
1009,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
1010,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The boolean tensor to reduce.,tf.math.reduce_any.yaml,2
1011,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.inverse_stft.yaml,2
1012,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.inverse_stft.yaml,2
1013,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.inverse_stft.yaml,2
1014,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `complex64`/`complex128` `[..., frames, fft_unique_bins]``Tensor` of STFT bins representing a batch of `fft_length`-point STFTs where `fft_unique_bins` is `fft_length // 2 + 1`",tf.signal.inverse_stft.yaml,2
1015,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
1016,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
1017,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
1018,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,2
1019,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1020,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1021,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1022,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1023,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1024,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1025,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
1026,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
1027,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.lower.yaml,2
1028,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with specific types.,tf.compat.v1.decode_csv.yaml,2
1029,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
1030,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.decode_csv.yaml,2
1031,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor.,tf.ragged.segment_ids_to_row_splits.yaml,2
1032,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
1033,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,2
1034,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,2
1035,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","String, dtype of returned tensor.",tf.keras.backend.random_binomial.yaml,2
1036,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
1037,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
1038,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,2
1039,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,2
1040,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_not.yaml,2
1041,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","String, dtype of returned tensor.",tf.keras.backend.truncated_normal.yaml,2
1042,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
1043,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1044,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1045,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1046,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1047,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1048,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1049,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1050,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1051,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1052,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
1053,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_jpeg.yaml,2
1054,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A real numeric scalar value, convertible to a `float32` Tensor.",tf.summary.scalar.yaml,2
1055,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` with floating point or complex dtype.,tf.math.unsorted_segment_mean.yaml,2
1056,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.math.unsorted_segment_mean.yaml,2
1057,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,2
1058,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_positive.yaml,2
1059,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",a dict of string to `Tensor`.,tf.estimator.export.build_raw_serving_input_receiver_fn.yaml,2
1060,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,2
1061,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_none_equal.yaml,2
1062,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_none_equal.yaml,2
1063,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_non_positive.yaml,2
1064,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.regression_signature_def.yaml,2
1065,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A float `Tensor`.,tf.compat.v1.saved_model.regression_signature_def.yaml,2
1066,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` with type `float`, `double`, `int64`, `int32`, `uint8`,`int16`, `int8`, `complex64`, or `complex128`.",tf.nn.bias_add.yaml,2
1067,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1068,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1069,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1070,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
1071,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unicode_transcode.yaml,2
1072,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar integer `Tensor`.,tf.compat.v1.assert_rank.yaml,2
1073,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_rank.yaml,2
1074,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,2
1075,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
1076,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
1077,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
1078,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",the string Tensor holding one or more serialized `Summary` protobufs,tf.summary.experimental.write_raw_pb.yaml,2
1079,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_png.yaml,2
1080,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,2
1081,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
1082,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_non_negative.yaml,2
1083,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1084,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1085,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1086,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
1087,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor`.,tf.strided_slice.yaml,2
1088,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor`.,tf.strided_slice.yaml,2
1089,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor`.,tf.strided_slice.yaml,2
1090,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A numeric `Tensor` of arbitrary size.,tf.compat.v1.metrics.percentage_below.yaml,2
1091,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","can be True, False, a bool Tensor, or a callable providing such.",tf.summary.record_if.yaml,2
1092,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1093,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1094,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,2
1095,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
1096,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_none_equal.yaml,2
1097,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_none_equal.yaml,2
1098,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_greater_equal.yaml,2
1099,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_greater_equal.yaml,2
1100,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
1101,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor`.,tf.slice.yaml,2
1102,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor`.,tf.slice.yaml,2
1103,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` containing the signals to take the DCT of.",tf.signal.dct.yaml,2
1104,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
1105,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.substr.yaml,2
1106,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Tensor of strings,tf.compat.v1.strings.substr.yaml,2
1107,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_non_negative.yaml,2
1108,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1109,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1110,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1111,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.math.is_strictly_increasing.yaml,2
1112,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
1113,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A UTF-8 string tensor value.,tf.summary.text.yaml,2
1114,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A string `Tensor` or `RaggedTensor`: the strings to split.,tf.strings.bytes_split.yaml,2
1115,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_negative.yaml,2
1116,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `[..., num_mel_bins]` `float32`/`float64` `Tensor`of log-magnitude mel-scale spectrograms.",tf.signal.mfccs_from_log_mel_spectrograms.yaml,2
1117,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.math.in_top_k.yaml,2
1118,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.stft.yaml,2
1119,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.stft.yaml,2
1120,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.signal.stft.yaml,2
1121,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `[..., samples]` `float32`/`float64` `Tensor` of real-valued signals.",tf.signal.stft.yaml,2
1122,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
1123,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_number.yaml,2
1124,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.strings.unicode_script.yaml,2
1125,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A Tensor of int32 Unicode code points.,tf.strings.unicode_script.yaml,2
1126,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
1127,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
1128,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D scalar `Tensor`.,tf.compat.v1.train.piecewise_constant.yaml,2
1129,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
1130,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1131,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1132,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_equal.yaml,2
1133,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_equal.yaml,2
1134,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_non_positive.yaml,2
1135,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
1136,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
1137,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,2
1138,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",(Batch of) `float`-like matrix-shaped `Tensor`(s) which are to be pseudo-inverted.,tf.linalg.matrix_rank.yaml,2
1139,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.substr.yaml,2
1140,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Tensor of strings,tf.compat.v1.substr.yaml,2
1141,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
1142,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer can be given which means a single dimension `Tensor` with given width.,tf.feature_column.numeric_column.yaml,2
1143,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
1144,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A string `Tensor` of rank `N`, the strings to split.",tf.compat.v1.strings.split.yaml,2
1145,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`0-D` string `Tensor`, the delimiter character.",tf.compat.v1.strings.split.yaml,2
1146,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
1147,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
1148,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
1149,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
1150,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of types `float32`, `float64`, `complex64`, `complex128`",tf.norm.yaml,2
1151,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,2
1152,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.estimator.classifier_parse_example_spec.yaml,2
1153,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.pad.yaml,2
1154,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.matching_files.yaml,2
1155,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,2
1156,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,2
1157,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
1158,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
1159,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,2
1160,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.ifft2d.yaml,2
1161,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,2
1162,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
1163,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
1164,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
1165,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_compressed.yaml,2
1166,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A Tensor of string which is compressed.,tf.io.decode_compressed.yaml,2
1167,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
1168,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
1169,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
1170,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or a scalar 'Tensor'.,tf.compat.v1.gather_nd.yaml,2
1171,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,2
1172,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_and_crop_jpeg.yaml,2
1173,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.io.decode_and_crop_jpeg.yaml,2
1174,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
1175,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",`Tensor` whose basetype is integer and is not quantized.,tf.compat.v1.assert_integer.yaml,2
1176,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
1177,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
1178,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
1179,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,2
1180,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D scalar `Tensor`.,tf.compat.v1.scalar_mul.yaml,2
1181,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
1182,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of string tensors.,tf.strings.join.yaml,2
1183,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
1184,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
1185,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`Tensor` of types `float32`, `float64`, `complex64`, `complex128`",tf.compat.v1.norm.yaml,2
1186,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
1187,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
1188,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
1189,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
1190,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
1191,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
1192,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
1193,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
1194,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
1195,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unsorted_segment_join.yaml,2
1196,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
1197,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An int Tensor specifying which of `branch_fns` should be executed.,tf.switch_case.yaml,2
1198,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,2
1199,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or a scalar 'Tensor'.,tf.gather_nd.yaml,2
1200,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `bool`,tf.compat.v1.where.yaml,2
1201,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.io.encode_proto.yaml,2
1202,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Tensor of int32 with shape `[batch_shape, len(field_names)]`.",tf.io.encode_proto.yaml,2
1203,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
1204,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar `int32 Tensor`.,tf.histogram_fixed_width_bins.yaml,2
1205,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.histogram_fixed_width_bins.yaml,2
1206,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Scalar `Tensor`.,tf.compat.v1.assert_rank_at_least.yaml,2
1207,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_rank_at_least.yaml,2
1208,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` with floating point or complex dtype.,tf.math.unsorted_segment_sqrt_n.yaml,2
1209,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer scalar `Tensor`.,tf.math.unsorted_segment_sqrt_n.yaml,2
1210,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,2
1211,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.debugging.assert_less_equal.yaml,2
1212,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_less_equal.yaml,2
1213,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The boolean tensor to reduce.,tf.reduce_all.yaml,2
1214,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
1215,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,2
1216,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.math.is_non_decreasing.yaml,2
1217,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Boolean, whether `output` is the result of a softmax, or is a tensor of logits.",tf.keras.backend.categorical_crossentropy.yaml,2
1218,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_fast.yaml,2
1219,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1220,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1221,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,2
1222,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
1223,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,2
1224,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1225,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1226,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1227,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
1228,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",0-D `int32` `Tensor`.,tf.math.top_k.yaml,2
1229,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A bool indicating whether the resulted tensor needs to be multiplied with gamma.,tf.nn.batch_norm_with_global_normalization.yaml,2
1230,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","integer tensor, all its values <= maxlen.",tf.sequence_mask.yaml,2
1231,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","scalar integer tensor, size of last dimension of returned tensor.",tf.sequence_mask.yaml,2
1232,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,2
1233,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `Tensor` objects with specific types.,tf.io.decode_csv.yaml,2
1234,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
1235,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_csv.yaml,2
1236,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
1237,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
1238,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
1239,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,2
1240,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
1241,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumsum.yaml,2
1242,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
1243,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.math.in_top_k.yaml,2
1244,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","String, dtype of returned tensor.",tf.keras.backend.random_normal.yaml,2
1245,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
1246,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
1247,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` indicating the axis to frame.,tf.signal.frame.yaml,2
1248,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or scalar `Tensor`.,tf.signal.frame.yaml,2
1249,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An integer or scalar `Tensor`.,tf.signal.frame.yaml,2
1250,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
1251,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Numeric `Tensor`.,tf.compat.v1.assert_less_equal.yaml,2
1252,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Numeric `Tensor`, same dtype as and broadcastable to `x`.",tf.compat.v1.assert_less_equal.yaml,2
1253,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
1254,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A string template to format tensor values into.,tf.strings.format.yaml,2
1255,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","String, dtype of returned tensor.",tf.keras.backend.random_uniform.yaml,2
1256,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
1257,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A Scalar `float32` `Tensor` indicating the sample rate of the signal in hertz.,tf.compat.v1.summary.audio2.yaml,2
1258,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
1259,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
1260,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar `Tensor` with the same type as x.,tf.nn.dropout.yaml,2
1261,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_proto.yaml,2
1262,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
1263,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
1264,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
1265,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,2
1266,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1267,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1268,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1269,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1270,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.ifft3d.yaml,2
1271,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
1272,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
1273,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
1274,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
1275,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","If it is a string, it is used as a key to fetch weight tensor from the `features`.",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
1276,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
1277,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Float or complex `Tensor`.,tf.debugging.assert_near.yaml,2
1278,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Float or complex `Tensor`, same dtype as and broadcastable to `x`.",tf.debugging.assert_near.yaml,2
1279,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
1280,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
1281,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32` or `int64` (default: 0).,tf.math.cumulative_logsumexp.yaml,2
1282,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_base64.yaml,2
1283,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
1284,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A scalar string Tensor, a single serialized Example.",tf.io.parse_single_example.yaml,2
1285,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
1286,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
1287,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
1288,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
1289,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Debug mode for tensor values, as a string.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
1290,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Dump data from only the tensors of which the specified dtypes.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
1291,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
1292,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
1293,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
1294,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
1295,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `string`.,tf.strings.strip.yaml,2
1296,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A string `Tensor` of any shape.,tf.strings.strip.yaml,2
1297,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` type bool.,tf.math.logical_xor.yaml,2
1298,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type bool.,tf.math.logical_xor.yaml,2
1299,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
1300,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,2
1301,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
1302,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `tf.string` tensor.,tf.strings.reduce_join.yaml,2
1303,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A complex tensor.,tf.signal.fft.yaml,2
1304,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
1305,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `float32`.,tf.audio.encode_wav.yaml,2
1306,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})",A `Tensor` of type `int32`.,tf.audio.encode_wav.yaml,2
1307,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","A string `Tensor` of rank `N`, the strings to split.",tf.strings.split.yaml,2
1308,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`0-D` string `Tensor`, the delimiter string.",tf.strings.split.yaml,2
1309,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1310,71,0.06899956121105748,629,"frozenset({'SOME_DTYPE', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1311,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.group.yaml,2
1312,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.conv1d.yaml,2
1313,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Name used to scope the operation.,tf.nn.weighted_moments.yaml,2
1314,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,2
1315,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.band_part.yaml,2
1316,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,2
1317,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.mask.yaml,2
1318,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,2
1319,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,2
1320,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,2
1321,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,2
1322,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reciprocal.yaml,2
1323,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.xlogy.yaml,2
1324,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,2
1325,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,2
1326,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.encode_png.yaml,2
1327,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_max.yaml,2
1328,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,2
1329,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,2
1330,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.split.yaml,2
1331,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,2
1332,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,2
1333,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,2
1334,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,2
1335,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitcast.yaml,2
1336,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,2
1337,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,2
1338,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,2
1339,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,2
1340,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.concat.yaml,2
1341,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,2
1342,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.zeta.yaml,2
1343,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,2
1344,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.solve.yaml,2
1345,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,2
1346,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.tanh.yaml,2
1347,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,2
1348,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,2
1349,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,2
1350,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,2
1351,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,2
1352,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,2
1353,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.shuffle.yaml,2
1354,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,2
1355,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.lbeta.yaml,2
1356,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,2
1357,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.idct.yaml,2
1358,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.polyval.yaml,2
1359,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.relu6.yaml,2
1360,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,2
1361,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
1362,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,2
1363,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.resize.yaml,2
1364,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Name used to scope the operation.,tf.compat.v1.nn.weighted_moments.yaml,2
1365,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,2
1366,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.eig.yaml,2
1367,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,2
1368,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,2
1369,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.conv3d.yaml,2
1370,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.substr.yaml,2
1371,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.split.yaml,2
1372,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.cast.yaml,2
1373,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,2
1374,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.broadcast_to.yaml,2
1375,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.total_variation.yaml,2
1376,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.sigmoid.yaml,2
1377,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.is_nan.yaml,2
1378,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
1379,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.clip_by_value.yaml,2
1380,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.timestamp.yaml,2
1381,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,2
1382,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,2
1383,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.sign.yaml,2
1384,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,2
1385,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,2
1386,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,2
1387,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,2
1388,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,2
1389,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.sqrt.yaml,2
1390,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.nn.avg_pool.yaml,2
1391,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.add_n.yaml,2
1392,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation.,tf.debugging.assert_scalar.yaml,2
1393,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,2
1394,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.dtypes.complex.yaml,2
1395,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.unstack.yaml,2
1396,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,2
1397,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,2
1398,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.random.categorical.yaml,2
1399,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.fft3d.yaml,2
1400,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.trace.yaml,2
1401,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,2
1402,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,2
1403,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,2
1404,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",`Tensor` or the `name` of the operation that contains the global step.,tf.compat.v1.train.global_step.yaml,2
1405,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",optional name of the operation.,tf.sparse.maximum.yaml,2
1406,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.log1p.yaml,2
1407,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.erfinv.yaml,2
1408,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,2
1409,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.floordiv.yaml,2
1410,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,2
1411,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_min.yaml,2
1412,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.igamma.yaml,2
1413,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.encode_base64.yaml,2
1414,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,2
1415,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.greater_equal.yaml,2
1416,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation.,tf.debugging.assert_type.yaml,2
1417,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,2
1418,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,2
1419,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,2
1420,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,2
1421,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,2
1422,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,2
1423,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,2
1424,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,2
1425,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,2
1426,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.sin.yaml,2
1427,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,2
1428,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,2
1429,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,2
1430,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.softplus.yaml,2
1431,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,2
1432,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.unique.yaml,2
1433,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,2
1434,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.subtract.yaml,2
1435,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.elu.yaml,2
1436,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,2
1437,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.dynamic_partition.yaml,2
1438,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,2
1439,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.tan.yaml,2
1440,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.not_equal.yaml,2
1441,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
1442,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.write_file.yaml,2
1443,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.zeros_like.yaml,2
1444,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.asinh.yaml,2
1445,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,2
1446,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional),tf.io.decode_image.yaml,2
1447,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,2
1448,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,2
1449,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",optional name of the operation.,tf.sparse.softmax.yaml,2
1450,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,2
1451,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.read_file.yaml,2
1452,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.ifft.yaml,2
1453,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,2
1454,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,2
1455,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.truediv.yaml,2
1456,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,2
1457,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,2
1458,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,2
1459,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,2
1460,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
1461,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
1462,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,2
1463,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,2
1464,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,2
1465,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation.,tf.compat.v1.assert_scalar.yaml,2
1466,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.as_string.yaml,2
1467,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,2
1468,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.crelu.yaml,2
1469,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,2
1470,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,2
1471,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.segment_mean.yaml,2
1472,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,2
1473,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.squared_difference.yaml,2
1474,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.conv2d.yaml,2
1475,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,2
1476,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.ones_like.yaml,2
1477,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,2
1478,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,2
1479,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,2
1480,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,2
1481,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.unravel_index.yaml,2
1482,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
1483,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,2
1484,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,2
1485,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,2
1486,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,2
1487,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.upper.yaml,2
1488,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,2
1489,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.ndtri.yaml,2
1490,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.Assert.yaml,2
1491,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.less.yaml,2
1492,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
1493,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.realdiv.yaml,2
1494,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.hann_window.yaml,2
1495,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,2
1496,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,2
1497,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,2
1498,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,2
1499,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,2
1500,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,2
1501,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,2
1502,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.print.yaml,2
1503,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",optional name of the operation.,tf.sparse.minimum.yaml,2
1504,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,2
1505,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,2
1506,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,2
1507,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,2
1508,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,2
1509,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,2
1510,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,2
1511,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,2
1512,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,2
1513,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,2
1514,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.is_finite.yaml,2
1515,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,2
1516,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,2
1517,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,2
1518,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.truncatediv.yaml,2
1519,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.softmax.yaml,2
1520,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.imag.yaml,2
1521,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
1522,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.atan.yaml,2
1523,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.angle.yaml,2
1524,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.nextafter.yaml,2
1525,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,2
1526,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,2
1527,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
1528,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name of the operation (optional).,tf.where.yaml,2
1529,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.log.yaml,2
1530,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.ragged.range.yaml,2
1531,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,2
1532,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,2
1533,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.gather.yaml,2
1534,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,2
1535,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.linalg.svd.yaml,2
1536,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.asin.yaml,2
1537,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.reshape.yaml,2
1538,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
1539,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.cosh.yaml,2
1540,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.abs.yaml,2
1541,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,2
1542,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.precision_at_k.yaml,2
1543,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,2
1544,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,2
1545,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,2
1546,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,2
1547,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,2
1548,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,2
1549,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,2
1550,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,2
1551,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.searchsorted.yaml,2
1552,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,2
1553,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,2
1554,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,2
1555,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Name for the operation (optional).,tf.linalg.matvec.yaml,2
1556,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.diag.yaml,2
1557,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,2
1558,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.rint.yaml,2
1559,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,2
1560,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,2
1561,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,2
1562,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,2
1563,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
1564,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,2
1565,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.round.yaml,2
1566,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.eigvals.yaml,2
1567,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.greater.yaml,2
1568,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,2
1569,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.clip_by_norm.yaml,2
1570,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,2
1571,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,2
1572,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.segment_prod.yaml,2
1573,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,2
1574,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,2
1575,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,2
1576,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (defaults to 'histogram_fixed_width').,tf.histogram_fixed_width.yaml,2
1577,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.logm.yaml,2
1578,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,2
1579,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.ifftshift.yaml,2
1580,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,2
1581,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
1582,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.identity_n.yaml,2
1583,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.fingerprint.yaml,2
1584,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_gif.yaml,2
1585,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.transpose.yaml,2
1586,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,2
1587,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.inv.yaml,2
1588,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,2
1589,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,2
1590,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,2
1591,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.negative.yaml,2
1592,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,2
1593,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,2
1594,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.fft2d.yaml,2
1595,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,2
1596,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.hamming_window.yaml,2
1597,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,2
1598,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,2
1599,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.uniform.yaml,2
1600,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.segment_sum.yaml,2
1601,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.tensordot.yaml,2
1602,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
1603,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.range.yaml,2
1604,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.repeat.yaml,2
1605,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,2
1606,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
1607,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.add.yaml,2
1608,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
1609,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,2
1610,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,2
1611,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,2
1612,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,2
1613,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,2
1614,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,2
1615,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,2
1616,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.sort.yaml,2
1617,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.floor.yaml,2
1618,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,2
1619,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.squeeze.yaml,2
1620,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,2
1621,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.cumprod.yaml,2
1622,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,2
1623,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_any.yaml,2
1624,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.floormod.yaml,2
1625,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.selu.yaml,2
1626,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.atan2.yaml,2
1627,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,2
1628,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.erf.yaml,2
1629,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,2
1630,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,2
1631,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,2
1632,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.normal.yaml,2
1633,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
1634,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,2
1635,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,2
1636,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.lower.yaml,2
1637,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.conj.yaml,2
1638,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,2
1639,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.case.yaml,2
1640,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,2
1641,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
1642,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.io.parse_example.yaml,2
1643,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,2
1644,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,2
1645,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.logical_not.yaml,2
1646,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,2
1647,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.unique_with_counts.yaml,2
1648,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.segment_max.yaml,2
1649,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,2
1650,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,2
1651,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,2
1652,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,2
1653,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,2
1654,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,2
1655,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,2
1656,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.fill.yaml,2
1657,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,2
1658,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",name: A name for the operation (optional).,tf.einsum.yaml,2
1659,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,2
1660,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,2
1661,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.bias_add.yaml,2
1662,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,2
1663,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,2
1664,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,2
1665,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,2
1666,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,2
1667,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,2
1668,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.scatter_nd.yaml,2
1669,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.igammac.yaml,2
1670,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_png.yaml,2
1671,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.ones.yaml,2
1672,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,2
1673,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.linalg.eigh.yaml,2
1674,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.argmin.yaml,2
1675,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,2
1676,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.ensure_shape.yaml,2
1677,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.xdivy.yaml,2
1678,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,2
1679,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strided_slice.yaml,2
1680,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
1681,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,2
1682,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
1683,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,2
1684,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,2
1685,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,2
1686,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Name for the operation (optional).,tf.linalg.matmul.yaml,2
1687,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.slice.yaml,2
1688,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.dct.yaml,2
1689,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.acos.yaml,2
1690,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.argmax.yaml,2
1691,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.fftshift.yaml,2
1692,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",This corresponds to the`OpDef.name` field for the proto that defines the operation.,tf.no_gradient.yaml,2
1693,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,2
1694,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,2
1695,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,2
1696,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,2
1697,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.py_function.yaml,2
1698,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,2
1699,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,2
1700,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,2
1701,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.invert.yaml,2
1702,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.square.yaml,2
1703,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.segment_min.yaml,2
1704,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,2
1705,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linspace.yaml,2
1706,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.det.yaml,2
1707,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,2
1708,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.stft.yaml,2
1709,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.to_number.yaml,2
1710,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,2
1711,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,2
1712,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,2
1713,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
1714,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,2
1715,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,2
1716,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.pow.yaml,2
1717,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.exp.yaml,2
1718,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,2
1719,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.erfc.yaml,2
1720,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_raw.yaml,2
1721,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,2
1722,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,2
1723,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,2
1724,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,2
1725,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,2
1726,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.slice.yaml,2
1727,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,2
1728,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.polygamma.yaml,2
1729,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,2
1730,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.minimum.yaml,2
1731,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,2
1732,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.transpose.yaml,2
1733,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.atanh.yaml,2
1734,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.qr.yaml,2
1735,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation.,tf.zeros.yaml,2
1736,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.edit_distance.yaml,2
1737,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.rank.yaml,2
1738,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,2
1739,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,2
1740,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,2
1741,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,2
1742,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.relu.yaml,2
1743,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.pad.yaml,2
1744,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,2
1745,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.multiply.yaml,2
1746,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,2
1747,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.matching_files.yaml,2
1748,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.recall_at_k.yaml,2
1749,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.random.poisson.yaml,2
1750,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,2
1751,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,2
1752,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,2
1753,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.tile.yaml,2
1754,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,2
1755,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,2
1756,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.equal.yaml,2
1757,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional),tf.io.is_jpeg.yaml,2
1758,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.shape.yaml,2
1759,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,2
1760,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.logical_and.yaml,2
1761,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
1762,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,2
1763,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.betainc.yaml,2
1764,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,2
1765,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.acosh.yaml,2
1766,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,2
1767,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,2
1768,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,2
1769,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,2
1770,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,2
1771,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,2
1772,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.random.gamma.yaml,2
1773,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,2
1774,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.join.yaml,2
1775,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.stack.yaml,2
1776,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.logical_or.yaml,2
1777,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,2
1778,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.no_op.yaml,2
1779,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.quantize.yaml,2
1780,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,2
1781,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,2
1782,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.switch_case.yaml,2
1783,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.gather_nd.yaml,2
1784,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name of the operation (optional),tf.compat.v1.where.yaml,2
1785,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.encode_proto.yaml,2
1786,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.rsqrt.yaml,2
1787,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,2
1788,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (defaults to 'histogram_fixed_width').,tf.histogram_fixed_width_bins.yaml,2
1789,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,2
1790,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,2
1791,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,2
1792,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.less_equal.yaml,2
1793,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,2
1794,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,2
1795,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.guarantee_const.yaml,2
1796,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.softsign.yaml,2
1797,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.lgamma.yaml,2
1798,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,2
1799,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.reduce_all.yaml,2
1800,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",(Optional) A name for the operation.,tf.numpy_function.yaml,2
1801,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.truncatemod.yaml,2
1802,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,2
1803,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,2
1804,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,2
1805,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.batch_to_space.yaml,2
1806,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.is_inf.yaml,2
1807,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,2
1808,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
1809,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.boolean_mask.yaml,2
1810,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.identity.yaml,2
1811,89,0.06384379113646337,582,"frozenset({'operation', 'name'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,2
1812,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,2
1813,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,2
1814,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.maximum.yaml,2
1815,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.math.top_k.yaml,2
1816,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,2
1817,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,2
1818,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,2
1819,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,2
1820,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,2
1821,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_csv.yaml,2
1822,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.one_hot.yaml,2
1823,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,2
1824,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.space_to_batch.yaml,2
1825,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.argsort.yaml,2
1826,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.cumsum.yaml,2
1827,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,2
1828,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.parallel_stack.yaml,2
1829,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,2
1830,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.in_top_k.yaml,2
1831,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,2
1832,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,2
1833,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.sinh.yaml,2
1834,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",An optional name for the operation.,tf.signal.frame.yaml,2
1835,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,2
1836,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,2
1837,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.format.yaml,2
1838,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,2
1839,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,2
1840,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,2
1841,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,2
1842,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.dropout.yaml,2
1843,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_proto.yaml,2
1844,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,2
1845,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,2
1846,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.reverse.yaml,2
1847,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,2
1848,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
1849,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,2
1850,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.digamma.yaml,2
1851,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,2
1852,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
1853,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,2
1854,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,2
1855,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,2
1856,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,2
1857,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.cross.yaml,2
1858,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.stop_gradient.yaml,2
1859,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,2
1860,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.expm1.yaml,2
1861,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.summary.flush.yaml,2
1862,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,2
1863,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.ceil.yaml,2
1864,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",Optional name for the operation.,tf.nn.max_pool.yaml,2
1865,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,2
1866,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,2
1867,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.io.decode_base64.yaml,2
1868,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,2
1869,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,2
1870,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,2
1871,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,2
1872,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.real.yaml,2
1873,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.size.yaml,2
1874,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,2
1875,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.roll.yaml,2
1876,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",name: A name for the operation (optional).,tf.meshgrid.yaml,2
1877,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.math.cos.yaml,2
1878,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.image.extract_patches.yaml,2
1879,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,2
1880,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,2
1881,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.linalg.lu.yaml,2
1882,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.strip.yaml,2
1883,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.compat.v1.case.yaml,2
1884,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,2
1885,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.shape_n.yaml,2
1886,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.signal.fft.yaml,2
1887,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,2
1888,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,2
1889,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,2
1890,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for this operation (optional).,tf.image.random_crop.yaml,2
1891,89,0.06384379113646337,582,"frozenset({'operation', 'name'})",A name for the operation (optional).,tf.strings.split.yaml,2
1892,89,0.06384379113646337,582,"frozenset({'operation', 'name'})","Name of new update operation, and namespace for other dependent ops.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
1893,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.group.yaml,2
1894,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.conv1d.yaml,2
1895,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,2
1896,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.band_part.yaml,2
1897,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,2
1898,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.mask.yaml,2
1899,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,2
1900,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,2
1901,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,2
1902,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,2
1903,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reciprocal.yaml,2
1904,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.xlogy.yaml,2
1905,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,2
1906,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,2
1907,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.encode_png.yaml,2
1908,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_max.yaml,2
1909,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,2
1910,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,2
1911,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.split.yaml,2
1912,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,2
1913,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,2
1914,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,2
1915,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,2
1916,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitcast.yaml,2
1917,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,2
1918,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,2
1919,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,2
1920,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,2
1921,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.concat.yaml,2
1922,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,2
1923,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.zeta.yaml,2
1924,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,2
1925,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.solve.yaml,2
1926,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,2
1927,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.tanh.yaml,2
1928,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,2
1929,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,2
1930,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,2
1931,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,2
1932,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,2
1933,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,2
1934,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.shuffle.yaml,2
1935,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,2
1936,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.lbeta.yaml,2
1937,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,2
1938,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.idct.yaml,2
1939,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.polyval.yaml,2
1940,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.relu6.yaml,2
1941,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,2
1942,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
1943,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,2
1944,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.resize.yaml,2
1945,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,2
1946,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.eig.yaml,2
1947,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,2
1948,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,2
1949,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.conv3d.yaml,2
1950,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.substr.yaml,2
1951,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.split.yaml,2
1952,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.cast.yaml,2
1953,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,2
1954,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.broadcast_to.yaml,2
1955,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.total_variation.yaml,2
1956,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.sigmoid.yaml,2
1957,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.is_nan.yaml,2
1958,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
1959,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.clip_by_value.yaml,2
1960,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.timestamp.yaml,2
1961,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,2
1962,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,2
1963,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.sign.yaml,2
1964,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,2
1965,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,2
1966,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,2
1967,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,2
1968,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,2
1969,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.sqrt.yaml,2
1970,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.nn.avg_pool.yaml,2
1971,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.add_n.yaml,2
1972,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,2
1973,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.dtypes.complex.yaml,2
1974,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.unstack.yaml,2
1975,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,2
1976,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,2
1977,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.random.categorical.yaml,2
1978,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.fft3d.yaml,2
1979,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.trace.yaml,2
1980,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,2
1981,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,2
1982,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,2
1983,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",optional name of the operation.,tf.sparse.maximum.yaml,2
1984,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.log1p.yaml,2
1985,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.erfinv.yaml,2
1986,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,2
1987,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.floordiv.yaml,2
1988,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,2
1989,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_min.yaml,2
1990,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.igamma.yaml,2
1991,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.encode_base64.yaml,2
1992,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,2
1993,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.greater_equal.yaml,2
1994,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,2
1995,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,2
1996,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,2
1997,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,2
1998,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,2
1999,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,2
2000,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,2
2001,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,2
2002,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,2
2003,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.sin.yaml,2
2004,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,2
2005,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,2
2006,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,2
2007,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.softplus.yaml,2
2008,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,2
2009,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.unique.yaml,2
2010,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,2
2011,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.subtract.yaml,2
2012,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.elu.yaml,2
2013,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,2
2014,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.dynamic_partition.yaml,2
2015,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,2
2016,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.tan.yaml,2
2017,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.not_equal.yaml,2
2018,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
2019,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.write_file.yaml,2
2020,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.zeros_like.yaml,2
2021,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.asinh.yaml,2
2022,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,2
2023,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional),tf.io.decode_image.yaml,2
2024,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,2
2025,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,2
2026,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",optional name of the operation.,tf.sparse.softmax.yaml,2
2027,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,2
2028,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.read_file.yaml,2
2029,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.ifft.yaml,2
2030,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,2
2031,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,2
2032,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.truediv.yaml,2
2033,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,2
2034,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,2
2035,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,2
2036,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,2
2037,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
2038,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,2
2039,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,2
2040,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,2
2041,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.as_string.yaml,2
2042,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,2
2043,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.crelu.yaml,2
2044,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,2
2045,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,2
2046,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.segment_mean.yaml,2
2047,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,2
2048,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.squared_difference.yaml,2
2049,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.conv2d.yaml,2
2050,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,2
2051,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.ones_like.yaml,2
2052,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,2
2053,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,2
2054,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,2
2055,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,2
2056,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.unravel_index.yaml,2
2057,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
2058,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,2
2059,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,2
2060,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,2
2061,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,2
2062,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.upper.yaml,2
2063,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,2
2064,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.ndtri.yaml,2
2065,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.Assert.yaml,2
2066,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.less.yaml,2
2067,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
2068,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.realdiv.yaml,2
2069,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.hann_window.yaml,2
2070,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,2
2071,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,2
2072,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,2
2073,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,2
2074,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,2
2075,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,2
2076,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,2
2077,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.print.yaml,2
2078,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",optional name of the operation.,tf.sparse.minimum.yaml,2
2079,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,2
2080,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,2
2081,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,2
2082,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,2
2083,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,2
2084,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,2
2085,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,2
2086,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
2087,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,2
2088,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,2
2089,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,2
2090,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.is_finite.yaml,2
2091,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,2
2092,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,2
2093,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,2
2094,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.truncatediv.yaml,2
2095,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.softmax.yaml,2
2096,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.imag.yaml,2
2097,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
2098,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.atan.yaml,2
2099,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.angle.yaml,2
2100,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.nextafter.yaml,2
2101,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,2
2102,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,2
2103,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
2104,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name of the operation (optional).,tf.where.yaml,2
2105,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.log.yaml,2
2106,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,2
2107,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,2
2108,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.gather.yaml,2
2109,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,2
2110,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.linalg.svd.yaml,2
2111,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.asin.yaml,2
2112,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
2113,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.cosh.yaml,2
2114,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.abs.yaml,2
2115,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,2
2116,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,2
2117,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,2
2118,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,2
2119,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,2
2120,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,2
2121,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,2
2122,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,2
2123,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,2
2124,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.searchsorted.yaml,2
2125,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,2
2126,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,2
2127,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,2
2128,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Name for the operation (optional).,tf.linalg.matvec.yaml,2
2129,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.diag.yaml,2
2130,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,2
2131,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.rint.yaml,2
2132,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,2
2133,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,2
2134,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,2
2135,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,2
2136,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,2
2137,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.round.yaml,2
2138,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.eigvals.yaml,2
2139,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.greater.yaml,2
2140,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,2
2141,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
2142,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.clip_by_norm.yaml,2
2143,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,2
2144,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,2
2145,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.segment_prod.yaml,2
2146,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,2
2147,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,2
2148,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,2
2149,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.logm.yaml,2
2150,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,2
2151,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.ifftshift.yaml,2
2152,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,2
2153,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,2
2154,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.identity_n.yaml,2
2155,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.fingerprint.yaml,2
2156,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_gif.yaml,2
2157,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.transpose.yaml,2
2158,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,2
2159,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.inv.yaml,2
2160,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,2
2161,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,2
2162,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,2
2163,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.negative.yaml,2
2164,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,2
2165,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,2
2166,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.fft2d.yaml,2
2167,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,2
2168,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.hamming_window.yaml,2
2169,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,2
2170,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,2
2171,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.uniform.yaml,2
2172,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.segment_sum.yaml,2
2173,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.tensordot.yaml,2
2174,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
2175,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,2
2176,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
2177,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.add.yaml,2
2178,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
2179,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,2
2180,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,2
2181,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,2
2182,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,2
2183,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,2
2184,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,2
2185,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,2
2186,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.sort.yaml,2
2187,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.floor.yaml,2
2188,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,2
2189,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.squeeze.yaml,2
2190,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,2
2191,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.cumprod.yaml,2
2192,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,2
2193,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_any.yaml,2
2194,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.floormod.yaml,2
2195,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.selu.yaml,2
2196,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.atan2.yaml,2
2197,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,2
2198,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.erf.yaml,2
2199,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,2
2200,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,2
2201,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,2
2202,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.normal.yaml,2
2203,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
2204,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,2
2205,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,2
2206,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.lower.yaml,2
2207,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.conj.yaml,2
2208,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,2
2209,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.case.yaml,2
2210,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,2
2211,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
2212,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.io.parse_example.yaml,2
2213,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,2
2214,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,2
2215,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.logical_not.yaml,2
2216,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,2
2217,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.unique_with_counts.yaml,2
2218,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.segment_max.yaml,2
2219,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,2
2220,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,2
2221,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,2
2222,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,2
2223,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,2
2224,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,2
2225,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,2
2226,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.fill.yaml,2
2227,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,2
2228,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",name: A name for the operation (optional).,tf.einsum.yaml,2
2229,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,2
2230,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,2
2231,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.bias_add.yaml,2
2232,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,2
2233,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,2
2234,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,2
2235,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,2
2236,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,2
2237,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,2
2238,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.scatter_nd.yaml,2
2239,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.igammac.yaml,2
2240,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_png.yaml,2
2241,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,2
2242,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.linalg.eigh.yaml,2
2243,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.argmin.yaml,2
2244,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,2
2245,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.ensure_shape.yaml,2
2246,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.xdivy.yaml,2
2247,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,2
2248,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strided_slice.yaml,2
2249,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
2250,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,2
2251,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
2252,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,2
2253,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,2
2254,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,2
2255,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Name for the operation (optional).,tf.linalg.matmul.yaml,2
2256,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.slice.yaml,2
2257,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.dct.yaml,2
2258,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.acos.yaml,2
2259,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.argmax.yaml,2
2260,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.fftshift.yaml,2
2261,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,2
2262,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,2
2263,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,2
2264,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,2
2265,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.py_function.yaml,2
2266,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,2
2267,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,2
2268,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,2
2269,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.invert.yaml,2
2270,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.square.yaml,2
2271,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.segment_min.yaml,2
2272,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,2
2273,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linspace.yaml,2
2274,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.det.yaml,2
2275,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,2
2276,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.stft.yaml,2
2277,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.to_number.yaml,2
2278,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,2
2279,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,2
2280,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,2
2281,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
2282,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,2
2283,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,2
2284,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.pow.yaml,2
2285,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.exp.yaml,2
2286,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,2
2287,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.erfc.yaml,2
2288,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_raw.yaml,2
2289,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,2
2290,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,2
2291,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,2
2292,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,2
2293,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,2
2294,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.slice.yaml,2
2295,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,2
2296,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.polygamma.yaml,2
2297,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,2
2298,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.minimum.yaml,2
2299,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,2
2300,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.transpose.yaml,2
2301,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.atanh.yaml,2
2302,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.qr.yaml,2
2303,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.edit_distance.yaml,2
2304,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.rank.yaml,2
2305,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,2
2306,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,2
2307,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,2
2308,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,2
2309,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.relu.yaml,2
2310,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.pad.yaml,2
2311,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,2
2312,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.multiply.yaml,2
2313,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,2
2314,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.matching_files.yaml,2
2315,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.random.poisson.yaml,2
2316,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,2
2317,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,2
2318,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,2
2319,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.tile.yaml,2
2320,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,2
2321,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,2
2322,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.equal.yaml,2
2323,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional),tf.io.is_jpeg.yaml,2
2324,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.shape.yaml,2
2325,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
2326,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,2
2327,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.logical_and.yaml,2
2328,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
2329,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,2
2330,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.betainc.yaml,2
2331,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,2
2332,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.acosh.yaml,2
2333,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,2
2334,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,2
2335,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,2
2336,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,2
2337,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,2
2338,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,2
2339,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.random.gamma.yaml,2
2340,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,2
2341,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.join.yaml,2
2342,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.stack.yaml,2
2343,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.logical_or.yaml,2
2344,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,2
2345,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.no_op.yaml,2
2346,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.quantize.yaml,2
2347,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,2
2348,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,2
2349,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.switch_case.yaml,2
2350,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.gather_nd.yaml,2
2351,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name of the operation (optional),tf.compat.v1.where.yaml,2
2352,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.encode_proto.yaml,2
2353,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.rsqrt.yaml,2
2354,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,2
2355,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,2
2356,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,2
2357,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,2
2358,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.less_equal.yaml,2
2359,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,2
2360,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,2
2361,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.guarantee_const.yaml,2
2362,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.softsign.yaml,2
2363,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.lgamma.yaml,2
2364,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,2
2365,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.reduce_all.yaml,2
2366,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(Optional) A name for the operation.,tf.numpy_function.yaml,2
2367,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.truncatemod.yaml,2
2368,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,2
2369,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,2
2370,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,2
2371,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.batch_to_space.yaml,2
2372,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.is_inf.yaml,2
2373,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,2
2374,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
2375,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.boolean_mask.yaml,2
2376,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.identity.yaml,2
2377,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,2
2378,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,2
2379,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,2
2380,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.maximum.yaml,2
2381,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.math.top_k.yaml,2
2382,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,2
2383,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,2
2384,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,2
2385,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,2
2386,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,2
2387,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_csv.yaml,2
2388,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.one_hot.yaml,2
2389,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,2
2390,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.space_to_batch.yaml,2
2391,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.argsort.yaml,2
2392,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.cumsum.yaml,2
2393,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,2
2394,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.parallel_stack.yaml,2
2395,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,2
2396,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.in_top_k.yaml,2
2397,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,2
2398,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,2
2399,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.sinh.yaml,2
2400,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",An optional name for the operation.,tf.signal.frame.yaml,2
2401,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,2
2402,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,2
2403,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.format.yaml,2
2404,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,2
2405,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,2
2406,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,2
2407,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,2
2408,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.dropout.yaml,2
2409,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_proto.yaml,2
2410,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,2
2411,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,2
2412,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.reverse.yaml,2
2413,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,2
2414,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
2415,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,2
2416,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.digamma.yaml,2
2417,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,2
2418,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
2419,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,2
2420,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,2
2421,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,2
2422,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,2
2423,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.cross.yaml,2
2424,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.stop_gradient.yaml,2
2425,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,2
2426,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.expm1.yaml,2
2427,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.summary.flush.yaml,2
2428,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,2
2429,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.ceil.yaml,2
2430,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",Optional name for the operation.,tf.nn.max_pool.yaml,2
2431,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,2
2432,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,2
2433,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.io.decode_base64.yaml,2
2434,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,2
2435,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,2
2436,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,2
2437,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,2
2438,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.real.yaml,2
2439,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.size.yaml,2
2440,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
2441,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,2
2442,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.roll.yaml,2
2443,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",name: A name for the operation (optional).,tf.meshgrid.yaml,2
2444,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.math.cos.yaml,2
2445,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.image.extract_patches.yaml,2
2446,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,2
2447,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,2
2448,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.linalg.lu.yaml,2
2449,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.strip.yaml,2
2450,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.compat.v1.case.yaml,2
2451,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,2
2452,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.shape_n.yaml,2
2453,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.signal.fft.yaml,2
2454,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,2
2455,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,2
2456,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,2
2457,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for this operation (optional).,tf.image.random_crop.yaml,2
2458,91,0.06208863536638877,566,"frozenset({'operation', 'optional'})",A name for the operation (optional).,tf.strings.split.yaml,2
2459,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.group.yaml,3
2460,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.conv1d.yaml,3
2461,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.zero_fraction.yaml,3
2462,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.band_part.yaml,3
2463,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.xw_plus_b.yaml,3
2464,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.mask.yaml,3
2465,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.extract_glimpse.yaml,3
2466,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.fused_batch_norm.yaml,3
2467,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.ragged.placeholder.yaml,3
2468,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.depth_to_space.yaml,3
2469,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reciprocal.yaml,3
2470,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.xlogy.yaml,3
2471,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_max.yaml,3
2472,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.space_to_depth.yaml,3
2473,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.encode_png.yaml,3
2474,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_max.yaml,3
2475,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0e.yaml,3
2476,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.dequantize.yaml,3
2477,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.split.yaml,3
2478,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_at_least.yaml,3
2479,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.local_response_normalization.yaml,3
2480,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_add.yaml,3
2481,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_truncated_normal.yaml,3
2482,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitcast.yaml,3
2483,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.tuple.yaml,3
2484,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_update.yaml,3
2485,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv1d.yaml,3
2486,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.diag_part.yaml,3
2487,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.concat.yaml,3
2488,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.fixed_unigram_candidate_sampler.yaml,3
2489,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.zeta.yaml,3
2490,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d.yaml,3
2491,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.solve.yaml,3
2492,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool_with_argmax.yaml,3
2493,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.tanh.yaml,3
2494,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_overlaps.yaml,3
2495,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.nce_loss.yaml,3
2496,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.inverse_time_decay.yaml,3
2497,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.overlap_and_add.yaml,3
2498,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.crelu.yaml,3
2499,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool2d.yaml,3
2500,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.shuffle.yaml,3
2501,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reciprocal_no_nan.yaml,3
2502,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.lbeta.yaml,3
2503,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sum.yaml,3
2504,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.idct.yaml,3
2505,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.polyval.yaml,3
2506,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.relu6.yaml,3
2507,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_normal.yaml,3
2508,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,3
2509,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.scalar_mul.yaml,3
2510,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.resize.yaml,3
2511,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.multiply_no_nan.yaml,3
2512,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.eig.yaml,3
2513,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_sub.yaml,3
2514,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.serialize_tensor.yaml,3
2515,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.conv3d.yaml,3
2516,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.substr.yaml,3
2517,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.split.yaml,3
2518,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.cast.yaml,3
2519,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.fractional_avg_pool.yaml,3
2520,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.broadcast_to.yaml,3
2521,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.total_variation.yaml,3
2522,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.sigmoid.yaml,3
2523,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.is_nan.yaml,3
2524,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.max_pool_with_argmax.yaml,3
2525,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.clip_by_value.yaml,3
2526,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.timestamp.yaml,3
2527,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_strong.yaml,3
2528,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater.yaml,3
2529,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.sign.yaml,3
2530,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.length.yaml,3
2531,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.conv_transpose.yaml,3
2532,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank.yaml,3
2533,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.convert_image_dtype.yaml,3
2534,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_saturation.yaml,3
2535,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.sqrt.yaml,3
2536,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool.yaml,3
2537,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.add_n.yaml,3
2538,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket.yaml,3
2539,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.dtypes.complex.yaml,3
2540,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.unstack.yaml,3
2541,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.log_poisson_loss.yaml,3
2542,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_hsv.yaml,3
2543,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.random.categorical.yaml,3
2544,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.fft3d.yaml,3
2545,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.trace.yaml,3
2546,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.accumulate_n.yaml,3
2547,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_fprint.yaml,3
2548,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.stateless_uniform.yaml,3
2549,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",optional name of the operation.,tf.sparse.maximum.yaml,3
2550,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.log1p.yaml,3
2551,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.erfinv.yaml,3
2552,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_add.yaml,3
2553,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.floordiv.yaml,3
2554,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag_part.yaml,3
2555,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_min.yaml,3
2556,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.igamma.yaml,3
2557,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.encode_base64.yaml,3
2558,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_in.yaml,3
2559,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.greater_equal.yaml,3
2560,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_sum.yaml,3
2561,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_update.yaml,3
2562,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.linalg.l2_normalize.yaml,3
2563,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.draw_bounding_boxes.yaml,3
2564,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less.yaml,3
2565,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.linear_to_mel_weight_matrix.yaml,3
2566,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.extract_glimpse.yaml,3
2567,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_mul.yaml,3
2568,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.nn.max_pool2d.yaml,3
2569,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.sin.yaml,3
2570,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign.yaml,3
2571,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.softmax.yaml,3
2572,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.encode_jpeg.yaml,3
2573,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.softplus.yaml,3
2574,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.quantization.quantize_and_dequantize.yaml,3
2575,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.unique.yaml,3
2576,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_min.yaml,3
2577,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.subtract.yaml,3
2578,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.elu.yaml,3
2579,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.math.l2_normalize.yaml,3
2580,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.dynamic_partition.yaml,3
2581,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.polynomial_decay.yaml,3
2582,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.tan.yaml,3
2583,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.not_equal.yaml,3
2584,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2585,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.write_file.yaml,3
2586,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.zeros_like.yaml,3
2587,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.asinh.yaml,3
2588,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.audio.decode_wav.yaml,3
2589,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional),tf.io.decode_image.yaml,3
2590,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.nn.avg_pool3d.yaml,3
2591,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.quantized_concat.yaml,3
2592,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",optional name of the operation.,tf.sparse.softmax.yaml,3
2593,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_matmul.yaml,3
2594,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.read_file.yaml,3
2595,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft.yaml,3
2596,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_json_example.yaml,3
2597,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d.yaml,3
2598,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.truediv.yaml,3
2599,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.ones_like.yaml,3
2600,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.verify_tensor_all_finite.yaml,3
2601,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_bmp.yaml,3
2602,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_all_finite.yaml,3
2603,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
2604,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_all.yaml,3
2605,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.debugging.check_numerics.yaml,3
2606,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_join.yaml,3
2607,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.as_string.yaml,3
2608,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_hue.yaml,3
2609,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.crelu.yaml,3
2610,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_example.yaml,3
2611,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.natural_exp_decay.yaml,3
2612,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.segment_mean.yaml,3
2613,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_hash_bucket.yaml,3
2614,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.squared_difference.yaml,3
2615,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.conv2d.yaml,3
2616,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.triangular_solve.yaml,3
2617,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.ones_like.yaml,3
2618,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_split.yaml,3
2619,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_near.yaml,3
2620,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.log_sigmoid.yaml,3
2621,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sqrt_n.yaml,3
2622,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.unravel_index.yaml,3
2623,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
2624,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.boolean_mask.yaml,3
2625,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_mean.yaml,3
2626,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.parse_tensor.yaml,3
2627,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.tensor_diag.yaml,3
2628,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.upper.yaml,3
2629,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_avg_pool.yaml,3
2630,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.ndtri.yaml,3
2631,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.Assert.yaml,3
2632,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.less.yaml,3
2633,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,3
2634,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.realdiv.yaml,3
2635,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.hann_window.yaml,3
2636,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.nce_loss.yaml,3
2637,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.floor_div.yaml,3
2638,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_any.yaml,3
2639,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_with_scores.yaml,3
2640,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_div.yaml,3
2641,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_sum.yaml,3
2642,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_min.yaml,3
2643,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.print.yaml,3
2644,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",optional name of the operation.,tf.sparse.minimum.yaml,3
2645,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_batch.yaml,3
2646,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_shapes.yaml,3
2647,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i0.yaml,3
2648,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.regex_full_match.yaml,3
2649,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.crop_and_resize.yaml,3
2650,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.compute_accidental_hits.yaml,3
2651,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.extract_jpeg_shape.yaml,3
2652,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.pad.yaml,3
2653,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.avg_pool1d.yaml,3
2654,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.parse_single_example.yaml,3
2655,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.is_finite.yaml,3
2656,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_positive.yaml,3
2657,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1e.yaml,3
2658,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.crop_and_resize.yaml,3
2659,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.truncatediv.yaml,3
2660,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.softmax.yaml,3
2661,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.imag.yaml,3
2662,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
2663,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.atan.yaml,3
2664,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.angle.yaml,3
2665,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.nextafter.yaml,3
2666,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space.yaml,3
2667,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.space_to_depth.yaml,3
2668,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
2669,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name of the operation (optional).,tf.where.yaml,3
2670,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.log.yaml,3
2671,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.bessel_i1.yaml,3
2672,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft_window_fn.yaml,3
2673,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.gather.yaml,3
2674,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.dynamic_stitch.yaml,3
2675,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.linalg.svd.yaml,3
2676,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.asin.yaml,3
2677,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
2678,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.cosh.yaml,3
2679,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.abs.yaml,3
2680,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.regex_replace.yaml,3
2681,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.resize_area.yaml,3
2682,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.right_shift.yaml,3
2683,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.clip_by_global_norm.yaml,3
2684,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_to_number.yaml,3
2685,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_add.yaml,3
2686,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.sample_distorted_bounding_box.yaml,3
2687,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,3
2688,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_rank_in.yaml,3
2689,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.searchsorted.yaml,3
2690,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the returned operation.,tf.compat.v1.variables_initializer.yaml,3
2691,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.image.draw_bounding_boxes.yaml,3
2692,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.avg_pool.yaml,3
2693,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Name for the operation (optional).,tf.linalg.matvec.yaml,3
2694,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.diag.yaml,3
2695,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_prod.yaml,3
2696,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.rint.yaml,3
2697,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.divide_no_nan.yaml,3
2698,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.debugging.assert_shapes.yaml,3
2699,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.arg_max.yaml,3
2700,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.py_func.yaml,3
2701,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.global_norm.yaml,3
2702,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.round.yaml,3
2703,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.eigvals.yaml,3
2704,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.greater.yaml,3
2705,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.shape.yaml,3
2706,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.clip_by_norm.yaml,3
2707,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_negative.yaml,3
2708,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay.yaml,3
2709,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.segment_prod.yaml,3
2710,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.depth_to_space.yaml,3
2711,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.embedding_lookup.yaml,3
2712,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool3d.yaml,3
2713,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.logm.yaml,3
2714,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.batch_normalization.yaml,3
2715,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.ifftshift.yaml,3
2716,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.max_pool1d.yaml,3
2717,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2.yaml,3
2718,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.identity_n.yaml,3
2719,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.fingerprint.yaml,3
2720,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_gif.yaml,3
2721,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.transpose.yaml,3
2722,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.leaky_relu.yaml,3
2723,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.inv.yaml,3
2724,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.embedding_lookup.yaml,3
2725,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_equal.yaml,3
2726,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater_equal.yaml,3
2727,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.negative.yaml,3
2728,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_greater.yaml,3
2729,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.io.parse_single_sequence_example.yaml,3
2730,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.fft2d.yaml,3
2731,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.batch_to_space_nd.yaml,3
2732,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.hamming_window.yaml,3
2733,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.erosion2d.yaml,3
2734,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.dropout.yaml,3
2735,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.uniform.yaml,3
2736,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.segment_sum.yaml,3
2737,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.tensordot.yaml,3
2738,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,3
2739,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_or.yaml,3
2740,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.sigmoid_cross_entropy_with_logits.yaml,3
2741,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.add.yaml,3
2742,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sampled_softmax_loss.yaml,3
2743,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmin.yaml,3
2744,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.random.stateless_categorical.yaml,3
2745,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.string_split.yaml,3
2746,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_shrink_l1.yaml,3
2747,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.truncated_normal.yaml,3
2748,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.count_nonzero.yaml,3
2749,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less.yaml,3
2750,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.sort.yaml,3
2751,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.floor.yaml,3
2752,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_min.yaml,3
2753,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.squeeze.yaml,3
2754,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split_with_offsets.yaml,3
2755,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.cumprod.yaml,3
2756,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.io.parse_sequence_example.yaml,3
2757,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_any.yaml,3
2758,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.floormod.yaml,3
2759,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.selu.yaml,3
2760,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.atan2.yaml,3
2761,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.inverse_stft.yaml,3
2762,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.erf.yaml,3
2763,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.hsv_to_rgb.yaml,3
2764,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode_with_offsets.yaml,3
2765,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.separable_conv2d.yaml,3
2766,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.normal.yaml,3
2767,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.cosine_decay_restarts.yaml,3
2768,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_max_pool.yaml,3
2769,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.softmax_cross_entropy_with_logits.yaml,3
2770,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.lower.yaml,3
2771,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.conj.yaml,3
2772,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_csv.yaml,3
2773,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.case.yaml,3
2774,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.all_candidate_sampler.yaml,3
2775,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_sqrt_n.yaml,3
2776,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.io.parse_example.yaml,3
2777,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.image.resize.yaml,3
2778,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_mean.yaml,3
2779,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.logical_not.yaml,3
2780,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.separable_conv2d.yaml,3
2781,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.unique_with_counts.yaml,3
2782,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.segment_max.yaml,3
2783,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.l2_loss.yaml,3
2784,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_logsumexp.yaml,3
2785,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.train.sdca_optimizer.yaml,3
2786,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_jpeg.yaml,3
2787,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_mean.yaml,3
2788,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.dilation2d.yaml,3
2789,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_positive.yaml,3
2790,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.fill.yaml,3
2791,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.extract_image_patches.yaml,3
2792,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",name: A name for the operation (optional).,tf.einsum.yaml,3
2793,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_none_equal.yaml,3
2794,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_positive.yaml,3
2795,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.bias_add.yaml,3
2796,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.left_shift.yaml,3
2797,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.linear_cosine_decay.yaml,3
2798,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_transcode.yaml,3
2799,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank.yaml,3
2800,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.uniform_candidate_sampler.yaml,3
2801,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_integer.yaml,3
2802,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.scatter_nd.yaml,3
2803,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.igammac.yaml,3
2804,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_png.yaml,3
2805,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_negative.yaml,3
2806,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.linalg.eigh.yaml,3
2807,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.argmin.yaml,3
2808,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.grayscale_to_rgb.yaml,3
2809,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.ensure_shape.yaml,3
2810,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.xdivy.yaml,3
2811,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_conv2d.yaml,3
2812,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strided_slice.yaml,3
2813,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
2814,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",(optional) A name to use as a `name_scope` for the operation.,tf.compat.v1.tuple.yaml,3
2815,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,3
2816,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_none_equal.yaml,3
2817,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.sqrtm.yaml,3
2818,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_greater_equal.yaml,3
2819,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Name for the operation (optional).,tf.linalg.matmul.yaml,3
2820,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.slice.yaml,3
2821,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.dct.yaml,3
2822,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.acos.yaml,3
2823,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.argmax.yaml,3
2824,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.fftshift.yaml,3
2825,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.substr.yaml,3
2826,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_non_negative.yaml,3
2827,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars.yaml,3
2828,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.math.is_strictly_increasing.yaml,3
2829,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.py_function.yaml,3
2830,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.bytes_split.yaml,3
2831,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_negative.yaml,3
2832,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.mfccs_from_log_mel_spectrograms.yaml,3
2833,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.invert.yaml,3
2834,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.square.yaml,3
2835,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.segment_min.yaml,3
2836,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.in_top_k.yaml,3
2837,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linspace.yaml,3
2838,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.det.yaml,3
2839,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.extract_volume_patches.yaml,3
2840,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.stft.yaml,3
2841,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.to_number.yaml,3
2842,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_script.yaml,3
2843,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name of the operation.,tf.compat.v1.train.piecewise_constant.yaml,3
2844,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_encode.yaml,3
2845,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
2846,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_equal.yaml,3
2847,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_non_positive.yaml,3
2848,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.pow.yaml,3
2849,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.exp.yaml,3
2850,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.invert_permutation.yaml,3
2851,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.erfc.yaml,3
2852,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_raw.yaml,3
2853,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.compat.v1.nn.max_pool.yaml,3
2854,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.sampled_softmax_loss.yaml,3
2855,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_prod.yaml,3
2856,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.sparse_segment_mean.yaml,3
2857,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_sub.yaml,3
2858,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.slice.yaml,3
2859,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.substr.yaml,3
2860,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.polygamma.yaml,3
2861,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.safe_embedding_lookup_sparse.yaml,3
2862,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.minimum.yaml,3
2863,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.strings.split.yaml,3
2864,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.transpose.yaml,3
2865,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.atanh.yaml,3
2866,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.qr.yaml,3
2867,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.edit_distance.yaml,3
2868,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.rank.yaml,3
2869,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.transpose.yaml,3
2870,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.argmax.yaml,3
2871,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.reduce_max.yaml,3
2872,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.depthwise_conv2d_backprop_input.yaml,3
2873,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.relu.yaml,3
2874,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.pad.yaml,3
2875,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.dtypes.saturate_cast.yaml,3
2876,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.multiply.yaml,3
2877,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.space_to_batch_nd.yaml,3
2878,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.matching_files.yaml,3
2879,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.random.poisson.yaml,3
2880,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.rgb_to_grayscale.yaml,3
2881,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft2d.yaml,3
2882,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.compat.v1.random_poisson.yaml,3
2883,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.tile.yaml,3
2884,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_max.yaml,3
2885,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.slogdet.yaml,3
2886,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.equal.yaml,3
2887,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional),tf.io.is_jpeg.yaml,3
2888,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.shape.yaml,3
2889,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_compressed.yaml,3
2890,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.logical_and.yaml,3
2891,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
2892,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.cholesky.yaml,3
2893,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.betainc.yaml,3
2894,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather_nd.yaml,3
2895,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.acosh.yaml,3
2896,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.fractional_max_pool.yaml,3
2897,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_and_crop_jpeg.yaml,3
2898,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_euclidean_norm.yaml,3
2899,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_nd_add.yaml,3
2900,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_integer.yaml,3
2901,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.combined_non_max_suppression.yaml,3
2902,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.random.gamma.yaml,3
2903,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scalar_mul.yaml,3
2904,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.join.yaml,3
2905,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.stack.yaml,3
2906,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.logical_or.yaml,3
2907,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression.yaml,3
2908,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.no_op.yaml,3
2909,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.quantize.yaml,3
2910,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unsorted_segment_join.yaml,3
2911,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.count_nonzero.yaml,3
2912,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.switch_case.yaml,3
2913,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.gather_nd.yaml,3
2914,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name of the operation (optional),tf.compat.v1.where.yaml,3
2915,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.encode_proto.yaml,3
2916,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.rsqrt.yaml,3
2917,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder_with_default.yaml,3
2918,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_rank_at_least.yaml,3
2919,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sqrt_n.yaml,3
2920,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_less_equal.yaml,3
2921,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.less_equal.yaml,3
2922,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.zeros_like.yaml,3
2923,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.tensor_scatter_nd_sub.yaml,3
2924,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.guarantee_const.yaml,3
2925,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.softsign.yaml,3
2926,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.lgamma.yaml,3
2927,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_mean.yaml,3
2928,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.reduce_all.yaml,3
2929,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",(Optional) A name for the operation.,tf.numpy_function.yaml,3
2930,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.truncatemod.yaml,3
2931,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.log_uniform_candidate_sampler.yaml,3
2932,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.math.is_non_decreasing.yaml,3
2933,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_max.yaml,3
2934,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.batch_to_space.yaml,3
2935,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.is_inf.yaml,3
2936,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.to_hash_bucket_fast.yaml,3
2937,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
2938,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.boolean_mask.yaml,3
2939,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.identity.yaml,3
2940,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})", Optional name of the operation.,tf.compat.v1.train.exponential_decay.yaml,3
2941,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.dilation2d.yaml,3
2942,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.decode_raw.yaml,3
2943,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.maximum.yaml,3
2944,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.math.top_k.yaml,3
2945,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.placeholder.yaml,3
2946,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.batch_norm_with_global_normalization.yaml,3
2947,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_xor.yaml,3
2948,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.log_softmax.yaml,3
2949,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.random.learned_unigram_candidate_sampler.yaml,3
2950,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_csv.yaml,3
2951,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.one_hot.yaml,3
2952,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.quantized_relu_x.yaml,3
2953,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.space_to_batch.yaml,3
2954,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.argsort.yaml,3
2955,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.cumsum.yaml,3
2956,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.summary.merge.yaml,3
2957,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.parallel_stack.yaml,3
2958,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.relu_layer.yaml,3
2959,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.in_top_k.yaml,3
2960,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.bitwise.bitwise_and.yaml,3
2961,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_min.yaml,3
2962,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.sinh.yaml,3
2963,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",An optional name for the operation.,tf.signal.frame.yaml,3
2964,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.assert_less_equal.yaml,3
2965,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.matrix_transpose.yaml,3
2966,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.format.yaml,3
2967,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.reduce_logsumexp.yaml,3
2968,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.nn.depthwise_conv2d.yaml,3
2969,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_sum.yaml,3
2970,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.assign_sub.yaml,3
2971,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.dropout.yaml,3
2972,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_proto.yaml,3
2973,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.non_max_suppression_padded.yaml,3
2974,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.unsorted_segment_sum.yaml,3
2975,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.reverse.yaml,3
2976,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.adjust_jpeg_quality.yaml,3
2977,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
2978,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.ifft3d.yaml,3
2979,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.digamma.yaml,3
2980,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name of the `Operation`.,tf.compat.v1.report_uninitialized_variables.yaml,3
2981,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,3
2982,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.quantization.fake_quant_with_min_max_args.yaml,3
2983,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_split.yaml,3
2984,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,3
2985,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.nn.erosion2d.yaml,3
2986,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.cross.yaml,3
2987,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.stop_gradient.yaml,3
2988,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.debugging.assert_near.yaml,3
2989,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.expm1.yaml,3
2990,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.summary.flush.yaml,3
2991,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.reduce_prod.yaml,3
2992,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.ceil.yaml,3
2993,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",Optional name for the operation.,tf.nn.max_pool.yaml,3
2994,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.sparse.segment_sum.yaml,3
2995,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.cumulative_logsumexp.yaml,3
2996,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.io.decode_base64.yaml,3
2997,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.io.parse_single_example.yaml,3
2998,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.nn.weighted_cross_entropy_with_logits.yaml,3
2999,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.set_diag.yaml,3
3000,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.gather.yaml,3
3001,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.real.yaml,3
3002,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.size.yaml,3
3003,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.scatter_update.yaml,3
3004,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.roll.yaml,3
3005,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",name: A name for the operation (optional).,tf.meshgrid.yaml,3
3006,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.math.cos.yaml,3
3007,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.image.extract_patches.yaml,3
3008,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.math.log_softmax.yaml,3
3009,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.nn.depthwise_conv2d.yaml,3
3010,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.linalg.lu.yaml,3
3011,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.strip.yaml,3
3012,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.compat.v1.case.yaml,3
3013,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.reduce_join.yaml,3
3014,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.shape_n.yaml,3
3015,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.signal.fft.yaml,3
3016,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.unicode_decode.yaml,3
3017,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.compat.v1.squeeze.yaml,3
3018,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.audio.encode_wav.yaml,3
3019,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for this operation (optional).,tf.image.random_crop.yaml,3
3020,112,0.06164984642387012,562,"frozenset({'operation', 'name', 'optional'})",A name for the operation (optional).,tf.strings.split.yaml,3
3021,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
3022,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
3023,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
3024,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3025,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
3026,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_max.yaml,2
3027,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
3028,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
3029,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
3030,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,2
3031,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
3032,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.stateless_truncated_normal.yaml,2
3033,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,2
3034,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",int32 Tensor of known shape [num_spatial_dims].,tf.nn.with_space_to_batch.yaml,2
3035,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
3036,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
3037,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
3038,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
3039,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
3040,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
3041,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of shape `[num_classes]`.,tf.nn.nce_loss.yaml,2
3042,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[batch_size, dim]`.",tf.nn.nce_loss.yaml,2
3043,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,2
3044,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
3045,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
3046,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor`, same type as `chol`, shape is `[..., M, K]`.",tf.linalg.cholesky_solve.yaml,2
3047,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
3048,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.stateless_normal.yaml,2
3049,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","tensor of shape [batch_size, max_label_length] padded with 0.",tf.nn.ctc_unique_labels.yaml,2
3050,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,2
3051,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., N, N]`.",tf.eig.yaml,2
3052,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape [..., M] or [..., M, K] and with the same dtype as`diagonals`.",tf.linalg.tridiagonal_solve.yaml,2
3053,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,2
3054,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.sparse_placeholder.yaml,2
3055,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If the shape is not specified, you can feed a sparse tensor of any shape.",tf.compat.v1.sparse_placeholder.yaml,2
3056,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
3057,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
3058,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
3059,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,2
3060,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,2
3061,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,2
3062,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An N+2 dimensional `Tensor` of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.conv_transpose.yaml,2
3063,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
3064,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.avg_pool.yaml,2
3065,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","tensor of shape [batch_size], None if labels is SparseTensor Length of reference label sequence in labels.",tf.nn.ctc_loss.yaml,2
3066,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","tensor of shape [batch_size, max_label_seq_length] or SparseTensor",tf.nn.ctc_loss.yaml,2
3067,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
3068,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","tensor of shape [frames, batch_size, num_labels], if logits_time_major == False, shape is [batch_size, frames, num_labels].",tf.nn.ctc_loss.yaml,2
3069,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
3070,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same type and shape as `log_input`.,tf.nn.log_poisson_loss.yaml,2
3071,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,2
3072,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,2
3073,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
3074,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.stateless_uniform.yaml,2
3075,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of shape [batch, max value in seq_length]",tf.nn.collapse_repeated.yaml,2
3076,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
3077,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
3078,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","nD integer tensor of shape`(batch_size, dim1, dim2, ...",tf.keras.backend.one_hot.yaml,2
3079,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `predictions`.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
3080,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
3081,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
3082,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
3083,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,2
3084,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to.",tf.compat.v1.assign.yaml,2
3085,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_min.yaml,2
3086,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
3087,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `predictions`.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
3088,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
3089,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
3090,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,2
3091,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","if true, attempt to statically determine the shape of 'tensor' and encode it as a constant.",tf.compat.v1.ones_like.yaml,2
3092,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
3093,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
3094,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
3095,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,2
3096,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,2
3097,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,2
3098,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3099,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
3100,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of shape `[num_classes]`.,tf.compat.v1.nn.nce_loss.yaml,2
3101,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[batch_size, dim]`.",tf.compat.v1.nn.nce_loss.yaml,2
3102,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,2
3103,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
3104,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
3105,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
3106,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
3107,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3108,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
3109,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
3110,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",dictionary with (`Tensor` to shape) items.,tf.debugging.assert_shapes.yaml,2
3111,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
3112,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.image.crop_and_resize.yaml,2
3113,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,2
3114,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,2
3115,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,2
3116,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor with the same shape as `variable`.,tf.keras.backend.moving_average_update.yaml,2
3117,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,2
3118,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,2
3119,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor of same shape as `x`.,tf.keras.backend.update_sub.yaml,2
3120,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
3121,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.compat.v1.image.crop_and_resize.yaml,2
3122,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,2
3123,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,2
3124,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
3125,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,2
3126,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3127,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3128,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3129,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.svd.yaml,2
3130,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",Defines the shape of the output tensor.,tf.reshape.yaml,2
3131,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
3132,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
3133,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
3134,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape format of the `inputs` Tensors.,tf.compat.v1.nn.ctc_loss.yaml,2
3135,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., M, N]`.",tf.linalg.lstsq.yaml,2
3136,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., M, K]`.",tf.linalg.lstsq.yaml,2
3137,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
3138,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",dictionary with (`Tensor` to shape) items.,tf.compat.v1.debugging.assert_shapes.yaml,2
3139,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
3140,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
3141,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
3142,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., N, N]`.",tf.eigvals.yaml,2
3143,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
3144,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,2
3145,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
3146,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
3147,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor of any type and shape to serialize.,tf.compat.v1.summary.tensor_summary.yaml,2
3148,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
3149,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width.yaml,2
3150,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
3151,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,2
3152,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor with shape [batch_size, h, w, d].",tf.image.image_gradients.yaml,2
3153,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,2
3154,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,2
3155,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
3156,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
3157,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,2
3158,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
3159,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
3160,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
3161,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
3162,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
3163,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Value to set the tensor to, as a Numpy array (of the same shape).",tf.keras.backend.set_value.yaml,2
3164,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,2
3165,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
3166,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
3167,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,2
3168,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,2
3169,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
3170,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.uniform.yaml,2
3171,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
3172,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
3173,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
3174,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
3175,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of shape `[num_classes]`.,tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3176,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[batch_size, dim]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3177,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3178,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3179,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,2
3180,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
3181,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.truncated_normal.yaml,2
3182,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor with the same shape as `output`.,tf.keras.backend.binary_crossentropy.yaml,2
3183,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor of same shape as `x`.,tf.keras.backend.update_add.yaml,2
3184,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
3185,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
3186,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3187,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
3188,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
3189,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
3190,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
3191,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,2
3192,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
3193,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the output tensor.,tf.random.normal.yaml,2
3194,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,2
3195,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape [..., M, N] and with the same dtype as `diagonals`.",tf.linalg.tridiagonal_matmul.yaml,2
3196,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
3197,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,2
3198,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,2
3199,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,2
3200,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,2
3201,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
3202,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
3203,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_local_variable.yaml,2
3204,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,2
3205,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,2
3206,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `predictions`.,tf.compat.v1.metrics.mean_relative_error.yaml,2
3207,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `predictions`.,tf.compat.v1.metrics.mean_relative_error.yaml,2
3208,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_relative_error.yaml,2
3209,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` representing pixel data with shape `[k, h, w, c]`, where `k` is the number of images, `h` and `w` are the height and width of the images, and `c` is the number of channels, which should be 1, 2, 3, or 4 (grayscale, grayscale with alpha, RGB, RGBA).",tf.summary.image.yaml,2
3210,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",Represents the shape of the output tensor.,tf.fill.yaml,2
3211,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,2
3212,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,2
3213,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,2
3214,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the resulting tensor.,tf.scatter_nd.yaml,2
3215,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `predictions`.,tf.compat.v1.metrics.mean_squared_error.yaml,2
3216,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_squared_error.yaml,2
3217,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., N, N]`.",tf.linalg.eigh.yaml,2
3218,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,2
3219,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
3220,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
3221,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,2
3222,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
3223,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
3224,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[batch_size, d1, ...",tf.compat.v1.losses.compute_weighted_loss.yaml,2
3225,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,2
3226,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
3227,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_variable.yaml,2
3228,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
3229,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3230,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of rank N+2, of shape`[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.pool.yaml,2
3231,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of shape `[num_classes]`.,tf.nn.sampled_softmax_loss.yaml,2
3232,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[batch_size, dim]`.",tf.nn.sampled_softmax_loss.yaml,2
3233,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,2
3234,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
3235,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_prod.yaml,2
3236,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,2
3237,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
3238,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The `Tensor` representing the column will have the shape of [batch_size] + `shape`.,tf.feature_column.numeric_column.yaml,2
3239,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,2
3240,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
3241,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
3242,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` representing audio data with shape `[k, t, c]`, where `k` is the number of audio clips, `t` is the number of frames, and `c` is the number of channels.",tf.summary.audio.yaml,2
3243,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
3244,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
3245,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3246,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3247,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3248,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape format of the `inputs` and `outputs` Tensors.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3249,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
3250,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
3251,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,2
3252,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Binary tensor with shape `(samples, time, 1)`, with a zero for every element that is masked.",tf.keras.backend.rnn.yaml,2
3253,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
3254,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,2
3255,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,2
3256,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,2
3257,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,2
3258,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
3259,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
3260,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})"," The tensors must all have the same shape, or be scalars.",tf.strings.join.yaml,2
3261,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
3262,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,2
3263,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,2
3264,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
3265,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
3266,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor whose shape is a prefix of data.shape.,tf.strings.unsorted_segment_join.yaml,2
3267,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A Tensor which may have the same shape as `condition`.,tf.compat.v1.where.yaml,2
3268,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `tensor` with the same shape and type as `x`.,tf.compat.v1.where.yaml,2
3269,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of int32 with shape `[batch_shape, len(field_names)]`.",tf.io.encode_proto.yaml,2
3270,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The (possibly partial) shape of the tensor.,tf.compat.v1.placeholder_with_default.yaml,2
3271,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width_bins.yaml,2
3272,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,2
3273,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","if true, attempt to statically determine the shape of 'tensor' and encode it as a constant.",tf.compat.v1.zeros_like.yaml,2
3274,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of any shape.,tf.summary.histogram.yaml,2
3275,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.pool.yaml,2
3276,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,2
3277,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
3278,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3279,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
3280,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor of the same shape as `output`.,tf.keras.backend.categorical_crossentropy.yaml,2
3281,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3282,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.placeholder.yaml,2
3283,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","If the shape is not specified, you can feed a tensor of any shape.",tf.compat.v1.placeholder.yaml,2
3284,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,2
3285,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
3286,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,2
3287,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
3288,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
3289,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
3290,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,2
3291,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
3292,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
3293,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
3294,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",Tensor of serialized protos with shape `batch_shape`.,tf.io.decode_proto.yaml,2
3295,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
3296,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
3297,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sum.yaml,2
3298,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
3299,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
3300,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
3301,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
3302,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`Tensor` of shape `[..., N, N]`.",tf.linalg.eigvalsh.yaml,2
3303,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Another tensor, of same type and shape as `a`.",tf.linalg.cross.yaml,2
3304,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
3305,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]` if `data_format` does not start with ""NC"" (default), or`[batch_size, num_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.max_pool.yaml,2
3306,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of arbitrary shape.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3307,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same shape as `labels`.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
3308,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
3309,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
3310,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
3311,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
3312,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,2
3313,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,2
3314,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
3315,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
3316,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,2
3317,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",A string `Tensor` of any shape.,tf.strings.strip.yaml,2
3318,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
3319,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
3320,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
3321,93,0.0330188679245283,301,"frozenset({'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
3322,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A tensor of numeric type.,tf.math.zero_fraction.yaml,2
3323,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
3324,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
3325,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.extract_glimpse.yaml,2
3326,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
3327,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
3328,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of element in the resulting `Tensor`.,tf.sparse.eye.yaml,2
3329,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
3330,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
3331,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_add.yaml,2
3332,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,2
3333,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
3334,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,2
3335,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,2
3336,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,2
3337,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
3338,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
3339,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,2
3340,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.compat.v1.nn.crelu.yaml,2
3341,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
3342,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64` `complex64` or`complex128`.",tf.math.reciprocal_no_nan.yaml,2
3343,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor`, same type as `chol`, shape is `[..., M, K]`.",tf.linalg.cholesky_solve.yaml,2
3344,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,2
3345,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.relu6.yaml,2
3346,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,2
3347,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,2
3348,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
3349,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A floating point type tensor, shaped `[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
3350,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor of type `T`.,tf.io.serialize_tensor.yaml,2
3351,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.substr.yaml,2
3352,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,2
3353,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor with type `float16`, `float32`, `float64`, `complex64`, or`complex128`.",tf.math.sigmoid.yaml,2
3354,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of `values` elements in the tensor to be fed.,tf.compat.v1.sparse_placeholder.yaml,2
3355,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_strong.yaml,2
3356,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.length.yaml,2
3357,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,2
3358,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
3359,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket.yaml,2
3360,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.log_poisson_loss.yaml,2
3361,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of the same type and shape as `log_input`.,tf.nn.log_poisson_loss.yaml,2
3362,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the elements of the resulting tensor.,tf.keras.backend.constant.yaml,2
3363,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,2
3364,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.train.sdca_fprint.yaml,2
3365,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,2
3366,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,2
3367,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.erfinv.yaml,2
3368,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.union.yaml,2
3369,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.union.yaml,2
3370,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,2
3371,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,2
3372,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the output tensor.,tf.compat.v1.get_session_tensor.yaml,2
3373,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",a string-type Tensor to summarize.,tf.compat.v1.summary.text.yaml,2
3374,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.encode_base64.yaml,2
3375,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_update.yaml,2
3376,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
3377,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
3378,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
3379,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
3380,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.image.extract_glimpse.yaml,2
3381,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
3382,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `uint8`.,tf.io.encode_jpeg.yaml,2
3383,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.dynamic_partition.yaml,2
3384,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
3385,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
3386,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A type for the returned `Tensor`.,tf.zeros_like.yaml,2
3387,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.audio.decode_wav.yaml,2
3388,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
3389,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.quantization.quantized_concat.yaml,2
3390,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
3391,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
3392,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of at least 2 `Tensor` objects with the same type.,tf.quantization.quantized_concat.yaml,2
3393,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.read_file.yaml,2
3394,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_json_example.yaml,2
3395,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` numerator of numeric type.,tf.math.truediv.yaml,2
3396,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` denominator of numeric type.,tf.math.truediv.yaml,2
3397,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A type for the returned `Tensor`.,tf.compat.v1.ones_like.yaml,2
3398,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_bmp.yaml,2
3399,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.crelu.yaml,2
3400,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_hash_bucket.yaml,2
3401,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A type for the returned `Tensor`.,tf.ones_like.yaml,2
3402,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor with type `float32` or `float64`.,tf.math.log_sigmoid.yaml,2
3403,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3404,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the serialized tensor.,tf.io.parse_tensor.yaml,2
3405,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})", The provided type must match the type of the serialized tensor and no implicit conversion will take place.,tf.io.parse_tensor.yaml,2
3406,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.parse_tensor.yaml,2
3407,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.upper.yaml,2
3408,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
3409,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
3410,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.ndtri.yaml,2
3411,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,2
3412,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
3413,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
3414,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,2
3415,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,2
3416,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.extract_jpeg_shape.yaml,2
3417,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Must be same type as `tensor`.,tf.compat.v1.pad.yaml,2
3418,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.pad.yaml,2
3419,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of an element in the resulting `Tensor`,tf.eye.yaml,2
3420,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
3421,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.crop_and_resize.yaml,2
3422,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
3423,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
3424,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
3425,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
3426,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.intersection.yaml,2
3427,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.intersection.yaml,2
3428,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3429,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`,tf.where.yaml,2
3430,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor which is of the same type as `y`, and may be broadcastable with`condition` and `y`.",tf.where.yaml,2
3431,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor which is of the same type as `x`, and may be broadcastable with`condition` and `x`.",tf.where.yaml,2
3432,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the elements of the resulting tensor.,tf.ragged.range.yaml,2
3433,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3434,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
3435,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `indices` of `Tensor` objects with the same type.,tf.dynamic_stitch.yaml,2
3436,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
3437,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
3438,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
3439,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
3440,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
3441,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,2
3442,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
3443,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_number.yaml,2
3444,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
3445,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
3446,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.draw_bounding_boxes.yaml,2
3447,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
3448,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,2
3449,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` with same type as `a` and compatible dimensions.,tf.linalg.matvec.yaml,2
3450,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.math.round.yaml,2
3451,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,2
3452,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
3453,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A tensor of any type and shape to serialize.,tf.compat.v1.summary.tensor_summary.yaml,2
3454,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
3455,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,2
3456,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,2
3457,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
3458,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_gif.yaml,2
3459,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,2
3460,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
3461,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
3462,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
3463,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
3464,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
3465,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
3466,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
3467,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
3468,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A scalar `Tensor` with the same type as `x`.,tf.compat.v1.nn.dropout.yaml,2
3469,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor or Python value of type `dtype`, broadcastable with`minval`.",tf.random.uniform.yaml,2
3470,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor or Python value of type `dtype`, broadcastable with`maxval`.",tf.random.uniform.yaml,2
3471,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` of type `float32` or `float64`.,tf.tensordot.yaml,2
3472,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` with the same type as `a`.,tf.tensordot.yaml,2
3473,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
3474,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
3475,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",An object whose type has a registered `Tensor` conversion function.,tf.convert_to_tensor.yaml,2
3476,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the elements of the resulting tensor.,tf.range.yaml,2
3477,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
3478,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,2
3479,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
3480,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
3481,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
3482,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.string_split.yaml,2
3483,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
3484,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,2
3485,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,2
3486,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the elements of the resulting tensor.,tf.compat.v1.constant.yaml,2
3487,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumprod.yaml,2
3488,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
3489,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
3490,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor or Python value of type `dtype`, broadcastable with `stddev`.",tf.random.normal.yaml,2
3491,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A Tensor or Python value of type `dtype`, broadcastable with `mean`.",tf.random.normal.yaml,2
3492,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
3493,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
3494,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `b`.,tf.sets.difference.yaml,2
3495,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`Tensor` or `SparseTensor` of the same type as `a`.,tf.sets.difference.yaml,2
3496,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.lower.yaml,2
3497,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.decode_csv.yaml,2
3498,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,2
3499,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_not.yaml,2
3500,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3501,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3502,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3503,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3504,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3505,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3506,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3507,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3508,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3509,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
3510,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_jpeg.yaml,2
3511,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int64`, `int32`, `uint8`,`int16`, `int8`, `complex64`, or `complex128`.",tf.nn.bias_add.yaml,2
3512,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
3513,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unicode_transcode.yaml,2
3514,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
3515,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
3516,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",An object whose type has a registered `Tensor` conversion function.,tf.compat.v1.convert_to_tensor.yaml,2
3517,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,2
3518,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_png.yaml,2
3519,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
3520,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3521,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3522,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3523,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
3524,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
3525,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
3526,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
3527,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
3528,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
3529,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",`tf.Tensor` with same type and rank as `a`.,tf.linalg.matmul.yaml,2
3530,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,2
3531,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
3532,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.substr.yaml,2
3533,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
3534,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
3535,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
3536,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.math.in_top_k.yaml,2
3537,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
3538,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_number.yaml,2
3539,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.strings.unicode_script.yaml,2
3540,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
3541,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3542,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
3543,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
3544,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,2
3545,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.substr.yaml,2
3546,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","The tensor type for the result: one of `""RaggedTensor""` or`""SparseTensor""`.",tf.compat.v1.strings.split.yaml,2
3547,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
3548,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
3549,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Must be same type as `tensor`.,tf.pad.yaml,2
3550,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.pad.yaml,2
3551,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.matching_files.yaml,2
3552,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,2
3553,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,2
3554,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3555,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_compressed.yaml,2
3556,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
3557,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
3558,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,2
3559,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,2
3560,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_and_crop_jpeg.yaml,2
3561,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.io.decode_and_crop_jpeg.yaml,2
3562,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Tensor type.,tf.keras.backend.variable.yaml,2
3563,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,2
3564,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,2
3565,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
3566,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
3567,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,2
3568,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,2
3569,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
3570,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
3571,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
3572,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
3573,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
3574,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unsorted_segment_join.yaml,2
3575,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `bool`,tf.compat.v1.where.yaml,2
3576,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `tensor` with the same shape and type as `x`.,tf.compat.v1.where.yaml,2
3577,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.io.encode_proto.yaml,2
3578,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A type for the returned `Tensor`.,tf.compat.v1.zeros_like.yaml,2
3579,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_sub.yaml,2
3580,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,2
3581,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of the elements of the resulting tensor.,tf.constant.yaml,2
3582,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_fast.yaml,2
3583,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3584,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The type of elements in the tensor to be fed.,tf.compat.v1.placeholder.yaml,2
3585,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",output type of the resulting tensor.,tf.sequence_mask.yaml,2
3586,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,2
3587,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_csv.yaml,2
3588,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",The data type of the output tensor.,tf.one_hot.yaml,2
3589,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
3590,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
3591,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
3592,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumsum.yaml,2
3593,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,2
3594,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.math.in_top_k.yaml,2
3595,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
3596,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A scalar `Tensor` with the same type as x.,tf.nn.dropout.yaml,2
3597,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_proto.yaml,2
3598,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,2
3599,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
3600,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
3601,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
3602,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
3603,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
3604,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
3605,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
3606,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","A `SparseTensor`, `SparseTensorValue`, or an object whose type has a registered `Tensor` conversion function.",tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
3607,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
3608,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","Another tensor, of same type and shape as `a`.",tf.linalg.cross.yaml,2
3609,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32` or `int64` (default: 0).,tf.math.cumulative_logsumexp.yaml,2
3610,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_base64.yaml,2
3611,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of the same type and shape as `logits`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
3612,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
3613,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.strip.yaml,2
3614,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` type bool.,tf.math.logical_xor.yaml,2
3615,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type bool.,tf.math.logical_xor.yaml,2
3616,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
3617,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A list of at least 1 `Tensor` object with the same type.,tf.shape_n.yaml,2
3618,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `float32`.,tf.audio.encode_wav.yaml,2
3619,94,0.03268977621763931,298,"frozenset({'type', 'tensor'})",A `Tensor` of type `int32`.,tf.audio.encode_wav.yaml,2
3620,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Must be of type `float16`, `float32`, or `float64`.",tf.nn.conv1d.yaml,2
3621,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
3622,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
3623,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
3624,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
3625,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
3626,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
3627,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
3628,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
3629,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
3630,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
3631,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
3632,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
3633,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
3634,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","float, must be non-negative.",tf.image.random_brightness.yaml,2
3635,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
3636,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Must be of type `float16`, `float32`, or `float64`.",tf.compat.v1.nn.conv1d.yaml,2
3637,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
3638,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
3639,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.adjoint.yaml,2
3640,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
3641,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An optional `string`, must be set to `""NHWC""`.",tf.nn.max_pool_with_argmax.yaml,2
3642,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
3643,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
3644,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Must be `float32` or `float64`, shape is `[..., M, M]`.",tf.linalg.cholesky_solve.yaml,2
3645,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
3646,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
3647,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
3648,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be`float32`, `float64`, `complex64`, or `complex128`.",tf.linalg.tridiagonal_solve.yaml,2
3649,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
3650,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
3651,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
3652,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
3653,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Values must be Python strings.,tf.strings.ngrams.yaml,2
3654,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,2
3655,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
3656,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
3657,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
3658,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
3659,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
3660,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",It must be a positive integer.,tf.compat.v1.while_loop.yaml,2
3661,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
3662,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
3663,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
3664,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
3665,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
3666,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
3667,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
3668,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
3669,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
3670,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
3671,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
3672,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
3673,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an`int`.,tf.compat.forward_compatibility_horizon.yaml,2
3674,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an `int`.,tf.compat.forward_compatibility_horizon.yaml,2
3675,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an `int`.,tf.compat.forward_compatibility_horizon.yaml,2
3676,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
3677,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
3678,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
3679,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
3680,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
3681,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
3682,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
3683,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
3684,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`, `float64`, `complex64`, or`complex128` with shape `[..., M, M]`.",tf.linalg.expm.yaml,2
3685,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
3686,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an`int`.,tf.compat.forward_compatible.yaml,2
3687,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an `int`.,tf.compat.forward_compatible.yaml,2
3688,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be an `int`.,tf.compat.forward_compatible.yaml,2
3689,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`,`float64`, `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`,`complex64`, `complex128`, `bool` or `string`.",tf.zeros_like.yaml,2
3690,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
3691,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Their ranks and types must match, and their sizes must match in all dimensions except `concat_dim`.",tf.quantization.quantized_concat.yaml,2
3692,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
3693,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
3694,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
3695,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
3696,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float32`, `float64`,`int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `complex64`,`complex128` or `bool`.",tf.compat.v1.ones_like.yaml,2
3697,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
3698,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
3699,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
3700,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
3701,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
3702,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
3703,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
3704,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`,`float64`, `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`,`complex64`, `complex128`, `bool` or `string`.",tf.ones_like.yaml,2
3705,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
3706,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
3707,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
3708,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
3709,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
3710,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
3711,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
3712,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
3713,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
3714,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
3715,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
3716,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
3717,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_min.yaml,2
3718,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
3719,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
3720,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
3721,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
3722,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
3723,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
3724,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
3725,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
3726,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
3727,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
3728,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
3729,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
3730,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
3731,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
3732,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
3733,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
3734,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
3735,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
3736,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
3737,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
3738,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
3739,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
3740,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
3741,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
3742,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
3743,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
3744,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An integer specifying dimension of the embedding, must be > 0.",tf.feature_column.shared_embeddings.yaml,2
3745,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
3746,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
3747,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
3748,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
3749,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.arg_max.yaml,2
3750,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
3751,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
3752,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
3753,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
3754,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
3755,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
3756,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
3757,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
3758,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
3759,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
3760,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
3761,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
3762,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
3763,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
3764,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
3765,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
3766,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
3767,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
3768,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
3769,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
3770,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmin.yaml,2
3771,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
3772,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
3773,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
3774,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
3775,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
3776,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
3777,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
3778,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
3779,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
3780,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
3781,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
3782,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})", Must have numeric or variant type.,tf.math.conj.yaml,2
3783,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be`float32`, `float64`, `complex64`, or `complex128`.",tf.linalg.tridiagonal_matmul.yaml,2
3784,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
3785,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
3786,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
3787,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
3788,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
3789,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
3790,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
3791,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
3792,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An integer specifying dimension of the embedding, must be > 0.",tf.feature_column.embedding_column.yaml,2
3793,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
3794,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
3795,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
3796,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmin.yaml,2
3797,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
3798,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
3799,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
3800,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
3801,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
3802,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
3803,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
3804,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `-rank(input), rank(input))`.",tf.math.argmax.yaml,2
3805,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
3806,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
3807,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
3808,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
3809,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
3810,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
3811,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
3812,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
3813,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
3814,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
3815,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
3816,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
3817,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
3818,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
3819,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
3820,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
3821,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
3822,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
3823,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
3824,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
3825,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
3826,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
3827,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
3828,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be a non-quantized, real integer or floating point type.",tf.feature_column.numeric_column.yaml,2
3829,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
3830,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
3831,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
3832,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",It must be a positive integer.,tf.while_loop.yaml,2
3833,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
3834,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","int32 or int64, must be in the range `[-rank(input), rank(input))`.",tf.compat.v1.argmax.yaml,2
3835,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
3836,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",This must be a callable object that returns an object that supports the `iter()` protocol (e.g. a generator function).,tf.lite.RepresentativeDataset.yaml,2
3837,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
3838,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
3839,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
3840,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
3841,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
3842,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,2
3843,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
3844,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
3845,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
3846,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
3847,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
3848,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",This must be scalar or broadcastable to`labels` (i.e. same rank and each dimension is either 1 or the same).,tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
3849,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
3850,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
3851,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
3852,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
3853,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
3854,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
3855,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
3856,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
3857,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
3858,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
3859,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
3860,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
3861,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
3862,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
3863,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
3864,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`,`float64`, `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`,`complex64`, `complex128`, `bool` or `string`.",tf.compat.v1.zeros_like.yaml,2
3865,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.logdet.yaml,2
3866,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
3867,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must be castable to `float64`.,tf.summary.histogram.yaml,2
3868,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
3869,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
3870,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
3871,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
3872,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
3873,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
3874,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
3875,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
3876,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
3877,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
3878,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
3879,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
3880,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
3881,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
3882,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","An integer specifying dimension of the embedding, must be > 0.",tf.compat.v1.feature_column.shared_embedding_columns.yaml,2
3883,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
3884,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
3885,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
3886,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
3887,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
3888,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
3889,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
3890,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
3891,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
3892,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
3893,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
3894,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
3895,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
3896,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
3897,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
3898,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
3899,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
3900,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
3901,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
3902,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
3903,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
3904,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
3905,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})",Must have numeric type.,tf.math.real.yaml,2
3906,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
3907,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
3908,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
3909,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
3910,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
3911,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
3912,65,0.032141290039491004,293,"frozenset({'SOME_DTYPE', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
3913,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from `""NWC"", ""NCW""`.",tf.nn.conv1d.yaml,2
3914,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
3915,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
3916,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.image.extract_glimpse.yaml,2
3917,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.depth_to_space.yaml,2
3918,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
3919,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
3920,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
3921,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.data.experimental.make_csv_dataset.yaml,2
3922,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.data.experimental.make_csv_dataset.yaml,2
3923,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",A optional string corresponding to the label column.,tf.data.experimental.make_csv_dataset.yaml,2
3924,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
3925,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional bool.,tf.data.experimental.make_csv_dataset.yaml,2
3926,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.space_to_depth.yaml,2
3927,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.image.encode_png.yaml,2
3928,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
3929,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
3930,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.dequantize.yaml,2
3931,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""MIN_COMBINED"", ""MIN_FIRST"", ""SCALED""`.",tf.quantization.dequantize.yaml,2
3932,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.dequantize.yaml,2
3933,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
3934,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
3935,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.nn.local_response_normalization.yaml,2
3936,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.nn.local_response_normalization.yaml,2
3937,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) A string.,tf.compat.v1.global_variables.yaml,2
3938,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) A string.,tf.compat.v1.trainable_variables.yaml,2
3939,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_nd_update.yaml,2
3940,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional bool.,tf.compat.v1.scatter_nd_update.yaml,2
3941,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from `""NWC"", ""NCW""`.",tf.compat.v1.nn.conv1d.yaml,2
3942,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.nn.conv1d.yaml,2
3943,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d.yaml,2
3944,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
3945,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.linalg.solve.yaml,2
3946,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string`, must be set to `""NHWC""`.",tf.nn.max_pool_with_argmax.yaml,2
3947,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `boolean`.,tf.nn.max_pool_with_argmax.yaml,2
3948,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.nn.max_pool_with_argmax.yaml,2
3949,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
3950,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_sum.yaml,2
3951,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.eig.yaml,2
3952,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_nd_sub.yaml,2
3953,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional bool.,tf.compat.v1.scatter_nd_sub.yaml,2
3954,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) Python integer seed for the resampler.,tf.data.experimental.rejection_resample.yaml,2
3955,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.nn.conv3d.yaml,2
3956,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
3957,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.strings.substr.yaml,2
3958,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.nn.fractional_avg_pool.yaml,2
3959,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.nn.fractional_avg_pool.yaml,2
3960,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.nn.fractional_avg_pool.yaml,2
3961,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
3962,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
3963,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.length.yaml,2
3964,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) A string.,tf.compat.v1.moving_average_variables.yaml,2
3965,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) A string.,tf.compat.v1.local_variables.yaml,2
3966,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.assign_add.yaml,2
3967,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.encode_base64.yaml,2
3968,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.image.extract_glimpse.yaml,2
3969,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.image.extract_glimpse.yaml,2
3970,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.image.extract_glimpse.yaml,2
3971,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_mul.yaml,2
3972,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.assign.yaml,2
3973,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.assign.yaml,2
3974,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
3975,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""in"", ""cm""`.",tf.io.encode_jpeg.yaml,2
3976,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `"""", ""grayscale"", ""rgb""`.",tf.io.encode_jpeg.yaml,2
3977,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
3978,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.encode_jpeg.yaml,2
3979,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
3980,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
3981,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.encode_jpeg.yaml,2
3982,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.encode_jpeg.yaml,2
3983,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique.yaml,2
3984,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3985,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3986,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3987,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3988,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3989,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",A optional string corresponding to the label column.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3990,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3991,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional bool.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
3992,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
3993,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
3994,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
3995,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional name string for the placeholder.,tf.keras.backend.placeholder.yaml,2
3996,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.audio.decode_wav.yaml,2
3997,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.audio.decode_wav.yaml,2
3998,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_image.yaml,2
3999,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
4000,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
4001,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
4002,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.sparse_matmul.yaml,2
4003,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d.yaml,2
4004,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.nn.conv2d.yaml,2
4005,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_bmp.yaml,2
4006,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string name for this op.,tf.summary.write.yaml,2
4007,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.as_string.yaml,2
4008,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.strings.as_string.yaml,2
4009,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.strings.as_string.yaml,2
4010,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.strings.as_string.yaml,2
4011,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.strings.as_string.yaml,2
4012,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
4013,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.conv2d.yaml,2
4014,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.linalg.triangular_solve.yaml,2
4015,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.linalg.triangular_solve.yaml,2
4016,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.sparse.segment_sqrt_n.yaml,2
4017,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NDHWC"", ""NCDHW""`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4018,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4019,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
4020,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.upper.yaml,2
4021,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_div.yaml,2
4022,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_min.yaml,2
4023,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.image.crop_and_resize.yaml,2
4024,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional string specifying the sampling method for resizing.,tf.image.crop_and_resize.yaml,2
4025,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.io.extract_jpeg_shape.yaml,2
4026,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
4027,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.avg_pool1d.yaml,2
4028,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
4029,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
4030,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
4031,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.compat.v1.image.crop_and_resize.yaml,2
4032,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""bilinear"", ""nearest""`.",tf.compat.v1.image.crop_and_resize.yaml,2
4033,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
4034,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
4035,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.compat.v1.space_to_depth.yaml,2
4036,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4037,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4038,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4039,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
4040,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.linalg.svd.yaml,2
4041,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string.,tf.reshape.yaml,2
4042,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
4043,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
4044,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.image.resize_area.yaml,2
4045,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
4046,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.compat.v1.string_to_number.yaml,2
4047,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_add.yaml,2
4048,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
4049,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
4050,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.image.sample_distorted_bounding_box.yaml,2
4051,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.image.sample_distorted_bounding_box.yaml,2
4052,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.image.sample_distorted_bounding_box.yaml,2
4053,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.linalg.lstsq.yaml,2
4054,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_max.yaml,2
4055,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.eigvals.yaml,2
4056,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
4057,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
4058,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW"", ""NCHW_VECT_C""`.",tf.nn.depth_to_space.yaml,2
4059,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional string from: ""NDHWC"", ""NCDHW"".",tf.nn.max_pool3d.yaml,2
4060,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional string from: ""NWC"", ""NCW"".",tf.nn.max_pool1d.yaml,2
4061,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.linalg.inv.yaml,2
4062,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional `string`.,tf.compat.v1.train.export_meta_graph.yaml,2
4063,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
4064,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
4065,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
4066,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmin.yaml,2
4067,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_min.yaml,2
4068,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.squeeze.yaml,2
4069,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
4070,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
4071,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.lower.yaml,2
4072,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.compat.v1.decode_csv.yaml,2
4073,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.decode_csv.yaml,2
4074,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
4075,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
4076,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
4077,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.sparse.segment_mean.yaml,2
4078,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique_with_counts.yaml,2
4079,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_local_variable.yaml,2
4080,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
4081,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4082,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.io.decode_jpeg.yaml,2
4083,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_jpeg.yaml,2
4084,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_jpeg.yaml,2
4085,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_jpeg.yaml,2
4086,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_jpeg.yaml,2
4087,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_jpeg.yaml,2
4088,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.scalar.yaml,2
4089,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.image.yaml,2
4090,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,2
4091,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""strict"", ""replace"", ""ignore""`.",tf.strings.unicode_transcode.yaml,2
4092,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.strings.unicode_transcode.yaml,2
4093,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.strings.unicode_transcode.yaml,2
4094,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
4095,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string name for this op.,tf.summary.experimental.write_raw_pb.yaml,2
4096,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_png.yaml,2
4097,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.uint8, tf.uint16`.",tf.io.decode_png.yaml,2
4098,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string.,tf.ones.yaml,2
4099,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.linalg.eigh.yaml,2
4100,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(optional) perturbation used to compute numeric Jacobian.,tf.test.compute_gradient.yaml,2
4101,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmin.yaml,2
4102,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
4103,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
4104,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
4105,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
4106,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
4107,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
4108,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmax.yaml,2
4109,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
4110,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.strings.substr.yaml,2
4111,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
4112,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
4113,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.text.yaml,2
4114,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string.,tf.expand_dims.yaml,2
4115,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional device string or function describing where the Variable should be cached for reading.,tf.compat.v1.get_variable.yaml,2
4116,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
4117,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.strings.to_number.yaml,2
4118,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4119,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4120,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.compat.v1.sparse_segment_mean.yaml,2
4121,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_sub.yaml,2
4122,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
4123,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional `string`.,tf.compat.v1.train.import_meta_graph.yaml,2
4124,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""BYTE"", ""UTF8_CHAR""`.",tf.compat.v1.substr.yaml,2
4125,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
4126,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional bool.,tf.transpose.yaml,2
4127,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional.) A string.,tf.compat.v1.model_variables.yaml,2
4128,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.linalg.qr.yaml,2
4129,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional string.,tf.zeros.yaml,2
4130,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional bool.,tf.compat.v1.transpose.yaml,2
4131,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmax.yaml,2
4132,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
4133,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
4134,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.audio.yaml,2
4135,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional constant `str` for the desired encoding.,tf.summary.audio.yaml,2
4136,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,2
4137,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(optional) An int32/int64 vector sized `[batch_size]`.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
4138,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_max.yaml,2
4139,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
4140,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
4141,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_compressed.yaml,2
4142,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4143,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4144,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.nn.fractional_max_pool.yaml,2
4145,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.nn.fractional_max_pool.yaml,2
4146,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.nn.fractional_max_pool.yaml,2
4147,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.io.decode_and_crop_jpeg.yaml,2
4148,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_and_crop_jpeg.yaml,2
4149,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_and_crop_jpeg.yaml,2
4150,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_and_crop_jpeg.yaml,2
4151,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.io.decode_and_crop_jpeg.yaml,2
4152,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_and_crop_jpeg.yaml,2
4153,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
4154,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_nd_add.yaml,2
4155,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.join.yaml,2
4156,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, an optional join separator.",tf.strings.join.yaml,2
4157,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.quantize.yaml,2
4158,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.quantization.quantize.yaml,2
4159,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""MIN_COMBINED"", ""MIN_FIRST"", ""SCALED""`.",tf.quantization.quantize.yaml,2
4160,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.quantize.yaml,2
4161,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""HALF_AWAY_FROM_ZERO"", ""HALF_TO_EVEN""`.",tf.quantization.quantize.yaml,2
4162,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.unsorted_segment_join.yaml,2
4163,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,2
4164,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.encode_proto.yaml,2
4165,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional integer that indicates the priority for applying this conversion function.,tf.register_tensor_conversion_function.yaml,2
4166,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional positive `int`.,tf.summary.histogram.yaml,2
4167,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional long-form description for this summary, as a constant `str`.",tf.summary.histogram.yaml,2
4168,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",optional static batch size (integer).,tf.keras.Input.yaml,2
4169,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional name string for the layer.,tf.keras.Input.yaml,2
4170,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `string` from: `""NHWC"", ""NCHW""`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4171,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4172,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4173,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(optional string) Only include devices matching this device type.,tf.config.list_logical_devices.yaml,2
4174,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_csv.yaml,2
4175,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_csv.yaml,2
4176,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
4177,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
4178,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional bool.,tf.linalg.matrix_transpose.yaml,2
4179,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.strings.format.yaml,2
4180,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.strings.format.yaml,2
4181,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.assign_sub.yaml,2
4182,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_proto.yaml,2
4183,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `string`.,tf.io.decode_proto.yaml,2
4184,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.io.decode_proto.yaml,2
4185,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(optional string) Only include devices matching this device type.,tf.config.get_visible_devices.yaml,2
4186,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
4187,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
4188,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
4189,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `float`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
4190,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
4191,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `int`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
4192,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","string, optional name of the operation.",tf.linalg.eigvalsh.yaml,2
4193,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional int32 scalar.,tf.sparse.segment_sum.yaml,2
4194,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
4195,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
4196,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
4197,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
4198,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",(optional string) Only include devices matching this device type.,tf.config.list_physical_devices.yaml,2
4199,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional `bool`.,tf.compat.v1.scatter_update.yaml,2
4200,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.linalg.lu.yaml,2
4201,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
4202,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})","(optional) Python int, the rank of the `SparseTensor` objects.",tf.io.deserialize_many_sparse.yaml,2
4203,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",Defaults to `tf.int32`(optional).,tf.shape_n.yaml,2
4204,68,0.03203159280386134,292,"frozenset({'SOME_DTYPE', 'optional'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
4205,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d.yaml,2
4206,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d.yaml,2
4207,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
4208,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
4209,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optimizer identifier, one of String: name of an optimizerDictionary: configuration dictionary.",tf.keras.optimizers.get.yaml,2
4210,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
4211,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
4212,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
4213,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
4214,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
4215,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
4216,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
4217,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
4218,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d_transpose.yaml,2
4219,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d_transpose.yaml,2
4220,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
4221,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv3D.yaml,2
4222,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,2
4223,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension.",tf.keras.layers.Conv3D.yaml,2
4224,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that cols_to_vars will also contain a string key 'bias' that maps to a list of Variables.,tf.compat.v1.feature_column.linear_model.yaml,2
4225,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.compat.v1.nn.conv1d.yaml,2
4226,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.compat.v1.nn.conv1d.yaml,2
4227,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.MaxPool2D.yaml,2
4228,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.MaxPool2D.yaml,2
4229,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv1D.yaml,2
4230,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
4231,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,2
4232,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of 2 integers, how many zeros to add at the start and end of dim 1.",tf.keras.backend.temporal_padding.yaml,2
4233,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
4234,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d.yaml,2
4235,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
4236,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
4237,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d_transpose.yaml,2
4238,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
4239,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.multi_flags_validator.yaml,2
4240,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
4241,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
4242,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
4243,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Iterable of integer number of hidden units per layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
4244,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of integer.,tf.keras.backend.tile.yaml,2
4245,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
4246,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.nn.conv3d.yaml,2
4247,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The list of supported dtypes is the same as`x`.,tf.cast.yaml,2
4248,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `floats` that has length >= 4.,tf.nn.fractional_avg_pool.yaml,2
4249,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of (left_pad_value, right_pad_value), a single string, or None.",tf.strings.ngrams.yaml,2
4250,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",string or iterable of strings.,tf.io.gfile.glob.yaml,2
4251,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
4252,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
4253,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of integer.,tf.keras.backend.mean.yaml,2
4254,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.strings.to_hash_bucket_strong.yaml,2
4255,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","The key used to seed the hash function, passed as a list of two uint64 elements.",tf.strings.to_hash_bucket_strong.yaml,2
4256,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,2
4257,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.conv_transpose.yaml,2
4258,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
4259,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
4260,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
4261,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Boolean or list of boolean.,tf.compat.v1.tpu.shard.yaml,2
4262,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple or list of integers with target dimensions, or single integer.",tf.keras.backend.batch_dot.yaml,2
4263,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Iterable of scalar `Tensor` objects.,tf.compat.v1.assert_rank_in.yaml,2
4264,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
4265,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
4266,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
4267,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
4268,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4269,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4270,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4271,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4272,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
4273,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
4274,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
4275,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," For backwards compatibility reasons, this is separate from the single-string argument type.A list of Variables to warm-start.",tf.compat.v1.train.warm_start.yaml,2
4276,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,2
4277,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Integer or iterable of integers.,tf.keras.backend.reverse.yaml,2
4278,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
4279,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
4280,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
4281,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
4282,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d.yaml,2
4283,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
4284,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d.yaml,2
4285,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
4286,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.MaxPool3D.yaml,2
4287,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d.yaml,2
4288,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
4289,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d.yaml,2
4290,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either `None` (default to original size)     or tuple of ints `(img_height, img_width)`.",tf.keras.preprocessing.image.load_img.yaml,2
4291,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",string or iterable of strings.,tf.compat.v1.gfile.Glob.yaml,2
4292,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
4293,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
4294,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4295,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4296,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
4297,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
4298,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
4299,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Union[Iterable[float], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_float.yaml,2
4300,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
4301,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
4302,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.SeparableConv2D.yaml,2
4303,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,2
4304,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.SeparableConv2D.yaml,2
4305,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If the value is a non-string iterable, it will be iterated over to create a shallow copy of the values.",tf.compat.v1.flags.DEFINE_multi.yaml,2
4306,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
4307,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_sum.yaml,2
4308,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
4309,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
4310,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution.",tf.keras.layers.Conv2D.yaml,2
4311,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,2
4312,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width.",tf.keras.layers.Conv2D.yaml,2
4313,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
4314,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
4315,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
4316,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
4317,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
4318,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`list<int>`, batch size per bucket.",tf.data.experimental.bucket_by_sequence_length.yaml,2
4319,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`list<int>`, upper length boundaries of the buckets.",tf.data.experimental.bucket_by_sequence_length.yaml,2
4320,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
4321,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", Any nested element that is not a `list` or `tuple` must be a scalar value compatible with `dtype`.,tf.compat.v1.ragged.constant_value.yaml,2
4322,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4323,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4324,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4325,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
4326,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
4327,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
4328,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
4329,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
4330,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
4331,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",`Iterable` of scalar `Tensor` objects.,tf.debugging.assert_rank_in.yaml,2
4332,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
4333,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
4334,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
4335,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Tuple of 2 integers.,tf.keras.backend.conv2d_transpose.yaml,2
4336,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.nn.conv3d_transpose.yaml,2
4337,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.conv3d_transpose.yaml,2
4338,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A word sequence (sentence), encoded as a list     of word indices (integers).",tf.keras.preprocessing.sequence.skipgrams.yaml,2
4339,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
4340,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
4341,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_sum.yaml,2
4342,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",`int` or shape `tuple` Axes over which to calculate.,tf.signal.ifftshift.yaml,2
4343,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
4344,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
4345,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
4346,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
4347,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.compat.v1.nn.conv3d_transpose.yaml,2
4348,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of ints.,tf.compat.v1.nn.conv3d_transpose.yaml,2
4349,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of string keys to collect.,tf.compat.v1.train.export_meta_graph.yaml,2
4350,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A callable that takes inputs `(time, cell_output, cell_state, loop_state)` and returns the tuple `(finished, next_input, next_cell_state, emit_output, next_loop_state)`.",tf.compat.v1.nn.raw_rnn.yaml,2
4351,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
4352,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If `cell.state_size` is a (possibly nested) tuple of ints or `TensorShape`, this will be a tuple having the corresponding shapes.",tf.compat.v1.nn.raw_rnn.yaml,2
4353,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
4354,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
4355,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
4356,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
4357,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
4358,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `VarLenFeature`/`FixedLenFeature`.,tf.estimator.export.build_parsing_serving_input_receiver_fn.yaml,2
4359,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.Dot.yaml,2
4360,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
4361,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.squeeze.yaml,2
4362,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
4363,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","scalar, or tuple or list of constructed scalars and/or other tuples/lists, or scalars.",tf.nest.map_structure.yaml,2
4364,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Tuple of floats; zoom range for width and height.,tf.keras.preprocessing.image.random_zoom.yaml,2
4365,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
4366,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
4367,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
4368,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings.,tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
4369,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list of floats, indicating the number of seconds since the Epoch when each checkpoint was generated.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
4370,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.compat.v1.decode_csv.yaml,2
4371,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
4372,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,2
4373,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
4374,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.conv2d.yaml,2
4375,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
4376,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
4377,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A sorted list or tuple of floats specifying the boundaries.,tf.feature_column.bucketized_column.yaml,2
4378,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4379,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4380,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4381,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4382,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4383,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4384,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
4385,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
4386,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
4387,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",a dict of string to `Tensor`.,tf.estimator.export.build_raw_serving_input_receiver_fn.yaml,2
4388,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
4389,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
4390,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
4391,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","dict of the form {'class_name': str, 'config': dict}",tf.keras.layers.deserialize.yaml,2
4392,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.depthwise_conv2d.yaml,2
4393,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
4394,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a non-empty list of strings with the possible values for the flag.",tf.compat.v1.flags.DEFINE_multi_enum.yaml,2
4395,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.AveragePooling2D.yaml,2
4396,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer, tuple of 2 integers, or None.",tf.keras.layers.AveragePooling2D.yaml,2
4397,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
4398,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max.yaml,2
4399,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
4400,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
4401,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d_transpose.yaml,2
4402,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d_transpose.yaml,2
4403,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
4404,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
4405,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
4406,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
4407,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Union[Iterable[int], Text, None], the default value of the flag; see `DEFINE_multi`.",tf.compat.v1.flags.DEFINE_multi_integer.yaml,2
4408,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
4409,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
4410,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
4411,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
4412,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
4413,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4414,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4415,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", List of N ints >= 1.,tf.compat.v1.nn.pool.yaml,2
4416,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
4417,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
4418,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
4419,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,2
4420,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
4421,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
4422,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
4423,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","iterable of integers, axes over which to normalize.",tf.keras.backend.normalize_batch_in_training.yaml,2
4424,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
4425,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.sparse.reduce_max.yaml,2
4426,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.pool2d.yaml,2
4427,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 2 integers.,tf.keras.backend.pool2d.yaml,2
4428,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
4429,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
4430,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
4431,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
4432,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})"," Any nested element that is not a `list`, `tuple` or `np.ndarray` must be a scalar value compatible with `dtype`.",tf.ragged.constant.yaml,2
4433,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4434,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4435,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Integer or tuple of integers, axis or axes along which to take the dot product.",tf.keras.layers.dot2.yaml,2
4436,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Two types will also be considered the same if they are both list subtypes (which allows ""list"" and ""_ListWrapper"" from trackable dependency tracking to compare equal).",tf.nest.assert_same_structure.yaml,2
4437,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The dimensions to reduce; list or scalar.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
4438,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.fractional_max_pool.yaml,2
4439,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.conv3d.yaml,2
4440,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
4441,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of string tensors.,tf.strings.join.yaml,2
4442,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
4443,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
4444,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of 3 integers, or None.",tf.keras.layers.AveragePooling3D.yaml,2
4445,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
4446,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A `dict` mapping `int`s to callables, or a `list` of (`int`, callable) pairs, or simply a list of callables (in which case the index serves as the key).",tf.switch_case.yaml,2
4447,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `strings`.,tf.io.encode_proto.yaml,2
4448,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.encode_proto.yaml,2
4449,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A `tf.TensorShape` or list of `int`s.,tf.compat.v1.placeholder_with_default.yaml,2
4450,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The base type or tuple of base types for all objects that`conversion_func` accepts.,tf.register_tensor_conversion_function.yaml,2
4451,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
4452,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})", List of N ints >= 1.,tf.nn.pool.yaml,2
4453,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
4454,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
4455,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,2
4456,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4457,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4458,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4459,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",All keys and values in the dictionary should be convertible to str.,tf.lite.experimental.load_delegate.yaml,2
4460,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
4461,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
4462,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","[str], a list of the flag names to be checked.",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
4463,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","input - dict, with keys() being flag_names, and value for each key     being the value of the corresponding flag (string, boolean, etc).",tf.compat.v1.flags.register_multi_flags_validator.yaml,2
4464,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","If eager execution is enabled, any callable object in the `control_inputs` list will be called.",tf.control_dependencies.yaml,2
4465,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.io.decode_csv.yaml,2
4466,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings representing `Operation` types that need to be placed on `ps` devices.,tf.compat.v1.train.replica_device_setter.yaml,2
4467,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
4468,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
4469,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
4470,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
4471,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
4472,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `strings`.,tf.io.decode_proto.yaml,2
4473,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of strings containing proto field names.,tf.io.decode_proto.yaml,2
4474,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `tf.DTypes`.,tf.io.decode_proto.yaml,2
4475,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,2
4476,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","dict, a mapping where the keys are flag names (strings).",tf.compat.v1.flags.flag_dict_to_args.yaml,2
4477,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.pool3d.yaml,2
4478,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",tuple of 3 integers.,tf.keras.backend.pool3d.yaml,2
4479,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
4480,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
4481,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
4482,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
4483,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","tuple of integers, dilation rates for the separable convolution.",tf.keras.backend.separable_conv2d.yaml,2
4484,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
4485,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
4486,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,2
4487,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})","a tuple of 2 integers, specifying the strides of the convolution along the width and height.",tf.keras.backend.local_conv2d.yaml,2
4488,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
4489,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,2
4490,60,0.03137340939008337,286,"frozenset({'SOME_DTYPE', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
4491,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3D `Tensor`.,tf.nn.conv1d.yaml,2
4492,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3D `Tensor`.,tf.nn.conv1d.yaml,2
4493,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
4494,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D `Tensor` of real labels for the classification task.,tf.compat.v1.confusion_matrix.yaml,2
4495,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D `Tensor` of predictions for a given classification.,tf.compat.v1.confusion_matrix.yaml,2
4496,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D tensor.,tf.linalg.band_part.yaml,2
4497,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D tensor.,tf.linalg.band_part.yaml,2
4498,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 1D tensor.,tf.compat.v1.nn.xw_plus_b.yaml,2
4499,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 2D tensor.,tf.compat.v1.nn.xw_plus_b.yaml,2
4500,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 2D tensor.,tf.compat.v1.nn.xw_plus_b.yaml,2
4501,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A file pattern (glob), or 1D tensor of file patterns.",tf.io.match_filenames_once.yaml,2
4502,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
4503,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
4504,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor of 2 elements containing the size of the glimpses to extract.,tf.compat.v1.image.extract_glimpse.yaml,2
4505,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,2
4506,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
4507,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
4508,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
4509,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
4510,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
4511,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,2
4512,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,2
4513,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_truncated_normal.yaml,2
4514,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3D `Tensor`.,tf.compat.v1.nn.conv1d.yaml,2
4515,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3D `Tensor`.,tf.compat.v1.nn.conv1d.yaml,2
4516,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D `int32` `Tensor`.,tf.concat.yaml,2
4517,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d.yaml,2
4518,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d.yaml,2
4519,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,2
4520,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
4521,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
4522,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
4523,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
4524,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
4525,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
4526,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sum.yaml,2
4527,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sum.yaml,2
4528,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,2
4529,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,2
4530,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_normal.yaml,2
4531,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.math.scalar_mul.yaml,2
4532,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,2
4533,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,2
4534,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
4535,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.nn.conv3d.yaml,2
4536,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.nn.conv3d.yaml,2
4537,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `int32` `Tensor`.,tf.sparse.split.yaml,2
4538,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An 1-D `int` Tensor.,tf.broadcast_to.yaml,2
4539,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,2
4540,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A sorted 1-D integer Tensor.,tf.ragged.row_splits_to_segment_ids.yaml,2
4541,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
4542,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
4543,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,2
4544,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,2
4545,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
4546,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An optional 0-D `Tensor` (defaults to `0`).,tf.compat.v1.sparse_add.yaml,2
4547,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,2
4548,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,2
4549,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,2
4550,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.stateless_uniform.yaml,2
4551,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,2
4552,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
4553,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
4554,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor of 2 elements containing the size of the glimpses to extract.,tf.image.extract_glimpse.yaml,2
4555,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool2d.yaml,2
4556,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","If`True`, the returned op will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or not.",tf.io.decode_image.yaml,2
4557,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
4558,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
4559,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,2
4560,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,2
4561,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D tensor.,tf.compat.v1.nn.conv2d.yaml,2
4562,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
4563,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
4564,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
4565,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,2
4566,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,2
4567,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,2
4568,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,2
4569,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D tensor.,tf.nn.conv2d.yaml,2
4570,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `int32` `Tensor`.,tf.compat.v1.sparse_split.yaml,2
4571,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sqrt_n.yaml,2
4572,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sqrt_n.yaml,2
4573,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An 1-D `int` Tensor.,tf.unravel_index.yaml,2
4574,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,2
4575,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4576,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4577,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 5.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4578,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,2
4579,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
4580,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",N-D tensor.,tf.compat.v1.boolean_mask.yaml,2
4581,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
4582,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",an integer or 1-D tensor.,tf.random.experimental.create_rng_state.yaml,2
4583,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
4584,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
4585,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
4586,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
4587,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
4588,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.image.crop_and_resize.yaml,2
4589,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D tensor of 2 elements, `size = [crop_height, crop_width]`.",tf.image.crop_and_resize.yaml,2
4590,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,2
4591,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.avg_pool1d.yaml,2
4592,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
4593,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
4594,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.compat.v1.image.crop_and_resize.yaml,2
4595,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D tensor of 2 elements, `size = [crop_height, crop_width]`.",tf.compat.v1.image.crop_and_resize.yaml,2
4596,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,2
4597,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,2
4598,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
4599,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,2
4600,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4601,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4602,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
4603,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
4604,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,2
4605,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",3-D `float` `Tensor`.,tf.compat.v1.nn.ctc_loss.yaml,2
4606,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_global_norm.yaml,2
4607,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
4608,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D `double` `Tensor`.,tf.linalg.lstsq.yaml,2
4609,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",N-D `Tensor` containing a sorted sequence.,tf.searchsorted.yaml,2
4610,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,2
4611,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
4612,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
4613,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
4614,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
4615,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,2
4616,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,2
4617,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
4618,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
4619,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
4620,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_norm.yaml,2
4621,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,2
4622,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 5-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool3d.yaml,2
4623,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D `Tensor` of real labels for the classification task.,tf.math.confusion_matrix.yaml,2
4624,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D `Tensor` of predictions for a given classification.,tf.math.confusion_matrix.yaml,2
4625,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,2
4626,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Tensor with shape [batch_size, h, w, d].",tf.image.image_gradients.yaml,2
4627,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 3-D `Tensor` of the format specified by `data_format`.,tf.nn.max_pool1d.yaml,2
4628,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,2
4629,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,2
4630,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,2
4631,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
4632,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
4633,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
4634,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
4635,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
4636,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
4637,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,2
4638,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,2
4639,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `Tensor`.,tf.sparse.add.yaml,2
4640,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
4641,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
4642,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
4643,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4D input Tensor.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
4644,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
4645,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
4646,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
4647,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
4648,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
4649,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
4650,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,2
4651,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An 1-D `int` Tensor.,tf.repeat.yaml,2
4652,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,2
4653,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,2
4654,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`1-D` string `Tensor`, the strings to split.",tf.compat.v1.string_split.yaml,2
4655,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,2
4656,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,2
4657,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D Tensor or Python value of type `dtype`.,tf.random.truncated_normal.yaml,2
4658,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,2
4659,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
4660,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
4661,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
4662,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
4663,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
4664,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
4665,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,2
4666,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
4667,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,2
4668,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",The 4D (batch x rows x cols x depth) Tensor to MaxReduce over.,tf.compat.v1.nn.quantized_max_pool.yaml,2
4669,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor.,tf.ragged.segment_ids_to_row_splits.yaml,2
4670,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
4671,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_sqrt_n.yaml,2
4672,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
4673,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,2
4674,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,2
4675,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,2
4676,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_mean.yaml,2
4677,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_mean.yaml,2
4678,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,2
4679,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,2
4680,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,2
4681,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,2
4682,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,2
4683,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,2
4684,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with size matching the channel dimension of `value`.,tf.nn.bias_add.yaml,2
4685,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,2
4686,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
4687,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.compat.v1.nn.quantized_conv2d.yaml,2
4688,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,2
4689,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
4690,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
4691,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,2
4692,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`Tensor` of shape `[batch_size, d1, ...",tf.compat.v1.losses.compute_weighted_loss.yaml,2
4693,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D tensor.,tf.linspace.yaml,2
4694,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D tensor.,tf.linspace.yaml,2
4695,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D tensor.,tf.linspace.yaml,2
4696,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,2
4697,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.train.piecewise_constant.yaml,2
4698,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
4699,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4700,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4701,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4702,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D `Tensor` of the format specified by `data_format`.,tf.compat.v1.nn.max_pool.yaml,2
4703,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.compat.v1.sparse_segment_mean.yaml,2
4704,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.compat.v1.sparse_segment_mean.yaml,2
4705,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,2
4706,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`0-D` string `Tensor`, the delimiter character.",tf.compat.v1.strings.split.yaml,2
4707,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
4708,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
4709,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
4710,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,2
4711,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
4712,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
4713,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.random.poisson.yaml,2
4714,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,2
4715,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A Tensor or Python value or N-D array of type `dtype`.`lam` provides the rate parameter(s) describing the poisson distribution(s) to sample.,tf.compat.v1.random_poisson.yaml,2
4716,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,2
4717,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
4718,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,2
4719,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,2
4720,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4721,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,2
4722,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,2
4723,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,2
4724,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
4725,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
4726,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,2
4727,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A Tensor or Python value or N-D array of type `dtype`.,tf.random.gamma.yaml,2
4728,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,2
4729,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.scalar_mul.yaml,2
4730,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
4731,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,2
4732,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
4733,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
4734,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
4735,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
4736,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor of length 4.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4737,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
4738,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,2
4739,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
4740,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",N-D tensor.,tf.boolean_mask.yaml,2
4741,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,2
4742,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",0-D `int32` `Tensor`.,tf.math.top_k.yaml,2
4743,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
4744,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
4745,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 4D input Tensor.,tf.nn.batch_norm_with_global_normalization.yaml,2
4746,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
4747,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
4748,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,2
4749,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 1D tensor.,tf.compat.v1.nn.relu_layer.yaml,2
4750,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 2D tensor.,tf.compat.v1.nn.relu_layer.yaml,2
4751,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",a 2D tensor.,tf.compat.v1.nn.relu_layer.yaml,2
4752,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","The predicted outputs, a tensor of size`[batch_size, d0, ..",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
4753,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,2
4754,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
4755,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
4756,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
4757,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
4758,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
4759,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","An n-D Tensor with at least 3 dimensions, the last 3 of which are the dimensions of each image.",tf.image.per_image_standardization.yaml,2
4760,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into `data`.,tf.sparse.segment_sum.yaml,2
4761,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D `Tensor` with indices into the output `Tensor`.,tf.sparse.segment_sum.yaml,2
4762,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
4763,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,2
4764,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,2
4765,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D Tensor of length 4.,tf.image.extract_patches.yaml,2
4766,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D Tensor of length 4.,tf.image.extract_patches.yaml,2
4767,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
4768,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
4769,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
4770,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})",1-D tensor with size the rank of `value`.,tf.image.random_crop.yaml,2
4771,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`0-D` string `Tensor`, the delimiter string.",tf.strings.split.yaml,2
4772,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
4773,81,0.031044317683194385,283,"frozenset({'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
4774,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
4775,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool1D.yaml,2
4776,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Optimizer identifier, one of String: name of an optimizerDictionary: configuration dictionary.",tf.keras.optimizers.get.yaml,2
4777,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
4778,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
4779,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
4780,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.data.experimental.make_csv_dataset.yaml,2
4781,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
4782,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
4783,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
4784,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
4785,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
4786,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
4787,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
4788,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
4789,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv3D.yaml,2
4790,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
4791,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
4792,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool2D.yaml,2
4793,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
4794,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv1D.yaml,2
4795,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
4796,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
4797,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
4798,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
4799,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
4800,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
4801,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
4802,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
4803,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
4804,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
4805,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.SeparableConv1D.yaml,2
4806,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool3D.yaml,2
4807,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
4808,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
4809,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
4810,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
4811,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
4812,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
4813,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
4814,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
4815,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
4816,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
4817,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
4818,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
4819,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
4820,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
4821,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
4822,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
4823,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
4824,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
4825,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
4826,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
4827,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
4828,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
4829,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
4830,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
4831,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
4832,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
4833,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
4834,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4835,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
4836,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
4837,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
4838,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
4839,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
4840,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
4841,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
4842,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
4843,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
4844,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool3D.yaml,2
4845,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
4846,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalMaxPool2D.yaml,2
4847,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
4848,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
4849,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
4850,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
4851,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
4852,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
4853,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
4854,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
4855,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
4856,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
4857,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
4858,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.SeparableConv2D.yaml,2
4859,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
4860,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
4861,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
4862,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
4863,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
4864,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
4865,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
4866,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
4867,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.Conv2D.yaml,2
4868,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.MaxPool1D.yaml,2
4869,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
4870,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})", One of `numpy.int32` or `numpy.int64`.,tf.compat.v1.ragged.constant_value.yaml,2
4871,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
4872,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
4873,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
4874,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
4875,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
4876,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
4877,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
4878,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
4879,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
4880,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
4881,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
4882,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})", One of `tf.int32` or `tf.int64`.,tf.ragged.range.yaml,2
4883,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
4884,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
4885,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
4886,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
4887,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
4888,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
4889,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
4890,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
4891,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
4892,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
4893,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
4894,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
4895,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
4896,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
4897,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
4898,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
4899,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
4900,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `nearest` or `bilinear`.",tf.keras.backend.resize_images.yaml,2
4901,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
4902,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
4903,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
4904,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
4905,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
4906,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
4907,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
4908,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
4909,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
4910,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
4911,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
4912,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
4913,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
4914,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
4915,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
4916,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
4917,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
4918,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
4919,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
4920,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
4921,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
4922,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
4923,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
4924,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
4925,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
4926,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
4927,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
4928,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
4929,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
4930,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
4931,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
4932,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
4933,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
4934,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
4935,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})",the string Tensor holding one or more serialized `Summary` protobufs,tf.summary.experimental.write_raw_pb.yaml,2
4936,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
4937,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling2D.yaml,2
4938,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
4939,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
4940,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
4941,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
4942,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
4943,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
4944,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
4945,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
4946,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
4947,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
4948,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
4949,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
4950,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
4951,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
4952,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
4953,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
4954,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
4955,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
4956,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
4957,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
4958,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
4959,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
4960,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
4961,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling2D.yaml,2
4962,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
4963,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
4964,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
4965,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
4966,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
4967,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
4968,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
4969,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
4970,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
4971,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
4972,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
4973,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
4974,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
4975,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
4976,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
4977,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
4978,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
4979,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
4980,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
4981,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
4982,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
4983,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
4984,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
4985,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
4986,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
4987,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
4988,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
4989,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})",One of `tf.int32` or `tf.int64`.,tf.ragged.constant.yaml,2
4990,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
4991,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
4992,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
4993,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
4994,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
4995,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
4996,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
4997,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling3D.yaml,2
4998,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
4999,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
5000,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
5001,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
5002,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
5003,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
5004,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
5005,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
5006,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
5007,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
5008,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.AveragePooling1D.yaml,2
5009,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
5010,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
5011,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
5012,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
5013,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","string, one of ""channels_last"", ""channels_first"".",tf.keras.backend.conv1d.yaml,2
5014,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
5015,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
5016,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
5017,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
5018,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
5019,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})",A scalar defining the depth of the one hot dimension.,tf.one_hot.yaml,2
5020,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
5021,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5022,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5023,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
5024,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
5025,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
5026,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
5027,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
5028,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling1D.yaml,2
5029,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
5030,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
5031,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5032,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5033,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
5034,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
5035,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
5036,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
5037,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})",Callable to execute one training step.,tf.compat.v1.train.basic_train_loop.yaml,2
5038,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
5039,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
5040,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
5041,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
5042,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
5043,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
5044,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
5045,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5046,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5047,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","A string, one of `channels_last` (default) or `channels_first`.",tf.keras.layers.GlobalAveragePooling3D.yaml,2
5048,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
5049,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
5050,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
5051,67,0.030495831505046072,278,"frozenset({'SOME_DTYPE', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
5052,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})"," Must be of type `float16`, `float32`, or `float64`.",tf.nn.conv1d.yaml,2
5053,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_std.yaml,2
5054,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A tensor of numeric type.,tf.math.zero_fraction.yaml,2
5055,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
5056,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,2
5057,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.image.extract_glimpse.yaml,2
5058,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have real numeric type.,tf.math.reduce_max.yaml,2
5059,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
5060,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
5061,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,2
5062,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,2
5063,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
5064,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})"," Must be of type `float16`, `float32`, or `float64`.",tf.compat.v1.nn.conv1d.yaml,2
5065,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,2
5066,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
5067,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,2
5068,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.compat.v1.nn.crelu.yaml,2
5069,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
5070,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `float16`, `float32`, `float64` `complex64` or`complex128`.",tf.math.reciprocal_no_nan.yaml,2
5071,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,2
5072,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.relu6.yaml,2
5073,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.substr.yaml,2
5074,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","If the `Variable` is of type string, this provides an estimate of how large each scalar in the `Variable` is.",tf.compat.v1.min_max_variable_partitioner.yaml,2
5075,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,2
5076,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A Tensor with type `float16`, `float32`, `float64`, `complex64`, or`complex128`.",tf.math.sigmoid.yaml,2
5077,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_strong.yaml,2
5078,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.strings.length.yaml,2
5079,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket.yaml,2
5080,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
5081,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32` or `float64`.,tf.nn.log_poisson_loss.yaml,2
5082,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",integer type to use for the output.,tf.random.categorical.yaml,2
5083,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.train.sdca_fprint.yaml,2
5084,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32`, or`int64`.",tf.random.stateless_uniform.yaml,2
5085,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` with type `float` or `double`.,tf.math.erfinv.yaml,2
5086,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,2
5087,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,2
5088,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have real numeric type.,tf.math.reduce_min.yaml,2
5089,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",a string-type Tensor to summarize.,tf.compat.v1.summary.text.yaml,2
5090,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.encode_base64.yaml,2
5091,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.debugging.assert_type.yaml,2
5092,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.reduce_sum.yaml,2
5093,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
5094,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,2
5095,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
5096,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,2
5097,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.image.extract_glimpse.yaml,2
5098,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","String, data type of returned Keras variable.",tf.keras.backend.ones.yaml,2
5099,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `uint8`.,tf.io.encode_jpeg.yaml,2
5100,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})"," For backwards compatibility reasons, this is separate from the single-string argument type.A list of Variables to warm-start.",tf.compat.v1.train.warm_start.yaml,2
5101,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.dynamic_partition.yaml,2
5102,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Boolean, whether the placeholder should have a ragged type.",tf.keras.backend.placeholder.yaml,2
5103,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Boolean, whether the placeholder should have a sparse type.",tf.keras.backend.placeholder.yaml,2
5104,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
5105,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,2
5106,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.audio.decode_wav.yaml,2
5107,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
5108,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.quantization.quantized_concat.yaml,2
5109,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
5110,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
5111,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.read_file.yaml,2
5112,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_json_example.yaml,2
5113,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d.yaml,2
5114,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` numerator of numeric type.,tf.math.truediv.yaml,2
5115,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` denominator of numeric type.,tf.math.truediv.yaml,2
5116,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_bmp.yaml,2
5117,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.crelu.yaml,2
5118,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_hash_bucket.yaml,2
5119,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Either the `string` `""SAME""` or `""VALID""` indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.nn.conv2d.yaml,2
5120,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A Tensor with type `float32` or `float64`.,tf.math.log_sigmoid.yaml,2
5121,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
5122,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.reduce_mean.yaml,2
5123,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.parse_tensor.yaml,2
5124,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.upper.yaml,2
5125,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
5126,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
5127,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` with type `float` or `double`.,tf.math.ndtri.yaml,2
5128,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,2
5129,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.sparse.reduce_sum.yaml,2
5130,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
5131,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,2
5132,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,2
5133,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,2
5134,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.extract_jpeg_shape.yaml,2
5135,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(Optional) The output type of the operation (int32 or int64).,tf.io.extract_jpeg_shape.yaml,2
5136,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.pad.yaml,2
5137,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
5138,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
5139,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.image.crop_and_resize.yaml,2
5140,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,2
5141,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
5142,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
5143,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,2
5144,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
5145,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
5146,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`,tf.where.yaml,2
5147,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
5148,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
5149,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
5150,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
5151,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
5152,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
5153,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
5154,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,2
5155,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
5156,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The numeric type to interpret each string in `string_tensor` as.,tf.compat.v1.string_to_number.yaml,2
5157,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_number.yaml,2
5158,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
5159,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A Tensor of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,2
5160,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.sparse_reduce_sum_sparse.yaml,2
5161,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `SparseTensor` with `values` property of type `int32` or`int64`.,tf.sparse.to_indicator.yaml,2
5162,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The output type (`int32` or `int64`).,tf.searchsorted.yaml,2
5163,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.image.draw_bounding_boxes.yaml,2
5164,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
5165,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,2
5166,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.reduce_prod.yaml,2
5167,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.compat.v1.py_func.yaml,2
5168,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.math.round.yaml,2
5169,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
5170,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.compat.v1.shape.yaml,2
5171,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
5172,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,2
5173,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.sparse_reduce_sum.yaml,2
5174,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
5175,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_gif.yaml,2
5176,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,2
5177,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
5178,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
5179,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
5180,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
5181,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
5182,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
5183,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A scalar `Tensor` with the same type as `x`.,tf.compat.v1.nn.dropout.yaml,2
5184,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.random.uniform.yaml,2
5185,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",`Tensor` of type `float32` or `float64`.,tf.tensordot.yaml,2
5186,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,2
5187,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32` or `float64`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,2
5188,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
5189,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",integer type to use for the output.,tf.random.stateless_categorical.yaml,2
5190,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
5191,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Should be of numeric type, `bool`, or`string`.",tf.compat.v1.count_nonzero.yaml,2
5192,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumprod.yaml,2
5193,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
5194,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
5195,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.compat.v1.assert_type.yaml,2
5196,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
5197,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,2
5198,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.lower.yaml,2
5199,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})", Must have numeric or variant type.,tf.math.conj.yaml,2
5200,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.decode_csv.yaml,2
5201,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,2
5202,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`.,tf.math.logical_not.yaml,2
5203,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_logsumexp.yaml,2
5204,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Type of weights, such as `tf.float32`.",tf.feature_column.weighted_categorical_column.yaml,2
5205,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5206,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5207,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5208,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5209,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5210,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5211,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5212,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5213,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5214,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
5215,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_jpeg.yaml,2
5216,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` with type `float`, `double`, `int64`, `int32`, `uint8`,`int16`, `int8`, `complex64`, or `complex128`.",tf.nn.bias_add.yaml,2
5217,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
5218,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.unicode_transcode.yaml,2
5219,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,2
5220,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_png.yaml,2
5221,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
5222,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.sparse_reduce_max.yaml,2
5223,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
5224,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
5225,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
5226,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
5227,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
5228,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,2
5229,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,2
5230,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
5231,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
5232,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The string type of an operation.,tf.no_gradient.yaml,2
5233,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.strings.substr.yaml,2
5234,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
5235,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
5236,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,2
5237,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns; an empty list if no value is returned (i.e., if the return value is `None`).",tf.py_function.yaml,2
5238,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","If the `Variable` is of type string, this provides an estimate of how large each scalar in the `Variable` is.",tf.compat.v1.variable_axis_size_partitioner.yaml,2
5239,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.math.in_top_k.yaml,2
5240,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.to_number.yaml,2
5241,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The numeric type to interpret each string in `string_tensor` as.,tf.strings.to_number.yaml,2
5242,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.strings.unicode_script.yaml,2
5243,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
5244,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
5245,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
5246,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,2
5247,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,2
5248,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.compat.v1.substr.yaml,2
5249,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Must be a non-quantized, real integer or floating point type.",tf.feature_column.numeric_column.yaml,2
5250,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
5251,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.sparse.reduce_max.yaml,2
5252,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
5253,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.pad.yaml,2
5254,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.matching_files.yaml,2
5255,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Scalar or vector of type string.,tf.io.matching_files.yaml,2
5256,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32` or`int64`.",tf.random.poisson.yaml,2
5257,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The type of the output: `float16`, `float32`, `float64`, `int32` or`int64`.",tf.compat.v1.random_poisson.yaml,2
5258,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
5259,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(Optional) The specified output type of the operation (`int32` or`int64`).,tf.shape.yaml,2
5260,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_compressed.yaml,2
5261,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
5262,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,2
5263,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.sparse_reduce_max_sparse.yaml,2
5264,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,2
5265,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_and_crop_jpeg.yaml,2
5266,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.io.decode_and_crop_jpeg.yaml,2
5267,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_euclidean_norm.yaml,2
5268,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The type of alpha, beta, and the output: `float16`, `float32`, or`float64`.",tf.random.gamma.yaml,2
5269,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
5270,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
5271,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,2
5272,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
5273,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
5274,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,2
5275,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.unsorted_segment_join.yaml,2
5276,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Should be of numeric type, `bool`, or `string`.",tf.math.count_nonzero.yaml,2
5277,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `bool`,tf.compat.v1.where.yaml,2
5278,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.io.encode_proto.yaml,2
5279,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The base type or tuple of base types for all objects that`conversion_func` accepts.,tf.register_tensor_conversion_function.yaml,2
5280,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_mean.yaml,2
5281,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what `func` returns.",tf.numpy_function.yaml,2
5282,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,2
5283,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have real numeric type.,tf.compat.v1.reduce_max.yaml,2
5284,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","The data type expected by the input, as a string (`float32`, `float64`, `int32`...)",tf.keras.Input.yaml,2
5285,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_fast.yaml,2
5286,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
5287,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","Either the `string`""SAME""`or`""VALID""`indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
5288,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(optional string) Only include devices matching this device type.,tf.config.list_logical_devices.yaml,2
5289,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,2
5290,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_csv.yaml,2
5291,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_variance.yaml,2
5292,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
5293,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
5294,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,2
5295,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumsum.yaml,2
5296,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.math.in_top_k.yaml,2
5297,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have real numeric type.,tf.compat.v1.reduce_min.yaml,2
5298,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.compat.v1.reduce_logsumexp.yaml,2
5299,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","String, data type of returned Keras variable.",tf.keras.backend.eye.yaml,2
5300,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_sum.yaml,2
5301,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
5302,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A scalar `Tensor` with the same type as x.,tf.nn.dropout.yaml,2
5303,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_proto.yaml,2
5304,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","values are treated according to their type: If value is None, then only the name is emitted.If value is True, then only the name is emitted.If value is False, then only the name prepended with 'no' is emitted.If value is a string then --name=value is emitted.If value is a collection, this will emit --name=value1,value2,value3.Everything else is converted to string an passed as such.",tf.compat.v1.flags.flag_dict_to_args.yaml,2
5305,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(optional string) Only include devices matching this device type.,tf.config.get_visible_devices.yaml,2
5306,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,2
5307,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
5308,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
5309,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
5310,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,2
5311,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,2
5312,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args.yaml,2
5313,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Should have numeric type.,tf.math.reduce_prod.yaml,2
5314,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32` or `int64` (default: 0).,tf.math.cumulative_logsumexp.yaml,2
5315,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.io.decode_base64.yaml,2
5316,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32` or `float64`.,tf.nn.weighted_cross_entropy_with_logits.yaml,2
5317,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",Must have numeric type.,tf.math.real.yaml,2
5318,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(Optional) The specified non-quantized numeric output type of the operation.,tf.compat.v1.size.yaml,2
5319,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",(optional string) Only include devices matching this device type.,tf.config.list_physical_devices.yaml,2
5320,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `string`.,tf.strings.strip.yaml,2
5321,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` type bool.,tf.math.logical_xor.yaml,2
5322,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type bool.,tf.math.logical_xor.yaml,2
5323,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
5324,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",The specified output type of the operation (`int32` or `int64`).,tf.shape_n.yaml,2
5325,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `float32`.,tf.audio.encode_wav.yaml,2
5326,73,0.030166739798157087,275,"frozenset({'SOME_DTYPE', 'type'})",A `Tensor` of type `int32`.,tf.audio.encode_wav.yaml,2
5327,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
5328,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
5329,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
5330,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
5331,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
5332,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
5333,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
5334,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
5335,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
5336,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
5337,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
5338,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
5339,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
5340,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
5341,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
5342,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
5343,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
5344,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
5345,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
5346,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
5347,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
5348,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
5349,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
5350,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
5351,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If true, exactly one flag must be True.",tf.compat.v1.flags.mark_bool_flags_as_mutual_exclusive.yaml,2
5352,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
5353,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
5354,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
5355,87,0.027314611671785873,249,"frozenset({'one', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
5356,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
5357,87,0.027314611671785873,249,"frozenset({'one', 'must'})","(Note: Unlike `tf.stack`, the `axis` parameter must be statically known.) Negative values are supported only if the rank of at least one`values` value is statically known.",tf.ragged.stack.yaml,2
5358,87,0.027314611671785873,249,"frozenset({'one', 'must'})",At least one operand must be sparse.,tf.compat.v1.sparse_add.yaml,2
5359,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
5360,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
5361,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
5362,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If not `None`, there must be one dimension per output.",tf.compat.v1.tpu.shard.yaml,2
5363,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
5364,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
5365,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
5366,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
5367,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
5368,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
5369,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
5370,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
5371,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
5372,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
5373,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
5374,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
5375,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
5376,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
5377,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
5378,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
5379,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
5380,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
5381,87,0.027314611671785873,249,"frozenset({'one', 'must'})","At least one of {`shape`, `ndim`} must be specified.",tf.keras.backend.placeholder.yaml,2
5382,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
5383,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
5384,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
5385,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
5386,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
5387,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
5388,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
5389,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
5390,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
5391,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
5392,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
5393,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
5394,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
5395,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
5396,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
5397,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
5398,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
5399,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
5400,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
5401,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
5402,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
5403,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
5404,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
5405,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
5406,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
5407,87,0.027314611671785873,249,"frozenset({'one', 'must'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
5408,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
5409,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
5410,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
5411,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
5412,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
5413,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
5414,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
5415,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
5416,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
5417,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
5418,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
5419,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
5420,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
5421,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
5422,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
5423,87,0.027314611671785873,249,"frozenset({'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
5424,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
5425,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
5426,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
5427,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
5428,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
5429,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
5430,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
5431,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
5432,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
5433,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
5434,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
5435,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
5436,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
5437,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
5438,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
5439,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
5440,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
5441,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
5442,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
5443,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
5444,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
5445,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
5446,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
5447,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
5448,87,0.027314611671785873,249,"frozenset({'one', 'must'})",At least one operand must be sparse.,tf.sparse.add.yaml,2
5449,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
5450,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
5451,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
5452,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
5453,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
5454,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
5455,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
5456,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
5457,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
5458,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
5459,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
5460,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
5461,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
5462,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
5463,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If provided, it must be one of the `features` key, otherwise results in `ValueError`.",tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
5464,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If true, exactly one of the flags must have a value other than None.",tf.compat.v1.flags.mark_flags_as_mutual_exclusive.yaml,2
5465,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
5466,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
5467,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
5468,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
5469,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
5470,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
5471,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
5472,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of`""UTF-8"", ""UTF-16-BE"", ""UTF-32-BE""`.",tf.strings.unicode_transcode.yaml,2
5473,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
5474,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
5475,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
5476,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
5477,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
5478,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
5479,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
5480,87,0.027314611671785873,249,"frozenset({'one', 'must'})","If provided, it must be one of the `features` key, otherwise results in `ValueError`.",tf.data.experimental.make_batched_features_dataset.yaml,2
5481,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
5482,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
5483,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
5484,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
5485,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
5486,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
5487,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
5488,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
5489,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
5490,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
5491,87,0.027314611671785873,249,"frozenset({'one', 'must'})"," Its output must have the same structure as `initializer` if one is provided, otherwise it must have the same structure as `elems`.",tf.scan.yaml,2
5492,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
5493,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
5494,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
5495,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
5496,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
5497,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
5498,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
5499,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
5500,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
5501,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
5502,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
5503,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
5504,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
5505,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
5506,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
5507,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
5508,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
5509,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
5510,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
5511,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
5512,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
5513,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
5514,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
5515,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
5516,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
5517,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
5518,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
5519,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
5520,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
5521,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
5522,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
5523,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
5524,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
5525,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
5526,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
5527,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
5528,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
5529,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
5530,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
5531,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
5532,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
5533,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
5534,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
5535,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
5536,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
5537,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
5538,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
5539,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
5540,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
5541,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
5542,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
5543,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
5544,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
5545,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
5546,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
5547,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
5548,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5549,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5550,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
5551,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
5552,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
5553,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
5554,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
5555,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
5556,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5557,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5558,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
5559,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
5560,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
5561,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
5562,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
5563,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
5564,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
5565,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
5566,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
5567,87,0.027314611671785873,249,"frozenset({'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
5568,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
5569,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5570,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5571,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
5572,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
5573,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
5574,87,0.027314611671785873,249,"frozenset({'one', 'must'})"," Its output must have the same structure as `dtype` if one is provided, otherwise it must have the same structure as `elems`.",tf.map_fn.yaml,2
5575,87,0.027314611671785873,249,"frozenset({'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
5576,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
5577,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
5578,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
5579,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
5580,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
5581,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
5582,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
5583,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
5584,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
5585,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
5586,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
5587,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
5588,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
5589,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
5590,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
5591,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
5592,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
5593,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
5594,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
5595,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
5596,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
5597,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
5598,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
5599,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
5600,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
5601,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
5602,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
5603,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
5604,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
5605,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
5606,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
5607,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
5608,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
5609,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
5610,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
5611,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
5612,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
5613,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
5614,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
5615,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
5616,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
5617,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
5618,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
5619,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
5620,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
5621,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
5622,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
5623,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
5624,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
5625,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
5626,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
5627,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
5628,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
5629,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
5630,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
5631,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
5632,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
5633,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
5634,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
5635,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
5636,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
5637,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
5638,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
5639,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
5640,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
5641,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
5642,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
5643,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
5644,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
5645,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
5646,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
5647,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
5648,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
5649,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
5650,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
5651,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
5652,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
5653,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
5654,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
5655,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
5656,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
5657,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
5658,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
5659,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
5660,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
5661,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
5662,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
5663,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
5664,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
5665,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
5666,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
5667,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
5668,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
5669,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
5670,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
5671,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
5672,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
5673,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
5674,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
5675,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
5676,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
5677,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
5678,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
5679,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
5680,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
5681,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
5682,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
5683,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
5684,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
5685,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
5686,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
5687,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
5688,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
5689,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
5690,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
5691,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
5692,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
5693,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
5694,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
5695,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
5696,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
5697,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
5698,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
5699,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
5700,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
5701,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
5702,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
5703,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
5704,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
5705,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
5706,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
5707,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
5708,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
5709,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
5710,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
5711,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
5712,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
5713,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
5714,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
5715,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
5716,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
5717,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
5718,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
5719,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
5720,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
5721,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
5722,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
5723,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
5724,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
5725,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
5726,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
5727,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
5728,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
5729,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
5730,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
5731,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
5732,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
5733,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
5734,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
5735,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
5736,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
5737,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
5738,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
5739,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
5740,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
5741,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
5742,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
5743,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
5744,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
5745,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
5746,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
5747,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
5748,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
5749,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
5750,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
5751,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
5752,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
5753,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
5754,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
5755,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
5756,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
5757,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
5758,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
5759,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
5760,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
5761,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
5762,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
5763,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
5764,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
5765,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
5766,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
5767,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
5768,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","If unspecified, this callable defaults to the following serialization/deserialization function:`lambda layer: layer.__class__.from_config(layer.get_config())`.",tf.keras.models.clone_model.yaml,2
5769,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
5770,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
5771,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
5772,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
5773,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
5774,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
5775,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
5776,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
5777,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
5778,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
5779,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
5780,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
5781,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
5782,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
5783,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
5784,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
5785,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
5786,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
5787,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5788,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
5789,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
5790,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
5791,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
5792,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
5793,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
5794,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
5795,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
5796,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5797,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
5798,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
5799,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
5800,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
5801,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
5802,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
5803,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
5804,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
5805,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
5806,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
5807,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
5808,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
5809,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
5810,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5811,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
5812,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
5813,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
5814,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
5815,63,0.02632733655111891,240,"frozenset({'SOME_DTYPE', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
5816,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,3
5817,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
5818,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,3
5819,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
5820,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
5821,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
5822,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,3
5823,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
5824,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,3
5825,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
5826,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,3
5827,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
5828,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,3
5829,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,3
5830,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
5831,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,3
5832,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
5833,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
5834,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,3
5835,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,3
5836,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
5837,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
5838,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,3
5839,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,3
5840,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
5841,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
5842,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
5843,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
5844,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
5845,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,3
5846,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
5847,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,3
5848,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
5849,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,3
5850,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
5851,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,3
5852,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
5853,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,3
5854,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,3
5855,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,3
5856,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,3
5857,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
5858,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
5859,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,3
5860,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
5861,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
5862,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
5863,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
5864,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
5865,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
5866,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,3
5867,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
5868,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
5869,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
5870,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
5871,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,3
5872,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
5873,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
5874,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,3
5875,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
5876,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,3
5877,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
5878,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
5879,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,3
5880,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,3
5881,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
5882,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
5883,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,3
5884,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
5885,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
5886,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
5887,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,3
5888,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
5889,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,3
5890,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
5891,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,3
5892,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,3
5893,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
5894,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
5895,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,3
5896,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
5897,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,3
5898,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,3
5899,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
5900,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,3
5901,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,3
5902,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,3
5903,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
5904,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
5905,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,3
5906,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,3
5907,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,3
5908,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
5909,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,3
5910,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
5911,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,3
5912,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,3
5913,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,3
5914,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,3
5915,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,3
5916,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
5917,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,3
5918,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,3
5919,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
5920,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
5921,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
5922,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,3
5923,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,3
5924,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,3
5925,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,3
5926,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
5927,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,3
5928,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
5929,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
5930,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
5931,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,3
5932,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,3
5933,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
5934,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,3
5935,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
5936,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
5937,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
5938,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
5939,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,3
5940,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
5941,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
5942,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
5943,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
5944,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
5945,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,3
5946,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
5947,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,3
5948,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
5949,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
5950,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,3
5951,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
5952,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,3
5953,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,3
5954,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,3
5955,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,3
5956,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
5957,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,3
5958,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
5959,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
5960,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,3
5961,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
5962,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,3
5963,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
5964,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,3
5965,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,3
5966,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
5967,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
5968,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,3
5969,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,3
5970,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,3
5971,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
5972,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,3
5973,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
5974,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,3
5975,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
5976,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
5977,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,3
5978,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
5979,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
5980,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
5981,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
5982,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,3
5983,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
5984,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,3
5985,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,3
5986,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
5987,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
5988,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,3
5989,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,3
5990,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
5991,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
5992,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
5993,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
5994,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
5995,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
5996,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,3
5997,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,3
5998,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
5999,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
6000,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,3
6001,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
6002,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,3
6003,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,3
6004,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,3
6005,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
6006,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,3
6007,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
6008,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6009,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6010,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,3
6011,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
6012,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
6013,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,3
6014,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
6015,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
6016,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
6017,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,3
6018,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,3
6019,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
6020,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
6021,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
6022,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
6023,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,3
6024,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,3
6025,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,3
6026,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6027,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6028,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,3
6029,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,3
6030,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,3
6031,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,3
6032,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
6033,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,3
6034,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
6035,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6036,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6037,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,3
6038,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
6039,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,3
6040,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
6041,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
6042,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
6043,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
6044,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,3
6045,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,3
6046,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,3
6047,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,3
6048,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6049,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6050,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
6051,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,3
6052,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,3
6053,103,0.026107942079859586,238,"frozenset({'SOME_DTYPE', 'following', 'one'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,3
6054,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
6055,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
6056,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
6057,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
6058,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
6059,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
6060,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
6061,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
6062,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
6063,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
6064,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
6065,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
6066,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
6067,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
6068,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
6069,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
6070,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
6071,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
6072,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
6073,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
6074,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
6075,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
6076,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
6077,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
6078,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
6079,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
6080,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
6081,85,0.026107942079859586,238,"frozenset({'one', 'following'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
6082,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
6083,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
6084,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
6085,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
6086,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
6087,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
6088,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
6089,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
6090,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
6091,85,0.026107942079859586,238,"frozenset({'one', 'following'})","One of the following: String, path where to save the model`h5py.File` object where to save the model ",tf.keras.models.save_model.yaml,2
6092,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
6093,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
6094,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
6095,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
6096,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
6097,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
6098,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
6099,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
6100,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
6101,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
6102,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
6103,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
6104,85,0.026107942079859586,238,"frozenset({'one', 'following'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
6105,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
6106,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
6107,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
6108,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
6109,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
6110,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
6111,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
6112,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
6113,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
6114,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
6115,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
6116,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
6117,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
6118,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
6119,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
6120,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
6121,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
6122,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
6123,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
6124,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
6125,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
6126,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
6127,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
6128,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
6129,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
6130,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
6131,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
6132,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
6133,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
6134,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
6135,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
6136,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
6137,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
6138,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
6139,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
6140,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
6141,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6142,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
6143,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
6144,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
6145,85,0.026107942079859586,238,"frozenset({'one', 'following'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
6146,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
6147,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
6148,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
6149,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
6150,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
6151,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
6152,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
6153,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
6154,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
6155,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
6156,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
6157,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
6158,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
6159,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
6160,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
6161,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
6162,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
6163,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
6164,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
6165,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
6166,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
6167,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
6168,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
6169,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
6170,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
6171,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
6172,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
6173,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
6174,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
6175,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
6176,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
6177,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
6178,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
6179,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
6180,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
6181,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
6182,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
6183,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
6184,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
6185,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
6186,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
6187,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
6188,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
6189,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
6190,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
6191,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
6192,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
6193,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
6194,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
6195,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
6196,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
6197,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
6198,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
6199,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
6200,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
6201,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
6202,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
6203,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
6204,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
6205,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
6206,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
6207,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
6208,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
6209,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
6210,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
6211,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
6212,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
6213,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
6214,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
6215,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
6216,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
6217,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
6218,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
6219,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
6220,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
6221,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
6222,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
6223,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
6224,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
6225,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
6226,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
6227,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
6228,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
6229,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
6230,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
6231,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
6232,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
6233,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
6234,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
6235,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
6236,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
6237,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
6238,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
6239,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
6240,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
6241,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
6242,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
6243,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
6244,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
6245,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
6246,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
6247,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
6248,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
6249,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
6250,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
6251,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
6252,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
6253,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
6254,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
6255,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
6256,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
6257,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
6258,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6259,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
6260,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
6261,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
6262,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
6263,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
6264,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
6265,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
6266,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
6267,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
6268,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
6269,85,0.026107942079859586,238,"frozenset({'one', 'following'})","One of the following: String, path to the saved model`h5py.File` object from which to load the model ",tf.keras.models.load_model.yaml,2
6270,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
6271,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
6272,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
6273,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
6274,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
6275,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
6276,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
6277,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
6278,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
6279,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
6280,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
6281,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
6282,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
6283,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
6284,85,0.026107942079859586,238,"frozenset({'one', 'following'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
6285,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
6286,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
6287,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
6288,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
6289,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
6290,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
6291,85,0.026107942079859586,238,"frozenset({'one', 'following'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
6292,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,2
6293,84,0.025998244844229926,237,"frozenset({'following', 'must'})"," The glimpse height must be specified first, following by the glimpse width.",tf.compat.v1.image.extract_glimpse.yaml,2
6294,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
6295,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,2
6296,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
6297,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
6298,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,2
6299,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,2
6300,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
6301,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,2
6302,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
6303,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,2
6304,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
6305,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,2
6306,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,2
6307,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
6308,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,2
6309,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
6310,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
6311,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,2
6312,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,2
6313,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
6314,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
6315,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,2
6316,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,2
6317,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
6318,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
6319,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
6320,84,0.025998244844229926,237,"frozenset({'following', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
6321,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
6322,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,2
6323,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
6324,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,2
6325,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
6326,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,2
6327,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
6328,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,2
6329,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
6330,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,2
6331,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,2
6332,84,0.025998244844229926,237,"frozenset({'following', 'must'})"," The glimpse height must be specified first, following by the glimpse width.",tf.image.extract_glimpse.yaml,2
6333,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,2
6334,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
6335,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
6336,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,2
6337,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
6338,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
6339,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
6340,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,2
6341,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
6342,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
6343,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
6344,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
6345,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
6346,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
6347,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,2
6348,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
6349,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
6350,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,2
6351,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
6352,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,2
6353,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
6354,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
6355,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,2
6356,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,2
6357,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
6358,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
6359,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
6360,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
6361,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
6362,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
6363,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,2
6364,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
6365,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,2
6366,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
6367,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,2
6368,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,2
6369,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
6370,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
6371,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,2
6372,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
6373,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,2
6374,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,2
6375,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
6376,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,2
6377,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,2
6378,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,2
6379,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
6380,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
6381,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,2
6382,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,2
6383,84,0.025998244844229926,237,"frozenset({'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,2
6384,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
6385,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,2
6386,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
6387,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,2
6388,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,2
6389,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,2
6390,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,2
6391,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
6392,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
6393,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,2
6394,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,2
6395,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
6396,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
6397,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
6398,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,2
6399,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,2
6400,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,2
6401,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,2
6402,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
6403,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,2
6404,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
6405,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,2
6406,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
6407,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,2
6408,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,2
6409,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
6410,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,2
6411,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
6412,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
6413,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
6414,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
6415,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,2
6416,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
6417,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
6418,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
6419,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
6420,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
6421,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,2
6422,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
6423,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,2
6424,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
6425,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
6426,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,2
6427,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
6428,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,2
6429,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,2
6430,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,2
6431,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,2
6432,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
6433,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,2
6434,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
6435,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,2
6436,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,2
6437,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
6438,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,2
6439,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
6440,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,2
6441,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,2
6442,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
6443,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
6444,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,2
6445,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,2
6446,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,2
6447,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
6448,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,2
6449,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
6450,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,2
6451,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
6452,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
6453,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,2
6454,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
6455,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
6456,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
6457,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,2
6458,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,2
6459,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
6460,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,2
6461,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,2
6462,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
6463,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
6464,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,2
6465,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,2
6466,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
6467,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
6468,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
6469,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
6470,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
6471,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,2
6472,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,2
6473,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,2
6474,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
6475,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
6476,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,2
6477,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
6478,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,2
6479,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,2
6480,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,2
6481,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
6482,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,2
6483,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
6484,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
6485,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,2
6486,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,2
6487,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
6488,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
6489,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,2
6490,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
6491,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
6492,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
6493,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,2
6494,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,2
6495,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
6496,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
6497,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
6498,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
6499,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,2
6500,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,2
6501,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,2
6502,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
6503,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,2
6504,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,2
6505,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,2
6506,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,2
6507,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
6508,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,2
6509,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
6510,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
6511,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,2
6512,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,2
6513,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
6514,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,2
6515,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
6516,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
6517,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
6518,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
6519,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,2
6520,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,2
6521,84,0.025998244844229926,237,"frozenset({'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,2
6522,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,2
6523,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
6524,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,2
6525,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
6526,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,2
6527,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,2
6528,84,0.025998244844229926,237,"frozenset({'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,2
6529,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,3
6530,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
6531,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,3
6532,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
6533,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
6534,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
6535,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,3
6536,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
6537,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,3
6538,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
6539,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,3
6540,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
6541,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,3
6542,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,3
6543,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
6544,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,3
6545,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
6546,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
6547,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,3
6548,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,3
6549,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
6550,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
6551,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,3
6552,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,3
6553,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
6554,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
6555,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
6556,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
6557,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
6558,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,3
6559,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
6560,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,3
6561,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
6562,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,3
6563,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
6564,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,3
6565,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
6566,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,3
6567,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,3
6568,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,3
6569,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
6570,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
6571,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,3
6572,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
6573,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
6574,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
6575,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
6576,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
6577,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
6578,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
6579,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
6580,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
6581,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
6582,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,3
6583,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
6584,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
6585,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,3
6586,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
6587,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,3
6588,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
6589,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
6590,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,3
6591,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,3
6592,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
6593,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
6594,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,3
6595,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
6596,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
6597,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
6598,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,3
6599,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
6600,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,3
6601,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
6602,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,3
6603,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,3
6604,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
6605,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
6606,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,3
6607,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
6608,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,3
6609,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,3
6610,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
6611,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,3
6612,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,3
6613,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,3
6614,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
6615,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
6616,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,3
6617,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,3
6618,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,3
6619,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
6620,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,3
6621,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
6622,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,3
6623,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,3
6624,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,3
6625,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,3
6626,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,3
6627,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
6628,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,3
6629,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,3
6630,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
6631,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
6632,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
6633,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,3
6634,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,3
6635,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,3
6636,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,3
6637,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
6638,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,3
6639,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
6640,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
6641,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
6642,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,3
6643,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,3
6644,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
6645,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,3
6646,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
6647,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
6648,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
6649,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
6650,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,3
6651,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
6652,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
6653,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
6654,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
6655,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
6656,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,3
6657,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
6658,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,3
6659,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
6660,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
6661,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,3
6662,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
6663,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,3
6664,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,3
6665,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,3
6666,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,3
6667,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
6668,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,3
6669,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
6670,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
6671,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,3
6672,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
6673,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,3
6674,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
6675,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,3
6676,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,3
6677,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
6678,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
6679,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,3
6680,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,3
6681,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,3
6682,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
6683,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,3
6684,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
6685,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,3
6686,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
6687,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
6688,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,3
6689,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
6690,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
6691,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
6692,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
6693,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,3
6694,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
6695,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,3
6696,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,3
6697,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
6698,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
6699,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,3
6700,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,3
6701,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
6702,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
6703,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
6704,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
6705,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
6706,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
6707,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,3
6708,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,3
6709,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
6710,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
6711,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,3
6712,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
6713,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,3
6714,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,3
6715,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,3
6716,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
6717,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,3
6718,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
6719,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6720,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6721,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,3
6722,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
6723,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
6724,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,3
6725,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
6726,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
6727,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
6728,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,3
6729,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,3
6730,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
6731,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
6732,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
6733,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
6734,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,3
6735,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,3
6736,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,3
6737,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6738,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6739,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,3
6740,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,3
6741,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,3
6742,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
6743,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,3
6744,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
6745,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6746,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6747,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,3
6748,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
6749,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,3
6750,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
6751,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
6752,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
6753,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
6754,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,3
6755,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,3
6756,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,3
6757,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,3
6758,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6759,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6760,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
6761,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,3
6762,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,3
6763,102,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,3
6764,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,3
6765,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
6766,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,3
6767,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
6768,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
6769,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
6770,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,3
6771,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
6772,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,3
6773,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
6774,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,3
6775,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
6776,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,3
6777,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,3
6778,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
6779,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,3
6780,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
6781,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
6782,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,3
6783,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,3
6784,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
6785,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
6786,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,3
6787,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,3
6788,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
6789,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
6790,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
6791,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
6792,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
6793,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,3
6794,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
6795,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,3
6796,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
6797,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,3
6798,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
6799,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,3
6800,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
6801,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,3
6802,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,3
6803,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,3
6804,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
6805,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
6806,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,3
6807,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
6808,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
6809,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
6810,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
6811,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
6812,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
6813,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
6814,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
6815,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
6816,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
6817,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,3
6818,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
6819,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
6820,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,3
6821,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
6822,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,3
6823,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
6824,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
6825,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,3
6826,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,3
6827,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
6828,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
6829,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,3
6830,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
6831,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
6832,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
6833,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,3
6834,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
6835,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,3
6836,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
6837,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,3
6838,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,3
6839,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
6840,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
6841,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,3
6842,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
6843,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,3
6844,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,3
6845,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
6846,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,3
6847,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,3
6848,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,3
6849,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
6850,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
6851,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,3
6852,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,3
6853,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,3
6854,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
6855,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,3
6856,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
6857,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,3
6858,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,3
6859,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,3
6860,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,3
6861,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,3
6862,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
6863,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,3
6864,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,3
6865,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
6866,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
6867,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
6868,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,3
6869,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,3
6870,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,3
6871,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,3
6872,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
6873,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,3
6874,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
6875,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
6876,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
6877,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,3
6878,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,3
6879,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
6880,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,3
6881,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
6882,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
6883,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
6884,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
6885,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,3
6886,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
6887,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
6888,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
6889,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
6890,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
6891,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,3
6892,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
6893,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,3
6894,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
6895,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
6896,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,3
6897,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
6898,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,3
6899,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,3
6900,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,3
6901,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,3
6902,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
6903,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,3
6904,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
6905,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
6906,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,3
6907,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
6908,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,3
6909,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
6910,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,3
6911,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,3
6912,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
6913,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
6914,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,3
6915,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,3
6916,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,3
6917,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
6918,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,3
6919,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
6920,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,3
6921,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
6922,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
6923,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,3
6924,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
6925,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
6926,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
6927,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
6928,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,3
6929,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
6930,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,3
6931,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,3
6932,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
6933,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
6934,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,3
6935,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,3
6936,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
6937,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
6938,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
6939,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
6940,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
6941,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
6942,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,3
6943,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,3
6944,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
6945,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
6946,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,3
6947,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
6948,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,3
6949,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,3
6950,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,3
6951,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
6952,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,3
6953,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
6954,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6955,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
6956,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,3
6957,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
6958,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
6959,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,3
6960,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
6961,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
6962,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
6963,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,3
6964,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,3
6965,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
6966,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
6967,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
6968,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
6969,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,3
6970,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,3
6971,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,3
6972,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6973,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
6974,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,3
6975,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,3
6976,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,3
6977,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
6978,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,3
6979,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
6980,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6981,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
6982,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,3
6983,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
6984,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,3
6985,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
6986,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
6987,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
6988,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
6989,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,3
6990,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,3
6991,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,3
6992,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,3
6993,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6994,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
6995,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
6996,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,3
6997,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,3
6998,104,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,3
6999,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,3
7000,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
7001,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,3
7002,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
7003,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
7004,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,3
7005,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,3
7006,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
7007,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,3
7008,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
7009,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,3
7010,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
7011,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,3
7012,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,3
7013,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
7014,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,3
7015,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
7016,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
7017,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,3
7018,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,3
7019,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
7020,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
7021,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,3
7022,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,3
7023,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
7024,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
7025,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
7026,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
7027,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
7028,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,3
7029,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
7030,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,3
7031,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
7032,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,3
7033,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
7034,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,3
7035,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
7036,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,3
7037,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,3
7038,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,3
7039,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
7040,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
7041,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,3
7042,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
7043,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
7044,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
7045,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,3
7046,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
7047,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
7048,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
7049,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
7050,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
7051,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
7052,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,3
7053,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
7054,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
7055,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,3
7056,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
7057,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,3
7058,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
7059,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
7060,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,3
7061,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,3
7062,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
7063,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
7064,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,3
7065,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
7066,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
7067,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
7068,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,3
7069,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
7070,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,3
7071,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
7072,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,3
7073,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,3
7074,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
7075,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
7076,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,3
7077,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
7078,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,3
7079,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,3
7080,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
7081,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,3
7082,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,3
7083,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,3
7084,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
7085,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
7086,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,3
7087,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,3
7088,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,3
7089,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
7090,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,3
7091,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
7092,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,3
7093,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,3
7094,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,3
7095,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,3
7096,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,3
7097,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
7098,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,3
7099,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,3
7100,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
7101,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
7102,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
7103,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,3
7104,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,3
7105,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,3
7106,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,3
7107,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
7108,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,3
7109,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
7110,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,3
7111,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
7112,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,3
7113,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,3
7114,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
7115,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,3
7116,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
7117,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
7118,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
7119,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
7120,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,3
7121,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
7122,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
7123,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
7124,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
7125,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
7126,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,3
7127,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
7128,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,3
7129,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
7130,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
7131,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,3
7132,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
7133,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,3
7134,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,3
7135,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,3
7136,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,3
7137,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
7138,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,3
7139,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
7140,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,3
7141,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,3
7142,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
7143,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,3
7144,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
7145,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,3
7146,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,3
7147,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
7148,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
7149,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,3
7150,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,3
7151,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,3
7152,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
7153,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,3
7154,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
7155,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,3
7156,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
7157,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
7158,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,3
7159,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
7160,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
7161,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
7162,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,3
7163,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,3
7164,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
7165,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,3
7166,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,3
7167,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
7168,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
7169,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,3
7170,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,3
7171,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
7172,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
7173,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
7174,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
7175,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
7176,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,3
7177,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,3
7178,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,3
7179,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
7180,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
7181,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,3
7182,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
7183,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,3
7184,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,3
7185,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,3
7186,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
7187,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,3
7188,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
7189,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
7190,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,3
7191,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,3
7192,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
7193,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
7194,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,3
7195,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
7196,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
7197,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
7198,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,3
7199,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,3
7200,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
7201,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
7202,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
7203,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
7204,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,3
7205,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,3
7206,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,3
7207,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
7208,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,3
7209,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,3
7210,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,3
7211,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,3
7212,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
7213,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,3
7214,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
7215,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
7216,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,3
7217,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,3
7218,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
7219,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,3
7220,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
7221,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
7222,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
7223,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
7224,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,3
7225,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,3
7226,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,3
7227,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,3
7228,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
7229,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,3
7230,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
7231,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,3
7232,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,3
7233,111,0.0257788503729706,235,"frozenset({'one', 'following', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,3
7234,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linalg.band_part.yaml,4
7235,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,4
7236,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xlogy.yaml,4
7237,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,4
7238,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,4
7239,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_max.yaml,4
7240,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `uint8`, `uint16`.",tf.image.encode_png.yaml,4
7241,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,4
7242,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.quantization.dequantize.yaml,4
7243,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,4
7244,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_add.yaml,4
7245,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,4
7246,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_update.yaml,4
7247,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.zeta.yaml,4
7248,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,4
7249,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.solve.yaml,4
7250,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,4
7251,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,4
7252,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.multiply_no_nan.yaml,4
7253,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_sub.yaml,4
7254,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,4
7255,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,4
7256,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.substr.yaml,4
7257,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.broadcast_to.yaml,4
7258,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,4
7259,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
7260,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,4
7261,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,4
7262,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,4
7263,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.dtypes.complex.yaml,4
7264,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,4
7265,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft3d.yaml,4
7266,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,4
7267,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_add.yaml,4
7268,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,4
7269,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igamma.yaml,4
7270,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,4
7271,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_update.yaml,4
7272,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.image.draw_bounding_boxes.yaml,4
7273,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_mul.yaml,4
7274,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,4
7275,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,4
7276,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types:`half`,`float32`, `float64`.",tf.compat.v1.math.softmax.yaml,4
7277,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,4
7278,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,4
7279,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,4
7280,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_min.yaml,4
7281,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,4
7282,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,4
7283,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,4
7284,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,4
7285,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
7286,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
7287,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft.yaml,4
7288,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,4
7289,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,4
7290,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `float32`, `float64`, `bool`.",tf.strings.as_string.yaml,4
7291,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,4
7292,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_mean.yaml,4
7293,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,4
7294,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,4
7295,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.triangular_solve.yaml,4
7296,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.unravel_index.yaml,4
7297,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
7298,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,4
7299,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_avg_pool.yaml,4
7300,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,4
7301,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,4
7302,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,4
7303,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_div.yaml,4
7304,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,4
7305,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_min.yaml,4
7306,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,4
7307,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.space_to_batch.yaml,4
7308,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i0.yaml,4
7309,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,4
7310,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,4
7311,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `uint8`, `uint16`, `int8`, `int16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.crop_and_resize.yaml,4
7312,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,4
7313,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.softmax.yaml,4
7314,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.imag.yaml,4
7315,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,4
7316,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float`, `double`,`complex64`, `complex128`.",tf.math.angle.yaml,4
7317,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`.",tf.math.nextafter.yaml,4
7318,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space.yaml,4
7319,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
7320,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,4
7321,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.math.bessel_i1.yaml,4
7322,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather.yaml,4
7323,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.gather.yaml,4
7324,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,4
7325,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reshape.yaml,4
7326,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,4
7327,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `uint8`, `int16`, `uint16`, `int32`, `int64`, `half`, `float32`, `float64`.",tf.compat.v1.image.resize_area.yaml,4
7328,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.right_shift.yaml,4
7329,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_add.yaml,4
7330,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `uint8`, `int8`,`int16`, `int32`, `int64`.",tf.image.sample_distorted_bounding_box.yaml,4
7331,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `half`.",tf.compat.v1.image.draw_bounding_boxes.yaml,4
7332,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,4
7333,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.divide_no_nan.yaml,4
7334,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.arg_max.yaml,4
7335,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,4
7336,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,4
7337,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,4
7338,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_prod.yaml,4
7339,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.linalg.logm.yaml,4
7340,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float16`, `float32`, `float64`, `int32`, `int64`.",tf.nn.leaky_relu.yaml,4
7341,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.inv.yaml,4
7342,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,4
7343,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft2d.yaml,4
7344,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,4
7345,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.batch_to_space_nd.yaml,4
7346,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,4
7347,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_sum.yaml,4
7348,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_or.yaml,4
7349,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,4
7350,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmin.yaml,4
7351,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,4
7352,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,4
7353,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
7354,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
7355,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumprod.yaml,4
7356,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,4
7357,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,4
7358,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,4
7359,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,4
7360,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,4
7361,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_max_pool.yaml,4
7362,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,4
7363,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_max.yaml,4
7364,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,4
7365,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,4
7366,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.fill.yaml,4
7367,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,4
7368,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.left_shift.yaml,4
7369,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.scatter_nd.yaml,4
7370,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.igammac.yaml,4
7371,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmin.yaml,4
7372,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,4
7373,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.xdivy.yaml,4
7374,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,4
7375,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_conv2d.yaml,4
7376,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.sqrtm.yaml,4
7377,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,4
7378,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.argmax.yaml,4
7379,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,4
7380,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.strings.substr.yaml,4
7381,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.invert.yaml,4
7382,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,4
7383,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,4
7384,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.segment_min.yaml,4
7385,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.math.in_top_k.yaml,4
7386,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.linspace.yaml,4
7387,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,4
7388,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.det.yaml,4
7389,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,4
7390,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.",tf.compat.v1.train.piecewise_constant.yaml,4
7391,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
7392,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,4
7393,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.invert_permutation.yaml,4
7394,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,4
7395,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,4
7396,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,4
7397,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_prod.yaml,4
7398,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_sub.yaml,4
7399,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,4
7400,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.substr.yaml,4
7401,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.polygamma.yaml,4
7402,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,4
7403,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,4
7404,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.qr.yaml,4
7405,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.argmax.yaml,4
7406,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,4
7407,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
7408,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,4
7409,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,4
7410,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,4
7411,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch_nd.yaml,4
7412,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft2d.yaml,4
7413,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tile.yaml,4
7414,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
7415,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
7416,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.linalg.slogdet.yaml,4
7417,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
7418,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.cholesky.yaml,4
7419,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`.",tf.math.betainc.yaml,4
7420,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather_nd.yaml,4
7421,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,4
7422,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_nd_add.yaml,4
7423,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,4
7424,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,4
7425,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.strings.unsorted_segment_join.yaml,4
7426,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.gather_nd.yaml,4
7427,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,4
7428,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,4
7429,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.tensor_scatter_nd_sub.yaml,4
7430,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,4
7431,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,4
7432,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,4
7433,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`,`int64`.",tf.batch_to_space.yaml,4
7434,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.batch_to_space.yaml,4
7435,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,4
7436,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
7437,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,4
7438,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,4
7439,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_xor.yaml,4
7440,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.nn.log_softmax.yaml,4
7441,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `qint8`, `quint8`, `qint32`, `qint16`, `quint16`.",tf.compat.v1.nn.quantized_relu_x.yaml,4
7442,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,4
7443,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.space_to_batch.yaml,4
7444,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`,`int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`, `complex64`,`complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.math.cumsum.yaml,4
7445,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.in_top_k.yaml,4
7446,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`.",tf.bitwise.bitwise_and.yaml,4
7447,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,4
7448,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`,`float64`, `int64`, `int32`, `uint8`, `uint16`, `int16`, `int8`,`complex64`, `complex128`, `qint8`, `quint8`, `qint32`, `half`.",tf.compat.v1.assign_sub.yaml,4
7449,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,4
7450,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,4
7451,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.math.unsorted_segment_sum.yaml,4
7452,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.reverse.yaml,4
7453,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,4
7454,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.ifft3d.yaml,4
7455,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,4
7456,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,4
7457,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,4
7458,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,4
7459,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float16`, `float32`,`float64`.",tf.math.cumulative_logsumexp.yaml,4
7460,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.gather.yaml,4
7461,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})"," Must be one of the following types: `int32`,`int64`.",tf.compat.v1.gather.yaml,4
7462,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.compat.v1.scatter_update.yaml,4
7463,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,4
7464,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `int32`, `int64`.",tf.roll.yaml,4
7465,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,4
7466,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `half`,`float32`, `float64`.",tf.compat.v1.math.log_softmax.yaml,4
7467,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `float64`, `float32`, `half`, `complex64`, `complex128`.",tf.linalg.lu.yaml,4
7468,116,0.0257788503729706,235,"frozenset({'SOME_DTYPE', 'following', 'one', 'must'})","Must be one of the following types: `complex64`, `complex128`.",tf.signal.fft.yaml,4
7469,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A tensor of numeric type.,tf.math.zero_fraction.yaml,3
7470,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,3
7471,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.extract_glimpse.yaml,3
7472,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.extract_glimpse.yaml,3
7473,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
7474,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,3
7475,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.dequantize.yaml,3
7476,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,3
7477,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
7478,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,3
7479,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
7480,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,3
7481,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.compat.v1.nn.crelu.yaml,3
7482,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
7483,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64` `complex64` or`complex128`.",tf.math.reciprocal_no_nan.yaml,3
7484,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A rank `n + 1` `Tensor`, `n >= 0` with type `float`, or `double`.",tf.math.lbeta.yaml,3
7485,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.relu6.yaml,3
7486,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.substr.yaml,3
7487,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type.,tf.cast.yaml,3
7488,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A Tensor with type `float16`, `float32`, `float64`, `complex64`, or`complex128`.",tf.math.sigmoid.yaml,3
7489,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_strong.yaml,3
7490,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.length.yaml,3
7491,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket.yaml,3
7492,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.log_poisson_loss.yaml,3
7493,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.train.sdca_fprint.yaml,3
7494,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.erfinv.yaml,3
7495,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` numerator of real numeric type.,tf.math.floordiv.yaml,3
7496,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` denominator of real numeric type.,tf.math.floordiv.yaml,3
7497,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",a string-type Tensor to summarize.,tf.compat.v1.summary.text.yaml,3
7498,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.encode_base64.yaml,3
7499,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,3
7500,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.draw_bounding_boxes.yaml,3
7501,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,3
7502,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.extract_glimpse.yaml,3
7503,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.image.extract_glimpse.yaml,3
7504,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `uint8`.,tf.io.encode_jpeg.yaml,3
7505,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.dynamic_partition.yaml,3
7506,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,3
7507,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.write_file.yaml,3
7508,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.audio.decode_wav.yaml,3
7509,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
7510,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.quantization.quantized_concat.yaml,3
7511,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
7512,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,3
7513,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.read_file.yaml,3
7514,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_json_example.yaml,3
7515,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` numerator of numeric type.,tf.math.truediv.yaml,3
7516,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` denominator of numeric type.,tf.math.truediv.yaml,3
7517,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_bmp.yaml,3
7518,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int32`, `int64`, `uint8`,`int16`, or `int8`.",tf.nn.crelu.yaml,3
7519,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_hash_bucket.yaml,3
7520,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A Tensor with type `float32` or `float64`.,tf.math.log_sigmoid.yaml,3
7521,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
7522,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.parse_tensor.yaml,3
7523,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.upper.yaml,3
7524,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
7525,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_avg_pool.yaml,3
7526,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` with type `float` or `double`.,tf.math.ndtri.yaml,3
7527,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,3
7528,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,3
7529,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.regex_full_match.yaml,3
7530,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,3
7531,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,3
7532,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.extract_jpeg_shape.yaml,3
7533,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.pad.yaml,3
7534,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,3
7535,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.crop_and_resize.yaml,3
7536,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.image.crop_and_resize.yaml,3
7537,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
7538,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
7539,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel.yaml,3
7540,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,3
7541,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`,tf.where.yaml,3
7542,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
7543,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
7544,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,3
7545,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
7546,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
7547,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
7548,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,3
7549,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` or `SparseTensor` of type `float16`, `float32`, `float64`,`int32`, `int64`, `complex64` or `complex128`.",tf.math.abs.yaml,3
7550,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,3
7551,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.string_to_number.yaml,3
7552,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,3
7553,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A Tensor of type `float32`.,tf.image.sample_distorted_bounding_box.yaml,3
7554,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.image.draw_bounding_boxes.yaml,3
7555,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
7556,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","`Tensor` of type `float16`, `float32`, `float64`, `int32`, `complex64`,`complex128` and rank > 1.",tf.linalg.matvec.yaml,3
7557,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, or `int64`.",tf.math.round.yaml,3
7558,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
7559,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
7560,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.nn.embedding_lookup.yaml,3
7561,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,3
7562,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_gif.yaml,3
7563,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` or a 'RaggedTensor' with type `int32` or `int64` containing the ids to be looked up in `params`.,tf.compat.v1.nn.embedding_lookup.yaml,3
7564,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
7565,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
7566,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
7567,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
7568,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
7569,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
7570,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A scalar `Tensor` with the same type as `x`.,tf.compat.v1.nn.dropout.yaml,3
7571,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",`Tensor` of type `float32` or `float64`.,tf.tensordot.yaml,3
7572,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,3
7573,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.sigmoid_cross_entropy_with_logits.yaml,3
7574,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
7575,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,3
7576,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumprod.yaml,3
7577,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
7578,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
7579,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,3
7580,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_max_pool.yaml,3
7581,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.lower.yaml,3
7582,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.decode_csv.yaml,3
7583,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,3
7584,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_not.yaml,3
7585,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7586,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7587,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7588,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7589,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7590,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7591,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7592,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7593,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7594,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,3
7595,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_jpeg.yaml,3
7596,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` with type `float`, `double`, `int64`, `int32`, `uint8`,`int16`, `int8`, `complex64`, or `complex128`.",tf.nn.bias_add.yaml,3
7597,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,3
7598,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unicode_transcode.yaml,3
7599,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,3
7600,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_png.yaml,3
7601,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,3
7602,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
7603,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
7604,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
7605,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_conv2d.yaml,3
7606,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
7607,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args_gradient.yaml,3
7608,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.weighted_cross_entropy_with_logits.yaml,3
7609,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,3
7610,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
7611,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.strings.substr.yaml,3
7612,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
7613,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
7614,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars.yaml,3
7615,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.math.in_top_k.yaml,3
7616,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_number.yaml,3
7617,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.strings.unicode_script.yaml,3
7618,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,3
7619,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,3
7620,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,3
7621,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `float16`, `float32`, `float64`, `int32`, `int64`,`complex64`, or `complex128`.",tf.math.pow.yaml,3
7622,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,3
7623,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.compat.v1.substr.yaml,3
7624,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,3
7625,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.nn.depthwise_conv2d_backprop_input.yaml,3
7626,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.pad.yaml,3
7627,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.matching_files.yaml,3
7628,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
7629,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_compressed.yaml,3
7630,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,3
7631,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_and.yaml,3
7632,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,3
7633,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_and_crop_jpeg.yaml,3
7634,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.io.decode_and_crop_jpeg.yaml,3
7635,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,3
7636,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,3
7637,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`.,tf.math.logical_or.yaml,3
7638,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
7639,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
7640,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.quantize.yaml,3
7641,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.unsorted_segment_join.yaml,3
7642,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `bool`,tf.compat.v1.where.yaml,3
7643,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.io.encode_proto.yaml,3
7644,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,3
7645,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.to_hash_bucket_fast.yaml,3
7646,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
7647,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,3
7648,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_csv.yaml,3
7649,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
7650,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
7651,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.compat.v1.nn.quantized_relu_x.yaml,3
7652,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32` (default: 0).,tf.math.cumsum.yaml,3
7653,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.math.in_top_k.yaml,3
7654,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
7655,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A scalar `Tensor` with the same type as x.,tf.nn.dropout.yaml,3
7656,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_proto.yaml,3
7657,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,3
7658,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
7659,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
7660,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
7661,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_vars_gradient.yaml,3
7662,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.compat.v1.nn.sigmoid_cross_entropy_with_logits.yaml,3
7663,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.quantization.fake_quant_with_min_max_args.yaml,3
7664,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32` or `int64` (default: 0).,tf.math.cumulative_logsumexp.yaml,3
7665,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.io.decode_base64.yaml,3
7666,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32` or `float64`.,tf.nn.weighted_cross_entropy_with_logits.yaml,3
7667,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `string`.,tf.strings.strip.yaml,3
7668,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` type bool.,tf.math.logical_xor.yaml,3
7669,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type bool.,tf.math.logical_xor.yaml,3
7670,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
7671,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `float32`.,tf.audio.encode_wav.yaml,3
7672,106,0.022378236068451074,204,"frozenset({'SOME_DTYPE', 'type', 'tensor'})",A `Tensor` of type `int32`.,tf.audio.encode_wav.yaml,3
7673,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
7674,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
7675,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,2
7676,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
7677,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.data.experimental.make_csv_dataset.yaml,2
7678,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
7679,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
7680,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of strings containing operation names in`graph_def` that will be returned as `Operation` objects; and/or tensor names in `graph_def` that will be returned as `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
7681,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
7682,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.tuple.yaml,2
7683,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects or a single `Tensor`.,tf.concat.yaml,2
7684,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_hash_bucket.yaml,2
7685,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of `Tensor` or `SparseTensor`.,tf.sparse.cross.yaml,2
7686,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
7687,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
7688,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` representing the coefficients of the polynomial.,tf.math.polyval.yaml,2
7689,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or tuple of `Tensor`s describing left-hand sides.,tf.linalg.tridiagonal_solve.yaml,2
7690,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of `Tensor` or `SparseTensor`.,tf.sparse.cross_hashed.yaml,2
7691,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `tf.Tensor` or `tf.RaggedTensor`.,tf.ragged.stack.yaml,2
7692,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `tf.Tensor` or `tf.IndexedSlices` objects, each with same shape and type.",tf.math.add_n.yaml,2
7693,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.compat.v1.while_loop.yaml,2
7694,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of integers representing the dimensions of tensor.,tf.make_tensor_proto.yaml,2
7695,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
7696,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor` objects, each with same shape and type.",tf.math.accumulate_n.yaml,2
7697,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Iterable of scalar `Tensor` objects.,tf.compat.v1.assert_rank_in.yaml,2
7698,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,2
7699,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a`Tensor` with one of the aforementioned types.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7700,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
7701,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
7702,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
7703,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 2 `Tensor` objects with the same type.,tf.quantization.quantized_concat.yaml,2
7704,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.xla.experimental.compile.yaml,2
7705,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
7706,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", The return value of`compile` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s returned from `computation` will be executed when evaluating any of the returned output tensors.,tf.xla.experimental.compile.yaml,2
7707,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
7708,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","a list of tuples `(tensor, value)`.`value` should be a Numpy array.",tf.keras.backend.batch_set_value.yaml,2
7709,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (exactly 2).,tf.keras.layers.subtract2.yaml,2
7710,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
7711,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
7712,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.debugging.assert_shapes.yaml,2
7713,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
7714,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dict of string to `Tensor`.,tf.compat.v1.saved_model.predict_signature_def.yaml,2
7715,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
7716,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor` or `Tensor`.,tf.estimator.experimental.build_raw_supervised_input_receiver_fn.yaml,2
7717,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
7718,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,2
7719,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature `Tensor`objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
7720,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `indices` of `Tensor` objects with the same type.,tf.dynamic_stitch.yaml,2
7721,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `int32`.,tf.dynamic_stitch.yaml,2
7722,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.keras.layers.BatchNormalization.yaml,2
7723,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
7724,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.clip_by_global_norm.yaml,2
7725,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",`Iterable` of scalar `Tensor` objects.,tf.debugging.assert_rank_in.yaml,2
7726,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",dictionary with (`Tensor` to shape) items.,tf.compat.v1.debugging.assert_shapes.yaml,2
7727,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.compat.v1.py_func.yaml,2
7728,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_identity.yaml,2
7729,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple or list of mixed `Tensors`, `IndexedSlices`, or None.",tf.linalg.global_norm.yaml,2
7730,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
7731,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,2
7732,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.identity_n.yaml,2
7733,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
7734,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.gradients.yaml,2
7735,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors not to differentiate through.,tf.gradients.yaml,2
7736,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.gradients.yaml,2
7737,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.gradients.yaml,2
7738,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Here `time` is an int32 scalar `Tensor`, `cell_output` is a `Tensor` or (possibly nested) tuple of tensors as determined by `cell.output_size`, and `cell_state` is a`Tensor` or (possibly nested) tuple of tensors, as determined by the`loop_fn` on its first call (and should match `cell.state_size`).",tf.compat.v1.nn.raw_rnn.yaml,2
7739,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", Note that`emit_output` should be a `Tensor` or (possibly nested) tuple of tensors which is aggregated in the `emit_ta` inside the `while_loop`.,tf.compat.v1.nn.raw_rnn.yaml,2
7740,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The parameter `cell_state` and output `next_cell_state` may be either a single or (possibly nested) tuple of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
7741,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", The parameter`loop_state` and output `next_loop_state` may be either a single or (possibly nested) tuple of `Tensor` and `TensorArray` objects.,tf.compat.v1.nn.raw_rnn.yaml,2
7742,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})", It should be a (possibly nested) tuple structure of tensors.,tf.compat.v1.nn.raw_rnn.yaml,2
7743,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","The `emit_output` value may be either `None` or a (possibly nested) tuple structure of tensors, e.g., `(tf.zeros(shape_0, dtype=dtype_0), tf.zeros(shape_1, dtype=dtype_1))`.",tf.compat.v1.nn.raw_rnn.yaml,2
7744,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors the same size as`ys` and holding the gradients computed for each y in `ys`.,tf.compat.v1.gradients.yaml,2
7745,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors not to differentiate through.,tf.compat.v1.gradients.yaml,2
7746,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.gradients.yaml,2
7747,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.compat.v1.gradients.yaml,2
7748,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
7749,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If axes is a list or `Tensor` the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for `a` and `b`, respectively.",tf.tensordot.yaml,2
7750,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
7751,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type mutable `float32`.,tf.compat.v1.train.sdca_shrink_l1.yaml,2
7752,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A dictionary that may map keys 'rmax', 'rmin', 'dmax' to scalar `Tensors` used to clip the renorm correction.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
7753,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be used for differentiation.,tf.compat.v1.hessians.yaml,2
7754,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or list of tensors to be differentiated.,tf.compat.v1.hessians.yaml,2
7755,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
7756,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of tensors.,tf.keras.backend.stack.yaml,2
7757,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
7758,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.compat.v1.decode_csv.yaml,2
7759,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
7760,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.case.yaml,2
7761,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A `Tensor` or tuple of `Tensor`s describing left-hand sides.,tf.linalg.tridiagonal_matmul.yaml,2
7762,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
7763,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
7764,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7765,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7766,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7767,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7768,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7769,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7770,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
7771,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",a dict of string to `Tensor`.,tf.estimator.export.build_raw_serving_input_receiver_fn.yaml,2
7772,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
7773,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,2
7774,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Tensor or list of tensors to consider constant with respect to any other variable.,tf.keras.backend.stop_gradient.yaml,2
7775,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
7776,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `TensorShape` representing the shape of this tensor, a`TensorShapeProto`, a list, a tuple, or None.",tf.ensure_shape.yaml,2
7777,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Number of threads to use for parsing `Example` tensors into a dictionary of `Feature` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
7778,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
7779,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `IndexedSlices`, some entries can be `None`.",tf.compat.v1.tuple.yaml,2
7780,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
7781,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.py_function.yaml,2
7782,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of placeholder tensors.,tf.keras.backend.function.yaml,2
7783,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of output tensors.,tf.keras.backend.function.yaml,2
7784,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor`s or `int`s or `float`s with strictly increasing entries, and with all elements having the same type as `x`.",tf.compat.v1.train.piecewise_constant.yaml,2
7785,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
7786,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,2
7787,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
7788,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","It is used as the column name and the dictionary key for feature parsing configs, feature`Tensor` objects, and feature columns.",tf.feature_column.numeric_column.yaml,2
7789,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
7790,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
7791,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
7792,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A (possibly nested) tuple, namedtuple or list of numpy array,`Tensor`, and `TensorArray` objects.",tf.while_loop.yaml,2
7793,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,2
7794,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
7795,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `cell.state_size` is a tuple, this should be a tuple of tensors having shapes `[batch_size, s] for s in cell.state_size`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7796,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7797,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7798,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",This may also be a (possibly nested) tuple of Tensors satisfying this property.,tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7799,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
7800,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",    states; List of tensors.,tf.keras.backend.rnn.yaml,2
7801,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","    new_states; List of tensors, same length and shapes         as 'states'.",tf.keras.backend.rnn.yaml,2
7802,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
7803,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,2
7804,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",list of tensors to concatenate.,tf.keras.backend.concatenate.yaml,2
7805,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` objects with type `string`.,tf.strings.join.yaml,2
7806,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of string tensors.,tf.strings.join.yaml,2
7807,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
7808,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
7809,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.stack.yaml,2
7810,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If the function takes n inputs, 'inputs' should be a list of n tensors.`computation` may return a list of operations and tensors.",tf.compat.v1.tpu.rewrite.yaml,2
7811,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
7812,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})"," The return value of`rewrite` is a list of tensors corresponding to the tensors from the output of `computation`.All `Operation`s constructed during `computation` will be executed when evaluating any of the returned output tensors, not just the ones returned.",tf.compat.v1.tpu.rewrite.yaml,2
7813,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
7814,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
7815,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects.,tf.io.encode_proto.yaml,2
7816,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
7817,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `tf.Tensor` objects.,tf.numpy_function.yaml,2
7818,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
7819,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with specific types.,tf.io.decode_csv.yaml,2
7820,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","function `f(*x)` that returns a tuple `(y, grad_fn)` where: `x` is a sequence of `Tensor` inputs to the function.`y` is a `Tensor` or sequence of `Tensor` outputs of applying TensorFlow operations in `f` to `x`.`grad_fn` is a function with the signature `g(*grad_ys)` which returns a list of `Tensor`s - the derivatives of `Tensor`s in `y` with respect to the `Tensor`s in `x`.",tf.custom_gradient.yaml,2
7821,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
7822,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `string` `Tensor` objects containing serialized `Summary`protocol buffers.,tf.compat.v1.summary.merge.yaml,2
7823,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of `Tensor` objects with the same shape and type.,tf.parallel_stack.yaml,2
7824,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
7825,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A list of `Tensor` objects, or a single Tensor.",tf.strings.format.yaml,2
7826,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",The list of tensors to format into the template string.,tf.strings.format.yaml,2
7827,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",tf.strings.format.yaml,2
7828,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
7829,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
7830,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
7831,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.,tf.compat.v1.case.yaml,2
7832,75,0.017551557700745943,160,"frozenset({'tensor', 'SOME_STRUCTURE'})",A list of at least 1 `Tensor` object with the same type.,tf.shape_n.yaml,2
7833,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
7834,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
7835,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[height, width, channels]`.",tf.image.encode_png.yaml,2
7836,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
7837,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
7838,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,2
7839,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.max_pool_with_argmax.yaml,2
7840,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
7841,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,2
7842,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
7843,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
7844,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
7845,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
7846,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,2
7847,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_avg_pool.yaml,2
7848,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,2
7849,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
7850,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
7851,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
7852,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,2
7853,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,2
7854,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,2
7855,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,2
7856,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.image.draw_bounding_boxes.yaml,2
7857,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, depth]`.",tf.image.draw_bounding_boxes.yaml,2
7858,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
7859,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
7860,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[height, width, channels]`.",tf.io.encode_jpeg.yaml,2
7861,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
7862,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,2
7863,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7864,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
7865,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,2
7866,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
7867,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
7868,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
7869,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
7870,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
7871,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
7872,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.space_to_batch.yaml,2
7873,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
7874,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
7875,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.image.crop_and_resize.yaml,2
7876,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,2
7877,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
7878,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.compat.v1.image.crop_and_resize.yaml,2
7879,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,2
7880,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,2
7881,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
7882,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,2
7883,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7884,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7885,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
7886,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Backpropagated gradients above the FakeQuantWithMinMaxVars operation, shape one of: `[d]`, `[b, d]`,  `[b, h, w, d]`.",tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
7887,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","min, max: Quantization interval, floats of shape `[d]`.",tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
7888,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
7889,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
7890,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.image.resize_area.yaml,2
7891,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[batch, N, 4]`describing the N bounding boxes associated with the image.",tf.image.sample_distorted_bounding_box.yaml,2
7892,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
7893,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
7894,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
7895,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7896,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
7897,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
7898,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,2
7899,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
7900,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,2
7901,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,2
7902,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Tensor with shape [batch_size, h, w, d].",tf.image.image_gradients.yaml,2
7903,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,2
7904,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,2
7905,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
7906,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,2
7907,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
7908,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","1-D with shape `[M]`, all values must be >= 1.",tf.compat.v1.batch_to_space_nd.yaml,2
7909,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,2
7910,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,2
7911,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[filters_height, filters_width, depth]`.",tf.nn.erosion2d.yaml,2
7912,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.erosion2d.yaml,2
7913,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
7914,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
7915,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,2
7916,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,2
7917,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
7918,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
7919,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
7920,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
7921,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,2
7922,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,2
7923,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,2
7924,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,2
7925,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,2
7926,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,2
7927,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,2
7928,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[filter_height, filter_width, depth]`.",tf.nn.dilation2d.yaml,2
7929,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.dilation2d.yaml,2
7930,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,2
7931,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,2
7932,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,2
7933,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
7934,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,2
7935,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`Tensor` of shape `[batch_size, d1, ...",tf.compat.v1.losses.compute_weighted_loss.yaml,2
7936,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,2
7937,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
7938,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
7939,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D with shape based on `data_format`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
7940,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D with shape  based on `data_format`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
7941,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,2
7942,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
7943,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, depthwise_multiplier]`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
7944,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D with shape  based on `data_format`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
7945,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch_nd.yaml,2
7946,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,2
7947,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,2
7948,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
7949,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
7950,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,2
7951,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,2
7952,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,2
7953,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_max_pool.yaml,2
7954,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,2
7955,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
7956,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
7957,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
7958,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,2
7959,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
7960,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
7961,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","1-D with shape `[M]`, all values must be >= 1.",tf.batch_to_space.yaml,2
7962,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.",tf.batch_to_space.yaml,2
7963,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,2
7964,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7965,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7966,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
7967,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[filter_height, filter_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,2
7968,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,2
7969,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","1-D with shape `[M]`, all values must be >= 1.",tf.space_to_batch.yaml,2
7970,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,2
7971,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,2
7972,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,2
7973,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.depthwise_conv2d.yaml,2
7974,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D with shape according to `data_format`.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
7975,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
7976,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
7977,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
7978,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
7979,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
7980,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","3-D with shape `[kernel_height, kernel_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,2
7981,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,2
7982,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,2
7983,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,2
7984,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
7985,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","4-D with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.depthwise_conv2d.yaml,2
7986,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",4-D with shape according to `data_format`.,tf.nn.depthwise_conv2d.yaml,2
7987,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
7988,80,0.01744186046511628,159,"frozenset({'shape', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
7989,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","2-D with shape `[length, channels]`.",tf.audio.encode_wav.yaml,2
7990,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7991,80,0.01744186046511628,159,"frozenset({'shape', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
7992,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","A list of lists of input tensors or `None` (equivalent to`[[]]`), indexed by `[replica_num][input_num]`.",tf.compat.v1.tpu.replicate.yaml,2
7993,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,2
7994,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input `Tensor` of 4 dimensions.,tf.compat.v1.nn.fused_batch_norm.yaml,2
7995,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.data.experimental.make_csv_dataset.yaml,2
7996,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A dictionary mapping input names (as strings) in `graph_def`to `Tensor` objects.,tf.graph_util.import_graph_def.yaml,2
7997,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The values of the named input tensors in the imported graph will be re-mapped to the respective `Tensor` values.,tf.graph_util.import_graph_def.yaml,2
7998,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,2
7999,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.sequence_numeric_column.yaml,2
8000,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
8001,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
8002,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.elu.yaml,2
8003,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
8004,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
8005,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
8006,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
8007,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Tensor with which to center the input.,tf.keras.backend.batch_normalization.yaml,2
8008,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Tensor by which to scale the input.,tf.keras.backend.batch_normalization.yaml,2
8009,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor or variable.,tf.keras.backend.batch_normalization.yaml,2
8010,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
8011,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
8012,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
8013,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","An N+2 dimensional `Tensor` with the same type as `input` and shape `spatial_filter_shape + [in_channels, out_channels]`.",tf.nn.conv_transpose.yaml,2
8014,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
8015,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
8016,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",tensor of shape [batch_size] Length of input sequence in logits.,tf.nn.ctc_loss.yaml,2
8017,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.shard.yaml,2
8018,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","Each input tensor has a corresponding shard axes, given by `input_shard_axes`, which must have size divisible by `num_shards`.",tf.compat.v1.tpu.shard.yaml,2
8019,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softmax.yaml,2
8020,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.concatenate2.yaml,2
8021,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
8022,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
8023,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
8024,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If true use `input_min` and `input_max` for the range of the input, otherwise determine min and max from the input `Tensor`.",tf.quantization.quantize_and_dequantize.yaml,2
8025,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If provided, the data for this column is returned as a separate `Tensor` from the features dictionary, so that the dataset complies with the format expected by a `tf.Estimator.train` or `tf.Estimator.evaluate` input function.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8026,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
8027,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
8028,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
8029,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
8030,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.apply_channel_shift.yaml,2
8031,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.apply_channel_shift.yaml,2
8032,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,2
8033,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
8034,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
8035,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (exactly 2).,tf.keras.layers.subtract2.yaml,2
8036,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
8037,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
8038,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A scalar string tensor containing the regular expression to match the input.,tf.strings.regex_full_match.yaml,2
8039,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
8040,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
8041,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2) of same shape.,tf.keras.layers.maximum2.yaml,2
8042,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
8043,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Note that the batch size of the input tensor must be divisible by`block_size * block_size`.,tf.compat.v1.batch_to_space.yaml,2
8044,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8045,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softplus.yaml,2
8046,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
8047,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors or None (equivalent to an empty list).,tf.compat.v1.tpu.batch_parallel.yaml,2
8048,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
8049,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
8050,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
8051,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
8052,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
8053,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
8054,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input `Tensor` of arbitrary dimensionality.,tf.nn.batch_normalization.yaml,2
8055,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.add2.yaml,2
8056,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","`Tensor`, input tensor.",tf.signal.ifftshift.yaml,2
8057,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
8058,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
8059,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.gradients.yaml,2
8060,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","A string, either `'NDHWC'` or `'NCDHW`' specifying the layout of the input and output tensors.",tf.compat.v1.nn.conv3d_transpose.yaml,2
8061,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8062,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,2
8063,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Specifies the gradient value returned when the given input tensors are unconnected.,tf.compat.v1.gradients.yaml,2
8064,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
8065,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A 4D input Tensor.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
8066,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
8067,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
8068,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
8069,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_rotation.yaml,2
8070,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmin.yaml,2
8071,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
8072,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
8073,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
8074,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
8075,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_zoom.yaml,2
8076,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
8077,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
8078,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.compat.v1.decode_csv.yaml,2
8079,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.`,tf.keras.preprocessing.image.random_channel_shift.yaml,2
8080,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_channel_shift.yaml,2
8081,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
8082,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
8083,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
8084,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",input tensor,tf.keras.backend.depthwise_conv2d.yaml,2
8085,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A function which should obey the following signature: Args: can only have following four arguments in any order:predictions: Predictions `Tensor` or dict of `Tensor` created by given`estimator`.features: Input `dict` of `Tensor` objects created by `input_fn` which is given to `estimator.evaluate` as an argument.labels:  Labels `Tensor` or dict of `Tensor` created by `input_fn`which is given to `estimator.evaluate` as an argument.config: config attribute of the `estimator`.Returns: Dict of metric results keyed by name.,tf.estimator.add_metrics.yaml,2
8086,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.average2.yaml,2
8087,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.linear.yaml,2
8088,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmin.yaml,2
8089,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.sigmoid.yaml,2
8090,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
8091,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.math.argmax.yaml,2
8092,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","`Tensor`, input tensor.",tf.signal.fftshift.yaml,2
8093,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
8094,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," For example, if`data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height, in_width, in_channels]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
8095,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.tanh.yaml,2
8096,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Each element of the input Tensor is converted to an array of bytes.,tf.io.decode_raw.yaml,2
8097,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
8098,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
8099,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.multiply2.yaml,2
8100,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","Normalizer function takes the input `Tensor` as its argument, and returns the output `Tensor`.",tf.feature_column.numeric_column.yaml,2
8101,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Tensor with which to center the input.,tf.keras.backend.normalize_batch_in_training.yaml,2
8102,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Tensor by which to scale the input.,tf.keras.backend.normalize_batch_in_training.yaml,2
8103,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor or variable.,tf.keras.backend.normalize_batch_in_training.yaml,2
8104,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Describes which axis of the input Tensor to reduce across.,tf.compat.v1.argmax.yaml,2
8105,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.minimum2.yaml,2
8106,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," For example, if `data_format` is 'NHWC' then`input` is a 4-D `[batch, height, width, channels]` tensor.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
8107,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
8108,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
8109,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
8110,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","The input to `cell` at each time step will be a `Tensor` or (possibly nested) tuple of Tensors each with dimensions `[batch_size, ...]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8111,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.hard_sigmoid.yaml,2
8112,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
8113,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors (at least 2).,tf.keras.layers.dot2.yaml,2
8114,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.exponential.yaml,2
8115,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
8116,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
8117,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
8118,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_shear.yaml,2
8119,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
8120,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
8121,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,2
8122,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
8123,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A list of input tensors or `None` (equivalent to an empty list).,tf.compat.v1.tpu.rewrite.yaml,2
8124,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,2
8125,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8126,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8127,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.activations.softsign.yaml,2
8128,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
8129,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Optional existing tensor to wrap into the `Input` layer.,tf.keras.Input.yaml,2
8130,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
8131,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Each element of the input Tensor is converted to an array of bytes.,tf.compat.v1.decode_raw.yaml,2
8132,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",A 4D input Tensor.,tf.nn.batch_norm_with_global_normalization.yaml,2
8133,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.",tf.io.decode_csv.yaml,2
8134,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
8135,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
8136,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
8137,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})","If a solitary tensor is passed in, the input tensor will automatically be wrapped as a list.",tf.strings.format.yaml,2
8138,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Tensors of input values.,tf.debugging.assert_same_float_dtype.yaml,2
8139,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for channels in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
8140,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for columns in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
8141,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Index of axis for rows in the input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
8142,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor.,tf.keras.preprocessing.image.random_shift.yaml,2
8143,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
8144,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input `tensor` or `variable`.,tf.keras.activations.relu.yaml,2
8145,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
8146,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
8147,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",input tensor,tf.keras.backend.separable_conv2d.yaml,2
8148,86,0.017222465993856954,157,"frozenset({'input', 'tensor'})",Input tensor to crop.,tf.image.random_crop.yaml,2
8149,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
8150,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
8151,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
8152,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
8153,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
8154,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})", Half-width of the 1-D normalization window.,tf.nn.local_response_normalization.yaml,2
8155,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
8156,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,2
8157,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.",tf.keras.layers.Conv3D.yaml,2
8158,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D `int32` `Tensor`.,tf.concat.yaml,2
8159,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
8160,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
8161,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
8162,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
8163,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
8164,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,2
8165,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D scalar `Tensor`.,tf.math.scalar_mul.yaml,2
8166,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,2
8167,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
8168,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D `int32` `Tensor`.,tf.sparse.split.yaml,2
8169,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An 1-D `int` Tensor.,tf.broadcast_to.yaml,2
8170,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A sorted 1-D integer Tensor.,tf.ragged.row_splits_to_segment_ids.yaml,2
8171,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
8172,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
8173,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,2
8174,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.nn.ctc_greedy_decoder.yaml,2
8175,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,2
8176,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
8177,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
8178,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D `string`.,tf.io.decode_image.yaml,2
8179,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,2
8180,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
8181,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
8182,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8183,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8184,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
8185,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,2
8186,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D `int32` `Tensor`.,tf.compat.v1.sparse_split.yaml,2
8187,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An 1-D `int` Tensor.,tf.unravel_index.yaml,2
8188,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,2
8189,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
8190,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,2
8191,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
8192,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
8193,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",an integer or 1-D tensor.,tf.random.experimental.create_rng_state.yaml,2
8194,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.SeparableConv2D.yaml,2
8195,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
8196,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
8197,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
8198,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
8199,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
8200,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.",tf.keras.layers.Conv2D.yaml,2
8201,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
8202,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
8203,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
8204,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8205,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","min, max: Quantization interval, floats of shape `[d]`.",tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
8206,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
8207,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
8208,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,2
8209,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",3-D `float` `Tensor`.,tf.compat.v1.nn.ctc_loss.yaml,2
8210,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","1-D `int32` vector, size `[batch_size]`.",tf.compat.v1.nn.ctc_loss.yaml,2
8211,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_global_norm.yaml,2
8212,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
8213,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D `double` `Tensor`.,tf.linalg.lstsq.yaml,2
8214,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
8215,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8216,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8217,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
8218,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
8219,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,2
8220,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_norm.yaml,2
8221,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
8222,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
8223,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,2
8224,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
8225,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,2
8226,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
8227,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
8228,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,2
8229,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,2
8230,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An 1-D `int` Tensor.,tf.repeat.yaml,2
8231,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,2
8232,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`1-D` string `Tensor`, the strings to split.",tf.compat.v1.string_split.yaml,2
8233,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,2
8234,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,2
8235,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
8236,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
8237,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,2
8238,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
8239,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
8240,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,2
8241,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor.,tf.ragged.segment_ids_to_row_splits.yaml,2
8242,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
8243,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,2
8244,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,2
8245,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D (scalar).,tf.fill.yaml,2
8246,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,2
8247,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
8248,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.train.piecewise_constant.yaml,2
8249,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
8250,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
8251,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
8252,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
8253,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`0-D` string `Tensor`, the delimiter character.",tf.compat.v1.strings.split.yaml,2
8254,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,2
8255,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,2
8256,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.nn.ctc_beam_search_decoder.yaml,2
8257,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
8258,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
8259,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,2
8260,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,2
8261,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D `string`.,tf.io.is_jpeg.yaml,2
8262,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
8263,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,2
8264,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
8265,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
8266,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,2
8267,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.scalar_mul.yaml,2
8268,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
8269,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
8270,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
8271,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
8272,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,2
8273,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
8274,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D `int32` `Tensor`.,tf.math.top_k.yaml,2
8275,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,2
8276,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
8277,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
8278,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
8279,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
8280,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D (scalar).,tf.compat.v1.expand_dims.yaml,2
8281,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D (scalar).,tf.compat.v1.expand_dims.yaml,2
8282,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
8283,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
8284,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","1-D `int32` vector containing sequence lengths, having size`[batch_size]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,2
8285,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","a tuple of 2 integers, specifying the width and height of the 2D convolution window.",tf.keras.backend.local_conv2d.yaml,2
8286,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
8287,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",0-D (scalar).,tf.sparse.expand_dims.yaml,2
8288,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
8289,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
8290,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`0-D` string `Tensor`, the delimiter string.",tf.strings.split.yaml,2
8291,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8292,62,0.015796401930671347,144,"frozenset({'SOME_DTYPE', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8293,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
8294,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,2
8295,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,2
8296,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_uniform_variable.yaml,2
8297,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
8298,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If a scalar, then it must evenly divide`value.shape[axis]`; otherwise the sum of sizes along the split axis must match that of the `value`.",tf.split.yaml,2
8299,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,2
8300,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
8301,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,2
8302,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",int32 Tensor of known shape [num_spatial_dims].,tf.nn.with_space_to_batch.yaml,2
8303,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,2
8304,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.adjoint.yaml,2
8305,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
8306,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,2
8307,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,2
8308,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,2
8309,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
8310,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})"," Must be `float32` or `float64`, shape is `[..., M, M]`.",tf.linalg.cholesky_solve.yaml,2
8311,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
8312,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
8313,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,2
8314,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",Boolean that enables verification of a shape of values.,tf.make_tensor_proto.yaml,2
8315,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
8316,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","nD integer tensor of shape`(batch_size, dim1, dim2, ...",tf.keras.backend.one_hot.yaml,2
8317,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,2
8318,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,2
8319,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.ones.yaml,2
8320,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Must be `float16`, `float32`, `float64`, `complex64`, or`complex128` with shape `[..., M, M]`.",tf.linalg.expm.yaml,2
8321,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Shape of the placeholder (integer tuple, may include `None` entries).",tf.keras.backend.placeholder.yaml,2
8322,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8323,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Unscaled log probabilities of shape `[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or `float64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8324,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
8325,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8326,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Per-label activations (typically a linear output) of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32`, or`float64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,2
8327,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8328,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,2
8329,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
8330,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
8331,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
8332,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,2
8333,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
8334,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,2
8335,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,2
8336,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,2
8337,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,2
8338,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,2
8339,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
8340,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,2
8341,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,2
8342,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
8343,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensorValue`.,tf.compat.v1.ragged.constant_value.yaml,2
8344,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
8345,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,2
8346,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8347,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8348,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8349,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","min, max: Quantization interval, floats of shape `[d]`.",tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient.yaml,2
8350,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
8351,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,2
8352,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
8353,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8354,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,2
8355,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,2
8356,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
8357,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",`int` or shape `tuple` Axes over which to calculate.,tf.signal.ifftshift.yaml,2
8358,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore.",tf.compat.v1.tpu.experimental.embedding_column.yaml,2
8359,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
8360,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
8361,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
8362,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,2
8363,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
8364,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,2
8365,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,2
8366,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,2
8367,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,2
8368,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
8369,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
8370,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,2
8371,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",Boolean that enables verification of a shape of values.,tf.compat.v1.constant.yaml,2
8372,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,2
8373,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,2
8374,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,2
8375,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,2
8376,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,2
8377,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,2
8378,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,2
8379,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
8380,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
8381,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Tuple of integers, shape of returned Keras variable.",tf.keras.backend.random_normal_variable.yaml,2
8382,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",Integer specifying the dimension index at which to expand the shape of `input`.,tf.expand_dims.yaml,2
8383,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,2
8384,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
8385,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,2
8386,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,2
8387,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Optional 2d int32 lists with shape [num_groups, num_replicas_per_group].",tf.compat.v1.tpu.cross_replica_sum.yaml,2
8388,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`SparseTensor` of same shape as `sparse_ids`, containing float weights corresponding to `sparse_ids`, or `None` if all weights are be assumed to be 1.0.",tf.nn.safe_embedding_lookup_sparse.yaml,2
8389,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An integer vector representing the shape of `input`, based on `data_format`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
8390,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
8391,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,2
8392,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
8393,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
8394,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Unscaled log probabilities of shape`[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32` or`float64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,2
8395,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A tuple of integers specifying the shape for individual inner values in the returned `RaggedTensor`.,tf.ragged.constant.yaml,2
8396,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,2
8397,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,2
8398,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})", Scalars may be mixed in; these will be broadcast to the shape of non-scalar inputs.,tf.strings.join.yaml,2
8399,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,2
8400,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,2
8401,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Tensor of int32 with shape `[batch_shape, len(field_names)]`.",tf.io.encode_proto.yaml,2
8402,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,2
8403,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Must be `float16`, `float32`, `float64`, `complex64`, or `complex128` with shape `[..., M, M]`.",tf.linalg.logdet.yaml,2
8404,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,2
8405,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,2
8406,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
8407,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,2
8408,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,2
8409,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
8410,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,2
8411,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,2
8412,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,2
8413,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,2
8414,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,2
8415,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,2
8416,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
8417,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
8418,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
8419,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,2
8420,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Tuple or list of integers, shape of returned Keras variable",tf.keras.backend.zeros.yaml,2
8421,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,2
8422,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
8423,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",A string `Tensor` of any shape.,tf.strings.strip.yaml,2
8424,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,2
8425,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,2
8426,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8427,70,0.014809126810004387,135,"frozenset({'SOME_DTYPE', 'shape'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,2
8428,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
8429,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.data.experimental.make_csv_dataset.yaml,2
8430,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
8431,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
8432,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv2d_transpose.yaml,2
8433,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
8434,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
8435,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
8436,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.delete_session_tensor.yaml,2
8437,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv2d_transpose.yaml,2
8438,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
8439,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reorder.yaml,2
8440,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.)  A floating point type tensor, shaped`[num_classes]`.",tf.data.experimental.rejection_resample.yaml,2
8441,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
8442,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.boolean_mask.yaml,2
8443,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.sparse_placeholder.yaml,2
8444,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.row_splits_to_segment_ids.yaml,2
8445,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
8446,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
8447,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(Optional.) The required `DType` of the returned `Tensor` or`IndexedSlices`.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
8448,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(Optional.) A name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_indexed_slices.yaml,2
8449,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack.yaml,2
8450,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.while_loop.yaml,2
8451,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional 0-D `Tensor` (defaults to `0`).,tf.compat.v1.sparse_add.yaml,2
8452,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_many_sparse.yaml,2
8453,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.keras.backend.constant.yaml,2
8454,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.keras.backend.constant.yaml,2
8455,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_tensor.yaml,2
8456,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
8457,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
8458,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `Tensor` that is broadcastable to loss.,tf.compat.v1.losses.softmax_cross_entropy.yaml,2
8459,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
8460,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required).",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8461,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
8462,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
8463,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.sparse_concat.yaml,2
8464,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
8465,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,2
8466,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
8467,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
8468,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_many_sparse.yaml,2
8469,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
8470,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.compat.v1.parse_single_example.yaml,2
8471,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
8472,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
8473,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8474,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,2
8475,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.to_indicator.yaml,2
8476,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
8477,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv3d_transpose.yaml,2
8478,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
8479,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.convolution.yaml,2
8480,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
8481,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
8482,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the return tensor.,tf.compat.v1.get_session_handle.yaml,2
8483,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8484,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
8485,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,2
8486,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
8487,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.convert_to_tensor.yaml,2
8488,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.convert_to_tensor.yaml,2
8489,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.convert_to_tensor.yaml,2
8490,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d_transpose.yaml,2
8491,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
8492,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.sparse.to_dense.yaml,2
8493,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.compat.v1.serialize_sparse.yaml,2
8494,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.compat.v1.constant.yaml,2
8495,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.compat.v1.constant.yaml,2
8496,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,2
8497,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
8498,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.sparse_dense_matmul.yaml,2
8499,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
8500,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.segment_ids_to_row_splits.yaml,2
8501,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
8502,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,2
8503,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
8504,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.image.yaml,2
8505,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldr.yaml,2
8506,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldr.yaml,2
8507,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor.yaml,2
8508,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor.yaml,2
8509,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional element type for the returned tensor, used when dtype is None.",tf.compat.v1.convert_to_tensor.yaml,2
8510,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
8511,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
8512,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional DType of an element in the resulting `Tensor`.,tf.ones.yaml,2
8513,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
8514,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A function or class that can be called with a `filenames` tensor and (optional) `reader_args` and returns a `Dataset` of `Example` tensors.,tf.data.experimental.make_batched_features_dataset.yaml,2
8515,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.conv1d_transpose.yaml,2
8516,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.cond.yaml,2
8517,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
8518,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, initial value for the accumulator, and the expected output type of `fn`.",tf.scan.yaml,2
8519,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.scan.yaml,2
8520,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) True scans the tensor last to first (instead of first to last).,tf.scan.yaml,2
8521,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
8522,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.while_loop.yaml,2
8523,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
8524,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional `int` or rank-0 integer `Tensor`.,tf.summary.audio.yaml,2
8525,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.constant.yaml,2
8526,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
8527,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.nn.atrous_conv2d.yaml,2
8528,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
8529,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name string for the tensor.,tf.keras.backend.variable.yaml,2
8530,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.transpose.yaml,2
8531,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.fill_empty_rows.yaml,2
8532,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the returned tensor.,tf.compat.v1.nn.convolution.yaml,2
8533,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
8534,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional).,tf.io.serialize_sparse.yaml,2
8535,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a structure of tensors.,tf.switch_case.yaml,2
8536,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name prefix for the returned tensors.,tf.compat.v1.cond.yaml,2
8537,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name for the tensor.,tf.constant.yaml,2
8538,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional dimensions of resulting tensor.,tf.constant.yaml,2
8539,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
8540,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional existing tensor to wrap into the `Input` layer.,tf.keras.Input.yaml,2
8541,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The shape of the tensor to be fed (optional).,tf.compat.v1.placeholder.yaml,2
8542,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
8543,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
8544,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",An optional scalar `Tensor` to use where the input signal does not exist when `pad_end` is True.,tf.signal.frame.yaml,2
8545,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",The name of the output `Tensor` (optional).,tf.compat.v1.expand_dims.yaml,2
8546,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(optional) A tensor or (possibly nested) sequence of tensors, as the initial value for the accumulator.",tf.foldl.yaml,2
8547,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.foldl.yaml,2
8548,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional element type for the returned tensor.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
8549,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional name to use if a new `Tensor` is created.,tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
8550,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensor (optional).,tf.ragged.stack_dynamic_partitions.yaml,2
8551,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
8552,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
8553,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","(Optional) A scalar string Tensor, the associated name.",tf.io.parse_single_example.yaml,2
8554,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,2
8555,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.sparse.reshape.yaml,2
8556,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
8557,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",(optional) Name prefix for the returned tensors.,tf.map_fn.yaml,2
8558,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
8559,92,0.014480035103115402,132,"frozenset({'optional', 'tensor'})",A name prefix for the returned tensors (optional),tf.io.deserialize_many_sparse.yaml,2
8560,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
8561,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Any unknown dimensions (e.g. tf.compat.v1.Dimension(None) in a tf.TensorShape or -1 in a tensor-like object) will be padded to the maximum size of that dimension over all replicas.,tf.compat.v1.tpu.replicate.yaml,2
8562,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for population mean used for inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
8563,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for bias.,tf.compat.v1.nn.fused_batch_norm.yaml,2
8564,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for scaling.,tf.compat.v1.nn.fused_batch_norm.yaml,2
8565,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A `Tensor` of 1 dimension for population variance       used for inference.,tf.compat.v1.nn.fused_batch_norm.yaml,2
8566,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
8567,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
8568,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
8569,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
8570,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
8571,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
8572,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
8573,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
8574,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
8575,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
8576,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
8577,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
8578,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
8579,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
8580,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
8581,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
8582,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
8583,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_mul.yaml,2
8584,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.estimator.regressor_parse_example_spec.yaml,2
8585,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
8586,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
8587,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
8588,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
8589,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
8590,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
8591,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
8592,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
8593,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
8594,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,2
8595,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
8596,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
8597,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
8598,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
8599,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
8600,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_div.yaml,2
8601,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
8602,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The first and last `summarize` elements within each dimension are recursively printed per Tensor.,tf.print.yaml,2
8603,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If None, then the first 3 and last 3 elements of each dimension are printed for each tensor.",tf.print.yaml,2
8604,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
8605,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
8606,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
8607,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
8608,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8609,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The 0-th dimension of each Tensor must have size divisible by `num_shards`.,tf.compat.v1.tpu.batch_parallel.yaml,2
8610,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_add.yaml,2
8611,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
8612,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
8613,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
8614,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
8615,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,2
8616,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup.yaml,2
8617,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.vectorized_map.yaml,2
8618,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
8619,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
8620,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
8621,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
8622,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup.yaml,2
8623,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
8624,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
8625,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
8626,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
8627,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
8628,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
8629,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,2
8630,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
8631,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
8632,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
8633,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
8634,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
8635,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_min.yaml,2
8636,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
8637,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
8638,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
8639,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,2
8640,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
8641,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
8642,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D `Tensor` with size matching the channel dimension of `value`.,tf.nn.bias_add.yaml,2
8643,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldr.yaml,2
8644,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
8645,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
8646,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
8647,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
8648,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.nn.embedding_lookup_sparse.yaml,2
8649,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,2
8650,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
8651,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.scan.yaml,2
8652,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
8653,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
8654,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
8655,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_sub.yaml,2
8656,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",An integer can be given which means a single dimension `Tensor` with given width.,tf.feature_column.numeric_column.yaml,2
8657,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
8658,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
8659,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
8660,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_max.yaml,2
8661,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
8662,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
8663,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
8664,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Returns;     output; Tensor with shape `(samples, output_dim)`        (no time dimension).",tf.keras.backend.rnn.yaml,2
8665,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
8666,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
8667,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8668,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
8669,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
8670,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
8671,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",1-D or higher `Tensor` with last dimension at least `k`.,tf.math.top_k.yaml,2
8672,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D beta Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
8673,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D gamma Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
8674,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D mean Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
8675,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A 1D variance Tensor with size matching the last dimension of t.,tf.nn.batch_norm_with_global_normalization.yaml,2
8676,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","scalar integer tensor, size of last dimension of returned tensor.",tf.sequence_mask.yaml,2
8677,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
8678,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
8679,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
8680,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","When formatting the tensors, show the first and last `summarize`entries of each tensor dimension (recursively).",tf.strings.format.yaml,2
8681,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.foldl.yaml,2
8682,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors.",tf.compat.v1.nn.embedding_lookup_sparse.yaml,2
8683,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","This is the size of the last dimension of the labels and logits `Tensor` objects (typically, these have shape `[batch_size, label_dimension]`).",tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
8684,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
8685,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
8686,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
8687,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
8688,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
8689,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})",A tensor of indices into the first dimension of `ref`.,tf.compat.v1.scatter_update.yaml,2
8690,83,0.01437033786748574,131,"frozenset({'tensor', 'dimension'})","A tensor or (possibly nested) sequence of tensors, each of which will be unpacked along their first dimension.",tf.map_fn.yaml,2
8691,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,3
8692,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
8693,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
8694,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
8695,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,3
8696,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,3
8697,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,3
8698,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",0-D `int32` `Tensor`.,tf.concat.yaml,3
8699,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
8700,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
8701,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
8702,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
8703,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,3
8704,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.math.scalar_mul.yaml,3
8705,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.image.resize.yaml,3
8706,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,3
8707,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D `int32` `Tensor`.,tf.sparse.split.yaml,3
8708,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An 1-D `int` Tensor.,tf.broadcast_to.yaml,3
8709,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A sorted 1-D integer Tensor.,tf.ragged.row_splits_to_segment_ids.yaml,3
8710,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
8711,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
8712,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","3-D `float` `Tensor` sized `[max_time, batch_size, num_classes]`.",tf.nn.ctc_greedy_decoder.yaml,3
8713,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,3
8714,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
8715,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
8716,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","If,`False`, the returned op will produce a 3-D tensor for all file types and will truncate animated GIFs to the first frame.",tf.io.decode_image.yaml,3
8717,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
8718,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
8719,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
8720,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.compat.v1.parse_example.yaml,3
8721,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.compat.v1.parse_example.yaml,3
8722,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D `int32` `Tensor`.,tf.compat.v1.sparse_split.yaml,3
8723,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An 1-D `int` Tensor.,tf.unravel_index.yaml,3
8724,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,3
8725,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
8726,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.compat.v1.boolean_mask.yaml,3
8727,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,3
8728,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
8729,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",an integer or 1-D tensor.,tf.random.experimental.create_rng_state.yaml,3
8730,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
8731,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
8732,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
8733,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
8734,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
8735,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,3
8736,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
8737,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
8738,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
8739,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
8740,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
8741,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize_area.yaml,3
8742,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",3-D `float` `Tensor`.,tf.compat.v1.nn.ctc_loss.yaml,3
8743,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_global_norm.yaml,3
8744,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D (scalar) `Tensor` of type `float` (optional).,tf.clip_by_global_norm.yaml,3
8745,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",0-D `double` `Tensor`.,tf.linalg.lstsq.yaml,3
8746,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
8747,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
8748,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
8749,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
8750,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
8751,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D (vector) `Tensor` of type int32 containing the dimensions to use for computing the L2-norm.,tf.clip_by_norm.yaml,3
8752,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D (scalar) `Tensor` > 0.,tf.clip_by_norm.yaml,3
8753,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
8754,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A scalar (0-D Tensor) of strings (optional), the name of the serialized proto.",tf.io.parse_single_sequence_example.yaml,3
8755,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A scalar (0-D Tensor) of type string, a single binary serialized `SequenceExample` proto.",tf.io.parse_single_sequence_example.yaml,3
8756,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
8757,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,3
8758,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
8759,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
8760,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D `Tensor` (scalar).,tf.range.yaml,3
8761,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d_transpose.yaml,3
8762,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An 1-D `int` Tensor.,tf.repeat.yaml,3
8763,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,3
8764,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`1-D` string `Tensor`, the strings to split.",tf.compat.v1.string_split.yaml,3
8765,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,3
8766,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",1-D or higher numeric `Tensor`.,tf.sort.yaml,3
8767,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
8768,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the name of the serialized protos.",tf.io.parse_sequence_example.yaml,3
8769,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A vector (1-D Tensor) of type string containing binary serialized `SequenceExample` protos.,tf.io.parse_sequence_example.yaml,3
8770,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
8771,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
8772,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,3
8773,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor.,tf.ragged.segment_ids_to_row_splits.yaml,3
8774,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A vector (1-D Tensor) of strings (optional), the names of the serialized protos in the batch.",tf.io.parse_example.yaml,3
8775,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A vector (1-D Tensor) of strings, a batch of binary serialized `Example` protos.",tf.io.parse_example.yaml,3
8776,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D int32 Tensor of 2 elements: `new_height, new_width`.",tf.compat.v1.image.resize.yaml,3
8777,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.ones.yaml,3
8778,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
8779,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.train.piecewise_constant.yaml,3
8780,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
8781,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
8782,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`0-D` string `Tensor`, the delimiter character.",tf.compat.v1.strings.split.yaml,3
8783,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A `list` of integers, a `tuple` of integers, or a 1-D `Tensor` of type `int32`.",tf.zeros.yaml,3
8784,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","3-D `float` `Tensor`, size `[max_time, batch_size, num_classes]`.",tf.nn.ctc_beam_search_decoder.yaml,3
8785,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
8786,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
8787,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,3
8788,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,3
8789,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,3
8790,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 4-D `Tensor` of type `float`.,tf.nn.atrous_conv2d.yaml,3
8791,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
8792,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
8793,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,3
8794,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D scalar `Tensor`.,tf.compat.v1.scalar_mul.yaml,3
8795,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
8796,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
8797,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
8798,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 0-D int Tensor representing the axis in `tensor` to mask from.,tf.boolean_mask.yaml,3
8799,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,3
8800,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",0-D `int32` `Tensor`.,tf.math.top_k.yaml,3
8801,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",1-D or higher numeric `Tensor`.,tf.argsort.yaml,3
8802,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
8803,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
8804,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
8805,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
8806,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
8807,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","3-D `float` `Tensor`, size `[max_time x batch_size x num_classes]`.",tf.compat.v1.nn.ctc_beam_search_decoder.yaml,3
8808,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
8809,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
8810,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
8811,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`0-D` string `Tensor`, the delimiter string.",tf.strings.split.yaml,3
8812,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
8813,101,0.013492759982448442,123,"frozenset({'SOME_DTYPE', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
8814,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
8815,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
8816,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_truncated_normal.yaml,2
8817,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.image.random_brightness.yaml,2
8818,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Python integer, number of times to repeat.",tf.keras.backend.repeat_elements.yaml,2
8819,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,2
8820,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","defaults to python `hash` function, can be 'md5' or     any function that takes in input a string and returns a int.",tf.keras.preprocessing.text.hashing_trick.yaml,2
8821,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.shuffle.yaml,2
8822,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in`tensor` over which to compute vector norms.",tf.linalg.normalize.yaml,2
8823,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.linalg.normalize.yaml,2
8824,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_normal.yaml,2
8825,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
8826,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
8827,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
8828,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",(Optional.) Python integer seed for the resampler.,tf.data.experimental.rejection_resample.yaml,2
8829,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.sparse.split.yaml,2
8830,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Values must be Python strings.,tf.strings.ngrams.yaml,2
8831,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.keras.initializers.he_normal.yaml,2
8832,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python integer, indicating the dimension along which to stack.",tf.ragged.stack.yaml,2
8833,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.categorical.yaml,2
8834,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.stateless_uniform.yaml,2
8835,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
8836,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python float.,tf.signal.linear_to_mel_weight_matrix.yaml,2
8837,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python int.,tf.signal.linear_to_mel_weight_matrix.yaml,2
8838,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python float.,tf.signal.linear_to_mel_weight_matrix.yaml,2
8839,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_bool.yaml,2
8840,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
8841,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
8842,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
8843,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
8844,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
8845,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,2
8846,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.keras.initializers.lecun_uniform.yaml,2
8847,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.sparse_split.yaml,2
8848,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
8849,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum.yaml,2
8850,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi.yaml,2
8851,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.keras.initializers.he_normal.yaml,2
8852,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
8853,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.keras.initializers.he_uniform.yaml,2
8854,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A list or tuple of Python integers or a 1-D `int32` `Tensor`.,tf.eye.yaml,2
8855,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_solve.yaml,2
8856,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_solve.yaml,2
8857,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.image.random_flip_up_down.yaml,2
8858,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A string, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_multi_enum_class.yaml,2
8859,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
8860,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_test_phase.yaml,2
8861,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
8862,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
8863,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
8864,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
8865,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python callable or class to convert.,tf.compat.v1.autograph.to_graph.yaml,2
8866,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python callable or class to convert.,tf.autograph.to_code.yaml,2
8867,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python callable or class to convert.,tf.autograph.to_graph.yaml,2
8868,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
8869,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `str` prefixed to ops created by this function.,tf.linalg.pinv.yaml,2
8870,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.nn.dropout.yaml,2
8871,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.uniform.yaml,2
8872,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.uniform.yaml,2
8873,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.keras.initializers.lecun_normal.yaml,2
8874,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Either a Python bool, or a callable that accepts the parameter`node_def` and returns a python bool.",tf.xla.experimental.jit_scope.yaml,2
8875,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.",tf.keras.backend.in_train_phase.yaml,2
8876,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python boolean.,tf.keras.backend.manual_variable_initialization.yaml,2
8877,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.truncated_normal.yaml,2
8878,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.truncated_normal.yaml,2
8879,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_reconstruct.yaml,2
8880,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_reconstruct.yaml,2
8881,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
8882,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.normal.yaml,2
8883,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.normal.yaml,2
8884,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8885,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8886,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8887,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8888,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8889,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
8890,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python callable or class.,tf.compat.v1.autograph.to_code.yaml,2
8891,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.image.random_flip_left_right.yaml,2
8892,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
8893,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
8894,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
8895,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.keras.initializers.lecun_normal.yaml,2
8896,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
8897,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `str` prefixed to ops created by this function.,tf.linalg.matrix_rank.yaml,2
8898,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.keras.initializers.lecun_uniform.yaml,2
8899,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.norm.yaml,2
8900,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.norm.yaml,2
8901,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.poisson.yaml,2
8902,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.poisson.yaml,2
8903,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.random_poisson.yaml,2
8904,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.compat.v1.random_poisson.yaml,2
8905,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python integer.,tf.keras.backend.pow.yaml,2
8906,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE.yaml,2
8907,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_flag.yaml,2
8908,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Python integer, number of times to repeat.",tf.keras.backend.repeat.yaml,2
8909,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.compat.v1.keras.initializers.he_uniform.yaml,2
8910,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.random.gamma.yaml,2
8911,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A 1-D integer Tensor or Python array.,tf.random.gamma.yaml,2
8912,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","If `axis` is a Python integer, the input is considered a batch of vectors, and `axis` determines the axis in `tensor` over which to compute vector norms.",tf.compat.v1.norm.yaml,2
8913,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",If `axis` is a 2-tuple of Python integers it is considered a batch of matrices and `axis` determines the axes in `tensor` over which to compute a matrix norm.,tf.compat.v1.norm.yaml,2
8914,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Example: `python from keras import backend as K K.floatx() >>> 'float32' K.set_floatx('float16') K.floatx() >>> 'float16'`,tf.keras.backend.set_floatx.yaml,2
8915,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","A python list or tuple of float thresholds in `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
8916,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
8917,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
8918,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
8919,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
8920,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.image.random_contrast.yaml,2
8921,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","str, the name of the Python module declaring this flag.",tf.compat.v1.flags.DEFINE_enum_class.yaml,2
8922,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",A Python integer.,tf.nn.dropout.yaml,2
8923,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python int or Tensor of type int32.,tf.image.adjust_jpeg_quality.yaml,2
8924,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
8925,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","Python float, integer, or tensor.",tf.keras.backend.clip.yaml,2
8926,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `str` name given to ops managed by this object.,tf.linalg.lu_matrix_inverse.yaml,2
8927,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python `bool` indicating whether arguments should be checked for correctness.,tf.linalg.lu_matrix_inverse.yaml,2
8928,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Dump data from only the tensors from op types that matches to the regular expression (through Python's `re.match()`).,tf.debugging.experimental.enable_dump_debug_info.yaml,2
8929,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})","(optional) Python int, the rank of the `SparseTensor` objects.",tf.io.deserialize_many_sparse.yaml,2
8930,69,0.012834576568670469,117,"frozenset({'SOME_DTYPE', 'python'})",Python integer.,tf.image.random_crop.yaml,2
8931,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.data.experimental.make_csv_dataset.yaml,2
8932,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.data.experimental.make_csv_dataset.yaml,2
8933,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.data.experimental.make_csv_dataset.yaml,2
8934,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.data.experimental.make_csv_dataset.yaml,2
8935,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",(Optional.) An `OpList` proto with the (possibly stripped) list of `OpDef`s used by the producer of the graph.,tf.graph_util.import_graph_def.yaml,2
8936,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `false_positives`should be added to.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
8937,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
8938,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d.yaml,2
8939,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.data.experimental.sample_from_datasets.yaml,2
8940,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.conv3d.yaml,2
8941,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
8942,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_negatives.yaml,2
8943,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `sensitivity`should be added to.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
8944,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
8945,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean`should be added to.,tf.compat.v1.metrics.mean.yaml,2
8946,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean.yaml,2
8947,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.scalar.yaml,2
8948,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.text.yaml,2
8949,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `recall` should be added to.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
8950,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall_at_thresholds.yaml,2
8951,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_absolute_error` should be added to.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
8952,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_absolute_error.yaml,2
8953,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.histogram.yaml,2
8954,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",A optional list of default values for the CSV fields.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8955,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to `0`for numeric values and `""""` for string values.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8956,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of strings that corresponds to the CSV columns, in order.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8957,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","An optional list of integer indices or string column names, that specifies a subset of columns of CSV data to select.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
8958,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to name of the previously-trained variable in `ckpt_to_initialize_from`.,tf.compat.v1.train.warm_start.yaml,2
8959,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
8960,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`root_mean_squared_error` should be added to.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
8961,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.root_mean_squared_error.yaml,2
8962,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
8963,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.precision_at_top_k.yaml,2
8964,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `accuracy` should be added to.,tf.compat.v1.metrics.accuracy.yaml,2
8965,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.accuracy.yaml,2
8966,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
8967,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.image2.yaml,2
8968,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `true_negatives`should be added to.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
8969,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
8970,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional tuple of`tf.autograph.experimental.Feature` values.,tf.function.yaml,2
8971,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
8972,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_positives.yaml,2
8973,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
8974,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom objects (classes and functions) to be considered during deserialization.,tf.keras.optimizers.deserialize.yaml,2
8975,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean_per_class_accuracy' should be added to.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8976,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
8977,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.precision_at_k.yaml,2
8978,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.precision_at_k.yaml,2
8979,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
8980,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `floats`.,tf.image.sample_distorted_bounding_box.yaml,2
8981,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
8982,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.recall_at_top_k.yaml,2
8983,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.tensor_summary.yaml,2
8984,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `auc` should be added to.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
8985,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision_at_thresholds.yaml,2
8986,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean_iou`should be added to.,tf.compat.v1.metrics.mean_iou.yaml,2
8987,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections `update_op` should be added to.,tf.compat.v1.metrics.mean_iou.yaml,2
8988,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `recall` should be added to.,tf.compat.v1.metrics.recall.yaml,2
8989,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.recall.yaml,2
8990,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of allowed batch sizes.,tf.nondifferentiable_batch_function.yaml,2
8991,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_config.yaml,2
8992,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.squeeze.yaml,2
8993,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `true_positives`should be added to.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
8994,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
8995,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.compat.v1.decode_csv.yaml,2
8996,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.case.yaml,2
8997,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_local_variable.yaml,2
8998,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_relative_error` should be added to.,tf.compat.v1.metrics.mean_relative_error.yaml,2
8999,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_relative_error.yaml,2
9000,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_yaml.yaml,2
9001,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that`mean_squared_error` should be added to.,tf.compat.v1.metrics.mean_squared_error.yaml,2
9002,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.mean_squared_error.yaml,2
9003,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
9004,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.false_negatives.yaml,2
9005,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
9006,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",(optional) List of `tf.config.LogicalDeviceConfiguration`objects to allocate for the specified `PhysicalDevice`.,tf.config.set_logical_device_configuration.yaml,2
9007,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
9008,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.percentage_below.yaml,2
9009,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","`int` or shape `tuple`, optional Axes over which to shift.",tf.signal.fftshift.yaml,2
9010,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","Optional callable that accepts a fully defined `TensorShape`and `dtype` of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).",tf.compat.v1.get_variable.yaml,2
9011,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
9012,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.model_from_json.yaml,2
9013,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `specificity`should be added to.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
9014,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
9015,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
9016,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `mean`should be added to.,tf.compat.v1.metrics.mean_tensor.yaml,2
9017,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op`should be added to.,tf.compat.v1.metrics.mean_tensor.yaml,2
9018,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional name for the protocol buffer file that contains the list of most recent checkpoint filenames.,tf.train.latest_checkpoint.yaml,2
9019,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.recall_at_k.yaml,2
9020,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.recall_at_k.yaml,2
9021,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) A list of `len(datasets)` floating-point values where`weights[i]` represents the probability with which an element should be sampled from `datasets[i]`, or a `tf.data.Dataset` object where each element is such a list.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
9022,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
9023,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of `SessionRunHook` objects.,tf.compat.v1.train.MonitoredTrainingSession.yaml,2
9024,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",optional list of input tensors or InputLayer objects to build the model upon.,tf.keras.models.clone_model.yaml,2
9025,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})","(Optional.) If supplied, the resulting list is filtered to include only items whose `name` attribute matches using `re.match`.",tf.compat.v1.get_collection.yaml,2
9026,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `false_negatives`should be added to.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
9027,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
9028,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
9029,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
9030,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.true_positives.yaml,2
9031,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional sorted list of column indices to select.,tf.io.decode_csv.yaml,2
9032,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `precision` should be added to.,tf.compat.v1.metrics.precision.yaml,2
9033,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that `update_op` should be added to.,tf.compat.v1.metrics.precision.yaml,2
9034,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of graph collections keys.,tf.compat.v1.summary.merge.yaml,2
9035,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.,tf.keras.models.load_model.yaml,2
9036,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional list of ops.GraphKeys.,tf.compat.v1.summary.audio2.yaml,2
9037,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric value variable should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
9038,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that the metric update ops should be added to.,tf.compat.v1.metrics.mean_cosine_distance.yaml,2
9039,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
9040,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",Optional callable that returns a list of tensors.,tf.compat.v1.case.yaml,2
9041,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of `ints`.,tf.compat.v1.squeeze.yaml,2
9042,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that values should be added to.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
9043,74,0.012395787626151821,113,"frozenset({'optional', 'SOME_STRUCTURE'})",An optional list of collections that updates should be added to.,tf.compat.v1.metrics.average_precision_at_k.yaml,2
9044,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})"," For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn(   key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),                 <tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.",tf.compat.v1.feature_column.input_layer.yaml,2
9045,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.data.experimental.make_csv_dataset.yaml,2
9046,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
9047,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
9048,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A `tf.DType` from: `tf.bfloat16, tf.half, tf.float32, tf.float64, tf.int64, tf.int32, tf.uint8, tf.uint16, tf.uint32, tf.uint64, tf.int8, tf.int16, tf.complex64, tf.complex128, tf.qint8, tf.quint8, tf.qint16, tf.quint16, tf.qint32`.",tf.bitcast.yaml,2
9049,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.nn.max_pool_with_argmax.yaml,2
9050,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.nn.max_pool_with_argmax.yaml,2
9051,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.data.experimental.sample_from_datasets.yaml,2
9052,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",By default it is`tf.int64`.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
9053,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","If user defines a `label_vocabulary`, this should be set as`tf.string`.",tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
9054,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",`tf.float32` labels are only supported for binary classification.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
9055,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.classifier_parse_example_spec.yaml,2
9056,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A function mapping an element of the input dataset to a scalar`tf.int32` tensor.,tf.data.experimental.rejection_resample.yaml,2
9057,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A function that maps a nested structure of tensors (having shapes and types defined by `self.output_shapes` and `self.output_types`) to a scalar `tf.bool` tensor.,tf.data.experimental.take_while.yaml,2
9058,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9059,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9060,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})"," Defaults to `splits.dtype`, or `tf.int64` if `splits` does not have a dtype.",tf.ragged.row_splits_to_segment_ids.yaml,2
9061,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.classification_signature_def.yaml,2
9062,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","This may currently be a `tf.DType` object, a `DataType`enum, a string type name, or a `numpy.dtype`.",tf.dtypes.as_dtype.yaml,2
9063,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","Either an int/float, the string `""dynamic""`, or an instance of a`tf.mixed_precision.experimental.LossScale`.",tf.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
9064,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A scalar `tf.variant` tensor representing a dataset.,tf.data.experimental.from_variant.yaml,2
9065,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.debugging.assert_type.yaml,2
9066,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",By default it is`tf.float32`.,tf.estimator.regressor_parse_example_spec.yaml,2
9067,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.regressor_parse_example_spec.yaml,2
9068,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique.yaml,2
9069,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.unique.yaml,2
9070,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.string` scalar evaluating to one of`""""` (no compression), `""ZLIB""`, or `""GZIP""`.",tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
9071,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",[Optional] Dict of variable names (strings) to`tf.estimator.VocabInfo`.,tf.compat.v1.train.warm_start.yaml,2
9072,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",[Optional] One of the following: A regular expression (string) that captures which variables to warm-start (see tf.compat.v1.get_collection).,tf.compat.v1.train.warm_start.yaml,2
9073,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})"," This expression will only consider variables in the TRAINABLE_VARIABLES collection -- if you need to warm-start non_TRAINABLE vars (such as optimizer accumulators or batch norm statistics), please use the below option.A list of strings, each a regex scope provided to tf.compat.v1.get_collection with GLOBAL_VARIABLES (please see tf.compat.v1.get_collection).",tf.compat.v1.train.warm_start.yaml,2
9074,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","string tag used to identify the summary (e.g. in TensorBoard), usually generated with `tf.summary.summary_scope`",tf.summary.write.yaml,2
9075,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.string` tensor.,tf.compat.v1.reduce_join.yaml,2
9076,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","float (0, 1], fraction of size to crop Usage Example: `python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf.image.central_crop(x, 0.5)`",tf.image.central_crop.yaml,2
9077,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
9078,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_min.yaml,2
9079,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.arg_min.yaml,2
9080,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.io.extract_jpeg_shape.yaml,2
9081,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.io.extract_jpeg_shape.yaml,2
9082,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A possibly nested sequence of `tf.TensorSpec` objects specifying the shapes and dtypes of the Tensors that will be supplied to this function.,tf.function.yaml,2
9083,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.bool` scalar `tf.Tensor`, representing whether the last batch should be dropped in the case it has fewer than`batch_size` elements; the default behavior is not to drop the smaller batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
9084,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,2
9085,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
9086,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})", One of `tf.int32` or `tf.int64`.,tf.ragged.range.yaml,2
9087,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.compat.v1.string_to_number.yaml,2
9088,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.float32`.,tf.compat.v1.string_to_number.yaml,2
9089,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})", Default is `tf.int32`.,tf.searchsorted.yaml,2
9090,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.arg_max.yaml,2
9091,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.arg_max.yaml,2
9092,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
9093,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.compat.v1.shape.yaml,2
9094,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `Tensor` of type `tf.string`.,tf.fingerprint.yaml,2
9095,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.compat.v1.data.experimental.choose_from_datasets.yaml,2
9096,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmin.yaml,2
9097,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.argmin.yaml,2
9098,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",The output dtype; defaults to `tf.int64`.,tf.compat.v1.count_nonzero.yaml,2
9099,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.compat.v1.data.experimental.Counter.yaml,2
9100,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",a string for the name of the executor to be used to execute functions defined by tf.contrib.eager.defun.,tf.experimental.function_executor_type.yaml,2
9101,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A tensorflow type (`dtypes.float32`, `tf.int64`, `dtypes.bool`, etc).",tf.compat.v1.assert_type.yaml,2
9102,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
9103,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
9104,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})"," Defaults to `segment_ids.dtype`, or `tf.int64` if `segment_ids` does not have a dtype.",tf.ragged.segment_ids_to_row_splits.yaml,2
9105,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.unique_with_counts.yaml,2
9106,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.unique_with_counts.yaml,2
9107,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","Type of weights, such as `tf.float32`.",tf.feature_column.weighted_categorical_column.yaml,2
9108,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A string `Tensor`, expected to accept serialized tf.Examples.",tf.compat.v1.saved_model.regression_signature_def.yaml,2
9109,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_window.yaml,2
9110,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9111,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
9112,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.uint8, tf.uint16`.",tf.io.decode_png.yaml,2
9113,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.uint8`.,tf.io.decode_png.yaml,2
9114,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Default is`tf.float32`.,tf.ones.yaml,2
9115,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmin.yaml,2
9116,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.math.argmin.yaml,2
9117,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",(Optional) A string corresponding to the key labels are stored in`tf.Examples`.,tf.data.experimental.make_batched_features_dataset.yaml,2
9118,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.data.Dataset` of scalar `tf.int64` tensors between`0` and `len(datasets) - 1`.,tf.data.experimental.choose_from_datasets.yaml,2
9119,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","`tf.Tensor` of type `float16`, `float32`, `float64`, `int32`,`complex64`, `complex128` and rank > 1.",tf.linalg.matmul.yaml,2
9120,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.math.argmax.yaml,2
9121,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.math.argmax.yaml,2
9122,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
9123,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`.",tf.strings.to_number.yaml,2
9124,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.float32`.,tf.strings.to_number.yaml,2
9125,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Default value is `tf.float32`.,tf.feature_column.numeric_column.yaml,2
9126,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.compat.v1.argmax.yaml,2
9127,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int64`.,tf.compat.v1.argmax.yaml,2
9128,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",By default it is`tf.int64`.,tf.estimator.classifier_parse_example_spec.yaml,2
9129,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","If user defines a `label_vocabulary`, this should be set as`tf.string`.",tf.estimator.classifier_parse_example_spec.yaml,2
9130,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",`tf.float32` labels are only supported for binary classification.,tf.estimator.classifier_parse_example_spec.yaml,2
9131,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.estimator.classifier_parse_example_spec.yaml,2
9132,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",One of `tf.int32` or `tf.int64`.,tf.ragged.constant.yaml,2
9133,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","(Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random seed that will be used to create the distribution.",tf.compat.v1.data.experimental.sample_from_datasets.yaml,2
9134,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.shape.yaml,2
9135,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",The output dtype; defaults to `tf.int64`.,tf.math.count_nonzero.yaml,2
9136,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.",tf.compat.v1.enable_eager_execution.yaml,2
9137,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.TensorShape` or list of `int`s.,tf.compat.v1.placeholder_with_default.yaml,2
9138,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","The keys of such a dictionary may be arbitrary strings, but will typically be from the`tf.saved_model.signature_constants` module.",tf.saved_model.save.yaml,2
9139,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
9140,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to `numpy.array([block_shape, block_shape], dtype=numpy.int64)`.",tf.batch_to_space.yaml,2
9141,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to`tf.int64`.,tf.data.experimental.Counter.yaml,2
9142,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A function mapping a nested structure of tensors (having shapes and types defined by `self.output_shapes` and`self.output_types`) to a scalar `tf.int64` tensor.,tf.data.experimental.group_by_reducer.yaml,2
9143,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A list of `tf.DTypes`.,tf.io.decode_proto.yaml,2
9144,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",List of TF types to use for the respective field in field_names.,tf.io.decode_proto.yaml,2
9145,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",By default it is`tf.float32`.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
9146,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A string or a `NumericColumn` created by`tf.feature_column.numeric_column` defining feature column representing weights.,tf.compat.v1.estimator.regressor_parse_example_spec.yaml,2
9147,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","Either an int/float, the string `""dynamic""`, or an instance of a `tf.mixed_precision.experimental.LossScale`.",tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite.yaml,2
9148,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",This optional argument can be in any of the following format:<ul><li>a list or tuple of `DType` objects or strings that can be converted to `DType` objects via `tf.as_dtype()`.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
9149,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.compat.v1.size.yaml,2
9150,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
9151,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,2
9152,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})","An optional `tf.DType` from: `tf.int32, tf.int64`.",tf.linalg.lu.yaml,2
9153,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`.,tf.linalg.lu.yaml,2
9154,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",A `tf.string` tensor.,tf.strings.reduce_join.yaml,2
9155,72,0.01228609039052216,112,"frozenset({'SOME_DTYPE', 'tf'})",Defaults to `tf.int32`(optional).,tf.shape_n.yaml,2
9156,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
9157,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
9158,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` with the same type as `input` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv2d_transpose.yaml,3
9159,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
9160,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv2d_transpose.yaml,3
9161,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv2d_transpose.yaml,3
9162,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv2d_transpose.yaml,3
9163,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
9164,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
9165,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
9166,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
9167,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,3
9168,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,3
9169,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
9170,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
9171,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,3
9172,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,3
9173,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv_transpose.yaml,3
9174,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.categorical.yaml,3
9175,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
9176,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
9177,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
9178,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.compat.v1.nn.conv2d.yaml,3
9179,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
9180,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
9181,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D tensor of shape`[filter_height, filter_width, in_channels, out_channels]`",tf.nn.conv2d.yaml,3
9182,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
9183,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
9184,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
9185,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
9186,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
9187,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
9188,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
9189,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.image.crop_and_resize.yaml,3
9190,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,3
9191,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
9192,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D tensor of shape `[num_boxes, 4]`.",tf.compat.v1.image.crop_and_resize.yaml,3
9193,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,3
9194,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,3
9195,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
9196,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,3
9197,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
9198,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
9199,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
9200,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
9201,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
9202,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
9203,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
9204,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 5-D `Tensor` with the same type as `value` and shape `[height, width, output_channels, in_channels]`.",tf.nn.conv3d_transpose.yaml,3
9205,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
9206,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.nn.conv3d_transpose.yaml,3
9207,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,3
9208,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Tensor with shape [batch_size, h, w, d].",tf.image.image_gradients.yaml,3
9209,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.nn.convolution.yaml,3
9210,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,3
9211,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 5-D `Tensor` with the same type as `value` and shape`[depth, height, width, output_channels, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
9212,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` representing the output shape of the deconvolution op.,tf.compat.v1.nn.conv3d_transpose.yaml,3
9213,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
9214,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
9215,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, out_channels, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,3
9216,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D `Tensor` of shape representing the output shape of the deconvolution op.,tf.nn.atrous_conv2d_transpose.yaml,3
9217,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","2-D Tensor with shape `[batch_size, num_classes]`.",tf.random.stateless_categorical.yaml,3
9218,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
9219,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
9220,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
9221,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D `Tensor` with shape`[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.compat.v1.nn.separable_conv2d.yaml,3
9222,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.compat.v1.nn.separable_conv2d.yaml,3
9223,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D `Tensor` with shape`[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.compat.v1.nn.separable_conv2d.yaml,3
9224,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,3
9225,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D `Tensor` with shape `[filter_height, filter_width, in_channels, channel_multiplier]`.",tf.nn.separable_conv2d.yaml,3
9226,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",4-D `Tensor` with shape according to `data_format`.,tf.nn.separable_conv2d.yaml,3
9227,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D `Tensor` with shape `[1, 1, channel_multiplier * in_channels, out_channels]`.",tf.nn.separable_conv2d.yaml,3
9228,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,3
9229,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,3
9230,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,3
9231,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 3-D `Tensor` with the same type as `value` and shape`[filter_width, output_channels, in_channels]`.",tf.nn.conv1d_transpose.yaml,3
9232,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
9233,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 1-D `Tensor`, containing three elements, representing the output shape of the deconvolution op.",tf.nn.conv1d_transpose.yaml,3
9234,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`Tensor` of shape `[batch_size, d1, ...",tf.compat.v1.losses.compute_weighted_loss.yaml,3
9235,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,3
9236,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
9237,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
9238,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","3D tensor with shape: (batch_size, steps, input_dim) if data_format is ""channels_last"" or (batch_size, input_dim, steps) if data_format is ""channels_first"".",tf.keras.backend.local_conv1d.yaml,3
9239,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
9240,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
9241,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Tensor of temporal data of shape `(samples, time, ...)`(at least 3D), or nested tensors, and each of which has shape`(samples, time, ...)`.",tf.keras.backend.rnn.yaml,3
9242,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,3
9243,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D `Tensor` with the same type as `value` and shape`[filter_height, filter_width, in_channels, out_channels]`.",tf.nn.atrous_conv2d.yaml,3
9244,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,3
9245,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
9246,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
9247,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An (N+2)-D `Tensor` with the same type as `input` and shape`spatial_filter_shape + [in_channels, out_channels]`.",tf.compat.v1.nn.convolution.yaml,3
9248,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An (N+2)-D `Tensor` of type `T`, of shape`[batch_size] + input_spatial_shape + [in_channels]` if data_format does not start with ""NC"" (default), or`[batch_size, in_channels] + input_spatial_shape` if data_format starts with ""NC"".",tf.compat.v1.nn.convolution.yaml,3
9249,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
9250,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
9251,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
9252,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,3
9253,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
9254,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
9255,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
9256,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
9257,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
9258,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.",tf.keras.backend.local_conv2d.yaml,3
9259,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,3
9260,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
9261,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
9262,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
9263,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
9264,110,0.011956998683633173,109,"frozenset({'shape', 'tensor', 'd'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
9265,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
9266,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
9267,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
9268,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
9269,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
9270,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","A `tf.DType` from: `tf.bfloat16, tf.half, tf.float32, tf.float64, tf.int64, tf.int32, tf.uint8, tf.uint16, tf.uint32, tf.uint64, tf.int8, tf.int16, tf.complex64, tf.complex128, tf.qint8, tf.quint8, tf.qint16, tf.quint16, tf.qint32`.",tf.bitcast.yaml,2
9271,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
9272,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
9273,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
9274,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
9275,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
9276,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","It could be `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`,`int64`, `float16`, `float32`, `float64`, `complex64`, `complex128`,`bfloat16`.",tf.cast.yaml,2
9277,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
9278,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9279,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
9280,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
9281,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
9282,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
9283,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
9284,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
9285,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
9286,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
9287,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
9288,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
9289,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
9290,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
9291,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
9292,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
9293,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
9294,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9295,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9296,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
9297,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
9298,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
9299,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
9300,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
9301,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
9302,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
9303,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
9304,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
9305,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
9306,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
9307,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
9308,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
9309,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
9310,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
9311,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
9312,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9313,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
9314,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
9315,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
9316,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
9317,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
9318,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
9319,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
9320,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
9321,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
9322,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
9323,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
9324,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
9325,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
9326,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
9327,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
9328,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
9329,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
9330,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
9331,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
9332,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
9333,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
9334,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
9335,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
9336,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
9337,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
9338,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
9339,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
9340,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
9341,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
9342,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
9343,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
9344,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
9345,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
9346,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
9347,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
9348,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
9349,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
9350,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
9351,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
9352,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
9353,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
9354,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
9355,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
9356,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
9357,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
9358,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
9359,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
9360,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
9361,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
9362,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
9363,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
9364,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
9365,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
9366,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
9367,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
9368,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
9369,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
9370,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
9371,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
9372,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
9373,61,0.011956998683633173,109,"frozenset({'SOME_DTYPE', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
9374,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
9375,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
9376,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
9377,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
9378,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
9379,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
9380,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
9381,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
9382,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
9383,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
9384,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
9385,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9386,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
9387,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
9388,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
9389,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
9390,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
9391,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
9392,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
9393,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
9394,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
9395,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
9396,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
9397,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
9398,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
9399,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
9400,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
9401,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9402,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9403,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
9404,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
9405,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
9406,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
9407,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
9408,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
9409,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
9410,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
9411,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
9412,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
9413,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
9414,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
9415,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
9416,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
9417,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
9418,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
9419,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9420,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
9421,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
9422,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
9423,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
9424,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
9425,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
9426,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
9427,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
9428,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
9429,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
9430,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
9431,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
9432,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
9433,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
9434,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
9435,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
9436,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
9437,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
9438,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
9439,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
9440,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
9441,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
9442,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
9443,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
9444,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
9445,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
9446,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
9447,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
9448,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
9449,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
9450,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
9451,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
9452,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
9453,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
9454,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
9455,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
9456,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
9457,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
9458,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
9459,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
9460,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
9461,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
9462,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
9463,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
9464,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
9465,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
9466,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
9467,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
9468,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
9469,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
9470,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
9471,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
9472,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
9473,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
9474,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
9475,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
9476,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
9477,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
9478,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
9479,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
9480,79,0.011737604212373848,107,"frozenset({'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
9481,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
9482,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
9483,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
9484,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
9485,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
9486,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
9487,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
9488,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
9489,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
9490,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
9491,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
9492,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
9493,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
9494,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
9495,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
9496,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
9497,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
9498,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
9499,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
9500,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
9501,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
9502,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
9503,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
9504,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
9505,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
9506,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
9507,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
9508,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
9509,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
9510,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
9511,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
9512,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
9513,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
9514,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
9515,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
9516,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
9517,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
9518,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
9519,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
9520,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
9521,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
9522,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
9523,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
9524,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
9525,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
9526,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
9527,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
9528,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
9529,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
9530,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
9531,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
9532,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
9533,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
9534,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
9535,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
9536,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
9537,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
9538,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
9539,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
9540,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
9541,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
9542,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
9543,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
9544,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
9545,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
9546,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
9547,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
9548,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
9549,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
9550,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
9551,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
9552,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
9553,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
9554,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
9555,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
9556,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
9557,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
9558,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
9559,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
9560,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
9561,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
9562,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
9563,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
9564,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
9565,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
9566,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
9567,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
9568,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
9569,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
9570,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
9571,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
9572,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
9573,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
9574,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
9575,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
9576,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
9577,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
9578,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
9579,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
9580,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
9581,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
9582,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
9583,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
9584,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
9585,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
9586,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
9587,108,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
9588,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
9589,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
9590,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
9591,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
9592,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
9593,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
9594,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
9595,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
9596,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
9597,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
9598,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
9599,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
9600,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
9601,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
9602,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
9603,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
9604,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
9605,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
9606,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
9607,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
9608,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
9609,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
9610,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
9611,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
9612,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
9613,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
9614,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
9615,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
9616,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
9617,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
9618,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
9619,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
9620,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
9621,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
9622,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
9623,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
9624,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
9625,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
9626,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
9627,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
9628,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
9629,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
9630,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
9631,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
9632,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
9633,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
9634,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
9635,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
9636,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
9637,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
9638,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
9639,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
9640,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
9641,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
9642,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
9643,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
9644,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
9645,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
9646,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
9647,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
9648,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
9649,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
9650,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
9651,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
9652,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
9653,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
9654,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
9655,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
9656,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
9657,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
9658,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
9659,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
9660,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
9661,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
9662,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
9663,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
9664,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
9665,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
9666,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
9667,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
9668,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
9669,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
9670,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
9671,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
9672,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
9673,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
9674,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
9675,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
9676,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
9677,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
9678,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
9679,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
9680,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
9681,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
9682,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
9683,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
9684,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
9685,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
9686,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
9687,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
9688,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
9689,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
9690,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
9691,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
9692,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
9693,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
9694,109,0.011737604212373848,107,"frozenset({'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
9695,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,4
9696,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,4
9697,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,4
9698,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,4
9699,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,4
9700,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,4
9701,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,4
9702,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,4
9703,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,4
9704,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,4
9705,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,4
9706,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
9707,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,4
9708,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,4
9709,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,4
9710,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,4
9711,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,4
9712,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,4
9713,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,4
9714,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,4
9715,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,4
9716,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,4
9717,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,4
9718,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,4
9719,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,4
9720,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,4
9721,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,4
9722,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
9723,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
9724,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,4
9725,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,4
9726,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,4
9727,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,4
9728,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,4
9729,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
9730,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,4
9731,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,4
9732,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,4
9733,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,4
9734,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,4
9735,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,4
9736,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,4
9737,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,4
9738,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,4
9739,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,4
9740,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
9741,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,4
9742,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,4
9743,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,4
9744,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,4
9745,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,4
9746,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,4
9747,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,4
9748,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,4
9749,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,4
9750,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,4
9751,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,4
9752,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,4
9753,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
9754,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,4
9755,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,4
9756,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,4
9757,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,4
9758,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,4
9759,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,4
9760,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,4
9761,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,4
9762,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,4
9763,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,4
9764,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,4
9765,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,4
9766,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,4
9767,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,4
9768,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,4
9769,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,4
9770,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
9771,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,4
9772,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,4
9773,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,4
9774,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,4
9775,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,4
9776,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,4
9777,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,4
9778,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
9779,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,4
9780,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,4
9781,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
9782,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
9783,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,4
9784,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,4
9785,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,4
9786,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,4
9787,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,4
9788,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,4
9789,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,4
9790,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,4
9791,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
9792,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,4
9793,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,4
9794,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,4
9795,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,4
9796,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,4
9797,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,4
9798,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,4
9799,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,4
9800,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,4
9801,114,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,4
9802,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,4
9803,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,4
9804,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,4
9805,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,4
9806,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,4
9807,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,4
9808,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,4
9809,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,4
9810,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,4
9811,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,4
9812,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,4
9813,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
9814,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,4
9815,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,4
9816,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,4
9817,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,4
9818,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,4
9819,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,4
9820,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,4
9821,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,4
9822,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,4
9823,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,4
9824,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,4
9825,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,4
9826,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,4
9827,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,4
9828,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,4
9829,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
9830,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
9831,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,4
9832,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,4
9833,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,4
9834,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,4
9835,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,4
9836,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
9837,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,4
9838,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,4
9839,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,4
9840,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,4
9841,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,4
9842,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,4
9843,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,4
9844,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,4
9845,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,4
9846,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,4
9847,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
9848,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,4
9849,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,4
9850,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,4
9851,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,4
9852,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,4
9853,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,4
9854,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,4
9855,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,4
9856,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,4
9857,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,4
9858,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,4
9859,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,4
9860,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
9861,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,4
9862,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,4
9863,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,4
9864,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,4
9865,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,4
9866,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,4
9867,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,4
9868,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,4
9869,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,4
9870,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,4
9871,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,4
9872,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,4
9873,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,4
9874,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,4
9875,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,4
9876,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,4
9877,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
9878,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,4
9879,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,4
9880,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,4
9881,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,4
9882,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,4
9883,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,4
9884,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,4
9885,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
9886,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,4
9887,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,4
9888,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
9889,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
9890,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,4
9891,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,4
9892,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,4
9893,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,4
9894,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,4
9895,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,4
9896,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,4
9897,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,4
9898,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
9899,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,4
9900,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,4
9901,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,4
9902,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,4
9903,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,4
9904,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,4
9905,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,4
9906,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,4
9907,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,4
9908,113,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,4
9909,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
9910,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
9911,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
9912,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
9913,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
9914,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
9915,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
9916,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
9917,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
9918,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
9919,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
9920,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
9921,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
9922,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
9923,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
9924,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
9925,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
9926,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
9927,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
9928,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
9929,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
9930,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
9931,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
9932,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
9933,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
9934,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
9935,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
9936,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9937,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
9938,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
9939,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
9940,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
9941,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
9942,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
9943,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
9944,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
9945,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
9946,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
9947,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
9948,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
9949,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
9950,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
9951,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
9952,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
9953,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
9954,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
9955,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
9956,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
9957,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
9958,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
9959,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
9960,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
9961,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
9962,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
9963,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
9964,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
9965,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
9966,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
9967,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
9968,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
9969,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
9970,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
9971,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
9972,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
9973,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
9974,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
9975,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
9976,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
9977,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
9978,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
9979,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
9980,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
9981,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
9982,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
9983,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
9984,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
9985,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
9986,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
9987,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
9988,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
9989,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
9990,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
9991,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
9992,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
9993,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
9994,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
9995,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
9996,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
9997,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
9998,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
9999,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
10000,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
10001,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
10002,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
10003,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
10004,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
10005,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
10006,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
10007,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
10008,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
10009,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
10010,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
10011,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
10012,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
10013,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
10014,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
10015,77,0.011737604212373848,107,"frozenset({'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
10016,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,4
10017,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,4
10018,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,4
10019,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,4
10020,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,4
10021,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,4
10022,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,4
10023,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,4
10024,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,4
10025,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,4
10026,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,4
10027,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
10028,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,4
10029,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,4
10030,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,4
10031,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,4
10032,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,4
10033,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,4
10034,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,4
10035,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,4
10036,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,4
10037,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,4
10038,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,4
10039,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,4
10040,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,4
10041,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,4
10042,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,4
10043,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
10044,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
10045,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,4
10046,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,4
10047,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,4
10048,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,4
10049,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,4
10050,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
10051,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,4
10052,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,4
10053,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,4
10054,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,4
10055,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,4
10056,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,4
10057,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,4
10058,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,4
10059,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,4
10060,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,4
10061,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
10062,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,4
10063,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,4
10064,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,4
10065,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,4
10066,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,4
10067,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,4
10068,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,4
10069,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,4
10070,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,4
10071,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,4
10072,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,4
10073,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,4
10074,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
10075,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,4
10076,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,4
10077,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,4
10078,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,4
10079,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,4
10080,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,4
10081,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,4
10082,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,4
10083,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,4
10084,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,4
10085,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,4
10086,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,4
10087,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,4
10088,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,4
10089,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,4
10090,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,4
10091,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
10092,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,4
10093,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,4
10094,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,4
10095,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,4
10096,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,4
10097,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,4
10098,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,4
10099,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
10100,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,4
10101,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,4
10102,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
10103,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
10104,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,4
10105,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,4
10106,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,4
10107,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,4
10108,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,4
10109,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,4
10110,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,4
10111,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,4
10112,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
10113,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,4
10114,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,4
10115,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,4
10116,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,4
10117,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,4
10118,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,4
10119,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,4
10120,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,4
10121,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,4
10122,115,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,4
10123,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,4
10124,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,4
10125,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,4
10126,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,4
10127,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,4
10128,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,4
10129,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,4
10130,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,4
10131,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,4
10132,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,4
10133,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,4
10134,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,4
10135,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,4
10136,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,4
10137,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,4
10138,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,4
10139,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,4
10140,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,4
10141,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,4
10142,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,4
10143,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,4
10144,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,4
10145,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,4
10146,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,4
10147,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,4
10148,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,4
10149,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,4
10150,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
10151,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,4
10152,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,4
10153,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,4
10154,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,4
10155,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,4
10156,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,4
10157,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,4
10158,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,4
10159,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,4
10160,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,4
10161,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,4
10162,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,4
10163,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,4
10164,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,4
10165,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,4
10166,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,4
10167,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,4
10168,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,4
10169,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,4
10170,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,4
10171,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,4
10172,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,4
10173,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,4
10174,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,4
10175,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,4
10176,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,4
10177,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,4
10178,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,4
10179,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,4
10180,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,4
10181,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,4
10182,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,4
10183,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,4
10184,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,4
10185,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,4
10186,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,4
10187,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,4
10188,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,4
10189,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,4
10190,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,4
10191,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,4
10192,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,4
10193,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,4
10194,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,4
10195,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,4
10196,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,4
10197,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,4
10198,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,4
10199,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,4
10200,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,4
10201,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,4
10202,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,4
10203,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,4
10204,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,4
10205,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,4
10206,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,4
10207,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,4
10208,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,4
10209,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,4
10210,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,4
10211,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,4
10212,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,4
10213,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,4
10214,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,4
10215,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,4
10216,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,4
10217,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,4
10218,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,4
10219,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,4
10220,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,4
10221,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,4
10222,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,4
10223,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,4
10224,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,4
10225,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,4
10226,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,4
10227,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,4
10228,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,4
10229,117,0.011737604212373848,107,"frozenset({'one', 'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,4
10230,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
10231,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
10232,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
10233,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
10234,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
10235,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
10236,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
10237,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
10238,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
10239,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
10240,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
10241,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
10242,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
10243,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
10244,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
10245,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
10246,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
10247,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
10248,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
10249,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
10250,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
10251,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
10252,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
10253,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
10254,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
10255,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
10256,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
10257,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10258,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10259,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
10260,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
10261,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
10262,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
10263,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
10264,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
10265,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
10266,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
10267,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
10268,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
10269,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
10270,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
10271,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
10272,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
10273,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
10274,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
10275,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
10276,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
10277,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
10278,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
10279,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
10280,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
10281,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
10282,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
10283,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
10284,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
10285,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
10286,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
10287,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
10288,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
10289,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
10290,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
10291,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
10292,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
10293,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
10294,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
10295,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
10296,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
10297,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
10298,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
10299,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
10300,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
10301,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
10302,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
10303,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
10304,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
10305,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
10306,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
10307,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
10308,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
10309,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
10310,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
10311,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
10312,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
10313,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
10314,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
10315,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
10316,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
10317,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
10318,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
10319,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
10320,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
10321,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
10322,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
10323,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
10324,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
10325,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
10326,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
10327,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
10328,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
10329,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
10330,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
10331,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
10332,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
10333,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
10334,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
10335,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
10336,107,0.011737604212373848,107,"frozenset({'following', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
10337,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,5
10338,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,5
10339,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,5
10340,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,5
10341,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,5
10342,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,5
10343,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,5
10344,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,5
10345,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,5
10346,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,5
10347,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,5
10348,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,5
10349,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,5
10350,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,5
10351,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,5
10352,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,5
10353,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,5
10354,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,5
10355,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,5
10356,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,5
10357,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,5
10358,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,5
10359,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,5
10360,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,5
10361,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,5
10362,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,5
10363,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,5
10364,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,5
10365,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,5
10366,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,5
10367,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,5
10368,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,5
10369,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,5
10370,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,5
10371,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,5
10372,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,5
10373,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,5
10374,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,5
10375,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,5
10376,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,5
10377,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,5
10378,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,5
10379,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,5
10380,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,5
10381,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,5
10382,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,5
10383,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,5
10384,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,5
10385,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,5
10386,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,5
10387,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,5
10388,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,5
10389,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,5
10390,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,5
10391,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,5
10392,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,5
10393,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,5
10394,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,5
10395,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,5
10396,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,5
10397,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,5
10398,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,5
10399,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,5
10400,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,5
10401,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,5
10402,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,5
10403,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,5
10404,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,5
10405,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,5
10406,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,5
10407,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,5
10408,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,5
10409,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,5
10410,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,5
10411,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,5
10412,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,5
10413,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,5
10414,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,5
10415,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,5
10416,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,5
10417,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,5
10418,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,5
10419,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,5
10420,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,5
10421,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,5
10422,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,5
10423,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,5
10424,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,5
10425,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,5
10426,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,5
10427,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,5
10428,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,5
10429,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,5
10430,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,5
10431,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,5
10432,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,5
10433,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,5
10434,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,5
10435,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,5
10436,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,5
10437,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,5
10438,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,5
10439,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,5
10440,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,5
10441,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,5
10442,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,5
10443,118,0.011737604212373848,107,"frozenset({'one', 'following', 'bfloat', 'SOME_DTYPE', 'must'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,5
10444,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,2
10445,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,2
10446,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,2
10447,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,2
10448,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,2
10449,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,2
10450,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,2
10451,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,2
10452,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,2
10453,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,2
10454,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,2
10455,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
10456,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,2
10457,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,2
10458,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,2
10459,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,2
10460,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,2
10461,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,2
10462,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,2
10463,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,2
10464,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,2
10465,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,2
10466,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,2
10467,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,2
10468,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,2
10469,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,2
10470,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,2
10471,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
10472,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,2
10473,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,2
10474,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,2
10475,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,2
10476,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,2
10477,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,2
10478,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
10479,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,2
10480,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,2
10481,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,2
10482,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,2
10483,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,2
10484,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,2
10485,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,2
10486,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,2
10487,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,2
10488,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,2
10489,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
10490,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,2
10491,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,2
10492,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,2
10493,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,2
10494,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,2
10495,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,2
10496,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,2
10497,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,2
10498,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,2
10499,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,2
10500,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,2
10501,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,2
10502,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,2
10503,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,2
10504,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,2
10505,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,2
10506,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,2
10507,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,2
10508,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,2
10509,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,2
10510,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,2
10511,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,2
10512,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,2
10513,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,2
10514,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,2
10515,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,2
10516,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,2
10517,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,2
10518,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,2
10519,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
10520,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,2
10521,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,2
10522,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,2
10523,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,2
10524,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,2
10525,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,2
10526,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,2
10527,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
10528,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,2
10529,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,2
10530,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,2
10531,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
10532,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,2
10533,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,2
10534,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,2
10535,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,2
10536,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,2
10537,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,2
10538,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,2
10539,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,2
10540,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
10541,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,2
10542,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,2
10543,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,2
10544,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,2
10545,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,2
10546,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,2
10547,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,2
10548,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,2
10549,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,2
10550,78,0.011737604212373848,107,"frozenset({'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,2
10551,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
10552,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
10553,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
10554,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
10555,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
10556,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
10557,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
10558,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
10559,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
10560,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
10561,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
10562,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
10563,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
10564,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
10565,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
10566,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
10567,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
10568,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
10569,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
10570,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
10571,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
10572,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
10573,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
10574,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
10575,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
10576,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
10577,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
10578,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10579,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10580,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
10581,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
10582,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
10583,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
10584,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
10585,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
10586,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
10587,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
10588,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
10589,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
10590,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
10591,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
10592,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
10593,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
10594,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
10595,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
10596,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
10597,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
10598,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
10599,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
10600,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
10601,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
10602,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
10603,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
10604,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
10605,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
10606,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
10607,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
10608,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
10609,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
10610,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
10611,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
10612,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
10613,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
10614,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
10615,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
10616,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
10617,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
10618,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
10619,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
10620,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
10621,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
10622,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
10623,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
10624,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
10625,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
10626,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
10627,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
10628,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
10629,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
10630,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
10631,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
10632,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
10633,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
10634,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
10635,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
10636,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
10637,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
10638,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
10639,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
10640,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
10641,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
10642,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
10643,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
10644,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
10645,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
10646,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
10647,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
10648,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
10649,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
10650,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
10651,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
10652,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
10653,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
10654,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
10655,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
10656,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
10657,100,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'one', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
10658,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
10659,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
10660,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
10661,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
10662,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
10663,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
10664,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
10665,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
10666,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
10667,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
10668,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
10669,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
10670,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
10671,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
10672,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
10673,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
10674,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
10675,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
10676,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
10677,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
10678,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
10679,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
10680,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
10681,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
10682,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
10683,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
10684,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
10685,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10686,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10687,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
10688,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
10689,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
10690,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
10691,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
10692,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
10693,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
10694,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
10695,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
10696,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
10697,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
10698,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
10699,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
10700,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
10701,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
10702,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
10703,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
10704,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
10705,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
10706,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
10707,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
10708,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
10709,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
10710,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
10711,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
10712,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
10713,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
10714,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
10715,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
10716,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
10717,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
10718,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
10719,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
10720,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
10721,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
10722,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
10723,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
10724,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
10725,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
10726,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
10727,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
10728,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
10729,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
10730,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
10731,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
10732,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
10733,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
10734,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
10735,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
10736,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
10737,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
10738,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
10739,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
10740,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
10741,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
10742,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
10743,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
10744,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
10745,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
10746,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
10747,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
10748,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
10749,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
10750,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
10751,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
10752,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
10753,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
10754,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
10755,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
10756,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
10757,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
10758,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
10759,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
10760,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
10761,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
10762,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
10763,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
10764,99,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'must', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
10765,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.reciprocal.yaml,3
10766,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_max.yaml,3
10767,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i0e.yaml,3
10768,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`.",tf.nn.local_response_normalization.yaml,3
10769,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int64`, `int32`, `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `complex64`, `complex128`, `qint8`, `quint8`, `qint16`, `quint16`, `qint32`.",tf.bitcast.yaml,3
10770,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d.yaml,3
10771,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.max_pool_with_argmax.yaml,3
10772,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.tanh.yaml,3
10773,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_sub.yaml,3
10774,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv3d.yaml,3
10775,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_nan.yaml,3
10776,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,3
10777,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.sign.yaml,3
10778,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","It must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv_transpose.yaml,3
10779,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sqrt.yaml,3
10780,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.rgb_to_hsv.yaml,3
10781,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log1p.yaml,3
10782,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag_part.yaml,3
10783,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater_equal.yaml,3
10784,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_mul.yaml,3
10785,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sin.yaml,3
10786,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.math.softplus.yaml,3
10787,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_min.yaml,3
10788,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.subtract.yaml,3
10789,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.elu.yaml,3
10790,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.tan.yaml,3
10791,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.asinh.yaml,3
10792,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10793,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `bfloat16`.",tf.compat.v1.sparse_matmul.yaml,3
10794,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d.yaml,3
10795,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.debugging.check_numerics.yaml,3
10796,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_mean.yaml,3
10797,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.squared_difference.yaml,3
10798,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.nn.conv2d.yaml,3
10799,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
10800,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.linalg.tensor_diag.yaml,3
10801,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less.yaml,3
10802,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.realdiv.yaml,3
10803,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.compat.v1.floor_div.yaml,3
10804,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_div.yaml,3
10805,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_min.yaml,3
10806,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_finite.yaml,3
10807,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.bessel_i1e.yaml,3
10808,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.truncatediv.yaml,3
10809,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.atan.yaml,3
10810,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
10811,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.log.yaml,3
10812,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.asin.yaml,3
10813,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cosh.yaml,3
10814,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.rint.yaml,3
10815,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.arg_max.yaml,3
10816,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.greater.yaml,3
10817,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_prod.yaml,3
10818,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.negative.yaml,3
10819,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.segment_sum.yaml,3
10820,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`, `complex64`, `complex128`, `string`.",tf.math.add.yaml,3
10821,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmin.yaml,3
10822,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.floor.yaml,3
10823,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_min.yaml,3
10824,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.math.floormod.yaml,3
10825,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.selu.yaml,3
10826,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.atan2.yaml,3
10827,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erf.yaml,3
10828,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.image.hsv_to_rgb.yaml,3
10829,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_max.yaml,3
10830,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.l2_loss.yaml,3
10831,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`,`uint32`, `uint64`.",tf.nn.dilation2d.yaml,3
10832,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.extract_image_patches.yaml,3
10833,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmin.yaml,3
10834,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.acos.yaml,3
10835,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`,`int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`,`quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`,`uint64`.",tf.math.argmax.yaml,3
10836,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.square.yaml,3
10837,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.segment_min.yaml,3
10838,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.linspace.yaml,3
10839,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.extract_volume_patches.yaml,3
10840,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
10841,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.exp.yaml,3
10842,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.erfc.yaml,3
10843,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_prod.yaml,3
10844,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_sub.yaml,3
10845,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.minimum.yaml,3
10846,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.atanh.yaml,3
10847,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.compat.v1.argmax.yaml,3
10848,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.depthwise_conv2d_backprop_input.yaml,3
10849,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `qint8`.",tf.nn.relu.yaml,3
10850,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `complex64`, `complex128`.",tf.math.multiply.yaml,3
10851,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`,`bfloat16`, `float32`, `float64`, `int32`, `int64`.",tf.compat.v1.scatter_max.yaml,3
10852,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.depthwise_conv2d_native.yaml,3
10853,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.acosh.yaml,3
10854,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`,`float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`,`qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`,`uint32`, `uint64`.",tf.compat.v1.scatter_nd_add.yaml,3
10855,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.rsqrt.yaml,3
10856,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.math.less_equal.yaml,3
10857,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `half`, `bfloat16`, `float32`, `float64`.",tf.nn.softsign.yaml,3
10858,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.lgamma.yaml,3
10859,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `int32`, `int64`, `bfloat16`, `half`, `float32`, `float64`.",tf.truncatemod.yaml,3
10860,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.is_inf.yaml,3
10861,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types:`half`, `bfloat16`, `float32`, `float64`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
10862,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.compat.v1.nn.dilation2d.yaml,3
10863,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `int32`, `int64`.",tf.math.maximum.yaml,3
10864,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.sinh.yaml,3
10865,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`.",tf.math.unsorted_segment_sum.yaml,3
10866,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `uint8`, `int8`, `uint16`, `int16`, `int32`, `int64`, `bool`, `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`, `string`.",tf.reverse.yaml,3
10867,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.digamma.yaml,3
10868,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.",tf.linalg.cross.yaml,3
10869,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.expm1.yaml,3
10870,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.",tf.math.ceil.yaml,3
10871,98,0.011737604212373848,107,"frozenset({'SOME_DTYPE', 'following', 'bfloat'})","Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`, `complex64`, `complex128`.",tf.math.cos.yaml,3
10872,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.compat.v1.image.extract_glimpse.yaml,3
10873,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.compat.v1.image.extract_glimpse.yaml,3
10874,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,3
10875,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A tensor of shape `(batch_size, classes)` and type `float32`.",tf.keras.backend.in_top_k.yaml,3
10876,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,3
10877,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.fixed_unigram_candidate_sampler.yaml,3
10878,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",int32 Tensor of known shape [num_spatial_dims].,tf.nn.with_space_to_batch.yaml,3
10879,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","If padding = ""SAME"", specifies the shape of the convolution kernel/pooling window as an integer Tensor of shape [>=num_spatial_dims].",tf.nn.with_space_to_batch.yaml,3
10880,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,3
10881,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, num_boxes]`.",tf.image.non_max_suppression_overlaps.yaml,3
10882,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_overlaps.yaml,3
10883,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.nce_loss.yaml,3
10884,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,3
10885,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,3
10886,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
10887,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 0-D (scalar) `Tensor`, or a `Tensor` with the same shape as `t`.",tf.clip_by_value.yaml,3
10888,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,3
10889,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","nD integer tensor of shape`(batch_size, dim1, dim2, ...",tf.keras.backend.one_hot.yaml,3
10890,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D float tensor of shape`[batch_size, height, width, channels]`.",tf.image.extract_glimpse.yaml,3
10891,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D integer tensor of shape`[batch_size, 2]` containing the y, x locations of the center of each window.",tf.image.extract_glimpse.yaml,3
10892,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
10893,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,3
10894,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits.yaml,3
10895,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
10896,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_top_k.yaml,3
10897,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 5-D`[filter_depth, filter_height, filter_width, in_channels, out_channels]`tensor.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,3
10898,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].",tf.image.central_crop.yaml,3
10899,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.nce_loss.yaml,3
10900,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D `uint8` or `float32` `Tensor` of shape `[batch_size, height, width, channels]` where `channels` is 1, 3, or 4.",tf.compat.v1.summary.image2.yaml,3
10901,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_with_scores.yaml,3
10902,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_with_scores.yaml,3
10903,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.space_to_batch.yaml,3
10904,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,3
10905,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A tensor of type `int64` and shape `[num_sampled]`.,tf.nn.compute_accidental_hits.yaml,3
10906,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.compute_accidental_hits.yaml,3
10907,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,3
10908,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","2-D tensor of non-negative integers with shape `[2, 2]`.",tf.compat.v1.batch_to_space.yaml,3
10909,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,3
10910,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
10911,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,3
10912,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
10913,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.precision_at_k.yaml,3
10914,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,3
10915,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
10916,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Integer `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_top_k.yaml,3
10917,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",1D int tensor for the output shape.,tf.keras.backend.conv2d_transpose.yaml,3
10918,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,3
10919,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,3
10920,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,3
10921,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,3
10922,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","The outputs are: `finished`, a boolean `Tensor` of shape `[batch_size]`, `next_input`: the next input to feed to `cell`,`next_cell_state`: the next state to feed to `cell`, and `emit_output`: the output to store for this iteration.",tf.compat.v1.nn.raw_rnn.yaml,3
10923,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,3
10924,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of x.",tf.broadcast_dynamic_shape.yaml,3
10925,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A rank 1 integer `Tensor`, representing the shape of y.",tf.broadcast_dynamic_shape.yaml,3
10926,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.compat.v1.nn.dropout.yaml,3
10927,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Either a scalar `N`, or a list or an `int32` `Tensor` of shape [2, k].",tf.tensordot.yaml,3
10928,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.compat.v1.nn.sampled_softmax_loss.yaml,3
10929,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,3
10930,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split_with_offsets.yaml,3
10931,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Image tensor with shape [batch_size, h, w, d] and type float32 or float64.",tf.image.sobel_edges.yaml,3
10932,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode_with_offsets.yaml,3
10933,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.all_candidate_sampler.yaml,3
10934,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_binomial.yaml,3
10935,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.truncated_normal.yaml,3
10936,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,3
10937,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.uniform_candidate_sampler.yaml,3
10938,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,3
10939,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","An `N+1` dimensional potentially ragged integer tensor with shape`[D1...DN, num_chars]`.",tf.strings.unicode_encode.yaml,3
10940,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.",tf.nn.depthwise_conv2d_backprop_filter.yaml,3
10941,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.nn.sampled_softmax_loss.yaml,3
10942,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An iterable of integers specifies the shape of the `Tensor`.,tf.feature_column.numeric_column.yaml,3
10943,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
10944,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.recall_at_k.yaml,3
10945,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,3
10946,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of`labels` and result) and dtype `int32` or `int64`.",tf.compat.v1.losses.sparse_softmax_cross_entropy.yaml,3
10947,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 4-D float `Tensor` of shape `[batch_size, num_boxes, q, 4]`.",tf.image.combined_non_max_suppression.yaml,3
10948,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 3-D float `Tensor` of shape `[batch_size, num_boxes, num_classes]`representing a single score corresponding to each box (each row of boxes).",tf.image.combined_non_max_suppression.yaml,3
10949,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression.yaml,3
10950,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression.yaml,3
10951,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Tensor of int32 with shape `[batch_shape, len(field_names)]`.",tf.io.encode_proto.yaml,3
10952,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,3
10953,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.log_uniform_candidate_sampler.yaml,3
10954,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","An integer vector representing the tensor shape of `filter`, where `filter` is a 4-D`[filter_height, filter_width, in_channels, out_channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,3
10955,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A `Tensor` of type `int64` and shape `[batch_size, num_true]`.",tf.random.learned_unigram_candidate_sampler.yaml,3
10956,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_normal.yaml,3
10957,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,3
10958,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A tuple of integers, the shape of tensor to create.",tf.keras.backend.random_uniform.yaml,3
10959,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 3-D `float32` `Tensor` of shape `[batch_size, frames, channels]`or a 2-D `float32` `Tensor` of shape `[batch_size, frames]`.",tf.compat.v1.summary.audio2.yaml,3
10960,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 1-D `Tensor` of type `int32`, representing the shape for randomly generated keep/drop flags.",tf.nn.dropout.yaml,3
10961,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","A 2-D float `Tensor` of shape `[num_boxes, 4]`.",tf.image.non_max_suppression_padded.yaml,3
10962,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A 1-D float `Tensor` of shape `[num_boxes]` representing a single score corresponding to each box (each row of boxes).,tf.image.non_max_suppression_padded.yaml,3
10963,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_split.yaml,3
10964,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,3
10965,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Optional int32 Tensor of shape [N, 2].",tf.required_space_to_batch_paddings.yaml,3
10966,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,3
10967,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",int32 Tensor of shape [N].,tf.required_space_to_batch_paddings.yaml,3
10968,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A 1-D (vector) int64 `Tensor` specifying the new dense shape of the represented `SparseTensor`.,tf.sparse.reshape.yaml,3
10969,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A `tf.TensorShape` or `tf.int64` vector tensor-like object representing the equivalent dense shape of a row in the resulting`tf.SparseTensor`.,tf.data.experimental.dense_to_sparse_batch.yaml,3
10970,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",A string `Tensor` of any shape.,tf.strings.strip.yaml,3
10971,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","2-D `Tensor` of type `string` of shape `[N, 3]`.",tf.io.deserialize_many_sparse.yaml,3
10972,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})",An `N` dimensional potentially ragged `string` tensor with shape`[D1...DN]`.,tf.strings.unicode_decode.yaml,3
10973,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","`int64` `Tensor` or `SparseTensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
10974,105,0.0112988152698552,103,"frozenset({'SOME_DTYPE', 'shape', 'tensor'})","Float `Tensor` with shape [D1, ...",tf.compat.v1.metrics.average_precision_at_k.yaml,3
10975,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.nn.conv1d.yaml,2
10976,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d_transpose.yaml,2
10977,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", `filter`'s `in_channels` dimension must match that of `input`.,tf.nn.conv2d_transpose.yaml,2
10978,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv2d_transpose.yaml,2
10979,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.compat.v1.nn.conv1d.yaml,2
10980,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.MaxPool2D.yaml,2
10981,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.with_space_to_batch.yaml,2
10982,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d.yaml,2
10983,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv3d.yaml,2
10984,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
10985,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool_with_argmax.yaml,2
10986,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
10987,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv2d_transpose.yaml,2
10988,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
10989,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool2d.yaml,2
10990,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.conv3d.yaml,2
10991,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.nn.conv3d.yaml,2
10992,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
10993,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
10994,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.conv_transpose.yaml,2
10995,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv_transpose.yaml,2
10996,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv_transpose.yaml,2
10997,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
10998,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool.yaml,2
10999,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If not `None`, there must be one dimension per input.",tf.compat.v1.tpu.shard.yaml,2
11000,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
11001,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool2d.yaml,2
11002,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.",tf.quantization.quantize_and_dequantize.yaml,2
11003,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
11004,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool3d.yaml,2
11005,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d.yaml,2
11006,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv2d.yaml,2
11007,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.MaxPool3D.yaml,2
11008,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv2d.yaml,2
11009,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv2d.yaml,2
11010,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
11011,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
11012,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
11013,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_avg_pool.yaml,2
11014,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_min.yaml,2
11015,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
11016,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.avg_pool1d.yaml,2
11017,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
11018,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_input.yaml,2
11019,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
11020,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.avg_pool.yaml,2
11021,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Describes which dimension of the input Tensor to reduce across.,tf.compat.v1.arg_max.yaml,2
11022,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.nn.conv3d_transpose.yaml,2
11023,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.conv3d_transpose.yaml,2
11024,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
11025,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool3d.yaml,2
11026,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
11027,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool1d.yaml,2
11028,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.convolution.yaml,2
11029,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv3d_transpose.yaml,2
11030,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.conv3d_transpose.yaml,2
11031,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.compat.v1.batch_to_space_nd.yaml,2
11032,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.erosion2d.yaml,2
11033,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The strides for the depthwise convolution for each dimension of `input`.,tf.compat.v1.nn.separable_conv2d.yaml,2
11034,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
11035,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_max_pool.yaml,2
11036,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The strides for the depthwise convolution for each dimension of `input`.,tf.nn.separable_conv2d.yaml,2
11037,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.dilation2d.yaml,2
11038,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal).`(2, 2)` will halve the input in both spatial dimension.",tf.keras.layers.AveragePooling2D.yaml,2
11039,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.quantized_conv2d.yaml,2
11040,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",filter's input_depth dimension must match input's depth dimensions.,tf.compat.v1.nn.quantized_conv2d.yaml,2
11041,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.quantized_conv2d.yaml,2
11042,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The dilation factor for each dimension of input.,tf.nn.conv1d_transpose.yaml,2
11043,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the sliding window for each dimension of `input`.,tf.extract_volume_patches.yaml,2
11044,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Integer specifying the dimension index at which to expand the shape of `input`.,tf.expand_dims.yaml,2
11045,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
11046,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_filter.yaml,2
11047,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.pool.yaml,2
11048,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
11049,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.max_pool.yaml,2
11050,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
11051,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.nn.depthwise_conv2d_backprop_input.yaml,2
11052,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch_nd.yaml,2
11053,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
11054,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","In this case, input to`cell` at each time-step will replicate the structure of these tuples, except for the time dimension (from which the time is taken).",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11055,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
11056,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
11057,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.depthwise_conv2d_native.yaml,2
11058,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.compat.v1.nn.convolution.yaml,2
11059,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3).`(2, 2, 2)` will halve the size of the 3D input in each dimension.",tf.keras.layers.AveragePooling3D.yaml,2
11060,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11061,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11062,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format`does not start with ""NC""), or the second dimension (if `data_format`starts with ""NC"").",tf.nn.pool.yaml,2
11063,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","`crops[i] = [crop_start, crop_end]` specifies the amount to crop from input dimension `i + 1`, which corresponds to spatial dimension `i`.",tf.batch_to_space.yaml,2
11064,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The dilation factor for each dimension of`input`.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
11065,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input of the convolution.,tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
11066,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.dilation2d.yaml,2
11067,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})","2-D with shape `[M, 2]`, all values must be >= 0.`paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension`i + 1`, which corresponds to spatial dimension `i`.",tf.space_to_batch.yaml,2
11068,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
11069,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.compat.v1.nn.depthwise_conv2d.yaml,2
11070,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Specifies the dimension index at which to expand the shape of `input`.,tf.compat.v1.expand_dims.yaml,2
11071,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.compat.v1.nn.erosion2d.yaml,2
11072,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The size of the window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
11073,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",The stride of the sliding window for each dimension of the input tensor.,tf.nn.max_pool.yaml,2
11074,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})", The stride of the sliding window for each dimension of `input`.,tf.nn.depthwise_conv2d.yaml,2
11075,82,0.011079420798595875,101,"frozenset({'input', 'dimension'})",Specifies the dimension index at which to expand the shape of `input`.,tf.sparse.expand_dims.yaml,2
11076,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.GlobalMaxPool1D.yaml,2
11077,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv2d_transpose.yaml,2
11078,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.Conv3D.yaml,2
11079,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.MaxPool2D.yaml,2
11080,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv3d.yaml,2
11081,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.max_pool_with_argmax.yaml,2
11082,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of type `float` and shape`[batch, height, width, in_channels]` for `NHWC` data format or`[batch, in_channels, height, width]` for `NCHW` data format.",tf.compat.v1.nn.conv2d_transpose.yaml,2
11083,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool2d.yaml,2
11084,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize.yaml,2
11085,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Shape `[batch, in_depth, in_height, in_width, in_channels]`.",tf.nn.conv3d.yaml,2
11086,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_avg_pool.yaml,2
11087,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, length, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, length)`.",tf.keras.layers.SeparableConv1D.yaml,2
11088,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalMaxPool3D.yaml,2
11089,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.total_variation.yaml,2
11090,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.max_pool_with_argmax.yaml,2
11091,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_left_right.yaml,2
11092,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_pad.yaml,2
11093,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","If False, shape is [batch, time, logits]",tf.nn.ctc_loss.yaml,2
11094,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Tensor of shape [batch, max value in seq_length]",tf.nn.collapse_repeated.yaml,2
11095,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Tensor of shape [batch], sequence length of each batch element.",tf.nn.collapse_repeated.yaml,2
11096,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.image.draw_bounding_boxes.yaml,2
11097,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.image.draw_bounding_boxes.yaml,2
11098,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.nn.avg_pool3d.yaml,2
11099,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.MaxPool3D.yaml,2
11100,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.precision_at_top_k.yaml,2
11101,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalMaxPool2D.yaml,2
11102,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
11103,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Shape `[batch, depth, rows, cols, in_channels]`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
11104,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Backprop signal of shape `[batch, out_depth, out_rows, out_cols, out_channels]`.",tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
11105,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.nn.quantized_avg_pool.yaml,2
11106,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.SeparableConv2D.yaml,2
11107,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.space_to_batch.yaml,2
11108,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
11109,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.image.crop_and_resize.yaml,2
11110,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.Conv2D.yaml,2
11111,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.MaxPool1D.yaml,2
11112,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","If provided, the returned `Tensor` will have leading batch dimensions of this shape.",tf.eye.yaml,2
11113,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","`bool`, indicates whether to pad the batch features (features need to be either of type `tf.SparseTensor` or of same shape).",tf.data.experimental.bucket_by_sequence_length.yaml,2
11114,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
11115,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D tensor of shape `[batch, image_height, image_width, depth]`.",tf.compat.v1.image.crop_and_resize.yaml,2
11116,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_up_down.yaml,2
11117,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D tensor with shape`[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]`.",tf.compat.v1.batch_to_space.yaml,2
11118,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","An integer vector representing the shape of `input`, where `input` is a 4-D `[batch, height, width, channels]` tensor.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
11119,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_input.yaml,2
11120,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
11121,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
11122,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.precision_at_k.yaml,2
11123,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.compat.v1.image.resize_area.yaml,2
11124,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, N, 4]`describing the N bounding boxes associated with the image.",tf.image.sample_distorted_bounding_box.yaml,2
11125,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding boxes.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
11126,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, depth]`.",tf.compat.v1.image.draw_bounding_boxes.yaml,2
11127,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D `Tensor` of shape `[batch, height, width, channels]` and type`float32`, `float64`, `qint8`, `quint8`, or `qint32`.",tf.compat.v1.nn.avg_pool.yaml,2
11128,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, k].",tf.compat.v1.metrics.recall_at_top_k.yaml,2
11129,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of type `float` and shape `[batch, height, width, in_channels]` for `NHWC` data format or `[batch, in_channels, height, width]` for `NCHW` data format.",tf.nn.conv3d_transpose.yaml,2
11130,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.crop_to_bounding_box.yaml,2
11131,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.transpose.yaml,2
11132,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})",The batch dimension can be left None or -1 to indicate a dynamic shape.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
11133,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 5-D `Tensor` of type `float` and shape`[batch, depth, height, width, in_channels]`.",tf.compat.v1.nn.conv3d_transpose.yaml,2
11134,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})",A `Tensor` of ground truth labels with shape [batch size] and of type `int32` or `int64`.,tf.compat.v1.metrics.mean_iou.yaml,2
11135,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
11136,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})"," It is required that`crop_start[i] + crop_end[i] <= block_shape[i] * input_shape[i + 1]`.This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]Permute dimensions of `reshaped` to produce `permuted` of shape [batch / prod(block_shape),input_shape[1], block_shape[0], ..., input_shape[M], block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Reshape `permuted` to produce `reshaped_permuted` of shape [batch / prod(block_shape),input_shape[1] * block_shape[0], ..., input_shape[M] * block_shape[M-1],input_shape[M+1], ..., input_shape[N-1]]Crop the start and end of dimensions `[1, ..., M]` of`reshaped_permuted` according to `crops` to produce the output of shape: [batch / prod(block_shape),input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],input_shape[M+1], ..., input_shape[N-1]] Some examples:(1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and   `crops = [[0, 0], [0, 0]]`:",tf.compat.v1.batch_to_space_nd.yaml,2
11137,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.compat.v1.batch_to_space_nd.yaml,2
11138,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.erosion2d.yaml,2
11139,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d_transpose.yaml,2
11140,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize.yaml,2
11141,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.random_flip_left_right.yaml,2
11142,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.nn.dilation2d.yaml,2
11143,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.",tf.compat.v1.extract_image_patches.yaml,2
11144,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.resize_with_crop_or_pad.yaml,2
11145,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.AveragePooling2D.yaml,2
11146,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 3-D `Tensor` of type `float` and shape`[batch, in_width, in_channels]` for `NWC` data format or`[batch, in_channels, in_width]` for `NCW` data format.",tf.nn.conv1d_transpose.yaml,2
11147,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","5-D Tensor with shape `[batch, in_planes, in_rows, in_cols, depth]`.",tf.extract_volume_patches.yaml,2
11148,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, height, width, channels)` while `channels_first`corresponds to inputs with shape`(batch, channels, height, width)`.",tf.keras.layers.GlobalAveragePooling2D.yaml,2
11149,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","For example, if `data_format` is 'NHWC' then out_backprop shape is `[batch, out_height, out_width, out_channels]`.",tf.nn.depthwise_conv2d_backprop_filter.yaml,2
11150,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","For example, if `data_format` is 'NHWC' then out_backprop shape is `[batch, out_height, out_width, out_channels]`.",tf.nn.depthwise_conv2d_backprop_input.yaml,2
11151,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch_nd.yaml,2
11152,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch_nd.yaml,2
11153,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and predictions has shape [batch size, num_classes].",tf.compat.v1.metrics.recall_at_k.yaml,2
11154,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Args;     input; Tensor with shape `(samples, ...)` (no time dimension),         representing input for the batch of samples at a certain         time step.",tf.keras.backend.rnn.yaml,2
11155,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","If true, the inputs and outputs will be in shape`(timesteps, batch, ...)`, whereas in the False case, it will be`(batch, timesteps, ...)`.",tf.keras.backend.rnn.yaml,2
11156,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.pad_to_bounding_box.yaml,2
11157,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Its shape is `[batch, in_height, in_width, in_channels]`.",tf.nn.atrous_conv2d.yaml,2
11158,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, height, width, channels]`.",tf.nn.fractional_max_pool.yaml,2
11159,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.image.flip_up_down.yaml,2
11160,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.AveragePooling3D.yaml,2
11161,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.AveragePooling1D.yaml,2
11162,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","This operation is equivalent to the following steps: Reshape `input` to `reshaped` of shape: [block_shape[0], ..., block_shape[M-1], batch / prod(block_shape), input_shape[1], ..., input_shape[N-1]]  Permute dimensions of `reshaped` to produce `permuted` of shape  [batch / prod(block_shape),  input_shape[1], block_shape[0], ...,  input_shape[M], block_shape[M-1], input_shape[M+1], ..., input_shape[N-1]]  Reshape `permuted` to produce `reshaped_permuted` of shape  [batch / prod(block_shape), input_shape[1] * block_shape[0], ...,  input_shape[M] * block_shape[M-1], input_shape[M+1], ...,  input_shape[N-1]]  Crop the start and end of dimensions `[1, ..., M]` of `reshaped_permuted` according to `crops` to produce the output  of shape:  [batch / prod(block_shape),  input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],  input_shape[M+1], ..., input_shape[N-1]] Some examples:  (1) For the following input of shape `[4, 1, 1, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]`The output tensor has shape `[1, 2, 2, 1]` and value:  `x = [[[[1], [2]], [[3], [4]]]]`  (2) For the following input of shape `[4, 1, 1, 3]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]`The output tensor has shape `[1, 2, 2, 3]` and value:  `x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]`  (3) For the following input of shape `[4, 2, 2, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [0, 0]]`:  `x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]`The output tensor has shape `[1, 4, 4, 1]` and value:  `x = [[[1], [2], [3],  [4]], [[5],   [6],  [7],  [8]], [[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]`  (4) For the following input of shape `[8, 1, 3, 1]`,`block_shape = [2, 2]`, and `crops = [[0, 0], [2, 0]]`:  `x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]`The output tensor has shape `[2, 2, 4, 1]` and value:  `x = [[[[1], [2],  [3],  [4]], [[5],   [6],  [7],  [8]]], [[[9],  [10], [11],  [12]], [[13], [14], [15],  [16]]]]` ",tf.batch_to_space.yaml,2
11163,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has M dimensions.",tf.batch_to_space.yaml,2
11164,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A shape tuple (integers), not including the batch size.",tf.keras.Input.yaml,2
11165,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, in_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
11166,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, out_height, out_width, out_channels]`.",tf.compat.v1.nn.conv2d_backprop_filter.yaml,2
11167,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.dilation2d.yaml,2
11168,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`, where spatial_shape has `M` dimensions.",tf.space_to_batch.yaml,2
11169,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})"," It is required that`block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.This operation is equivalent to the following steps: Zero-pad the start and end of dimensions `[1, ..., M]` of the input according to `paddings` to produce `padded` of shape `padded_shape`.Reshape `padded` to `reshaped_padded` of shape:[batch] + [padded_shape[1] / block_shape[0],  block_shape[0], ..., padded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shapePermute dimensions of `reshaped_padded` to produce`permuted_reshaped_padded` of shape:block_shape + [batch] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shapeReshape `permuted_reshaped_padded` to flatten `block_shape` into the batch dimension, producing an output tensor of shape:[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ..., padded_shape[M] / block_shape[M-1]] + remaining_shape Some examples:(1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and   `paddings = [[0, 0], [0, 0]]`:",tf.space_to_batch.yaml,2
11170,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D Tensor of shape `[batch, height, width, channels]` or 3-D Tensor of shape `[height, width, channels]`.",tf.compat.v1.image.resize_image_with_pad.yaml,2
11171,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, steps, features)` while `channels_first`corresponds to inputs with shape`(batch, features, steps)`.",tf.keras.layers.GlobalAveragePooling1D.yaml,2
11172,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","4-D with shape `[batch, in_height, in_width, depth]`.",tf.compat.v1.nn.erosion2d.yaml,2
11173,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","The ordering of the dimensions in the inputs.`channels_last` corresponds to inputs with shape`(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`while `channels_first` corresponds to inputs with shape`(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.",tf.keras.layers.GlobalAveragePooling3D.yaml,2
11174,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","A 4-D Tensor with shape `[batch, in_rows, in_cols, depth]",tf.image.extract_patches.yaml,2
11175,76,0.010969723562966213,100,"frozenset({'shape', 'batch'})","Commonly, N=1 and `predictions` has shape [batch size, num_classes].",tf.compat.v1.metrics.average_precision_at_k.yaml,2
11176,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If not `None`, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output `Tensor`s.",tf.compat.v1.feature_column.input_layer.yaml,2
11177,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
11178,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d_transpose.yaml,2
11179,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
11180,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
11181,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_add.yaml,2
11182,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d_transpose.yaml,2
11183,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
11184,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
11185,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
11186,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Must be a string constant, not a Tensor.",tf.strings.ngrams.yaml,2
11187,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11188,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11189,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
11190,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Each input tensor has a corresponding shard axes, given by `input_shard_axes`, which must have size divisible by `num_shards`.",tf.compat.v1.tpu.shard.yaml,2
11191,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11192,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11193,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
11194,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_update.yaml,2
11195,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
11196,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
11197,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
11198,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.compat.v1.nn.conv2d.yaml,2
11199,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
11200,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 4-d tensor must be 1.,tf.nn.conv2d.yaml,2
11201,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})", Tensors must come before operations in the returned list.,tf.xla.experimental.compile.yaml,2
11202,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.compat.v1.boolean_mask.yaml,2
11203,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})", The provided type must match the type of the serialized tensor and no implicit conversion will take place.,tf.io.parse_tensor.yaml,2
11204,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
11205,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","It specifies the padding of the input with zeros across the spatial dimensions as follows:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]`</pre>The effective spatial dimensions of the zero-padded input tensor will be:<pre class=""prettyprint"" dir=""ltr"" translate=""no"">`height_pad = pad_top + height + pad_bottom width_pad = pad_left + width + pad_right`</pre>The attr `block_size` must be greater than one.",tf.compat.v1.space_to_batch.yaml,2
11206,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Non-overlapping blocks of size `block_size x block size` in the height and width dimensions are rearranged into the batch dimension at each location.The batch of the output tensor is `batch * block_size * block_size`.Both height_pad and width_pad must be divisible by block_size.,tf.compat.v1.space_to_batch.yaml,2
11207,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must be same type as `tensor`.,tf.compat.v1.pad.yaml,2
11208,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," If input_signature is specified, every input to`func` must be a `Tensor`, and `func` cannot accept `**kwargs`.",tf.function.yaml,2
11209,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
11210,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
11211,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Note that the batch size of the input tensor must be divisible by`block_size * block_size`.,tf.compat.v1.batch_to_space.yaml,2
11212,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
11213,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The 0-th dimension of each Tensor must have size divisible by `num_shards`.,tf.compat.v1.tpu.batch_parallel.yaml,2
11214,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If True, these`Tensors` must be shaped `[max_time, batch_size, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
11215,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If False, these `Tensors` must be shaped `[batch_size, max_time, num_classes]`.",tf.compat.v1.nn.ctc_loss.yaml,2
11216,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding `tf.Tensor` objects in `inp`.",tf.compat.v1.py_func.yaml,2
11217,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",It must take two arguments and return a pair of nested structures of tensors.,tf.data.experimental.scan.yaml,2
11218,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," I.e., `shape[0]` of the value returned by `op` must match`shape[0]` of the `RaggedTensor`s' `flat_values` tensors.",tf.ragged.map_flat_values.yaml,2
11219,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.nn.conv3d_transpose.yaml,2
11220,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11221,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11222,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
11223,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Dilations in the batch and depth dimensions if a 5-d tensor must be 1.,tf.compat.v1.nn.conv3d_transpose.yaml,2
11224,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
11225,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size` is an integer, this must be a `Tensor` of appropriate type and shape `[batch_size, cell.state_size]`.",tf.compat.v1.nn.raw_rnn.yaml,2
11226,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size` is a `TensorShape`, this must be a `Tensor` of appropriate type and shape `[batch_size] + cell.state_size`.",tf.compat.v1.nn.raw_rnn.yaml,2
11227,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
11228,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
11229,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
11230,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
11231,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_local_variable.yaml,2
11232,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_local_variable.yaml,2
11233,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
11234,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Each element can be either: string: Will use the corresponding feature which must be of string type.`CategoricalColumn`: Will use the transformed tensor produced by this column.,tf.feature_column.crossed_column.yaml,2
11235,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
11236,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
11237,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
11238,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
11239,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
11240,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
11241,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If it's a Tensor, its shape must be known unless validate_shape is False.",tf.compat.v1.get_variable.yaml,2
11242,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",For this to be used the initializer must be a Tensor and not an initializer object.,tf.compat.v1.get_variable.yaml,2
11243,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11244,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11245,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
11246,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must be same type as `tensor`.,tf.pad.yaml,2
11247,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","An `int` or rank-0 `int32` `Tensor` that represents the sample rate, in Hz. Must be positive.",tf.summary.audio.yaml,2
11248,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `cell.state_size`is an integer, this must be a `Tensor` of appropriate type and shape`[batch_size, cell.state_size]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11249,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `time_major == False` (default), this must be a `Tensor` of shape:`[batch_size, max_time, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11250,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If `time_major == True`, this must be a `Tensor` of shape: `[max_time, batch_size, ...]`, or a nested tuple of such elements.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11251,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If true, these `Tensors` must be shaped `[max_time, batch_size, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11252,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If false, these `Tensors` must be shaped `[batch_size, max_time, depth]`.",tf.compat.v1.lite.experimental.nn.dynamic_rnn.yaml,2
11253,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",The first state in the list must be the         output tensor at the previous timestep.,tf.keras.backend.rnn.yaml,2
11254,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
11255,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," The tensors must all have the same shape, or be scalars.",tf.strings.join.yaml,2
11256,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Tensors must come before operations in the returned list.,tf.compat.v1.tpu.rewrite.yaml,2
11257,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11258,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11259,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Each callable must return a matching structure of tensors.,tf.switch_case.yaml,2
11260,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",Must have the same type as `tensor`.,tf.tensor_scatter_nd_sub.yaml,2
11261,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","This function must accept as many arguments as there are tensors in `inp`, and these argument types will match the corresponding`tf.Tensor` objects in `inp`.",tf.numpy_function.yaml,2
11262,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
11263,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","K-D boolean tensor, K <= N and K must be known statically.",tf.boolean_mask.yaml,2
11264,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",A list of `Operation` or `Tensor` objects which must be executed or computed before running the operations defined in the context.,tf.control_dependencies.yaml,2
11265,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
11266,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
11267,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
11268,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
11269,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
11270,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Must be in the range`[-rank(tensor), rank(tensor))`.",tf.reverse.yaml,2
11271,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})",An `int32` or `int64` `Tensor` or `RaggedTensor` specifying the partition that each slice of `data` should be added to.`partitions.shape` must be a prefix of `data.shape`.,tf.ragged.stack_dynamic_partitions.yaml,2
11272,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
11273,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
11274,88,0.01086002632733655,99,"frozenset({'tensor', 'must'})"," If `fn` returns a structure of Tensors differing from the structure of `elems`, then `dtype` is not optional and must have the same structure as the output of `fn`.",tf.map_fn.yaml,2
11275,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.compat.v1.confusion_matrix.yaml,2
11276,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
11277,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
11278,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
11279,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_max.yaml,2
11280,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.mean_squared_error.yaml,2
11281,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.hinge_loss.yaml,2
11282,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.nce_loss.yaml,2
11283,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose dtype is compatible with `x`.,tf.math.multiply_no_nan.yaml,2
11284,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
11285,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives.yaml,2
11286,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11287,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11288,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11289,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
11290,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11291,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11292,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11293,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_absolute_error.yaml,2
11294,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A non-empty `Tensor`, or an object whose type has a registered`Tensor` conversion function.",tf.compat.v1.math.softmax.yaml,2
11295,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.sigmoid_cross_entropy.yaml,2
11296,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_min.yaml,2
11297,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.huber_loss.yaml,2
11298,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.root_mean_squared_error.yaml,2
11299,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_top_k.yaml,2
11300,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,2
11301,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.accuracy.yaml,2
11302,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_mean.yaml,2
11303,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An 0-D or 1-D `int` Tensor whose elements are indices into the flattened version of an array of dimensions dims.,tf.unravel_index.yaml,2
11304,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.nce_loss.yaml,2
11305,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
11306,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
11307,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
11308,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
11309,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_positives.yaml,2
11310,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
11311,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_per_class_accuracy.yaml,2
11312,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.precision_at_k.yaml,2
11313,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose dtype is compatible with `x`.,tf.math.divide_no_nan.yaml,2
11314,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_top_k.yaml,2
11315,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_prod.yaml,2
11316,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An optional `Tensor` whose shape matches `predictions`.,tf.math.confusion_matrix.yaml,2
11317,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11318,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11319,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11320,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",`Tensor` whose shape matches 'predictions',tf.compat.v1.losses.cosine_distance.yaml,2
11321,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.cosine_distance.yaml,2
11322,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of prediction results for semantic labels, whose shape is [batch size] and type `int32` or `int64`.",tf.compat.v1.metrics.mean_iou.yaml,2
11323,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_iou.yaml,2
11324,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
11325,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.recall.yaml,2
11326,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_sum.yaml,2
11327,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An object whose type has a registered `Tensor` conversion function.,tf.convert_to_tensor.yaml,2
11328,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.compat.v1.nn.sampled_softmax_loss.yaml,2
11329,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
11330,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
11331,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
11332,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_max.yaml,2
11333,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_mean.yaml,2
11334,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_relative_error.yaml,2
11335,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","the inputs to contract (each one a `Tensor`), whose shapes should be consistent with `equation`.",tf.einsum.yaml,2
11336,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An object whose type has a registered `Tensor` conversion function.,tf.compat.v1.convert_to_tensor.yaml,2
11337,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_squared_error.yaml,2
11338,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
11339,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives.yaml,2
11340,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
11341,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A 1-D tensor whose size is equal to the size of `data`'s first dimension.,tf.math.segment_min.yaml,2
11342,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`losses`, and must be broadcastable to `losses` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.compute_weighted_loss.yaml,2
11343,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`objects whose concatenation along dimension 0 has shape [num_classes, dim].",tf.nn.sampled_softmax_loss.yaml,2
11344,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_prod.yaml,2
11345,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A tensor of shape `[..., M, N]` whose inner-most 2 dimensions form matrices of size `[M, N]`.",tf.linalg.qr.yaml,2
11346,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11347,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11348,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11349,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
11350,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.recall_at_k.yaml,2
11351,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.absolute_difference.yaml,2
11352,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",`Tensor` whose basetype is integer and is not quantized.,tf.compat.v1.assert_integer.yaml,2
11353,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11354,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","If the `axis` attribute is specified, this must be a 1-D tensor whose size matches the `axis` dimension of the input and output tensors.",tf.quantization.quantize.yaml,2
11355,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A tensor whose shape is a prefix of data.shape.,tf.strings.unsorted_segment_join.yaml,2
11356,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",An integer tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sqrt_n.yaml,2
11357,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A `Tensor` whose shape matches `predictions`.,tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
11358,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
11359,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
11360,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
11361,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.true_positives.yaml,2
11362,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
11363,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.precision.yaml,2
11364,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","The ground truth output tensor, whose shape must match the shape of`predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
11365,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Coefficients for the loss a scalar, a tensor of shape`[batch_size]` or a tensor whose shape matches `predictions`.",tf.compat.v1.losses.mean_pairwise_squared_error.yaml,2
11366,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})",A tensor whose shape is a prefix of `data.shape`.,tf.math.unsorted_segment_sum.yaml,2
11367,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A `SparseTensor`, `SparseTensorValue`, or an object whose type has a registered `Tensor` conversion function.",tf.compat.v1.convert_to_tensor_or_sparse_tensor.yaml,2
11368,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `losses` dimension).",tf.compat.v1.losses.log_loss.yaml,2
11369,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","Optional `Tensor` whose rank is either 0, or the same rank as`labels`, and must be broadcastable to `labels` (i.e., all dimensions must be either `1`, or the same as the corresponding `labels` dimension).",tf.compat.v1.metrics.mean_cosine_distance.yaml,2
11370,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","A tensor of shape `[..., M, M]` whose inner-most 2 dimensions form matrices of size `[M, M]`.",tf.linalg.lu.yaml,2
11371,97,0.010640631856077228,97,"frozenset({'whose', 'tensor'})","`Tensor` whose rank is either 0, or n-1, where n is the rank of`labels`.",tf.compat.v1.metrics.average_precision_at_k.yaml,2
11372,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.compat.v1.feature_column.categorical_column_with_vocabulary_file.yaml,2
11373,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A small float number added to the variance of x.,tf.compat.v1.nn.fused_batch_norm.yaml,2
11374,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_csv_dataset.yaml,2
11375,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int specifying the number of times this dataset is repeated.,tf.data.experimental.make_csv_dataset.yaml,2
11376,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.data.experimental.make_csv_dataset.yaml,2
11377,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_ragged_batch.yaml,2
11378,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Optional non-negative integer or `int32` scalar `tensor` giving the number of columns in the resulting matrix.,tf.sparse.eye.yaml,2
11379,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Non-negative integer or `int32` scalar `tensor` giving the number of rows in the resulting matrix.,tf.sparse.eye.yaml,2
11380,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Either an integer indicating the number of splits along`axis` or a 1-D integer `Tensor` or Python list containing the sizes of each output tensor along `axis`.,tf.split.yaml,2
11381,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","An `int`, number of top elements to consider.",tf.keras.backend.in_top_k.yaml,2
11382,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_truncated_normal.yaml,2
11383,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv3D.yaml,2
11384,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv1D.yaml,2
11385,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Python integer, number of times to repeat.",tf.keras.backend.repeat_elements.yaml,2
11386,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_overlaps.yaml,2
11387,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.inverse_time_decay.yaml,2
11388,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","`int`, maximum number of training steps with no increase in the given metric.",tf.estimator.experimental.stop_if_no_increase_hook.yaml,2
11389,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_normal.yaml,2
11390,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Iterable of integer number of hidden units per layer.,tf.compat.v1.estimator.experimental.dnn_logit_fn_builder.yaml,2
11391,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
11392,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
11393,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.noisy_linear_cosine_decay.yaml,2
11394,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Scalar defining the number of characters to include in each substring,tf.strings.substr.yaml,2
11395,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, the dimensionality of the output space (i.e. the number of filters in the convolution).",tf.keras.layers.SeparableConv1D.yaml,2
11396,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","`int`, maximum number of training steps with no decrease in the given metric.",tf.estimator.experimental.stop_if_no_decrease_hook.yaml,2
11397,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})"," One of: `""BYTE""` (for the number of bytes in each string) or `""UTF8_CHAR""` (for the number of UTF-8 encoded Unicode code points in each string).",tf.compat.v1.strings.length.yaml,2
11398,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_file.yaml,2
11399,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_uniform.yaml,2
11400,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, number of classes to consider.",tf.keras.backend.one_hot.yaml,2
11401,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
11402,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int specifying the number of times this dataset is repeated.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
11403,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int specifying the number of feature batches to prefetch for performance improvement.,tf.compat.v1.data.experimental.make_csv_dataset.yaml,2
11404,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
11405,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
11406,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
11407,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
11408,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.polynomial_decay.yaml,2
11409,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.natural_exp_decay.yaml,2
11410,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","(Optional.) A `tf.int32` scalar `tf.Tensor`, representing the number of parsing processes to call in parallel.",tf.data.experimental.parse_example_dataset.yaml,2
11411,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.SeparableConv2D.yaml,2
11412,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_with_scores.yaml,2
11413,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).",tf.keras.layers.Conv2D.yaml,2
11414,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Optional non-negative `int32` scalar `Tensor` giving the number of columns in each batch matrix.,tf.eye.yaml,2
11415,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Non-negative `int32` scalar `Tensor` giving the number of rows in each batch matrix.,tf.eye.yaml,2
11416,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_list.yaml,2
11417,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",The returns `ndarray`s must match the number and types defined `Tout`.,tf.compat.v1.py_func.yaml,2
11418,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
11419,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
11420,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
11421,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay.yaml,2
11422,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A small float number to avoid dividing by 0.,tf.nn.batch_normalization.yaml,2
11423,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A small float number to avoid dividing by 0.,tf.compat.v1.nn.batch_norm_with_global_normalization.yaml,2
11424,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","int, number of epochs to iterate over data.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
11425,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.pandas_input_fn.yaml,2
11426,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A shape [2] integer Tensor of seeds to the random number generator.,tf.random.stateless_categorical.yaml,2
11427,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Int, number of possible words to sample.",tf.keras.preprocessing.sequence.make_sampling_table.yaml,2
11428,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.categorical_column_with_vocabulary_file.yaml,2
11429,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11430,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11431,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11432,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11433,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11434,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.cosine_decay_restarts.yaml,2
11435,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int representing the number of records to combine in a single batch.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
11436,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Integer specifying the number of times to read through the dataset.,tf.compat.v1.data.experimental.make_batched_features_dataset.yaml,2
11437,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A list of floats, indicating the number of seconds since the Epoch when each checkpoint was generated.",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
11438,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A float, indicating the number of seconds since the Epoch when the last preserved checkpoint was written, e.g. due to a`keep_checkpoint_every_n_hours` parameter (see`tf.train.CheckpointManager` for an implementation).",tf.compat.v1.train.generate_checkpoint_state_proto.yaml,2
11439,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer indicating the number of segments.,tf.ragged.segment_ids_to_row_splits.yaml,2
11440,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
11441,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
11442,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` Tensor or a Python number.,tf.compat.v1.train.linear_cosine_decay.yaml,2
11443,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to `reduce_func`.",tf.data.experimental.group_by_window.yaml,2
11444,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A function mapping a key to a `tf.int64` scalar`tf.Tensor`, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to`reduce_func`.",tf.data.experimental.group_by_window.yaml,2
11445,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An int representing the number of records to combine in a single batch.,tf.data.experimental.make_batched_features_dataset.yaml,2
11446,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Integer specifying the number of times to read through the dataset.,tf.data.experimental.make_batched_features_dataset.yaml,2
11447,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.strings.substr.yaml,2
11448,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",The maximum number of shards in int created taking precedence over `max_shard_bytes`.,tf.compat.v1.variable_axis_size_partitioner.yaml,2
11449,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",Scalar defining the number of characters to include in each substring,tf.compat.v1.substr.yaml,2
11450,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, number of epochs to iterate over data.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
11451,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, number of threads used for reading and enqueueing.",tf.compat.v1.estimator.inputs.numpy_input_fn.yaml,2
11452,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Python integer, number of times to repeat.",tf.keras.backend.repeat.yaml,2
11453,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","`int`, number of shards to partition variable.",tf.compat.v1.fixed_size_partitioner.yaml,2
11454,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression per class,tf.image.combined_non_max_suppression.yaml,2
11455,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar representing maximum number of boxes retained over all classes.,tf.image.combined_non_max_suppression.yaml,2
11456,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression.yaml,2
11457,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Non-negative integer, the number of out-of-vocabulary buckets.",tf.feature_column.sequence_categorical_column_with_vocabulary_list.yaml,2
11458,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",The returns `numpy.ndarray`s must match the number and types defined `Tout`.,tf.numpy_function.yaml,2
11459,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
11460,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
11461,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `int32` or `int64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
11462,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar `float32` or `float64` `Tensor` or a Python number.,tf.compat.v1.train.exponential_decay.yaml,2
11463,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A small float number to avoid dividing by 0.,tf.nn.batch_norm_with_global_normalization.yaml,2
11464,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","Integer, number of rows/columns.",tf.keras.backend.eye.yaml,2
11465,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",A scalar integer `Tensor` representing the maximum number of boxes to be selected by non max suppression.,tf.image.non_max_suppression_padded.yaml,2
11466,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})",An `int32` or `int64` scalar specifying the number of partitions to output.,tf.ragged.stack_dynamic_partitions.yaml,2
11467,66,0.010530934620447565,96,"frozenset({'SOME_DTYPE', 'number'})","A `tf.int64` scalar `tf.Tensor`, representing the number of consecutive elements of this dataset to combine in a single batch.",tf.data.experimental.dense_to_sparse_batch.yaml,2
11468,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Keras variable or tensor.,tf.keras.backend.ones_like.yaml,2
11469,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less.yaml,2
11470,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less.yaml,2
11471,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dtype.yaml,2
11472,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.prod.yaml,2
11473,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.expand_dims.yaml,2
11474,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softmax.yaml,2
11475,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
11476,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.minimum.yaml,2
11477,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.temporal_padding.yaml,2
11478,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.repeat_elements.yaml,2
11479,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A `Tensor` representing the variable of the polynomial.,tf.math.polyval.yaml,2
11480,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable,tf.keras.backend.tile.yaml,2
11481,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Input tensor or variable.,tf.keras.backend.batch_normalization.yaml,2
11482,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.relu.yaml,2
11483,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.cumprod.yaml,2
11484,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.mean.yaml,2
11485,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.cumsum.yaml,2
11486,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.bias_add.yaml,2
11487,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sin.yaml,2
11488,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
11489,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Keras tensor or variable with `ndim >= 2`.,tf.keras.backend.batch_dot.yaml,2
11490,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.flatten.yaml,2
11491,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
11492,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.less_equal.yaml,2
11493,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Variable or tensor.,tf.keras.backend.count_params.yaml,2
11494,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.tanh.yaml,2
11495,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.l2_normalize.yaml,2
11496,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
11497,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.dot.yaml,2
11498,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.max.yaml,2
11499,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.round.yaml,2
11500,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.permute_dimensions.yaml,2
11501,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.std.yaml,2
11502,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.squeeze.yaml,2
11503,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.spatial_3d_padding.yaml,2
11504,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.argmin.yaml,2
11505,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor with the same shape as `variable`.,tf.keras.backend.moving_average_update.yaml,2
11506,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
11507,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater_equal.yaml,2
11508,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softsign.yaml,2
11509,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.argmax.yaml,2
11510,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.int_shape.yaml,2
11511,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv2d_transpose.yaml,2
11512,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable to resize.,tf.keras.backend.resize_images.yaml,2
11513,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.square.yaml,2
11514,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.log.yaml,2
11515,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable to resize.,tf.keras.backend.resize_volumes.yaml,2
11516,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sqrt.yaml,2
11517,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.abs.yaml,2
11518,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.sign.yaml,2
11519,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
11520,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.maximum.yaml,2
11521,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.min.yaml,2
11522,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.shape.yaml,2
11523,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.sigmoid.yaml,2
11524,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv2d.yaml,2
11525,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_local_variable.yaml,2
11526,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_local_variable.yaml,2
11527,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
11528,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.equal.yaml,2
11529,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or list of tensors to consider constant with respect to any other variable.,tf.keras.backend.stop_gradient.yaml,2
11530,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.var.yaml,2
11531,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.sum.yaml,2
11532,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable to compute the activation function for.,tf.keras.backend.elu.yaml,2
11533,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.batch_flatten.yaml,2
11534,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape).,tf.compat.v1.get_variable.yaml,2
11535,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A (Tensor -> Tensor or None) function; the result of applying it on a newly created variable will be added to the collection`tf.GraphKeys.REGULARIZATION_LOSSES` and can be used for regularization.,tf.compat.v1.get_variable.yaml,2
11536,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.reshape.yaml,2
11537,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Input tensor or variable.,tf.keras.backend.normalize_batch_in_training.yaml,2
11538,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pool2d.yaml,2
11539,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Keras tensor (or variable).,tf.keras.backend.cast.yaml,2
11540,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.spatial_2d_padding.yaml,2
11541,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.exp.yaml,2
11542,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pow.yaml,2
11543,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable to compute the activation function for.,tf.keras.activations.selu.yaml,2
11544,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
11545,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.not_equal.yaml,2
11546,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv3d.yaml,2
11547,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.repeat.yaml,2
11548,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
11549,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.greater.yaml,2
11550,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.any.yaml,2
11551,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.softplus.yaml,2
11552,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.ndim.yaml,2
11553,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.all.yaml,2
11554,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.conv1d.yaml,2
11555,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})","This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).If `f` uses `Variable`s (that are not part of the inputs), i.e. through `get_variable`, then `grad_fn` should have signature `g(*grad_ys, variables=None)`, where `variables` is a list of the `Variable`s, and return a 2-tuple `(grad_xs, grad_vars)`, where`grad_xs` is the same as above, and `grad_vars` is a `list<Tensor>`with the derivatives of `Tensor`s in `y` with respect to the variables (that is, grad_vars has one Tensor per variable in variables).",tf.custom_gradient.yaml,2
11556,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Keras variable or Keras tensor.,tf.keras.backend.zeros_like.yaml,2
11557,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.cos.yaml,2
11558,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.clip.yaml,2
11559,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.pool3d.yaml,2
11560,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Input `tensor` or `variable`.,tf.keras.activations.relu.yaml,2
11561,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",Tensor or variable.,tf.keras.backend.transpose.yaml,2
11562,96,0.010421237384817903,95,"frozenset({'tensor', 'variable'})",A tensor or variable.,tf.keras.backend.hard_sigmoid.yaml,2
11563,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.nn.weighted_moments.yaml,2
11564,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Values can be a `SparseTensor` or a `Tensor` depends on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.input_layer.yaml,2
11565,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.replicate.yaml,2
11566,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.replicate.yaml,2
11567,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The values of the named input tensors in the imported graph will be re-mapped to the respective `Tensor` values.,tf.graph_util.import_graph_def.yaml,2
11568,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_positives_at_thresholds.yaml,2
11569,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The values of the tensor are expected to be 0.0 or 1.0. Internally the {0,1} labels are converted to {-1,1} when calculating the hinge loss.",tf.compat.v1.losses.hinge_loss.yaml,2
11570,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Values are `Tensor` or `SparseTensor` depending on corresponding `_FeatureColumn`.,tf.compat.v1.feature_column.linear_model.yaml,2
11571,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_update.yaml,2
11572,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.linalg.normalize.yaml,2
11573,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",1-d tensor of int32 values; these are the axes along which to compute mean and variance.,tf.compat.v1.nn.weighted_moments.yaml,2
11574,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_sub.yaml,2
11575,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_negatives.yaml,2
11576,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_negatives.yaml,2
11577,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Values must be non-Tensor integers greater than 0.,tf.strings.ngrams.yaml,2
11578,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The type of `values` elements in the tensor to be fed.,tf.compat.v1.sparse_placeholder.yaml,2
11579,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11580,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.sensitivity_at_specificity.yaml,2
11581,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean.yaml,2
11582,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11583,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.recall_at_thresholds.yaml,2
11584,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to multiply to `ref`.,tf.compat.v1.scatter_mul.yaml,2
11585,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
11586,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The maximum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
11587,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
11588,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The minimum scalar values for each of the input tensors.,tf.quantization.quantized_concat.yaml,2
11589,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose shape matches`predictions`.",tf.compat.v1.metrics.accuracy.yaml,2
11590,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of any shape.",tf.compat.v1.metrics.accuracy.yaml,2
11591,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.xla.experimental.compile.yaml,2
11592,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimension list of scalar tensors rather than a single Rank-N tensors.,tf.xla.experimental.compile.yaml,2
11593,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.compat.v1.nn.safe_embedding_lookup_sparse.yaml,2
11594,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_negatives_at_thresholds.yaml,2
11595,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of values that `ref` is divided by.,tf.compat.v1.scatter_div.yaml,2
11596,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.image.crop_and_resize.yaml,2
11597,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_positives.yaml,2
11598,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_positives.yaml,2
11599,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.",tf.compat.v1.image.crop_and_resize.yaml,2
11600,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The `Tensor` from which to gather values.,tf.gather.yaml,2
11601,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.keras.layers.BatchNormalization.yaml,2
11602,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_area.yaml,2
11603,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_add.yaml,2
11604,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A scalar int64 Tensor (or Python int) containing the new size of the last dimension, `all(0 <= sp_input.values < vocab_size)`.",tf.sparse.to_indicator.yaml,2
11605,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",N-D `Tensor` containing the search values.,tf.searchsorted.yaml,2
11606,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width.yaml,2
11607,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A `Tensor` representing preactivation values.,tf.nn.leaky_relu.yaml,2
11608,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11609,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.precision_at_thresholds.yaml,2
11610,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.recall.yaml,2
11611,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.recall.yaml,2
11612,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Valid values: None: Switch to a system default.'warn': Copies the tensors which are not on the right device and logs a warning.'explicit': Raises an error if the placement is not as required.'silent': Silently copies the tensors.,tf.config.experimental.set_device_policy.yaml,2
11613,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_min.yaml,2
11614,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training.",tf.compat.v1.keras.layers.BatchNormalization.yaml,2
11615,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.true_positives_at_thresholds.yaml,2
11616,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize.yaml,2
11617,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.false_negatives.yaml,2
11618,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.false_negatives.yaml,2
11619,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",An int32 tensor of non-negative values.,tf.compat.v1.bincount.yaml,2
11620,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.percentage_below.yaml,2
11621,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A Python function which accepts a list of `Tensor` objects having element types that match the corresponding `tf.Tensor` objects in `inp`and returns a list of `Tensor` objects (or a single `Tensor`, or `None`) having element types that match the corresponding values in `Tout`.",tf.py_function.yaml,2
11622,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A list of `Tensor`s or `float`s or `int`s that specifies the values for the intervals defined by `boundaries`.,tf.compat.v1.train.piecewise_constant.yaml,2
11623,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to subtract from `ref`.,tf.compat.v1.scatter_sub.yaml,2
11624,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A list of `P` float `Tensor`s or values representing partitioned embedding `Tensor`s.,tf.nn.safe_embedding_lookup_sparse.yaml,2
11625,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11626,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.specificity_at_sensitivity.yaml,2
11627,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.norm.yaml,2
11628,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","Optional `Tensor` whose rank is either 0, or the same rank as`values`, and must be broadcastable to `values` (i.e., all dimensions must be either `1`, or the same as the corresponding `values` dimension).",tf.compat.v1.metrics.mean_tensor.yaml,2
11629,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to reduce into `ref`.,tf.compat.v1.scatter_max.yaml,2
11630,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","Tensor with shape `(samples, state_size)`(no time dimension), containing the initial values for the states used in the step function.",tf.keras.backend.rnn.yaml,2
11631,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The tensor from which to gather values.,tf.compat.v1.gather_nd.yaml,2
11632,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to add to ref.,tf.compat.v1.scatter_nd_add.yaml,2
11633,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","If `axis` is `None` (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. `norm(tensor, ord=ord)` is equivalent to`norm(reshape(tensor, [-1]), ord=ord)`.",tf.compat.v1.norm.yaml,2
11634,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Each input can be a nested structure containing values that are convertible to tensors.,tf.compat.v1.tpu.rewrite.yaml,2
11635,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Note that passing an N-dimension list of compatible values will result in a N-dimention list of scalar tensors rather than a single Rank-N tensors.,tf.compat.v1.tpu.rewrite.yaml,2
11636,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The tensor from which to gather values.,tf.gather_nd.yaml,2
11637,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",List of tensors containing values for the corresponding field.,tf.io.encode_proto.yaml,2
11638,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Valid values: tf.contrib.eager.DEVICE_PLACEMENT_EXPLICIT: raises an error if the placement is not correct.tf.contrib.eager.DEVICE_PLACEMENT_WARN: copies the tensors which are not on the right device but logs a warning.tf.contrib.eager.DEVICE_PLACEMENT_SILENT: silently copies the tensors.,tf.compat.v1.enable_eager_execution.yaml,2
11639,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Shape [2] `Tensor` of same `dtype` as `values`.,tf.histogram_fixed_width_bins.yaml,2
11640,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","A floating point `Tensor` of arbitrary shape and whose values are in the range `[0, 1]`.",tf.compat.v1.metrics.false_negatives_at_thresholds.yaml,2
11641,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",An int32 tensor of non-negative values.,tf.math.bincount.yaml,2
11642,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","integer tensor, all its values <= maxlen.",tf.sequence_mask.yaml,2
11643,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.true_positives.yaml,2
11644,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.true_positives.yaml,2
11645,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The ground truth values, a `Tensor` whose dimensions must match`predictions`.",tf.compat.v1.metrics.precision.yaml,2
11646,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","The predicted values, a `Tensor` of arbitrary dimensions.",tf.compat.v1.metrics.precision.yaml,2
11647,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})"," If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels.",tf.compat.v1.image.resize_image_with_pad.yaml,2
11648,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A string template to format tensor values into.,tf.strings.format.yaml,2
11649,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",Tensors of input values.,tf.debugging.assert_same_float_dtype.yaml,2
11650,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A `Tensor` or `RaggedTensor` containing the values to stack.,tf.ragged.stack_dynamic_partitions.yaml,2
11651,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",They hold the most recent debug events concerning eager execution of ops and `tf.function`s and traces of tensor values computed inside`tf.function`s.,tf.debugging.experimental.enable_dump_debug_info.yaml,2
11652,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})","Debug mode for tensor values, as a string.",tf.debugging.experimental.enable_dump_debug_info.yaml,2
11653,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",The `Tensor` from which to gather values.,tf.compat.v1.gather.yaml,2
11654,95,0.010092145677928916,92,"frozenset({'tensor', 'values'})",A tensor of updated values to store in `ref`.,tf.compat.v1.scatter_update.yaml,2
11655,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d.yaml,2
11656,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d.yaml,2
11657,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d_transpose.yaml,2
11658,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d_transpose.yaml,2
11659,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A 1D tensor of length `batch_size` and type `int32` or `int64`.,tf.keras.backend.in_top_k.yaml,2
11660,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.compat.v1.nn.conv1d.yaml,2
11661,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.compat.v1.nn.conv1d.yaml,2
11662,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.MaxPool2D.yaml,2
11663,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.",tf.keras.layers.Conv1D.yaml,2
11664,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or tuple/list of a single integer, specifying the stride length of the convolution.",tf.keras.layers.Conv1D.yaml,2
11665,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d.yaml,2
11666,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A bool vector of length `N` with `M` true values.,tf.sparse.retain.yaml,2
11667,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","int, maximum length of a line, includes indentation.",tf.compat.v1.flags.text_wrap.yaml,2
11668,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
11669,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool_with_argmax.yaml,2
11670,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d_transpose.yaml,2
11671,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d_transpose.yaml,2
11672,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
11673,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.avg_pool2d.yaml,2
11674,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.nn.conv3d.yaml,2
11675,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `floats` that has length >= 4.,tf.nn.fractional_avg_pool.yaml,2
11676,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
11677,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.max_pool_with_argmax.yaml,2
11678,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",The string for which to compute the length.,tf.compat.v1.strings.length.yaml,2
11679,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",The unit that is counted to compute string length.,tf.compat.v1.strings.length.yaml,2
11680,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`, defaults to 1.",tf.nn.conv_transpose.yaml,2
11681,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.conv_transpose.yaml,2
11682,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
11683,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.avg_pool.yaml,2
11684,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",Boolean that enables allowing scalars and 1 length vector broadcasting.,tf.make_tensor_proto.yaml,2
11685,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
11686,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.max_pool2d.yaml,2
11687,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
11688,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.avg_pool3d.yaml,2
11689,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
11690,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `values` of `Tensor` objects with type `float32`.,tf.quantization.quantized_concat.yaml,2
11691,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.compat.v1.nn.conv2d.yaml,2
11692,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.conv2d.yaml,2
11693,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`, defaults to 1.",tf.nn.conv2d.yaml,2
11694,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.conv2d.yaml,2
11695,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An list of non-negative integers, either None or empty or the same length as the argument categorical_columns.",tf.compat.v1.tpu.experimental.shared_embedding_columns.yaml,2
11696,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.compat.v1.nn.conv3d_backprop_filter.yaml,2
11697,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hann_window.yaml,2
11698,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
11699,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.avg_pool1d.yaml,2
11700,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","    To pad sequences with variable length strings, you can use `object`.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
11701,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","Int, maximum length of all sequences.",tf.keras.preprocessing.sequence.pad_sequences.yaml,2
11702,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","`list<int>`, upper length boundaries of the buckets.",tf.data.experimental.bucket_by_sequence_length.yaml,2
11703,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","function from element in `Dataset` to `tf.int32`, determines the length of the element, which will determine the bucket it goes into.",tf.data.experimental.bucket_by_sequence_length.yaml,2
11704,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","bool, if `False`, will pad dimensions with unknown size to maximum length in batch.",tf.data.experimental.bucket_by_sequence_length.yaml,2
11705,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
11706,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.avg_pool.yaml,2
11707,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.nn.conv3d_transpose.yaml,2
11708,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.conv3d_transpose.yaml,2
11709,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
11710,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`.",tf.nn.max_pool3d.yaml,2
11711,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
11712,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.max_pool1d.yaml,2
11713,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An non-negative integer specifying the max sequence length.,tf.compat.v1.tpu.experimental.embedding_column.yaml,2
11714,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `3` or `5`, defaults to 1.",tf.compat.v1.nn.conv3d_transpose.yaml,2
11715,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A scalar `Tensor` indicating the window length to generate.,tf.signal.hamming_window.yaml,2
11716,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
11717,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.erosion2d.yaml,2
11718,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","`0-D` string `Tensor`, the delimiter character, the string should be length 0 or 1.",tf.compat.v1.string_split.yaml,2
11719,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.inverse_stft.yaml,2
11720,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `dense_features` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
11721,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
11722,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `int64`.,tf.compat.v1.train.sdca_optimizer.yaml,2
11723,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list with the same length as `sparse_example_indices` of `Tensor` objects with type `float32`.,tf.compat.v1.train.sdca_optimizer.yaml,2
11724,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
11725,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.nn.dilation2d.yaml,2
11726,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
11727,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
11728,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.extract_image_patches.yaml,2
11729,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","If only one integer is specified, the same window length will be used for both dimensions.",tf.keras.layers.AveragePooling2D.yaml,2
11730,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3` which defaults to 1.,tf.nn.conv1d_transpose.yaml,2
11731,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",An int or list of `ints` that has length `1` or `3`.,tf.nn.conv1d_transpose.yaml,2
11732,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
11733,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 5`.,tf.extract_volume_patches.yaml,2
11734,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A callable that takes a window length and a `dtype` keyword argument and returns a `[window_length]` `Tensor` of samples in the provided datatype.,tf.signal.stft.yaml,2
11735,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
11736,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.compat.v1.nn.max_pool.yaml,2
11737,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","a tuple of a single integer, specifying the length of the 1D convolution window.",tf.keras.backend.local_conv1d.yaml,2
11738,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","a tuple of a single integer, specifying the stride length of the convolution.",tf.keras.backend.local_conv1d.yaml,2
11739,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An integer or a 1-D Tensor, depending on whether the time dimension is fixed-length or not.",tf.keras.backend.rnn.yaml,2
11740,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `2` or `4`.",tf.nn.fractional_max_pool.yaml,2
11741,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
11742,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.dilation2d.yaml,2
11743,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
11744,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})",A list of `ints` that has length `>= 4`.,tf.compat.v1.nn.erosion2d.yaml,2
11745,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
11746,64,0.010092145677928916,92,"frozenset({'SOME_DTYPE', 'length'})","An int or list of `ints` that has length `1`, `N` or `N+2`.",tf.nn.max_pool.yaml,2
