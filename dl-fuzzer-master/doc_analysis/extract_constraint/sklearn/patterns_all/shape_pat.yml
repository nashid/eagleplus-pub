
parse_sent: False
direct_map: False  # need to map group
check_dt: False
break: False   # keep going when pattern matched, don't break
append: True
findall: True
target: shape

# use this list to split the string when adding into shape_var
split_word:
    - ' '
    - ','
    - '['
    - ']'
    - '('
    - ')'
    - '+'
    - '-'
    - '*'
    - '...'
    - '/'
    - '`'
    - 'len:'
    - 'ndim:'
    - 'max_value:'


pat:
    # with/of/has/have the same (dtype and) shape with/as
    '(the\s+)?same\s+(((dtype|type)\s+and\s+shape)|(shape\s+and\s+(type|dtype))|(shape|length|size)|dimensions*)\s+(with|as)\s*[`''"]*([\w]+)[`''"]*':
        group: 9
        dependent: True
    

    
    # of shape `[2,num_dim]`
    # keep the value if it is a variable
    # keep the value if it is a non-variable  (correlation)
    # "shape\s+" -> filter out shape[0] ...
    '(of|with|and|having)\s+(shape|size)\s*:*\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*\/{}]+)[\]\)][`''"]*':
        group: 3
        replace: 
            'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
            'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
            'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
            'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
            'len\((.*)\)': 'len:\1'
            'rank\((.*?)\)': 'ndim:\1'
            'max\s*value\s*in\s*(\w+)': 'max_value:\1'
        keep_var: True
        keep_nonvar: True

    # shape `[..]` 
    '(shape|shaped)\s*:*\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*\/{}]+)[\]\)][`''"]*':
        group: 2
        prereq:
            - '(of|with|and|having)\s+(shape|size)\s*:*\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*\/{}]+)[\]\)][`''"]*'
        replace: 
            'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
            'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
            'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
            'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
            'len\((.*)\)': 'len:\1'
            'rank\((.*?)\)': 'ndim:\1'
            'max\s*value\s*in\s*(\w+)': 'max_value:\1'
        keep_var: True
        keep_nonvar: True

    # size/sized must have [  not (
    '(size|sized)\s*:*\s*[`''"]*\[([\w\s\.,\(\)\+\-\*\/{}]+)\][`''"]*':
        group: 2
        prereq:
            - '(of|with|and|having)\s+(shape|size)\s*:*\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*/{}]+)[\]\)][`''"]*'
        replace: 
            'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
            'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
            'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
            'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
            'len\((.*)\)': 'len:\1'
            'rank\((.*?)\)': 'ndim:\1'
            'max\s*value\s*in\s*(\w+)': 'max_value:\1'
        keep_var: True
        keep_nonvar: True


    'shape\s+(is|should\s+be)\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*/{}]+)[\]\)][`''"]*':
        group: 2
        replace: 
            'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
            'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
            'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
            'e_0,\s+e_1,\s+...,\s+e_m': '...'
            'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
            'len\((.*)\)': 'len:\1'
            'rank\((.*?)\)': 'ndim:\1'
            'max\s*value\s*in\s*(\w+)': 'max_value:\1'
        keep_var: True
        keep_nonvar: True

    'whose\s+(shape|dimension|dimensions)\s+(must\s*)?(matches|match)\s*(the\s+shape\s+of\s*)?[`''"]*([\w]+)[`''"]*':
        group: 5
        dependent: True

    '(of|with)\s+size\s*[`''"]*([\w]+)[`''"]*':
        group: 2
        dependent: True


#    # <this arg> has shape ..
#     '[`''"]*([_\w]+)[`''"]*\s*has\s+shape\s+[`''"]*[\[\(]([\w\d\s\.,\(\)\+\-\*/{}]+)[\]\)][`''"]*':
#         replace: 
#             'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
#             'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
#             'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
#             'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
#             'len\((.*)\)': 'len:\1'
#             'rank\((.*?)\)': 'ndim:\1'
#             'max\s*value\s*in\s*(\w+)': 'max_value:\1'
#             # '\s': ''
#         group: 2
#         check_arg: 1
#         keep_var: True
#         keep_nonvar: True

    'its\s+shape\s+is\s*[`''"]*[\[\(]([\w\s\.,\(\)\+\-\*/{}]+)[\]\)][`''"]*':
        group: 1
        replace: 
            'd_*0,\s*d_*1,\s*\.\.\.,\s*d_*n': '...'
            'd_*1,*\s*\.\.\.,*\s*d_*n': '...'
            'd_0,\s*d_1,\s*...,\s*d_{r-1}': '...'
            'dim1,\s+dim2,\s+...\s+dim\(n-1\)': '...'
            'len\((.*)\)': 'len:\1'
            'rank\((.*?)\)': 'ndim:\1'
            'max\s*value\s*in\s*(\w+)': 'max_value:\1'
        keep_var: True
        keep_nonvar: True

    # tensor of \d element
    'tensor\s+of\s+(\d)\s+element':
        group: 1
        keep_var: True
        keep_nonvar: True
    
    # tensor of length \d
    '`*tensor`*\s+of\s+length\s+(\d+|`[\w]+`)':
        group: 1
        replace:
            '`': ''
        keep_var: True
        keep_nonvar: True

    
    '\b\w\b-d\s+(`*tensor`*\s+)?of\s+(length|size)\s+(\d)':
        group: 3

    '^(\ba\b|an)?\s*[`''"][\[\(]([\w\s\.,\(\)\+\-\*/{}]+)[\]\)][`''"]':
        group: 2


 
    '^\((\w,.*?)\)':
        # replace: 
        #     '\s_': '_'
        #     'times': ','
        group: 1
        keep_var: True
        keep_nonvar: True

    # (w,), (h, w) or (d, h, w).
    ':\s+\((.*?)\),\s+\(.*?\)\s*or\s*\(.*?\)':
        group: 1
        keep_var: True
        keep_nonvar: True

    ':\s+\(.*?\),\s+\((.*?)\)\s*or\s*\(.*?\)':
        group: 1
        keep_var: True
        keep_nonvar: True

    ':\s+\(.*?\),\s+\(.*?\)\s*or\s*\((.*?)\)':
        group: 1
        keep_var: True
        keep_nonvar: True

    # : (h, w) or (d, h, w).
    ':\s+\(([\w\s,]+)\)\s*or\s*\(.*?\)':
        group: 1
        keep_var: True
        keep_nonvar: True

    ':\s+\([\w\s,]+\)\s*or\s*\((.*?)\)':
        group: 1
        keep_var: True
        keep_nonvar: True




    
    '^shape\s+\((.*?)\)':
        group: 1
        keep_var: True
        keep_nonvar: True
        

    'of\s+the\s+form\s+\[(.*?)\]':
        replace:
            'spatial_dim1,\s*spatial_dim2,\s*\.\.\.': '...'
        group: 1
        keep_var: True
        keep_nonvar: True

    'be\s+of\s+length\s+`(.*?)`':
        group: 1
        keep_var: True
        keep_nonvar: True

    'of\s+shape\s+\((.*?)\)':
        replace: 
            '\s_': '_'
            'times': ','
        group: 1
        keep_var: True
        keep_nonvar: True

    'of\s+shape\s+\(.*?\)\s*\(.*?\)\s+or\s+\((.*?)\)\s*\(.*?\)':
        replace: 
            '\s_': '_'
            'times': ','
        group: 1
        keep_var: True
        keep_nonvar: True
        

    'of\s+size\s+`*\((.*?)\)`*':
        replace:
            '\*': '...'
        group: 1
        keep_var: True
        keep_nonvar: True
        ndim_prefix: '>='


    'same\s+(shape|size)\s+as\s+([\w]+)':
        group: 2
        dependent: True

    'of\s+size\s+matching\s+(\w+)':
        group: 1
        dependent: True

    'has\s+to\s+match\s+(\w+)\s+size':
        group: 1
        dependent: True

    
    
    'input\s+tensor\s+of\s+shape\s+(([\w]+\s+times\s+)+[\w]+)':
        replace: 
            'times': ','
        group: 1
        keep_var: True
        keep_nonvar: True

    # (N  times 2  times 3 )
    '(\(|or )(([\w]+\s+times\s+)+[\w]+)':
        replace: 
            'times': ','
        group: 2
        keep_var: True
        keep_nonvar: True

    'tensor\s*\(([\w,\s]+)\)':
        replace: 
            '\s_': '_'
            'times': ','
        group: 1
        keep_var: True
        keep_nonvar: True

    # start of the sentence or not following any letters, counterexample: min(m,n)
    # (n, c)  where C = number of classes or (n, c, h, w)  in case of 2D Loss,
    '(^|[^a-z])\((([a-z],\s+)+[a-z])\)':
        group: 2
        keep_var: True
        keep_nonvar: True
    
    # or (N, C, d_1, d_2, ..., d_K) where K >= 1 in the case of K-dimensional loss.
    '\((([a-z],\s+)+d_1,\s+d_2,\s+\.\.\.,\s+d_k)\)':
        replace:
            'd_1,\s+d_2,\s+\.\.\.,\s+d_k': '...'
        group: 1
        keep_var: True
        keep_nonvar: True
       

    '\(([a-z])\)':
        group: 1
        keep_var: True
        keep_nonvar: True





        




        


    