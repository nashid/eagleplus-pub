constraints:
  device:
    default: None
    descp: 'the desired device of returned tensor. Default: if `None`, uses the current
      device for the default tensor type (see `torch.set_default_tensor_type()`).
      `device` will be the CPU for CPU tensor types and the current CUDA device for
      CUDA tensor types.'
    doc_dtype:
    - torch.device
  dtype:
    default: None
    descp: 'the desired data type of returned tensor. Default: if `None`, uses a global
      default (see `torch.set_default_tensor_type()`).'
    doc_dtype:
    - torch.dtype
    dtype:
    - torch.dtype
  end:
    descp: the ending value for the set of points
    doc_dtype:
    - float
    dtype:
    - torch.float32
  layout:
    default: torch.strided
    descp: 'the desired layout of returned Tensor. Default: `torch.strided`.'
    doc_dtype:
    - torch.layout
  out:
    default: None
    descp: the output tensor.
    doc_dtype:
    - Tensor
    tensor_t:
    - torch.tensor
  requires_grad:
    default: 'False'
    descp: 'If autograd should record operations on the returned tensor. Default:
      `False`.'
    doc_dtype:
    - bool
    dtype:
    - torch.bool
    ndim:
    - '0'
  start:
    descp: the starting value for the set of points
    doc_dtype:
    - float
    dtype:
    - torch.float32
  steps:
    descp: size of the constructed tensor
    doc_dtype:
    - int
    dtype:
    - int
    ndim:
    - '1'
    range:
    - '[0,inf)'
inputs:
  keyword_only:
  - out
  - dtype
  - layout
  - device
  - requires_grad
  optional:
  - out
  - dtype
  - layout
  - device
  - requires_grad
  required:
  - start
  - end
  - steps
link: https://pytorch.org/docs/1.7.0/generated/torch.linspace.html#torch.linspace#torch.linspace
package: torch
ret_type: Tensor
target: linspace
title: torch.linspace
version: 1.9.0
