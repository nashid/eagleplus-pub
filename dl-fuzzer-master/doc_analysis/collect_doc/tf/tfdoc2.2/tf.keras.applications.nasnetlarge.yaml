aliases:
- tf.keras.applications.nasnet.NASNetLarge
- tf.compat.v1.keras.applications.NASNetLarge
- tf.compat.v1.keras.applications.nasnet.NASNetLarge
constraints:
  classes:
    default: '1000'
    descp: Optional number of classes to classify images into, only to be specified
      if include_top is True, and if no weights argument is specified.
  include_top:
    default: 'True'
    descp: Whether to include the fully-connected layer at the top of the network.
  input_shape:
    default: None
    descp: Optional shape tuple, only to be specified if include_top is False (otherwise
      the input shape has to be (331, 331, 3) for NASNetLarge. It should have exactly
      3 inputs channels, and width and height should be no smaller than 32. E.g. (224,
      224, 3) would be one valid value.
  input_tensor:
    default: None
    descp: Optional Keras tensor (i.e. output of layers.Input()) to use as image input
      for the model.
  pooling:
    default: None
    descp: Optional pooling mode for feature extraction when include_top is False.
      None means that the output of the model will be the 4D tensor output of the
      last convolutional layer. avg means that global average pooling will be applied
      to the output of the last convolutional layer, and thus the output of the model
      will be a 2D tensor. max means that global max pooling will be applied.
  weights:
    default: imagenet
    descp: None (random initialization) or imagenet (ImageNet weights)
exceptions:
- ValueError: in case of invalid argument for weights, or invalid input shape.
- RuntimeError: If attempting to run this model with a backend that does not support
    separable convolutions.
inputs:
  optional:
  - input_shape
  - include_top
  - weights
  - input_tensor
  - pooling
  - classes
  required: []
link: https://www.tensorflow.org/versions/r2.2/api_docs/python/tf/keras/applications/NASNetLarge
outputs:
- A Keras model instance.
package: tensorflow
target: NASNetLarge
title: tf.keras.applications.NASNetLarge
version: 2.2.0
