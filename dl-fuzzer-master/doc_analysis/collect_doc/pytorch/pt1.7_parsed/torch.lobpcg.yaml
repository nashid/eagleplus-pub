constraints:
  A:
    descp: 'the input tensor of size (*, m, m) '
    doc_dtype:
    - Tensor
    sig_dtype: torch.Tensor
  B:
    default: None
    descp: the input tensor of size (*, m, m) . When not specified, B is interpereted
      as identity matrix.
    doc_dtype:
    - Tensor
    sig_dtype: Optional[torch.Tensor]
  X:
    default: None
    descp: the input tensor of size (*, m, n)  where k <= n <= m. When specified,
      it is used as initial approximation of eigenvectors. X must be a dense tensor.
    doc_dtype:
    - tensor
    sig_dtype: Optional[torch.Tensor]
  iK:
    default: None
    descp: the input tensor of size (*, m, m) . When specified, it will be used as
      preconditioner.
    doc_dtype:
    - tensor
    sig_dtype: Optional[torch.Tensor]
  k:
    default: None
    descp: the number of requested eigenpairs. Default is the number of X  columns
      (when specified) or 1.
    doc_dtype:
    - integer
    sig_dtype: Optional[int]
  largest:
    default: None
    descp: when True, solve the eigenproblem for the largest eigenvalues. Otherwise,
      solve the eigenproblem for smallest eigenvalues. Default is True.
    doc_dtype:
    - bool
    sig_dtype: Optional[bool]
  method:
    default: None
    descp: select LOBPCG method. See the description of the function above. Default
      is "ortho".
    doc_dtype:
    - str
    sig_dtype: Optional[str]
  n:
    default: None
    descp: if X  is not specified then n specifies the size of the generated random
      approximation of eigenvectors. Default value for n is k. If X  is specified,
      the value of n (when specified) must be the number of X  columns.
    doc_dtype:
    - integer
    sig_dtype: Optional[int]
  niter:
    default: None
    descp: maximum number of iterations. When reached, the iteration process is hard-stopped
      and the current approximation of eigenpairs is returned. For infinite iteration
      but until convergence criteria is met, use -1.
    doc_dtype:
    - int
    sig_dtype: Optional[int]
  ortho_bparams:
    default: None
    descp: various parameters to LOBPCG algorithm when using method="ortho".
    doc_dtype: &id001
    - ortho_iparams
    sig_dtype: Optional[Dict[str,bool]]
  ortho_fparams:
    default: None
    descp: various parameters to LOBPCG algorithm when using method="ortho".
    doc_dtype: *id001
    sig_dtype: Optional[Dict[str,float]]
  ortho_iparams:
    default: None
    descp: ''
    sig_dtype: Optional[Dict[str,int]]
  tol:
    default: None
    descp: residual tolerance for stopping criterion. Default is feps ** 0.5 where
      feps is smallest non-zero floating-point number of the given input tensor A
      data type.
    doc_dtype:
    - float
    sig_dtype: Optional[float]
  tracker:
    default: None
    descp: ''
    doc_dtype:
    - callable
    sig_dtype: None
inputs:
  optional:
  - k
  - B
  - X
  - n
  - iK
  - niter
  - tol
  - largest
  - method
  - tracker
  - ortho_iparams
  - ortho_fparams
  - ortho_bparams
  required:
  - A
link: https://pytorch.org/docs/1.7.0/generated/torch.lobpcg.html#torch.lobpcg#torch.lobpcg
package: torch
ret_type: Tuple[torch.Tensor, torch.Tensor]
target: lobpcg
title: torch.lobpcg
version: 1.7.0
