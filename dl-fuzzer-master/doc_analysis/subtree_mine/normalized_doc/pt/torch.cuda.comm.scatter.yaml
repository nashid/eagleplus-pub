constraints:
  chunk_sizes:
    default: None
    descp: sizes of chunks to be placed on each device. It should match `devices`
      in length and sum to `tensor.size(dim)`. If not specified, the tensor will be
      divided into equal chunks.
    doc_dtype: Iterable[int], optional
    normalized_default: DEFAULT None
    normalized_descp:
    - sizes of chunks to be placed on each device
    - It should match PARAM in length and sum to D_STRUCTURE size BSTR
    - If not specified, the D_STRUCTURE will be divided into equal chunks
    normalized_docdtype: D_STRUCTURE BSTR, optional
  devices:
    descp: iterable of ints, specifying among which devices the tensor should be scattered.
    doc_dtype: Iterable[int]
    normalized_descp:
    - D_STRUCTURE of D_TYPE, specifying among which devices the D_STRUCTURE should
      be scattered
    normalized_docdtype: D_STRUCTURE BSTR
  dim:
    default: '0'
    descp: A dimension along which to chunk the tensor.
    doc_dtype: int, optional
    normalized_default: DEFAULT CONSTANT_NUM
    normalized_descp:
    - A dimension along which to chunk the D_STRUCTURE
    normalized_docdtype: D_TYPE, optional
  streams:
    default: None
    descp: ''
    normalized_default: DEFAULT None
    normalized_descp: []
  tensor:
    descp: tensor to scatter.
    doc_dtype: Tensor
    normalized_descp:
    - D_STRUCTURE to scatter
    normalized_docdtype: ONE_WORD D_STRUCTURE
inputs:
  optional:
  - chunk_sizes
  - dim
  - streams
  required:
  - tensor
  - devices
link: https://pytorch.org/docs/stable/cuda.html#torch.cuda.comm.scatter
package: torch
target: scatter
title: torch.cuda.comm.scatter
version: 1.5.0
