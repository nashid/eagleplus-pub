constraints:
  '**kwargs':
    descp: ''
    normalized_descp: []
  activation:
    default: None
    descp: 'Activation function to use. See help on Activation layer. If you don''t
      specify anything, no activation is applied (ie. "linear" activation: a(x) =
      x).'
    doc_dtype: str
    normalized_default: DEFAULT None
    normalized_descp:
    - Activation function to use
    - See help on Activation layer
    - If you don t specify anything no activation is applied ie
    - QSTR activation a BSTR x
    normalized_docdtype: ONE_WORD D_TYPE
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    doc_dtype: str or Initializer
    normalized_default: DEFAULT DF_STR
    normalized_descp:
    - Initializer for the bias vector
    normalized_docdtype: D_TYPE or Initializer
  dtype:
    default: float32
    descp: Data type of output embeddings.
    doc_dtype: str or np.dtype, default 'float32'
    normalized_default: DEFAULT D_TYPE
    normalized_descp:
    - Data type of output embeddings
    normalized_docdtype: D_TYPE default QSTR
  flatten:
    default: 'True'
    descp: Whether the input tensor should be flattened. If true, all but the first
      axis of input data are collapsed together. If false, all but the last axis of
      input data are kept the same, and the transformation applies on the last axis.
    doc_dtype: bool, default True
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - Whether the input D_STRUCTURE should be flattened
    - If CONSTANT_BOOL all but the first axis of input data are collapsed together
    - If CONSTANT_BOOL all but the last axis of input data are kept the same and the
      transformation applies on the last axis
    normalized_docdtype: D_TYPE default CONSTANT_BOOL
  in_units:
    default: '0'
    descp: Size of the input data. If not specified, initialization will be deferred
      to the first time forward is called and in_units will be inferred from the shape
      of input data.
    doc_dtype: int, optional
    normalized_default: DEFAULT CONSTANT_NUM
    normalized_descp:
    - Size of the input data
    - If not specified initialization will be deferred to the first time forward is
      called and in_units will be inferred from the shape of input data
    normalized_docdtype: D_TYPE optional
  params:
    default: None
    descp: See document of Block.
    doc_dtype: ParameterDict or None
    normalized_default: DEFAULT None
    normalized_descp:
    - See document of Block
    normalized_docdtype: ParameterDict or None
  prefix:
    default: None
    descp: See document of Block.
    doc_dtype: str or None
    normalized_default: DEFAULT None
    normalized_descp:
    - See document of Block
    normalized_docdtype: D_TYPE or None
  units:
    descp: Dimensionality of the output space.
    doc_dtype: int
    normalized_descp:
    - Dimensionality of the output space
    normalized_docdtype: ONE_WORD D_TYPE
  use_bias:
    default: 'True'
    descp: Whether the layer uses a bias vector.
    doc_dtype: bool, default True
    normalized_default: DEFAULT CONSTANT_BOOL
    normalized_descp:
    - Whether the layer uses a bias vector
    normalized_docdtype: D_TYPE default CONSTANT_BOOL
  weight_initializer:
    default: None
    descp: Initializer for the kernel weights matrix.
    doc_dtype: str or Initializer
    normalized_default: DEFAULT None
    normalized_descp:
    - Initializer for the kernel weights matrix
    normalized_docdtype: D_TYPE or Initializer
inputs:
  optional:
  - activation
  - use_bias
  - flatten
  - dtype
  - weight_initializer
  - bias_initializer
  - in_units
  - prefix
  - params
  required:
  - units
  - '**kwargs'
link: https://mxnet.apache.org/versions/1.6.0/api/python/docs/api/gluon/nn/index.html#mxnet.gluon.nn.Dense
package: mxnet
target: Dense
title: mxnet.gluon.nn.Dense
version: 1.6.0
